/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.CuentasContablesLineaProductoConstantesFunciones;
import com.bydan.erp.inventario.util.CuentasContablesLineaProductoParameterReturnGeneral;
//import com.bydan.erp.inventario.util.CuentasContablesLineaProductoParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.CuentasContablesLineaProductoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class CuentasContablesLineaProductoBeanSwingJInternalFrame extends CuentasContablesLineaProductoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(CuentasContablesLineaProductoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<CuentasContablesLineaProducto> cuentascontableslineaproductoValidator = new ClassValidator<CuentasContablesLineaProducto>(CuentasContablesLineaProducto.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public CuentasContablesLineaProducto cuentascontableslineaproducto;	
	public CuentasContablesLineaProducto cuentascontableslineaproductoAux;
	public CuentasContablesLineaProducto cuentascontableslineaproductoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public CuentasContablesLineaProducto cuentascontableslineaproductoTotales;
	public Long idCuentasContablesLineaProductoActual;
	public Long iIdNuevoCuentasContablesLineaProducto=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboLinea="";

	public List<Linea> lineasForeignKey;

	public List<Linea> getlineasForeignKey() {
		return lineasForeignKey;
	}

	public void setlineasForeignKey(List<Linea> lineasForeignKey) {
		this.lineasForeignKey = lineasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineaForeignKey;

	public Linea getlineaForeignKey() {
		return lineaForeignKey;
	}

	public void setlineaForeignKey(Linea lineaForeignKey) {
		this.lineaForeignKey = lineaForeignKey;
	}

	public String sFinalQueryComboLineaGrupo="";

	public List<Linea> lineagruposForeignKey;

	public List<Linea> getlineagruposForeignKey() {
		return lineagruposForeignKey;
	}

	public void setlineagruposForeignKey(List<Linea> lineagruposForeignKey) {
		this.lineagruposForeignKey = lineagruposForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineagrupoForeignKey;

	public Linea getlineagrupoForeignKey() {
		return lineagrupoForeignKey;
	}

	public void setlineagrupoForeignKey(Linea lineagrupoForeignKey) {
		this.lineagrupoForeignKey = lineagrupoForeignKey;
	}

	public String sFinalQueryComboLineaCategoria="";

	public List<Linea> lineacategoriasForeignKey;

	public List<Linea> getlineacategoriasForeignKey() {
		return lineacategoriasForeignKey;
	}

	public void setlineacategoriasForeignKey(List<Linea> lineacategoriasForeignKey) {
		this.lineacategoriasForeignKey = lineacategoriasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Linea lineacategoriaForeignKey;

	public Linea getlineacategoriaForeignKey() {
		return lineacategoriaForeignKey;
	}

	public void setlineacategoriaForeignKey(Linea lineacategoriaForeignKey) {
		this.lineacategoriaForeignKey = lineacategoriaForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventario="";

	public List<CuentaContable> cuentacontableinventariosForeignKey;

	public List<CuentaContable> getcuentacontableinventariosForeignKey() {
		return cuentacontableinventariosForeignKey;
	}

	public void setcuentacontableinventariosForeignKey(List<CuentaContable> cuentacontableinventariosForeignKey) {
		this.cuentacontableinventariosForeignKey = cuentacontableinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventarioForeignKey;

	public CuentaContable getcuentacontableinventarioForeignKey() {
		return cuentacontableinventarioForeignKey;
	}

	public void setcuentacontableinventarioForeignKey(CuentaContable cuentacontableinventarioForeignKey) {
		this.cuentacontableinventarioForeignKey = cuentacontableinventarioForeignKey;
	}

	public String sFinalQueryComboCuentaContableCostoVenta="";

	public List<CuentaContable> cuentacontablecostoventasForeignKey;

	public List<CuentaContable> getcuentacontablecostoventasForeignKey() {
		return cuentacontablecostoventasForeignKey;
	}

	public void setcuentacontablecostoventasForeignKey(List<CuentaContable> cuentacontablecostoventasForeignKey) {
		this.cuentacontablecostoventasForeignKey = cuentacontablecostoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoventaForeignKey;

	public CuentaContable getcuentacontablecostoventaForeignKey() {
		return cuentacontablecostoventaForeignKey;
	}

	public void setcuentacontablecostoventaForeignKey(CuentaContable cuentacontablecostoventaForeignKey) {
		this.cuentacontablecostoventaForeignKey = cuentacontablecostoventaForeignKey;
	}

	public String sFinalQueryComboCuentaContableVenta="";

	public List<CuentaContable> cuentacontableventasForeignKey;

	public List<CuentaContable> getcuentacontableventasForeignKey() {
		return cuentacontableventasForeignKey;
	}

	public void setcuentacontableventasForeignKey(List<CuentaContable> cuentacontableventasForeignKey) {
		this.cuentacontableventasForeignKey = cuentacontableventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableventaForeignKey;

	public CuentaContable getcuentacontableventaForeignKey() {
		return cuentacontableventaForeignKey;
	}

	public void setcuentacontableventaForeignKey(CuentaContable cuentacontableventaForeignKey) {
		this.cuentacontableventaForeignKey = cuentacontableventaForeignKey;
	}

	public String sFinalQueryComboCuentaContableDescuento="";

	public List<CuentaContable> cuentacontabledescuentosForeignKey;

	public List<CuentaContable> getcuentacontabledescuentosForeignKey() {
		return cuentacontabledescuentosForeignKey;
	}

	public void setcuentacontabledescuentosForeignKey(List<CuentaContable> cuentacontabledescuentosForeignKey) {
		this.cuentacontabledescuentosForeignKey = cuentacontabledescuentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledescuentoForeignKey;

	public CuentaContable getcuentacontabledescuentoForeignKey() {
		return cuentacontabledescuentoForeignKey;
	}

	public void setcuentacontabledescuentoForeignKey(CuentaContable cuentacontabledescuentoForeignKey) {
		this.cuentacontabledescuentoForeignKey = cuentacontabledescuentoForeignKey;
	}

	public String sFinalQueryComboCuentaContableProduccion="";

	public List<CuentaContable> cuentacontableproduccionsForeignKey;

	public List<CuentaContable> getcuentacontableproduccionsForeignKey() {
		return cuentacontableproduccionsForeignKey;
	}

	public void setcuentacontableproduccionsForeignKey(List<CuentaContable> cuentacontableproduccionsForeignKey) {
		this.cuentacontableproduccionsForeignKey = cuentacontableproduccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableproduccionForeignKey;

	public CuentaContable getcuentacontableproduccionForeignKey() {
		return cuentacontableproduccionForeignKey;
	}

	public void setcuentacontableproduccionForeignKey(CuentaContable cuentacontableproduccionForeignKey) {
		this.cuentacontableproduccionForeignKey = cuentacontableproduccionForeignKey;
	}

	public String sFinalQueryComboCuentaContableDevolucion="";

	public List<CuentaContable> cuentacontabledevolucionsForeignKey;

	public List<CuentaContable> getcuentacontabledevolucionsForeignKey() {
		return cuentacontabledevolucionsForeignKey;
	}

	public void setcuentacontabledevolucionsForeignKey(List<CuentaContable> cuentacontabledevolucionsForeignKey) {
		this.cuentacontabledevolucionsForeignKey = cuentacontabledevolucionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledevolucionForeignKey;

	public CuentaContable getcuentacontabledevolucionForeignKey() {
		return cuentacontabledevolucionForeignKey;
	}

	public void setcuentacontabledevolucionForeignKey(CuentaContable cuentacontabledevolucionForeignKey) {
		this.cuentacontabledevolucionForeignKey = cuentacontabledevolucionForeignKey;
	}

	public String sFinalQueryComboCuentaContableIvaDebito="";

	public List<CuentaContable> cuentacontableivadebitosForeignKey;

	public List<CuentaContable> getcuentacontableivadebitosForeignKey() {
		return cuentacontableivadebitosForeignKey;
	}

	public void setcuentacontableivadebitosForeignKey(List<CuentaContable> cuentacontableivadebitosForeignKey) {
		this.cuentacontableivadebitosForeignKey = cuentacontableivadebitosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableivadebitoForeignKey;

	public CuentaContable getcuentacontableivadebitoForeignKey() {
		return cuentacontableivadebitoForeignKey;
	}

	public void setcuentacontableivadebitoForeignKey(CuentaContable cuentacontableivadebitoForeignKey) {
		this.cuentacontableivadebitoForeignKey = cuentacontableivadebitoForeignKey;
	}

	public String sFinalQueryComboCuentaContableIvaCredito="";

	public List<CuentaContable> cuentacontableivacreditosForeignKey;

	public List<CuentaContable> getcuentacontableivacreditosForeignKey() {
		return cuentacontableivacreditosForeignKey;
	}

	public void setcuentacontableivacreditosForeignKey(List<CuentaContable> cuentacontableivacreditosForeignKey) {
		this.cuentacontableivacreditosForeignKey = cuentacontableivacreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableivacreditoForeignKey;

	public CuentaContable getcuentacontableivacreditoForeignKey() {
		return cuentacontableivacreditoForeignKey;
	}

	public void setcuentacontableivacreditoForeignKey(CuentaContable cuentacontableivacreditoForeignKey) {
		this.cuentacontableivacreditoForeignKey = cuentacontableivacreditoForeignKey;
	}

	public String sFinalQueryComboCuentaContableBonifica="";

	public List<CuentaContable> cuentacontablebonificasForeignKey;

	public List<CuentaContable> getcuentacontablebonificasForeignKey() {
		return cuentacontablebonificasForeignKey;
	}

	public void setcuentacontablebonificasForeignKey(List<CuentaContable> cuentacontablebonificasForeignKey) {
		this.cuentacontablebonificasForeignKey = cuentacontablebonificasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablebonificaForeignKey;

	public CuentaContable getcuentacontablebonificaForeignKey() {
		return cuentacontablebonificaForeignKey;
	}

	public void setcuentacontablebonificaForeignKey(CuentaContable cuentacontablebonificaForeignKey) {
		this.cuentacontablebonificaForeignKey = cuentacontablebonificaForeignKey;
	}

	public String sFinalQueryComboCuentaContableCostoBonifica="";

	public List<CuentaContable> cuentacontablecostobonificasForeignKey;

	public List<CuentaContable> getcuentacontablecostobonificasForeignKey() {
		return cuentacontablecostobonificasForeignKey;
	}

	public void setcuentacontablecostobonificasForeignKey(List<CuentaContable> cuentacontablecostobonificasForeignKey) {
		this.cuentacontablecostobonificasForeignKey = cuentacontablecostobonificasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostobonificaForeignKey;

	public CuentaContable getcuentacontablecostobonificaForeignKey() {
		return cuentacontablecostobonificaForeignKey;
	}

	public void setcuentacontablecostobonificaForeignKey(CuentaContable cuentacontablecostobonificaForeignKey) {
		this.cuentacontablecostobonificaForeignKey = cuentacontablecostobonificaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idCuentaContableInventarioActual=0L;

	public Long getidCuentaContableInventarioActual() {
		return idCuentaContableInventarioActual;
	}

	public void setidCuentaContableInventarioActual(Long idCuentaContableInventarioActual) {
		this.idCuentaContableInventarioActual= idCuentaContableInventarioActual;
	}
	public Long idCuentaContableCostoVentaActual=0L;

	public Long getidCuentaContableCostoVentaActual() {
		return idCuentaContableCostoVentaActual;
	}

	public void setidCuentaContableCostoVentaActual(Long idCuentaContableCostoVentaActual) {
		this.idCuentaContableCostoVentaActual= idCuentaContableCostoVentaActual;
	}
	public Long idCuentaContableVentaActual=0L;

	public Long getidCuentaContableVentaActual() {
		return idCuentaContableVentaActual;
	}

	public void setidCuentaContableVentaActual(Long idCuentaContableVentaActual) {
		this.idCuentaContableVentaActual= idCuentaContableVentaActual;
	}
	public Long idCuentaContableDescuentoActual=0L;

	public Long getidCuentaContableDescuentoActual() {
		return idCuentaContableDescuentoActual;
	}

	public void setidCuentaContableDescuentoActual(Long idCuentaContableDescuentoActual) {
		this.idCuentaContableDescuentoActual= idCuentaContableDescuentoActual;
	}
	public Long idCuentaContableProduccionActual=0L;

	public Long getidCuentaContableProduccionActual() {
		return idCuentaContableProduccionActual;
	}

	public void setidCuentaContableProduccionActual(Long idCuentaContableProduccionActual) {
		this.idCuentaContableProduccionActual= idCuentaContableProduccionActual;
	}
	public Long idCuentaContableDevolucionActual=0L;

	public Long getidCuentaContableDevolucionActual() {
		return idCuentaContableDevolucionActual;
	}

	public void setidCuentaContableDevolucionActual(Long idCuentaContableDevolucionActual) {
		this.idCuentaContableDevolucionActual= idCuentaContableDevolucionActual;
	}
	public Long idCuentaContableIvaDebitoActual=0L;

	public Long getidCuentaContableIvaDebitoActual() {
		return idCuentaContableIvaDebitoActual;
	}

	public void setidCuentaContableIvaDebitoActual(Long idCuentaContableIvaDebitoActual) {
		this.idCuentaContableIvaDebitoActual= idCuentaContableIvaDebitoActual;
	}
	public Long idCuentaContableIvaCreditoActual=0L;

	public Long getidCuentaContableIvaCreditoActual() {
		return idCuentaContableIvaCreditoActual;
	}

	public void setidCuentaContableIvaCreditoActual(Long idCuentaContableIvaCreditoActual) {
		this.idCuentaContableIvaCreditoActual= idCuentaContableIvaCreditoActual;
	}
	public Long idCuentaContableBonificaActual=0L;

	public Long getidCuentaContableBonificaActual() {
		return idCuentaContableBonificaActual;
	}

	public void setidCuentaContableBonificaActual(Long idCuentaContableBonificaActual) {
		this.idCuentaContableBonificaActual= idCuentaContableBonificaActual;
	}
	public Long idCuentaContableCostoBonificaActual=0L;

	public Long getidCuentaContableCostoBonificaActual() {
		return idCuentaContableCostoBonificaActual;
	}

	public void setidCuentaContableCostoBonificaActual(Long idCuentaContableCostoBonificaActual) {
		this.idCuentaContableCostoBonificaActual= idCuentaContableCostoBonificaActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoCuentasContablesLineaProducto;
	public Boolean isPermisoNuevoCuentasContablesLineaProducto;
	public Boolean isPermisoActualizarCuentasContablesLineaProducto;
	public Boolean isPermisoActualizarOriginalCuentasContablesLineaProducto;
	public Boolean isPermisoEliminarCuentasContablesLineaProducto;
	public Boolean isPermisoGuardarCambiosCuentasContablesLineaProducto;
	public Boolean isPermisoConsultaCuentasContablesLineaProducto;
	public Boolean isPermisoBusquedaCuentasContablesLineaProducto;
	public Boolean isPermisoReporteCuentasContablesLineaProducto;
	public Boolean isPermisoPaginacionMedioCuentasContablesLineaProducto;
	public Boolean isPermisoPaginacionAltoCuentasContablesLineaProducto;
	public Boolean isPermisoPaginacionTodoCuentasContablesLineaProducto;
	public Boolean isPermisoCopiarCuentasContablesLineaProducto;
	public Boolean isPermisoVerFormCuentasContablesLineaProducto;
	public Boolean isPermisoDuplicarCuentasContablesLineaProducto;
	public Boolean isPermisoOrdenCuentasContablesLineaProducto;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoReturnGeneral;
	public CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoCuentasContablesLineaProducto=false;
	public Boolean esParaAccionDesdeFormularioCuentasContablesLineaProducto=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected CuentasContablesLineaProductoSessionBeanAdditional cuentascontableslineaproductoSessionBeanAdditional=null;
	
	public CuentasContablesLineaProductoSessionBeanAdditional getCuentasContablesLineaProductoSessionBeanAdditional() {
		return this.cuentascontableslineaproductoSessionBeanAdditional;
	}
	
	public void setCuentasContablesLineaProductoSessionBeanAdditional(CuentasContablesLineaProductoSessionBeanAdditional cuentascontableslineaproductoSessionBeanAdditional) {
		try {
			this.cuentascontableslineaproductoSessionBeanAdditional=cuentascontableslineaproductoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional cuentascontableslineaproductoBeanSwingJInternalFrameAdditional=null;
	//public class CuentasContablesLineaProductoBeanSwingJInternalFrame
	
	public CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional getCuentasContablesLineaProductoBeanSwingJInternalFrameAdditional() {
		return this.cuentascontableslineaproductoBeanSwingJInternalFrameAdditional;
	}
	
	public void setCuentasContablesLineaProductoBeanSwingJInternalFrameAdditional(CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional cuentascontableslineaproductoBeanSwingJInternalFrameAdditional) {
		try {
			this.cuentascontableslineaproductoBeanSwingJInternalFrameAdditional=cuentascontableslineaproductoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public CuentasContablesLineaProductoLogic cuentascontableslineaproductoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public CuentasContablesLineaProducto cuentascontableslineaproductoBean;
	public CuentasContablesLineaProductoConstantesFunciones cuentascontableslineaproductoConstantesFunciones;
	//public CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public BodegaLogic bodegaLogic;
	public CentroCostoLogic centrocostoLogic;
	public LineaLogic lineaLogic;
	public LineaLogic lineagrupoLogic;
	public LineaLogic lineacategoriaLogic;
	public CuentaContableLogic cuentacontableinventarioLogic;
	public CuentaContableLogic cuentacontablecostoventaLogic;
	public CuentaContableLogic cuentacontableventaLogic;
	public CuentaContableLogic cuentacontabledescuentoLogic;
	public CuentaContableLogic cuentacontableproduccionLogic;
	public CuentaContableLogic cuentacontabledevolucionLogic;
	public CuentaContableLogic cuentacontableivadebitoLogic;
	public CuentaContableLogic cuentacontableivacreditoLogic;
	public CuentaContableLogic cuentacontablebonificaLogic;
	public CuentaContableLogic cuentacontablecostobonificaLogic;
	
	//PARAMETROS
	
	
	//public List<CuentasContablesLineaProducto> cuentascontableslineaproductos;	
	//public List<CuentasContablesLineaProducto> cuentascontableslineaproductosEliminados;
	//public List<CuentasContablesLineaProducto> cuentascontableslineaproductosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaDuplicarCuentasContablesLineaProducto=true;
	public Boolean isVisibilidadCeldaCopiarCuentasContablesLineaProducto=true;
	public Boolean isVisibilidadCeldaVerFormCuentasContablesLineaProducto=true;
	public Boolean isVisibilidadCeldaOrdenCuentasContablesLineaProducto=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaCancelarCuentasContablesLineaProducto=false;
	public Boolean isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;	
	
	
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableBonifica=false;
	public Boolean isVisibilidadFK_IdCuentaContableCostoBonifica=false;
	public Boolean isVisibilidadFK_IdCuentaContableCostoVenta=false;
	public Boolean isVisibilidadFK_IdCuentaContableDescuento=false;
	public Boolean isVisibilidadFK_IdCuentaContableDevolucion=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventario=false;
	public Boolean isVisibilidadFK_IdCuentaContableIvaCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableIvaDebito=false;
	public Boolean isVisibilidadFK_IdCuentaContableProduccion=false;
	public Boolean isVisibilidadFK_IdCuentaContableVenta=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdLinea=false;
	public Boolean isVisibilidadFK_IdLineaCategoria=false;
	public Boolean isVisibilidadFK_IdLineaGrupo=false;
	
	public Long getiIdNuevoCuentasContablesLineaProducto() {
		return this.iIdNuevoCuentasContablesLineaProducto;
	}

	public void setiIdNuevoCuentasContablesLineaProducto(Long iIdNuevoCuentasContablesLineaProducto) {
		this.iIdNuevoCuentasContablesLineaProducto = iIdNuevoCuentasContablesLineaProducto;
	}
	
	public Long getidCuentasContablesLineaProductoActual() {
		return this.idCuentasContablesLineaProductoActual;
	}

	public void setidCuentasContablesLineaProductoActual(Long idCuentasContablesLineaProductoActual) {
		this.idCuentasContablesLineaProductoActual = idCuentasContablesLineaProductoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public CuentasContablesLineaProducto getcuentascontableslineaproducto() {
		return this.cuentascontableslineaproducto;
	}

	public void setcuentascontableslineaproducto(CuentasContablesLineaProducto cuentascontableslineaproducto) {
		this.cuentascontableslineaproducto = cuentascontableslineaproducto;
	}
	
	public CuentasContablesLineaProducto getcuentascontableslineaproductoAux() {
		return this.cuentascontableslineaproductoAux;
	}

	public void setcuentascontableslineaproductoAux(CuentasContablesLineaProducto cuentascontableslineaproductoAux) {
		this.cuentascontableslineaproductoAux = cuentascontableslineaproductoAux;
	}				
	
	public CuentasContablesLineaProducto getcuentascontableslineaproductoAnterior() {
		return this.cuentascontableslineaproductoAnterior;
	}

	public void setcuentascontableslineaproductoAnterior(CuentasContablesLineaProducto cuentascontableslineaproductoAnterior) {
		this.cuentascontableslineaproductoAnterior = cuentascontableslineaproductoAnterior;
	}	
	
	public CuentasContablesLineaProducto getcuentascontableslineaproductoTotales() {
		return this.cuentascontableslineaproductoTotales;
	}

	public void setcuentascontableslineaproductoTotales(CuentasContablesLineaProducto cuentascontableslineaproductoTotales) {
		this.cuentascontableslineaproductoTotales = cuentascontableslineaproductoTotales;
	}	
	
	public CuentasContablesLineaProducto getcuentascontableslineaproductoBean() {
		return this.cuentascontableslineaproductoBean;
	}

	public void setcuentascontableslineaproductoBean(CuentasContablesLineaProducto cuentascontableslineaproductoBean) {
		this.cuentascontableslineaproductoBean = cuentascontableslineaproductoBean;
	}	
	
	public CuentasContablesLineaProductoParameterReturnGeneral getcuentascontableslineaproductoReturnGeneral() {
		return this.cuentascontableslineaproductoReturnGeneral;
	}

	public void setcuentascontableslineaproductoReturnGeneral(CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoReturnGeneral) {
		this.cuentascontableslineaproductoReturnGeneral = cuentascontableslineaproductoReturnGeneral;
	}	
	
	
	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contable_bonificaFK_IdCuentaContableBonifica=-1L;

	public Long getid_cuenta_contable_bonificaFK_IdCuentaContableBonifica() {
		return this.id_cuenta_contable_bonificaFK_IdCuentaContableBonifica;
	}

	public void setid_cuenta_contable_bonificaFK_IdCuentaContableBonifica(Long id_cuenta_contable_bonificaFK_IdCuentaContableBonifica) {
		this.id_cuenta_contable_bonificaFK_IdCuentaContableBonifica = id_cuenta_contable_bonificaFK_IdCuentaContableBonifica;
	}

	public Long id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica=-1L;

	public Long getid_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica() {
		return this.id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica;
	}

	public void setid_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica(Long id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica) {
		this.id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica = id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica;
	}

	public Long id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta=-1L;

	public Long getid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta() {
		return this.id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta;
	}

	public void setid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta(Long id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta) {
		this.id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta = id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta;
	}

	public Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento=-1L;

	public Long getid_cuenta_contable_descuentoFK_IdCuentaContableDescuento() {
		return this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public void setid_cuenta_contable_descuentoFK_IdCuentaContableDescuento(Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento) {
		this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento = id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion=-1L;

	public Long getid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion() {
		return this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public void setid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion(Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion) {
		this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion = id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario=-1L;

	public Long getid_cuenta_contable_inventarioFK_IdCuentaContableInventario() {
		return this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public void setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario) {
		this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario = id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public Long id_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito=-1L;

	public Long getid_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito() {
		return this.id_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito;
	}

	public void setid_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito(Long id_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito) {
		this.id_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito = id_cuenta_contable_iva_creditoFK_IdCuentaContableIvaCredito;
	}

	public Long id_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito=-1L;

	public Long getid_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito() {
		return this.id_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito;
	}

	public void setid_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito(Long id_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito) {
		this.id_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito = id_cuenta_contable_iva_debitoFK_IdCuentaContableIvaDebito;
	}

	public Long id_cuenta_contable_produccionFK_IdCuentaContableProduccion=-1L;

	public Long getid_cuenta_contable_produccionFK_IdCuentaContableProduccion() {
		return this.id_cuenta_contable_produccionFK_IdCuentaContableProduccion;
	}

	public void setid_cuenta_contable_produccionFK_IdCuentaContableProduccion(Long id_cuenta_contable_produccionFK_IdCuentaContableProduccion) {
		this.id_cuenta_contable_produccionFK_IdCuentaContableProduccion = id_cuenta_contable_produccionFK_IdCuentaContableProduccion;
	}

	public Long id_cuenta_contable_ventaFK_IdCuentaContableVenta=-1L;

	public Long getid_cuenta_contable_ventaFK_IdCuentaContableVenta() {
		return this.id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public void setid_cuenta_contable_ventaFK_IdCuentaContableVenta(Long id_cuenta_contable_ventaFK_IdCuentaContableVenta) {
		this.id_cuenta_contable_ventaFK_IdCuentaContableVenta = id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_lineaFK_IdLinea=-1L;

	public Long getid_lineaFK_IdLinea() {
		return this.id_lineaFK_IdLinea;
	}

	public void setid_lineaFK_IdLinea(Long id_lineaFK_IdLinea) {
		this.id_lineaFK_IdLinea = id_lineaFK_IdLinea;
	}

	public Long id_linea_categoriaFK_IdLineaCategoria=-1L;

	public Long getid_linea_categoriaFK_IdLineaCategoria() {
		return this.id_linea_categoriaFK_IdLineaCategoria;
	}

	public void setid_linea_categoriaFK_IdLineaCategoria(Long id_linea_categoriaFK_IdLineaCategoria) {
		this.id_linea_categoriaFK_IdLineaCategoria = id_linea_categoriaFK_IdLineaCategoria;
	}

	public Long id_linea_grupoFK_IdLineaGrupo=-1L;

	public Long getid_linea_grupoFK_IdLineaGrupo() {
		return this.id_linea_grupoFK_IdLineaGrupo;
	}

	public void setid_linea_grupoFK_IdLineaGrupo(Long id_linea_grupoFK_IdLineaGrupo) {
		this.id_linea_grupoFK_IdLineaGrupo = id_linea_grupoFK_IdLineaGrupo;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public CuentasContablesLineaProductoLogic getCuentasContablesLineaProductoLogic()	{		
		return cuentascontableslineaproductoLogic;
	}

	public void setCuentasContablesLineaProductoLogic(CuentasContablesLineaProductoLogic cuentascontableslineaproductoLogic) {
		this.cuentascontableslineaproductoLogic = cuentascontableslineaproductoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoCuentasContablesLineaProducto() {
		return isEsNuevoCuentasContablesLineaProducto;
	}

	public void setIsEsNuevoCuentasContablesLineaProducto(Boolean isEsNuevoCuentasContablesLineaProducto) {
		this.isEsNuevoCuentasContablesLineaProducto = isEsNuevoCuentasContablesLineaProducto;
	}

	public Boolean getEsParaAccionDesdeFormularioCuentasContablesLineaProducto() {
		return esParaAccionDesdeFormularioCuentasContablesLineaProducto;
	}
	
	public void setEsParaAccionDesdeFormularioCuentasContablesLineaProducto(Boolean esParaAccionDesdeFormularioCuentasContablesLineaProducto) {
		this.esParaAccionDesdeFormularioCuentasContablesLineaProducto = esParaAccionDesdeFormularioCuentasContablesLineaProducto;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineasForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLinea()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineasForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLinea(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidLineaActual());
					this.lineasForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaGruposForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineagruposForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaGrupo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineagrupoLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineagruposForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaGrupo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidLineaGrupoActual());
					this.lineagruposForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLineaCategoriasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.lineacategoriasForeignKey=new ArrayList<Linea>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LineaLogic lineaLogic=new LineaLogic();

			//lineaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaCategoria()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//lineacategoriaLogic.getLineaDataAccess().setIsForForeingKeyData(true);

					lineaLogic.getTodosLineasWithConnection(sFinalQuery,new Pagination());

					this.lineacategoriasForeignKey=lineaLogic.getLineas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLineaCategoria(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					lineaLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidLineaCategoriaActual());
					this.lineacategoriasForeignKey.add(lineaLogic.getLinea());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventarioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventariosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableInventarioActual());
					this.cuentacontableinventariosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostoventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCostoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableCostoVentaActual());
					this.cuentacontablecostoventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableVentaActual());
					this.cuentacontableventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDescuentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledescuentoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledescuentosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDescuento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableDescuentoActual());
					this.cuentacontabledescuentosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableProduccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableproduccionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableproduccionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableProduccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableProduccionActual());
					this.cuentacontableproduccionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDevolucionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledevolucionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledevolucionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDevolucion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableDevolucionActual());
					this.cuentacontabledevolucionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableIvaDebitosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableivadebitosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaDebito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableivadebitoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableivadebitosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableIvaDebito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableIvaDebitoActual());
					this.cuentacontableivadebitosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableIvaCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableivacreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableivacreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableivacreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableIvaCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableIvaCreditoActual());
					this.cuentacontableivacreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableBonificasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablebonificaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablebonificasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableBonifica(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableBonificaActual());
					this.cuentacontablebonificasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostoBonificasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostobonificaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostobonificasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCostoBonifica(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentascontableslineaproductoSessionBean.getlidCuentaContableCostoBonificaActual());
					this.cuentacontablecostobonificasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaCuentasContablesLineaProductoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_empresaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_empresaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto!=null) {
						jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto!=null) {
							//jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaCuentasContablesLineaProductoGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_bodegaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_bodegaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico!=null && jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaForeignKey(Long idLineaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setLinea(lineaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedItem(lineaTemp);
					}
				} else {
					//jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedItem(lineaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdLinea") || sFormularioTipoBusqueda.equals("Todos")){
					if(lineaTemp!=null && jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto!=null) {
						jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.setSelectedItem(lineaTemp);
					} else {
						if(jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto!=null) {
							//jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.setSelectedItem(lineaTemp);
							if(jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.getItemCount()>0) {
								jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaForeignKeyDescripcion(Long idLineaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaForeignKeyGenerico(Long idLineaSeleccionado,JComboBox jComboBoxid_lineaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineaTemp=null;

			for(Linea lineaAux:lineasForeignKey) {
				if(lineaAux.getId()!=null && lineaAux.getId().equals(idLineaSeleccionado)) {
					lineaTemp=lineaAux;
					break;
				}
			}

			if(lineaTemp!=null) {
				jComboBoxid_lineaCuentasContablesLineaProductoGenerico.setSelectedItem(lineaTemp);
			} else {
				if(jComboBoxid_lineaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_lineaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_lineaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaGrupoForeignKey(Long idLineaGrupoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineagrupoTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setLineaGrupo(lineagrupoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedItem(lineagrupoTemp);
					}
				} else {
					//jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedItem(lineagrupoTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaGrupoForeignKeyDescripcion(Long idLineaGrupoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineagrupoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaGrupoForeignKeyGenerico(Long idLineaGrupoSeleccionado,JComboBox jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineagrupoTemp=null;

			for(Linea lineagrupoAux:lineagruposForeignKey) {
				if(lineagrupoAux.getId()!=null && lineagrupoAux.getId().equals(idLineaGrupoSeleccionado)) {
					lineagrupoTemp=lineagrupoAux;
					break;
				}
			}

			if(lineagrupoTemp!=null) {
				jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico.setSelectedItem(lineagrupoTemp);
			} else {
				if(jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico!=null && jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLineaCategoriaForeignKey(Long idLineaCategoriaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(lineacategoriaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setLineaCategoria(lineacategoriaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedItem(lineacategoriaTemp);
					}
				} else {
					//jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedItem(lineacategoriaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLineaCategoriaForeignKeyDescripcion(Long idLineaCategoriaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}


			sDescripcion=LineaConstantesFunciones.getLineaDescripcion(lineacategoriaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLineaCategoriaForeignKeyGenerico(Long idLineaCategoriaSeleccionado,JComboBox jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineacategoriaTemp=null;

			for(Linea lineacategoriaAux:lineacategoriasForeignKey) {
				if(lineacategoriaAux.getId()!=null && lineacategoriaAux.getId().equals(idLineaCategoriaSeleccionado)) {
					lineacategoriaTemp=lineacategoriaAux;
					break;
				}
			}

			if(lineacategoriaTemp!=null) {
				jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico.setSelectedItem(lineacategoriaTemp);
			} else {
				if(jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioForeignKey(Long idCuentaContableInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventarioTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableInventario(cuentacontableinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedItem(cuentacontableinventarioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedItem(cuentacontableinventarioTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioForeignKeyDescripcion(Long idCuentaContableInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioForeignKeyGenerico(Long idCuentaContableInventarioSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(cuentacontableinventarioTemp!=null) {
				jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontableinventarioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoVentaForeignKey(Long idCuentaContableCostoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoventaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableCostoVenta(cuentacontablecostoventaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostoventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostoventaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoVentaForeignKeyDescripcion(Long idCuentaContableCostoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoVentaForeignKeyGenerico(Long idCuentaContableCostoVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}

			if(cuentacontablecostoventaTemp!=null) {
				jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontablecostoventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableVentaForeignKey(Long idCuentaContableVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableventaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableVenta(cuentacontableventaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontableventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontableventaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableVentaForeignKeyDescripcion(Long idCuentaContableVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableVentaForeignKeyGenerico(Long idCuentaContableVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(cuentacontableventaTemp!=null) {
				jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontableventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDescuentoForeignKey(Long idCuentaContableDescuentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledescuentoTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableDescuento(cuentacontabledescuentoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedItem(cuentacontabledescuentoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedItem(cuentacontabledescuentoTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDescuentoForeignKeyDescripcion(Long idCuentaContableDescuentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledescuentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDescuentoForeignKeyGenerico(Long idCuentaContableDescuentoSeleccionado,JComboBox jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(cuentacontabledescuentoTemp!=null) {
				jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontabledescuentoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableProduccionForeignKey(Long idCuentaContableProduccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableproduccionTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableProduccion(cuentacontableproduccionTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedItem(cuentacontableproduccionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedItem(cuentacontableproduccionTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableProduccionForeignKeyDescripcion(Long idCuentaContableProduccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableproduccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableProduccionForeignKeyGenerico(Long idCuentaContableProduccionSeleccionado,JComboBox jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}

			if(cuentacontableproduccionTemp!=null) {
				jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontableproduccionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDevolucionForeignKey(Long idCuentaContableDevolucionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledevolucionTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableDevolucion(cuentacontabledevolucionTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedItem(cuentacontabledevolucionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedItem(cuentacontabledevolucionTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDevolucionForeignKeyDescripcion(Long idCuentaContableDevolucionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledevolucionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDevolucionForeignKeyGenerico(Long idCuentaContableDevolucionSeleccionado,JComboBox jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(cuentacontabledevolucionTemp!=null) {
				jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontabledevolucionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableIvaDebitoForeignKey(Long idCuentaContableIvaDebitoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivadebitoTemp=null;

			for(CuentaContable cuentacontableivadebitoAux:cuentacontableivadebitosForeignKey) {
				if(cuentacontableivadebitoAux.getId()!=null && cuentacontableivadebitoAux.getId().equals(idCuentaContableIvaDebitoSeleccionado)) {
					cuentacontableivadebitoTemp=cuentacontableivadebitoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableivadebitoTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableIvaDebito(cuentacontableivadebitoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivadebitoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivadebitoTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableIvaDebitoForeignKeyDescripcion(Long idCuentaContableIvaDebitoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableivadebitoTemp=null;

			for(CuentaContable cuentacontableivadebitoAux:cuentacontableivadebitosForeignKey) {
				if(cuentacontableivadebitoAux.getId()!=null && cuentacontableivadebitoAux.getId().equals(idCuentaContableIvaDebitoSeleccionado)) {
					cuentacontableivadebitoTemp=cuentacontableivadebitoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableivadebitoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableIvaDebitoForeignKeyGenerico(Long idCuentaContableIvaDebitoSeleccionado,JComboBox jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivadebitoTemp=null;

			for(CuentaContable cuentacontableivadebitoAux:cuentacontableivadebitosForeignKey) {
				if(cuentacontableivadebitoAux.getId()!=null && cuentacontableivadebitoAux.getId().equals(idCuentaContableIvaDebitoSeleccionado)) {
					cuentacontableivadebitoTemp=cuentacontableivadebitoAux;
					break;
				}
			}

			if(cuentacontableivadebitoTemp!=null) {
				jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontableivadebitoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableIvaCreditoForeignKey(Long idCuentaContableIvaCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivacreditoTemp=null;

			for(CuentaContable cuentacontableivacreditoAux:cuentacontableivacreditosForeignKey) {
				if(cuentacontableivacreditoAux.getId()!=null && cuentacontableivacreditoAux.getId().equals(idCuentaContableIvaCreditoSeleccionado)) {
					cuentacontableivacreditoTemp=cuentacontableivacreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableivacreditoTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableIvaCredito(cuentacontableivacreditoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivacreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivacreditoTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableIvaCreditoForeignKeyDescripcion(Long idCuentaContableIvaCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableivacreditoTemp=null;

			for(CuentaContable cuentacontableivacreditoAux:cuentacontableivacreditosForeignKey) {
				if(cuentacontableivacreditoAux.getId()!=null && cuentacontableivacreditoAux.getId().equals(idCuentaContableIvaCreditoSeleccionado)) {
					cuentacontableivacreditoTemp=cuentacontableivacreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableivacreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableIvaCreditoForeignKeyGenerico(Long idCuentaContableIvaCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivacreditoTemp=null;

			for(CuentaContable cuentacontableivacreditoAux:cuentacontableivacreditosForeignKey) {
				if(cuentacontableivacreditoAux.getId()!=null && cuentacontableivacreditoAux.getId().equals(idCuentaContableIvaCreditoSeleccionado)) {
					cuentacontableivacreditoTemp=cuentacontableivacreditoAux;
					break;
				}
			}

			if(cuentacontableivacreditoTemp!=null) {
				jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontableivacreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableBonificaForeignKey(Long idCuentaContableBonificaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablebonificaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableBonifica(cuentacontablebonificaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablebonificaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablebonificaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableBonificaForeignKeyDescripcion(Long idCuentaContableBonificaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablebonificaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableBonificaForeignKeyGenerico(Long idCuentaContableBonificaSeleccionado,JComboBox jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}

			if(cuentacontablebonificaTemp!=null) {
				jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontablebonificaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoBonificaForeignKey(Long idCuentaContableCostoBonificaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostobonificaTemp!=null) {

					if(this.cuentascontableslineaproducto!=null) {
						this.cuentascontableslineaproducto.setCuentaContableCostoBonifica(cuentacontablecostobonificaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostobonificaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostobonificaTemp);
					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoBonificaForeignKeyDescripcion(Long idCuentaContableCostoBonificaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostobonificaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoBonificaForeignKeyGenerico(Long idCuentaContableCostoBonificaSeleccionado,JComboBox jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}

			if(cuentacontablecostobonificaTemp!=null) {
				jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico.setSelectedItem(cuentacontablecostobonificaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico!=null && jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_empresaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaCuentasContablesLineaProductoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				cuentascontableslineaproducto.setid_empresa(empresaAux.getId());
				cuentascontableslineaproducto.setempresa_descripcion(CuentasContablesLineaProductoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				cuentascontableslineaproducto.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_bodegaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaCuentasContablesLineaProductoGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				cuentascontableslineaproducto.setid_bodega(bodegaAux.getId());
				cuentascontableslineaproducto.setbodega_descripcion(CuentasContablesLineaProductoConstantesFunciones.getBodegaDescripcion(bodegaAux));
				cuentascontableslineaproducto.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				cuentascontableslineaproducto.setid_centro_costo(centrocostoAux.getId());
				cuentascontableslineaproducto.setcentrocosto_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				cuentascontableslineaproducto.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_lineaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_lineaCuentasContablesLineaProductoGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_lineaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				cuentascontableslineaproducto.setid_linea(lineaAux.getId());
				cuentascontableslineaproducto.setlinea_descripcion(CuentasContablesLineaProductoConstantesFunciones.getLineaDescripcion(lineaAux));
				cuentascontableslineaproducto.setLinea(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaGrupoForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_linea_grupoCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				cuentascontableslineaproducto.setid_linea_grupo(lineaAux.getId());
				cuentascontableslineaproducto.setlineagrupo_descripcion(CuentasContablesLineaProductoConstantesFunciones.getLineaGrupoDescripcion(lineaAux));
				cuentascontableslineaproducto.setLineaGrupo(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLineaCategoriaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			Linea  lineaAux=new Linea();

			if(jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico==null) {
				lineaAux=(Linea)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				lineaAux=(Linea)jComboBoxid_linea_categoriaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(lineaAux!=null && lineaAux.getId()!=null) {
				cuentascontableslineaproducto.setid_linea_categoria(lineaAux.getId());
				cuentascontableslineaproducto.setlineacategoria_descripcion(CuentasContablesLineaProductoConstantesFunciones.getLineaCategoriaDescripcion(lineaAux));
				cuentascontableslineaproducto.setLineaCategoria(lineaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_inventario(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontableinventario_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableInventarioDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableInventario(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoVentaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_costo_venta(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontablecostoventa_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableCostoVentaDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableCostoVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableVentaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_venta(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontableventa_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableVentaDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDescuentoForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_descuento(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontabledescuento_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableDescuentoDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableDescuento(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableProduccionForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_produccion(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontableproduccion_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableProduccionDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableProduccion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDevolucionForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_devolucion(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontabledevolucion_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableDevolucionDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableDevolucion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableIvaDebitoForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_iva_debito(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontableivadebito_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableIvaDebitoDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableIvaDebito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableIvaCreditoForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_iva_credito(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontableivacredito_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableIvaCreditoDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableIvaCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableBonificaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_bonifica(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontablebonifica_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableBonificaDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableBonifica(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoBonificaForeignKey(CuentasContablesLineaProducto cuentascontableslineaproducto,JComboBox jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentascontableslineaproducto.setid_cuenta_contable_costo_bonifica(cuentacontableAux.getId());
				cuentascontableslineaproducto.setcuentacontablecostobonifica_descripcion(CuentasContablesLineaProductoConstantesFunciones.getCuentaContableCostoBonificaDescripcion(cuentacontableAux));
				cuentascontableslineaproducto.setCuentaContableCostoBonifica(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.addItem(bodega);
							}
						}

						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.addItem(centrocosto);
							}
						}

						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.removeAllItems();

							for(Linea linea:this.lineasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.addItem(linea);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdLinea") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.removeAllItems();

							for(Linea linea:this.lineasForeignKey) {
								this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.addItem(linea);
							}
						}

						if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaGruposForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.removeAllItems();

							for(Linea lineagrupo:this.lineagruposForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.addItem(lineagrupo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLineaCategoriasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLinea=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.removeAllItems();

							for(Linea lineacategoria:this.lineacategoriasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.addItem(lineacategoria);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.addItem(cuentacontableinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontablecostoventa:this.cuentacontablecostoventasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addItem(cuentacontablecostoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.addItem(cuentacontableventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDescuentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontabledescuento:this.cuentacontabledescuentosForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.addItem(cuentacontabledescuento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableProduccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontableproduccion:this.cuentacontableproduccionsForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.addItem(cuentacontableproduccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDevolucionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontabledevolucion:this.cuentacontabledevolucionsForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.addItem(cuentacontabledevolucion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableIvaDebitosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontableivadebito:this.cuentacontableivadebitosForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addItem(cuentacontableivadebito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableIvaCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontableivacredito:this.cuentacontableivacreditosForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addItem(cuentacontableivacredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableBonificasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontablebonifica:this.cuentacontablebonificasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.addItem(cuentacontablebonifica);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostoBonificasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.removeAllItems();

							for(CuentaContable cuentacontablecostobonifica:this.cuentacontablecostobonificasForeignKey) {
								this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addItem(cuentacontablecostobonifica);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { 
					}

					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaForeignKey(Linea linea,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedItem(linea);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.setSelectedItem(linea);
						} else {
							this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaGrupoForeignKey(Linea lineagrupo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedItem(lineagrupo);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLineaCategoriaForeignKey(Linea lineacategoria,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedItem(lineacategoria);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioForeignKey(CuentaContable cuentacontableinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedItem(cuentacontableinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoVentaForeignKey(CuentaContable cuentacontablecostoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableVentaForeignKey(CuentaContable cuentacontableventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedItem(cuentacontableventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDescuentoForeignKey(CuentaContable cuentacontabledescuento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedItem(cuentacontabledescuento);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableProduccionForeignKey(CuentaContable cuentacontableproduccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedItem(cuentacontableproduccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDevolucionForeignKey(CuentaContable cuentacontabledevolucion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedItem(cuentacontabledevolucion);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableIvaDebitoForeignKey(CuentaContable cuentacontableivadebito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivadebito);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableIvaCreditoForeignKey(CuentaContable cuentacontableivacredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedItem(cuentacontableivacredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableBonificaForeignKey(CuentaContable cuentacontablebonifica,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablebonifica);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoBonificaForeignKey(CuentaContable cuentacontablecostobonifica,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedItem(cuentacontablecostobonifica);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesCuentasContablesLineaProducto() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			CuentasContablesLineaProductoConstantesFunciones.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			CuentasContablesLineaProductoConstantesFunciones.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto(this.cuentascontableslineaproductos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(Linea.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(this.cuentascontableslineaproductos);
			cuentascontableslineaproductoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public CuentasContablesLineaProductoParameterReturnGeneral getCuentasContablesLineaProductoParameterGeneral() {
		return this.cuentascontableslineaproductoParameterGeneral;
	}
	
	public void setCuentasContablesLineaProductoParameterGeneral(CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoParameterGeneral) {
		this.cuentascontableslineaproductoParameterGeneral = cuentascontableslineaproductoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoCuentasContablesLineaProducto() {
		return isPermisoTodoCuentasContablesLineaProducto;
	}

	public void setIsPermisoTodoCuentasContablesLineaProducto(Boolean isPermisoTodoCuentasContablesLineaProducto) {
		this.isPermisoTodoCuentasContablesLineaProducto = isPermisoTodoCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoNuevoCuentasContablesLineaProducto() {
		return isPermisoNuevoCuentasContablesLineaProducto;
	}

	public void setIsPermisoNuevoCuentasContablesLineaProducto(Boolean isPermisoNuevoCuentasContablesLineaProducto) {
		this.isPermisoNuevoCuentasContablesLineaProducto = isPermisoNuevoCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoActualizarCuentasContablesLineaProducto() {
		return isPermisoActualizarCuentasContablesLineaProducto;
	}

	public void setIsPermisoActualizarCuentasContablesLineaProducto(Boolean isPermisoActualizarCuentasContablesLineaProducto) {
		this.isPermisoActualizarCuentasContablesLineaProducto = isPermisoActualizarCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoEliminarCuentasContablesLineaProducto() {
		return isPermisoEliminarCuentasContablesLineaProducto;
	}

	public void setIsPermisoEliminarCuentasContablesLineaProducto(Boolean isPermisoEliminarCuentasContablesLineaProducto) {
		this.isPermisoEliminarCuentasContablesLineaProducto = isPermisoEliminarCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoGuardarCambiosCuentasContablesLineaProducto() {
		return isPermisoGuardarCambiosCuentasContablesLineaProducto;
	}

	public void setIsPermisoGuardarCambiosCuentasContablesLineaProducto(Boolean isPermisoGuardarCambiosCuentasContablesLineaProducto) {
		this.isPermisoGuardarCambiosCuentasContablesLineaProducto = isPermisoGuardarCambiosCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoConsultaCuentasContablesLineaProducto() {
		return isPermisoConsultaCuentasContablesLineaProducto;
	}

	public void setIsPermisoConsultaCuentasContablesLineaProducto(Boolean isPermisoConsultaCuentasContablesLineaProducto) {
		this.isPermisoConsultaCuentasContablesLineaProducto = isPermisoConsultaCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoBusquedaCuentasContablesLineaProducto() {
		return isPermisoBusquedaCuentasContablesLineaProducto;
	}

	public void setIsPermisoBusquedaCuentasContablesLineaProducto(Boolean isPermisoBusquedaCuentasContablesLineaProducto) {
		this.isPermisoBusquedaCuentasContablesLineaProducto = isPermisoBusquedaCuentasContablesLineaProducto;
	}

	public Boolean getIsPermisoReporteCuentasContablesLineaProducto() {
		return isPermisoReporteCuentasContablesLineaProducto;
	}

	public void setIsPermisoReporteCuentasContablesLineaProducto(Boolean isPermisoReporteCuentasContablesLineaProducto) {
		this.isPermisoReporteCuentasContablesLineaProducto = isPermisoReporteCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoPaginacionMedioCuentasContablesLineaProducto() {
		return isPermisoPaginacionMedioCuentasContablesLineaProducto;
	}

	public void setIsPermisoPaginacionMedioCuentasContablesLineaProducto(Boolean isPermisoPaginacionMedioCuentasContablesLineaProducto) {
		this.isPermisoPaginacionMedioCuentasContablesLineaProducto = isPermisoPaginacionMedioCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoPaginacionTodoCuentasContablesLineaProducto() {
		return isPermisoPaginacionTodoCuentasContablesLineaProducto;
	}

	public void setIsPermisoPaginacionTodoCuentasContablesLineaProducto(Boolean isPermisoPaginacionTodoCuentasContablesLineaProducto) {
		this.isPermisoPaginacionTodoCuentasContablesLineaProducto = isPermisoPaginacionTodoCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoPaginacionAltoCuentasContablesLineaProducto() {
		return isPermisoPaginacionAltoCuentasContablesLineaProducto;
	}

	public void setIsPermisoPaginacionAltoCuentasContablesLineaProducto(Boolean isPermisoPaginacionAltoCuentasContablesLineaProducto) {
		this.isPermisoPaginacionAltoCuentasContablesLineaProducto = isPermisoPaginacionAltoCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoCopiarCuentasContablesLineaProducto() {
		return isPermisoCopiarCuentasContablesLineaProducto;
	}

	public void setIsPermisoCopiarCuentasContablesLineaProducto(Boolean isPermisoCopiarCuentasContablesLineaProducto) {
		this.isPermisoCopiarCuentasContablesLineaProducto = isPermisoCopiarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoVerFormCuentasContablesLineaProducto() {
		return isPermisoVerFormCuentasContablesLineaProducto;
	}

	public void setIsPermisoVerFormCuentasContablesLineaProducto(Boolean isPermisoVerFormCuentasContablesLineaProducto) {
		this.isPermisoVerFormCuentasContablesLineaProducto = isPermisoVerFormCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoDuplicarCuentasContablesLineaProducto() {
		return isPermisoDuplicarCuentasContablesLineaProducto;
	}

	public void setIsPermisoDuplicarCuentasContablesLineaProducto(Boolean isPermisoDuplicarCuentasContablesLineaProducto) {
		this.isPermisoDuplicarCuentasContablesLineaProducto = isPermisoDuplicarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsPermisoOrdenCuentasContablesLineaProducto() {
		return isPermisoOrdenCuentasContablesLineaProducto;
	}

	public void setIsPermisoOrdenCuentasContablesLineaProducto(Boolean isPermisoOrdenCuentasContablesLineaProducto) {
		this.isPermisoOrdenCuentasContablesLineaProducto = isPermisoOrdenCuentasContablesLineaProducto;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoCuentasContablesLineaProducto() {
		return isVisibilidadCeldaNuevoCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaNuevoCuentasContablesLineaProducto(Boolean isVisibilidadCeldaNuevoCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto = isVisibilidadCeldaNuevoCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaDuplicarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaDuplicarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaDuplicarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto = isVisibilidadCeldaDuplicarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaCopiarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaCopiarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaCopiarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto = isVisibilidadCeldaCopiarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormCuentasContablesLineaProducto() {
		return isVisibilidadCeldaVerFormCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaVerFormCuentasContablesLineaProducto(Boolean isVisibilidadCeldaVerFormCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto = isVisibilidadCeldaVerFormCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenCuentasContablesLineaProducto() {
		return isVisibilidadCeldaOrdenCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaOrdenCuentasContablesLineaProducto(Boolean isVisibilidadCeldaOrdenCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto = isVisibilidadCeldaOrdenCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto() {
		return isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto(Boolean isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto = isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaModificarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaModificarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaModificarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaModificarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaModificarCuentasContablesLineaProducto = isVisibilidadCeldaModificarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaActualizarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaActualizarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaActualizarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto = isVisibilidadCeldaActualizarCuentasContablesLineaProducto;
	}

	public Boolean getIsVisibilidadCeldaEliminarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaEliminarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaEliminarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaEliminarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto = isVisibilidadCeldaEliminarCuentasContablesLineaProducto;
	}

	public Boolean getIsVisibilidadCeldaCancelarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaCancelarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaCancelarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaCancelarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto = isVisibilidadCeldaCancelarCuentasContablesLineaProducto;
	}

	public Boolean getIsVisibilidadCeldaGuardarCuentasContablesLineaProducto() {
		return isVisibilidadCeldaGuardarCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaGuardarCuentasContablesLineaProducto(Boolean isVisibilidadCeldaGuardarCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto = isVisibilidadCeldaGuardarCuentasContablesLineaProducto;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto() {
		return isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto;
	}

	public void setIsVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto(Boolean isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto) {
		this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto = isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto;
	}
		
	public CuentasContablesLineaProductoSessionBean getcuentascontableslineaproductoSessionBean() {
		return this.cuentascontableslineaproductoSessionBean;
	}
	
	public void setcuentascontableslineaproductoSessionBean(CuentasContablesLineaProductoSessionBean cuentascontableslineaproductoSessionBean) {
		this.cuentascontableslineaproductoSessionBean=cuentascontableslineaproductoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableBonifica() {
		return this.isVisibilidadFK_IdCuentaContableBonifica;
	}

	public void setisVisibilidadFK_IdCuentaContableBonifica(Boolean isVisibilidadFK_IdCuentaContableBonifica) {
		this.isVisibilidadFK_IdCuentaContableBonifica=isVisibilidadFK_IdCuentaContableBonifica;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCostoBonifica() {
		return this.isVisibilidadFK_IdCuentaContableCostoBonifica;
	}

	public void setisVisibilidadFK_IdCuentaContableCostoBonifica(Boolean isVisibilidadFK_IdCuentaContableCostoBonifica) {
		this.isVisibilidadFK_IdCuentaContableCostoBonifica=isVisibilidadFK_IdCuentaContableCostoBonifica;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCostoVenta() {
		return this.isVisibilidadFK_IdCuentaContableCostoVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableCostoVenta(Boolean isVisibilidadFK_IdCuentaContableCostoVenta) {
		this.isVisibilidadFK_IdCuentaContableCostoVenta=isVisibilidadFK_IdCuentaContableCostoVenta;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDescuento() {
		return this.isVisibilidadFK_IdCuentaContableDescuento;
	}

	public void setisVisibilidadFK_IdCuentaContableDescuento(Boolean isVisibilidadFK_IdCuentaContableDescuento) {
		this.isVisibilidadFK_IdCuentaContableDescuento=isVisibilidadFK_IdCuentaContableDescuento;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDevolucion() {
		return this.isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public void setisVisibilidadFK_IdCuentaContableDevolucion(Boolean isVisibilidadFK_IdCuentaContableDevolucion) {
		this.isVisibilidadFK_IdCuentaContableDevolucion=isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventario() {
		return this.isVisibilidadFK_IdCuentaContableInventario;
	}

	public void setisVisibilidadFK_IdCuentaContableInventario(Boolean isVisibilidadFK_IdCuentaContableInventario) {
		this.isVisibilidadFK_IdCuentaContableInventario=isVisibilidadFK_IdCuentaContableInventario;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableIvaCredito() {
		return this.isVisibilidadFK_IdCuentaContableIvaCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableIvaCredito(Boolean isVisibilidadFK_IdCuentaContableIvaCredito) {
		this.isVisibilidadFK_IdCuentaContableIvaCredito=isVisibilidadFK_IdCuentaContableIvaCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableIvaDebito() {
		return this.isVisibilidadFK_IdCuentaContableIvaDebito;
	}

	public void setisVisibilidadFK_IdCuentaContableIvaDebito(Boolean isVisibilidadFK_IdCuentaContableIvaDebito) {
		this.isVisibilidadFK_IdCuentaContableIvaDebito=isVisibilidadFK_IdCuentaContableIvaDebito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableProduccion() {
		return this.isVisibilidadFK_IdCuentaContableProduccion;
	}

	public void setisVisibilidadFK_IdCuentaContableProduccion(Boolean isVisibilidadFK_IdCuentaContableProduccion) {
		this.isVisibilidadFK_IdCuentaContableProduccion=isVisibilidadFK_IdCuentaContableProduccion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableVenta() {
		return this.isVisibilidadFK_IdCuentaContableVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableVenta(Boolean isVisibilidadFK_IdCuentaContableVenta) {
		this.isVisibilidadFK_IdCuentaContableVenta=isVisibilidadFK_IdCuentaContableVenta;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdLinea() {
		return this.isVisibilidadFK_IdLinea;
	}

	public void setisVisibilidadFK_IdLinea(Boolean isVisibilidadFK_IdLinea) {
		this.isVisibilidadFK_IdLinea=isVisibilidadFK_IdLinea;
	}

	public Boolean getisVisibilidadFK_IdLineaCategoria() {
		return this.isVisibilidadFK_IdLineaCategoria;
	}

	public void setisVisibilidadFK_IdLineaCategoria(Boolean isVisibilidadFK_IdLineaCategoria) {
		this.isVisibilidadFK_IdLineaCategoria=isVisibilidadFK_IdLineaCategoria;
	}

	public Boolean getisVisibilidadFK_IdLineaGrupo() {
		return this.isVisibilidadFK_IdLineaGrupo;
	}

	public void setisVisibilidadFK_IdLineaGrupo(Boolean isVisibilidadFK_IdLineaGrupo) {
		this.isVisibilidadFK_IdLineaGrupo=isVisibilidadFK_IdLineaGrupo;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarBodegaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCentroCostoForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarLineaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarLineaGrupoForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarLineaCategoriaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableInventarioForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableCostoVentaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableVentaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableDescuentoForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableProduccionForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableDevolucionForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableIvaDebitoForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableIvaCreditoForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableBonificaForeignKey(cuentascontableslineaproducto,null);
				this.setActualParaGuardarCuentaContableCostoBonificaForeignKey(cuentascontableslineaproducto,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(CuentasContablesLineaProducto cuentascontableslineaproducto,CuentasContablesLineaProducto cuentascontableslineaproductoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalCuentasContablesLineaProducto(cuentascontableslineaproducto);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		cuentascontableslineaproductoAux.setId(cuentascontableslineaproducto.getId());
		cuentascontableslineaproductoAux.setVersionRow(cuentascontableslineaproducto.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessCuentasContablesLineaProducto();
		
			int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = cuentascontableslineaproductoValidator.getInvalidValues(this.cuentascontableslineaproducto);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			cuentascontableslineaproductoLogic.setDatosCliente(datosCliente);
			cuentascontableslineaproductoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				cuentascontableslineaproductoAux=new  CuentasContablesLineaProducto();
				
				cuentascontableslineaproductoAux.setIsNew(true);
				cuentascontableslineaproductoAux.setIsChanged(true);
				
				cuentascontableslineaproductoAux.setCuentasContablesLineaProductoOriginal(this.cuentascontableslineaproducto);
				
				cuentascontableslineaproductoAux.setId(this.cuentascontableslineaproducto.getId());	
				cuentascontableslineaproductoAux.setVersionRow(this.cuentascontableslineaproducto.getVersionRow());	
				cuentascontableslineaproductoAux.setid_empresa(this.cuentascontableslineaproducto.getid_empresa());	
				cuentascontableslineaproductoAux.setid_bodega(this.cuentascontableslineaproducto.getid_bodega());	
				cuentascontableslineaproductoAux.setid_centro_costo(this.cuentascontableslineaproducto.getid_centro_costo());	
				cuentascontableslineaproductoAux.setid_linea(this.cuentascontableslineaproducto.getid_linea());	
				cuentascontableslineaproductoAux.setid_linea_grupo(this.cuentascontableslineaproducto.getid_linea_grupo());	
				cuentascontableslineaproductoAux.setid_linea_categoria(this.cuentascontableslineaproducto.getid_linea_categoria());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_inventario(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_descuento(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_produccion(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_devolucion(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_debito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_credito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductos();//WithConnection
						//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);
					
					this.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductoRelaciones(cuentascontableslineaproductoAux);//WithConnection
								//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				cuentascontableslineaproductoAux=new  CuentasContablesLineaProducto();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado() 
					|| (this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado() && this.cuentascontableslineaproducto.getId()>=0)) {
						
					cuentascontableslineaproductoAux.setIsNew(false);
				}
				
				cuentascontableslineaproductoAux.setIsDeleted(false);
			
				cuentascontableslineaproductoAux.setId(this.cuentascontableslineaproducto.getId());	
				cuentascontableslineaproductoAux.setVersionRow(this.cuentascontableslineaproducto.getVersionRow());	
				cuentascontableslineaproductoAux.setid_empresa(this.cuentascontableslineaproducto.getid_empresa());	
				cuentascontableslineaproductoAux.setid_bodega(this.cuentascontableslineaproducto.getid_bodega());	
				cuentascontableslineaproductoAux.setid_centro_costo(this.cuentascontableslineaproducto.getid_centro_costo());	
				cuentascontableslineaproductoAux.setid_linea(this.cuentascontableslineaproducto.getid_linea());	
				cuentascontableslineaproductoAux.setid_linea_grupo(this.cuentascontableslineaproducto.getid_linea_grupo());	
				cuentascontableslineaproductoAux.setid_linea_categoria(this.cuentascontableslineaproducto.getid_linea_categoria());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_inventario(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_descuento(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_produccion(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_devolucion(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_debito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_credito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductos();//WithConnection
						//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);
					
					this.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductoRelaciones(cuentascontableslineaproductoAux);//WithConnection
								//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentascontableslineaproducto,cuentascontableslineaproductoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				cuentascontableslineaproductoAux=new  CuentasContablesLineaProducto();
				
				cuentascontableslineaproductoAux.setIsNew(false);
				cuentascontableslineaproductoAux.setIsChanged(false);
				
				cuentascontableslineaproductoAux.setIsDeleted(true);
				
				cuentascontableslineaproductoAux.setId(this.cuentascontableslineaproducto.getId());	
				cuentascontableslineaproductoAux.setVersionRow(this.cuentascontableslineaproducto.getVersionRow());	
				cuentascontableslineaproductoAux.setid_empresa(this.cuentascontableslineaproducto.getid_empresa());	
				cuentascontableslineaproductoAux.setid_bodega(this.cuentascontableslineaproducto.getid_bodega());	
				cuentascontableslineaproductoAux.setid_centro_costo(this.cuentascontableslineaproducto.getid_centro_costo());	
				cuentascontableslineaproductoAux.setid_linea(this.cuentascontableslineaproducto.getid_linea());	
				cuentascontableslineaproductoAux.setid_linea_grupo(this.cuentascontableslineaproducto.getid_linea_grupo());	
				cuentascontableslineaproductoAux.setid_linea_categoria(this.cuentascontableslineaproducto.getid_linea_categoria());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_inventario(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_venta(this.cuentascontableslineaproducto.getid_cuenta_contable_venta());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_descuento(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_produccion(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_devolucion(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_debito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_iva_credito(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica());	
				cuentascontableslineaproductoAux.setid_cuenta_contable_costo_bonifica(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica());	
				
				if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.cuentascontableslineaproductoAux.getId()>=0) {	
						this.cuentascontableslineaproductosEliminados.add(cuentascontableslineaproductoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductos();//WithConnection
						//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductoRelaciones(cuentascontableslineaproductoAux);//WithConnection
								//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(cuentascontableslineaproductoAux,cuentascontableslineaproductos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(this.cuentascontableslineaproductosEliminados);
					
					cuentascontableslineaproductoLogic.saveCuentasContablesLineaProductos();//WithConnection
					//cuentascontableslineaproductoLogic.getSetVersionRowCuentasContablesLineaProductos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto();
				
				this.cuentascontableslineaproductosEliminados= new ArrayList<CuentasContablesLineaProducto>();		
			}
			
			if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Cuentas Contables Linea Producto GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.cuentascontableslineaproducto=cuentascontableslineaproductoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessCuentasContablesLineaProducto();
      	}
		
	}	
	
	public void actualizarRelaciones(CuentasContablesLineaProducto cuentascontableslineaproductoLocal) throws Exception {
		
		if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(CuentasContablesLineaProducto cuentascontableslineaproductoLocal) throws Exception {	
		if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				cuentascontableslineaproductoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				cuentascontableslineaproductoLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				cuentascontableslineaproductoLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineaBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineaBeanSwingJInternalFrameLocal.getlinea(),true);
				lineaBeanSwingJInternalFrameLocal.actualizarLista(lineaBeanSwingJInternalFrameLocal.linea,this.lineasForeignKey);

				lineaBeanSwingJInternalFrameLocal.actualizarRelaciones(lineaBeanSwingJInternalFrameLocal.linea);

				cuentascontableslineaproductoLocal.setLinea(lineaBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLinea();
				this.cargarCombosFrameLineasForeignKey("Formulario");
				this.setActualLineaForeignKey(lineaBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineagrupoBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineagrupoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineagrupoBeanSwingJInternalFrameLocal.getlinea(),true);
				lineagrupoBeanSwingJInternalFrameLocal.actualizarLista(lineagrupoBeanSwingJInternalFrameLocal.linea,this.lineagruposForeignKey);

				lineagrupoBeanSwingJInternalFrameLocal.actualizarRelaciones(lineagrupoBeanSwingJInternalFrameLocal.linea);

				cuentascontableslineaproductoLocal.setLineaGrupo(lineagrupoBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLineaGrupo();
				this.cargarCombosFrameLineaGruposForeignKey("Formulario");
				this.setActualLineaGrupoForeignKey(lineagrupoBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LineaDetalleFormJInternalFrame.class)) {
				LineaBeanSwingJInternalFrame lineacategoriaBeanSwingJInternalFrameLocal=(LineaBeanSwingJInternalFrame) ((LineaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				lineacategoriaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLinea(lineacategoriaBeanSwingJInternalFrameLocal.getlinea(),true);
				lineacategoriaBeanSwingJInternalFrameLocal.actualizarLista(lineacategoriaBeanSwingJInternalFrameLocal.linea,this.lineacategoriasForeignKey);

				lineacategoriaBeanSwingJInternalFrameLocal.actualizarRelaciones(lineacategoriaBeanSwingJInternalFrameLocal.linea);

				cuentascontableslineaproductoLocal.setLineaCategoria(lineacategoriaBeanSwingJInternalFrameLocal.linea);

				this.addItemDefectoCombosForeignKeyLineaCategoria();
				this.cargarCombosFrameLineaCategoriasForeignKey("Formulario");
				this.setActualLineaCategoriaForeignKey(lineacategoriaBeanSwingJInternalFrameLocal.linea.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventarioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventarioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventariosForeignKey);

				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableInventario(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey("Formulario");
				this.setActualCuentaContableInventarioForeignKey(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostoventasForeignKey);

				cuentacontablecostoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableCostoVenta(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
				this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Formulario");
				this.setActualCuentaContableCostoVentaForeignKey(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableventasForeignKey);

				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableVenta(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey("Formulario");
				this.setActualCuentaContableVentaForeignKey(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledescuentoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledescuentoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledescuentosForeignKey);

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableDescuento(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey("Formulario");
				this.setActualCuentaContableDescuentoForeignKey(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableproduccionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableproduccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableproduccionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableproduccionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableproduccionsForeignKey);

				cuentacontableproduccionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableProduccion(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
				this.cargarCombosFrameCuentaContableProduccionsForeignKey("Formulario");
				this.setActualCuentaContableProduccionForeignKey(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledevolucionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledevolucionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledevolucionsForeignKey);

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableDevolucion(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Formulario");
				this.setActualCuentaContableDevolucionForeignKey(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableivadebitoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableivadebitoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableivadebitoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableivadebitoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableivadebitoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableivadebitosForeignKey);

				cuentacontableivadebitoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableivadebitoBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableIvaDebito(cuentacontableivadebitoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableIvaDebito();
				this.cargarCombosFrameCuentaContableIvaDebitosForeignKey("Formulario");
				this.setActualCuentaContableIvaDebitoForeignKey(cuentacontableivadebitoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableivacreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableivacreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableivacreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableivacreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableivacreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableivacreditosForeignKey);

				cuentacontableivacreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableivacreditoBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableIvaCredito(cuentacontableivacreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableIvaCredito();
				this.cargarCombosFrameCuentaContableIvaCreditosForeignKey("Formulario");
				this.setActualCuentaContableIvaCreditoForeignKey(cuentacontableivacreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablebonificaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablebonificaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablebonificaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablebonificaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablebonificasForeignKey);

				cuentacontablebonificaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableBonifica(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
				this.cargarCombosFrameCuentaContableBonificasForeignKey("Formulario");
				this.setActualCuentaContableBonificaForeignKey(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostobonificaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostobonificasForeignKey);

				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable);

				cuentascontableslineaproductoLocal.setCuentaContableCostoBonifica(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
				this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Formulario");
				this.setActualCuentaContableCostoBonificaForeignKey(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarCuentasContablesLineaProductoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = cuentascontableslineaproductoValidator.getInvalidValues(this.cuentascontableslineaproducto);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(CuentasContablesLineaProducto cuentascontableslineaproducto,List<CuentasContablesLineaProducto> cuentascontableslineaproductos) throws Exception {
		try	{		
			CuentasContablesLineaProductoConstantesFunciones.actualizarLista(cuentascontableslineaproducto,cuentascontableslineaproductos,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(CuentasContablesLineaProducto cuentascontableslineaproducto,List<CuentasContablesLineaProducto> cuentascontableslineaproductos) throws Exception {
		try	{			
			CuentasContablesLineaProductoConstantesFunciones.actualizarSelectedLista(cuentascontableslineaproducto,cuentascontableslineaproductos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<CuentasContablesLineaProducto> cuentascontableslineaproductosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				cuentascontableslineaproductosLocal=this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				cuentascontableslineaproductosLocal=this.cuentascontableslineaproductos;
			}
			//ARCHITECTURE
		
			for(CuentasContablesLineaProducto cuentascontableslineaproductoLocal:cuentascontableslineaproductosLocal) {
				if(this.permiteMantenimiento(cuentascontableslineaproductoLocal) && cuentascontableslineaproductoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+CuentasContablesLineaProductoConstantesFunciones.getCuentasContablesLineaProductoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_empresaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_bodegaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_centro_costoCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDLINEA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_lineaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDLINEAGRUPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_linea_grupoCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDLINEACATEGORIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_linea_categoriaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_inventarioCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLECOSTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_costo_ventaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_ventaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_descuentoCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEPRODUCCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_produccionCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEDEVOLUCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_devolucionCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEIVADEBITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_iva_debitoCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEIVACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_iva_creditoCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEBONIFICA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_bonificaCuentasContablesLineaProducto,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLECOSTOBONIFICA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_empresaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_bodegaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_centro_costoCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_lineaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_linea_grupoCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_linea_categoriaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_inventarioCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_costo_ventaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_ventaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_descuentoCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_produccionCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_devolucionCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_iva_debitoCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_iva_creditoCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_bonificaCuentasContablesLineaProducto,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoCuentasContablesLineaProducto--;	
		
		
		this.cuentascontableslineaproductoAux=new CuentasContablesLineaProducto();
		
		this.cuentascontableslineaproductoAux.setId(this.iIdNuevoCuentasContablesLineaProducto);
		this.cuentascontableslineaproductoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().add(this.cuentascontableslineaproductoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.cuentascontableslineaproductos.add(this.cuentascontableslineaproductoAux);
		}
		//ARCHITECTURE
		
		this.cuentascontableslineaproducto=this.cuentascontableslineaproductoAux;
		
		if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
			this.setVariablesObjetoActualToFormularioForeignKeyCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
		}
				
		//this.setDefaultControlesCuentasContablesLineaProducto();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyCuentasContablesLineaProducto();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyCuentasContablesLineaProducto();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentasContablesLineaProducto();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproductoBean,this.cuentascontableslineaproducto,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
			classes=CuentasContablesLineaProductoConstantesFunciones.getClassesRelationshipsOfCuentasContablesLineaProducto(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.procesarEventosCuentasContablesLineaProductosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this.cuentascontableslineaproducto,this.cuentascontableslineaproductoParameterGeneral,this.isEsNuevoCuentasContablesLineaProducto,classes);//this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProducto()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral,this.cuentascontableslineaproductoBean,false);
		
		if(this.cuentascontableslineaproductoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto());
		}
		
		if(this.cuentascontableslineaproductoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto(),classes);//this.cuentascontableslineaproductoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyCuentasContablesLineaProducto();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyCuentasContablesLineaProducto();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.RecargarFormCuentasContablesLineaProducto(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
						
			if(cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();
			}
			
			this.actualizarVisualTableDatosCuentasContablesLineaProducto();
			
			this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(this.getIndiceNuevoCuentasContablesLineaProducto(), this.getIndiceNuevoCuentasContablesLineaProducto());
			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
						
			this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesCuentasContablesLineaProducto(Boolean isHabilitar) throws Exception {
			
		//
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_empresaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_bodegaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_centro_costoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_lineaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_grupoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_categoriaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_produccionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setEnabled(isHabilitar && this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
	};
	
	public void setDefaultControlesCuentasContablesLineaProducto() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoCuentasContablesLineaProducto(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.cuentascontableslineaproductoSessionBean.setConGuardarRelaciones(true);			
			this.cuentascontableslineaproductoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.setVisible(true);
			
					
		} else {
			//this.cuentascontableslineaproductoSessionBean.setConGuardarRelaciones(false);			
			this.cuentascontableslineaproductoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoCuentasContablesLineaProducto() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				if(cuentascontableslineaproductoAux.getId().equals(this.iIdNuevoCuentasContablesLineaProducto)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductos) {
				if(cuentascontableslineaproductoAux.getId().equals(this.iIdNuevoCuentasContablesLineaProducto)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				if(cuentascontableslineaproductoAux.getId().equals(cuentascontableslineaproducto.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductos) {
				if(cuentascontableslineaproductoAux.getId().equals(cuentascontableslineaproducto.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproductoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				if(cuentascontableslineaproductoAux.getCuentasContablesLineaProductoOriginal().getId().equals(cuentascontableslineaproductoOriginal.getId())) {
					existe=true;
					cuentascontableslineaproductoOriginal.setId(cuentascontableslineaproductoAux.getId());
					cuentascontableslineaproductoOriginal.setVersionRow(cuentascontableslineaproductoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductos) {
				if(cuentascontableslineaproductoAux.getCuentasContablesLineaProductoOriginal().getId().equals(cuentascontableslineaproductoOriginal.getId())) {
					existe=true;
					cuentascontableslineaproductoOriginal.setId(cuentascontableslineaproductoAux.getId());
					cuentascontableslineaproductoOriginal.setVersionRow(cuentascontableslineaproductoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosCuentasContablesLineaProducto(Boolean esParaCancelar) throws Exception {
		cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
		cuentascontableslineaproductoAux=new CuentasContablesLineaProducto();
		
		if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
					if(cuentascontableslineaproductoAux.getId()<0) {
						cuentascontableslineaproductosAux.add(cuentascontableslineaproductoAux);
					}		
				}
				this.iIdNuevoCuentasContablesLineaProducto=0L;
				this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().removeAll(cuentascontableslineaproductosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductos) {
					if(cuentascontableslineaproductoAux.getId()<0) {
						cuentascontableslineaproductosAux.add(cuentascontableslineaproductoAux);
					}		
				}
				this.iIdNuevoCuentasContablesLineaProducto=0L;
				this.cuentascontableslineaproductos.removeAll(cuentascontableslineaproductosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoCuentasContablesLineaProducto 
					&& this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()>0
					) {
					cuentascontableslineaproductoAux=this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().get(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size() - 1);
				
					if(cuentascontableslineaproductoAux.getId()<0) {
						this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().remove(cuentascontableslineaproductoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoCuentasContablesLineaProducto && this.cuentascontableslineaproductos.size()>0) {
					cuentascontableslineaproductoAux=this.cuentascontableslineaproductos.get(this.cuentascontableslineaproductos.size() - 1);
				
					if(cuentascontableslineaproductoAux.getId()<0) {
						this.cuentascontableslineaproductos.remove(cuentascontableslineaproductoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoCuentasContablesLineaProducto(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(cuentascontableslineaproducto.getId()<0) {
				this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().remove(this.cuentascontableslineaproducto);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(cuentascontableslineaproducto.getId()<0) {
				this.cuentascontableslineaproductos.remove(this.cuentascontableslineaproducto);
			}
		}			
	}
	
	public void setEstadosInicialesCuentasContablesLineaProducto(List<CuentasContablesLineaProducto> cuentascontableslineaproductosAux) throws Exception {
		CuentasContablesLineaProductoConstantesFunciones.setEstadosInicialesCuentasContablesLineaProducto(cuentascontableslineaproductosAux);
	}
	
	public void setEstadosInicialesCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproductoAux) throws Exception {
		CuentasContablesLineaProductoConstantesFunciones.setEstadosInicialesCuentasContablesLineaProducto(cuentascontableslineaproductoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarCuentasContablesLineaProductoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarCuentasContablesLineaProductoActual()) {
				if(!this.isEsNuevoCuentasContablesLineaProducto) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoCuentasContablesLineaProducto=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarCuentasContablesLineaProductoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Cuentas Contables Linea Producto ?", "MANTENIMIENTO DE Cuentas Contables Linea Producto", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(CuentasContablesLineaProducto cuentascontableslineaproducto) throws Exception {
		CuentasContablesLineaProductoConstantesFunciones.seleccionarAsignar(this.cuentascontableslineaproducto,cuentascontableslineaproducto);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarCuentasContablesLineaProducto=this.isPermisoActualizarOriginalCuentasContablesLineaProducto;
			
			
			this.seleccionarAsignar(cuentascontableslineaproducto);
			
			

			idCentroCostoActual=cuentascontableslineaproducto.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idCuentaContableInventarioActual=cuentascontableslineaproducto.getid_cuenta_contable_inventario();
			this.seleccionarCuentaContableInventarioActual();

			idCuentaContableCostoVentaActual=cuentascontableslineaproducto.getid_cuenta_contable_costo_venta();
			this.seleccionarCuentaContableCostoVentaActual();

			idCuentaContableVentaActual=cuentascontableslineaproducto.getid_cuenta_contable_venta();
			this.seleccionarCuentaContableVentaActual();

			idCuentaContableDescuentoActual=cuentascontableslineaproducto.getid_cuenta_contable_descuento();
			this.seleccionarCuentaContableDescuentoActual();

			idCuentaContableProduccionActual=cuentascontableslineaproducto.getid_cuenta_contable_produccion();
			this.seleccionarCuentaContableProduccionActual();

			idCuentaContableDevolucionActual=cuentascontableslineaproducto.getid_cuenta_contable_devolucion();
			this.seleccionarCuentaContableDevolucionActual();

			idCuentaContableIvaDebitoActual=cuentascontableslineaproducto.getid_cuenta_contable_iva_debito();
			this.seleccionarCuentaContableIvaDebitoActual();

			idCuentaContableIvaCreditoActual=cuentascontableslineaproducto.getid_cuenta_contable_iva_credito();
			this.seleccionarCuentaContableIvaCreditoActual();

			idCuentaContableBonificaActual=cuentascontableslineaproducto.getid_cuenta_contable_bonifica();
			this.seleccionarCuentaContableBonificaActual();

			idCuentaContableCostoBonificaActual=cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica();
			this.seleccionarCuentaContableCostoBonificaActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentasContablesLineaProductoConstantesFunciones.quitarEspaciosCuentasContablesLineaProducto(this.cuentascontableslineaproducto,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.cuentascontableslineaproductoSessionBean.setsFuncionBusquedaRapida(this.cuentascontableslineaproductoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableInventarioActual() throws Exception {
		try	{
			CuentaContable cuentacontableinventarioAux=new CuentaContable();

			if(this.idCuentaContableInventarioActual != null && this.idCuentaContableInventarioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableinventarioLogic.getEntityWithConnection(this.idCuentaContableInventarioActual);
					cuentacontableinventarioAux= cuentacontableinventarioLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableinventariosForeignKey.add(cuentacontableinventarioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoVentaActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostoventaAux=new CuentaContable();

			if(this.idCuentaContableCostoVentaActual != null && this.idCuentaContableCostoVentaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostoventaLogic.getEntityWithConnection(this.idCuentaContableCostoVentaActual);
					cuentacontablecostoventaAux= cuentacontablecostoventaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostoventasForeignKey.add(cuentacontablecostoventaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableVentaActual() throws Exception {
		try	{
			CuentaContable cuentacontableventaAux=new CuentaContable();

			if(this.idCuentaContableVentaActual != null && this.idCuentaContableVentaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableventaLogic.getEntityWithConnection(this.idCuentaContableVentaActual);
					cuentacontableventaAux= cuentacontableventaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
				cuentacontableventasForeignKey.add(cuentacontableventaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDescuentoActual() throws Exception {
		try	{
			CuentaContable cuentacontabledescuentoAux=new CuentaContable();

			if(this.idCuentaContableDescuentoActual != null && this.idCuentaContableDescuentoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledescuentoLogic.getEntityWithConnection(this.idCuentaContableDescuentoActual);
					cuentacontabledescuentoAux= cuentacontabledescuentoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledescuentosForeignKey.add(cuentacontabledescuentoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableProduccionActual() throws Exception {
		try	{
			CuentaContable cuentacontableproduccionAux=new CuentaContable();

			if(this.idCuentaContableProduccionActual != null && this.idCuentaContableProduccionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableproduccionLogic.getEntityWithConnection(this.idCuentaContableProduccionActual);
					cuentacontableproduccionAux= cuentacontableproduccionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableproduccionsForeignKey.add(cuentacontableproduccionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDevolucionActual() throws Exception {
		try	{
			CuentaContable cuentacontabledevolucionAux=new CuentaContable();

			if(this.idCuentaContableDevolucionActual != null && this.idCuentaContableDevolucionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledevolucionLogic.getEntityWithConnection(this.idCuentaContableDevolucionActual);
					cuentacontabledevolucionAux= cuentacontabledevolucionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledevolucionsForeignKey.add(cuentacontabledevolucionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableIvaDebitoActual() throws Exception {
		try	{
			CuentaContable cuentacontableivadebitoAux=new CuentaContable();

			if(this.idCuentaContableIvaDebitoActual != null && this.idCuentaContableIvaDebitoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableivadebitoLogic.getEntityWithConnection(this.idCuentaContableIvaDebitoActual);
					cuentacontableivadebitoAux= cuentacontableivadebitoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableivadebitosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableivadebitosForeignKey.add(cuentacontableivadebitoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableIvaCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontableivacreditoAux=new CuentaContable();

			if(this.idCuentaContableIvaCreditoActual != null && this.idCuentaContableIvaCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableivacreditoLogic.getEntityWithConnection(this.idCuentaContableIvaCreditoActual);
					cuentacontableivacreditoAux= cuentacontableivacreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableivacreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableivacreditosForeignKey.add(cuentacontableivacreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableBonificaActual() throws Exception {
		try	{
			CuentaContable cuentacontablebonificaAux=new CuentaContable();

			if(this.idCuentaContableBonificaActual != null && this.idCuentaContableBonificaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablebonificaLogic.getEntityWithConnection(this.idCuentaContableBonificaActual);
					cuentacontablebonificaAux= cuentacontablebonificaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablebonificasForeignKey.add(cuentacontablebonificaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoBonificaActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostobonificaAux=new CuentaContable();

			if(this.idCuentaContableCostoBonificaActual != null && this.idCuentaContableCostoBonificaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostobonificaLogic.getEntityWithConnection(this.idCuentaContableCostoBonificaActual);
					cuentacontablecostobonificaAux= cuentacontablecostobonificaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostobonificasForeignKey.add(cuentacontablecostobonificaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoCuentasContablesLineaProducto) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosCuentasContablesLineaProducto(esParaCancelar);				
				this.cancelarNuevoCuentasContablesLineaProducto(esParaCancelar);								
			}
			
			this.cuentascontableslineaproducto=new CuentasContablesLineaProducto();
			
			this.inicializarCuentasContablesLineaProducto();
			
			this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarCuentasContablesLineaProducto() throws Exception {
		try {
			CuentasContablesLineaProductoConstantesFunciones.inicializarCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteCuentasContablesLineaProductos(String sAccionBusqueda,List<CuentasContablesLineaProducto> cuentascontableslineaproductosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="CuentasContablesLineaProducto"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="CuentasContablesLineaProductoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("CuentasContablesLineaProductoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="CuentasContablesLineaProducto"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Cuentas Contables Linea Productoes");		
		parameters.put("busquedapor", CuentasContablesLineaProductoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceCuentasContablesLineaProducto=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			CuentasContablesLineaProductoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			CuentasContablesLineaProductoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceCuentasContablesLineaProducto=new JRBeanArrayDataSource(CuentasContablesLineaProductoJInternalFrame.TraerCuentasContablesLineaProductoBeans(cuentascontableslineaproductosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceCuentasContablesLineaProducto);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+CuentasContablesLineaProductoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+CuentasContablesLineaProductoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(CuentasContablesLineaProductoBean.TraerCuentasContablesLineaProductoBeans(cuentascontableslineaproductosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProductoActionPerformed(null);
					//this.generarExcelReporteCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesCuentasContablesLineaProductos(sAccionBusqueda,sTipoArchivoReporte,cuentascontableslineaproductosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteCuentasContablesLineaProductos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentasContablesLineaProducto> cuentascontableslineaproductosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentasContablesLineaProductos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentasContablesLineaProducto("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(CuentasContablesLineaProducto cuentascontableslineaproducto : cuentascontableslineaproductosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			CuentasContablesLineaProductoConstantesFunciones.generarExcelReporteDataCuentasContablesLineaProducto("NORMAL",row,workbook,cuentascontableslineaproducto,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderCuentasContablesLineaProducto(String sTipo,Row row,Workbook workbook) {
		
		CuentasContablesLineaProductoConstantesFunciones.generarExcelReporteHeaderCuentasContablesLineaProducto(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalCuentasContablesLineaProductos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentasContablesLineaProducto> cuentascontableslineaproductosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentasContablesLineaProductos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(CuentasContablesLineaProducto cuentascontableslineaproducto : cuentascontableslineaproductosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.getCuentasContablesLineaProductoDescripcion(cuentascontableslineaproducto));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getlinea_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getlineagrupo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getlineacategoria_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontableinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontableventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledescuento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontableproduccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivadebito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivacredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontablebonifica_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesCuentasContablesLineaProductos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentasContablesLineaProducto> cuentascontableslineaproductosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<CuentasContablesLineaProducto> cuentascontableslineaproductosRespaldo=null;
		
		classes=CuentasContablesLineaProductoConstantesFunciones.getClassesRelationshipsOfCuentasContablesLineaProducto(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.cuentascontableslineaproductoLogic.setDatosCliente(this.datosCliente);
		this.cuentascontableslineaproductoLogic.setDatosDeep(this.datosDeep);
		this.cuentascontableslineaproductoLogic.setIsConDeep(true);
		
		cuentascontableslineaproductosRespaldo=this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos();
		
		this.cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(cuentascontableslineaproductosParaReportes);	
		this.cuentascontableslineaproductoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		cuentascontableslineaproductosParaReportes=this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos();
		this.cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(cuentascontableslineaproductosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentasContablesLineaProductos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentasContablesLineaProducto("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(CuentasContablesLineaProducto cuentascontableslineaproducto : cuentascontableslineaproductosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderCuentasContablesLineaProducto("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			CuentasContablesLineaProductoConstantesFunciones.generarExcelReporteDataCuentasContablesLineaProducto("NORMAL",row,workbook,cuentascontableslineaproducto,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.getCuentasContablesLineaProductoDescripcion(cuentascontableslineaproducto));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessCuentasContablesLineaProducto() throws Exception {		
		this.startProcessCuentasContablesLineaProducto(true);
	}
	
	public void startProcessCuentasContablesLineaProducto(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasCuentasContablesLineaProducto ,this.jPanelParametrosReportesCuentasContablesLineaProducto, this.jScrollPanelDatosCuentasContablesLineaProducto,this.jPanelPaginacionCuentasContablesLineaProducto, this.jScrollPanelDatosEdicionCuentasContablesLineaProducto, this.jPanelAccionesCuentasContablesLineaProducto,this.jPanelAccionesFormularioCuentasContablesLineaProducto,this.jmenuBarCuentasContablesLineaProducto,this.jmenuBarDetalleCuentasContablesLineaProducto,this.jTtoolBarCuentasContablesLineaProducto,this.jTtoolBarDetalleCuentasContablesLineaProducto);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentasContablesLineaProducto=this.jTabbedPaneBusquedasCuentasContablesLineaProducto; 
		
		final JPanel jPanelParametrosReportesCuentasContablesLineaProducto=this.jPanelParametrosReportesCuentasContablesLineaProducto;
		//final JScrollPane jScrollPanelDatosCuentasContablesLineaProducto=this.jScrollPanelDatosCuentasContablesLineaProducto;
		final JTable jTableDatosCuentasContablesLineaProducto=this.jTableDatosCuentasContablesLineaProducto;		
		final JPanel jPanelPaginacionCuentasContablesLineaProducto=this.jPanelPaginacionCuentasContablesLineaProducto;
		//final JScrollPane jScrollPanelDatosEdicionCuentasContablesLineaProducto=this.jScrollPanelDatosEdicionCuentasContablesLineaProducto;
		final JPanel jPanelAccionesCuentasContablesLineaProducto=this.jPanelAccionesCuentasContablesLineaProducto;
		
		JPanel jPanelCamposAuxiliarCuentasContablesLineaProducto=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			jPanelCamposAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelCamposCuentasContablesLineaProducto;
			jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelAccionesFormularioCuentasContablesLineaProducto;
		}
		
		final JPanel jPanelCamposCuentasContablesLineaProducto=jPanelCamposAuxiliarCuentasContablesLineaProducto;
		final JPanel jPanelAccionesFormularioCuentasContablesLineaProducto=jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto;
		
		
		final JMenuBar jmenuBarCuentasContablesLineaProducto=this.jmenuBarCuentasContablesLineaProducto;
		final JToolBar jTtoolBarCuentasContablesLineaProducto=this.jTtoolBarCuentasContablesLineaProducto;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarCuentasContablesLineaProducto=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			jmenuBarDetalleAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jmenuBarDetalleCuentasContablesLineaProducto;
			jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTtoolBarDetalleCuentasContablesLineaProducto;
		}
		
		final JMenuBar jmenuBarDetalleCuentasContablesLineaProducto=jmenuBarDetalleAuxiliarCuentasContablesLineaProducto;
		final JToolBar jTtoolBarDetalleCuentasContablesLineaProducto=jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentasContablesLineaProducto;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentasContablesLineaProducto;
			processRunnable.jTableDatos=jTableDatosCuentasContablesLineaProducto;
			processRunnable.jPanelCampos=jPanelCamposCuentasContablesLineaProducto;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentasContablesLineaProducto;
			processRunnable.jPanelAcciones=jPanelAccionesCuentasContablesLineaProducto;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentasContablesLineaProducto;
			
			
			processRunnable.jmenuBar=jmenuBarCuentasContablesLineaProducto;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentasContablesLineaProducto;
			processRunnable.jTtoolBar=jTtoolBarCuentasContablesLineaProducto;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentasContablesLineaProducto;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentasContablesLineaProducto ,jPanelParametrosReportesCuentasContablesLineaProducto,jTableDatosCuentasContablesLineaProducto, /*jScrollPanelDatosCuentasContablesLineaProducto,*/jPanelCamposCuentasContablesLineaProducto,jPanelPaginacionCuentasContablesLineaProducto, /*jScrollPanelDatosEdicionCuentasContablesLineaProducto,*/ jPanelAccionesCuentasContablesLineaProducto,jPanelAccionesFormularioCuentasContablesLineaProducto,jmenuBarCuentasContablesLineaProducto,jmenuBarDetalleCuentasContablesLineaProducto,jTtoolBarCuentasContablesLineaProducto,jTtoolBarDetalleCuentasContablesLineaProducto);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentasContablesLineaProducto ,jPanelParametrosReportesCuentasContablesLineaProducto, jScrollPanelDatosCuentasContablesLineaProducto,jPanelPaginacionCuentasContablesLineaProducto, jScrollPanelDatosEdicionCuentasContablesLineaProducto, jPanelAccionesCuentasContablesLineaProducto,jPanelAccionesFormularioCuentasContablesLineaProducto,jmenuBarCuentasContablesLineaProducto,jmenuBarDetalleCuentasContablesLineaProducto,jTtoolBarCuentasContablesLineaProducto,jTtoolBarDetalleCuentasContablesLineaProducto);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessCuentasContablesLineaProducto() {// throws Exception 
		this.finishProcessCuentasContablesLineaProducto(true);
	}
	
	public void finishProcessCuentasContablesLineaProducto(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasCuentasContablesLineaProducto ,this.jPanelParametrosReportesCuentasContablesLineaProducto, this.jScrollPanelDatosCuentasContablesLineaProducto,this.jPanelPaginacionCuentasContablesLineaProducto, this.jScrollPanelDatosEdicionCuentasContablesLineaProducto, this.jPanelAccionesCuentasContablesLineaProducto,this.jPanelAccionesFormularioCuentasContablesLineaProducto,this.jmenuBarCuentasContablesLineaProducto,this.jmenuBarDetalleCuentasContablesLineaProducto,this.jTtoolBarCuentasContablesLineaProducto,this.jTtoolBarDetalleCuentasContablesLineaProducto);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentasContablesLineaProducto=this.jTabbedPaneBusquedasCuentasContablesLineaProducto; 
		
		final JPanel jPanelParametrosReportesCuentasContablesLineaProducto=this.jPanelParametrosReportesCuentasContablesLineaProducto;
		//final JScrollPane jScrollPanelDatosCuentasContablesLineaProducto=this.jScrollPanelDatosCuentasContablesLineaProducto;
		final JTable jTableDatosCuentasContablesLineaProducto=this.jTableDatosCuentasContablesLineaProducto;		
		final JPanel jPanelPaginacionCuentasContablesLineaProducto=this.jPanelPaginacionCuentasContablesLineaProducto;
		//final JScrollPane jScrollPanelDatosEdicionCuentasContablesLineaProducto=this.jScrollPanelDatosEdicionCuentasContablesLineaProducto;
		final JPanel jPanelAccionesCuentasContablesLineaProducto=this.jPanelAccionesCuentasContablesLineaProducto;
		
		JPanel jPanelCamposAuxiliarCuentasContablesLineaProducto=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto=new JPanel();
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			jPanelCamposAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelCamposCuentasContablesLineaProducto;
			jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelAccionesFormularioCuentasContablesLineaProducto;
		}
		
		final JPanel jPanelCamposCuentasContablesLineaProducto=jPanelCamposAuxiliarCuentasContablesLineaProducto;
		final JPanel jPanelAccionesFormularioCuentasContablesLineaProducto=jPanelAccionesFormularioAuxiliarCuentasContablesLineaProducto;
		
		
		final JMenuBar jmenuBarCuentasContablesLineaProducto=this.jmenuBarCuentasContablesLineaProducto;		
		final JToolBar jTtoolBarCuentasContablesLineaProducto=this.jTtoolBarCuentasContablesLineaProducto;
				
		JMenuBar jmenuBarDetalleAuxiliarCuentasContablesLineaProducto=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto=new JToolBar();
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			jmenuBarDetalleAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jmenuBarDetalleCuentasContablesLineaProducto;
			jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTtoolBarDetalleCuentasContablesLineaProducto;		
		}
		
		final JMenuBar jmenuBarDetalleCuentasContablesLineaProducto=jmenuBarDetalleAuxiliarCuentasContablesLineaProducto;
		final JToolBar jTtoolBarDetalleCuentasContablesLineaProducto=jTtoolBarDetalleAuxiliarCuentasContablesLineaProducto;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentasContablesLineaProducto;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentasContablesLineaProducto;
			processRunnable.jTableDatos=jTableDatosCuentasContablesLineaProducto;
			processRunnable.jPanelCampos=jPanelCamposCuentasContablesLineaProducto;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentasContablesLineaProducto;
			processRunnable.jPanelAcciones=jPanelAccionesCuentasContablesLineaProducto;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentasContablesLineaProducto;
			
			
			processRunnable.jmenuBar=jmenuBarCuentasContablesLineaProducto;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentasContablesLineaProducto;
			processRunnable.jTtoolBar=jTtoolBarCuentasContablesLineaProducto;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentasContablesLineaProducto;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasCuentasContablesLineaProducto ,jPanelParametrosReportesCuentasContablesLineaProducto, jTableDatosCuentasContablesLineaProducto,/*jScrollPanelDatosCuentasContablesLineaProducto,*/jPanelCamposCuentasContablesLineaProducto,jPanelPaginacionCuentasContablesLineaProducto, /*jScrollPanelDatosEdicionCuentasContablesLineaProducto,*/ jPanelAccionesCuentasContablesLineaProducto,jPanelAccionesFormularioCuentasContablesLineaProducto,jmenuBarCuentasContablesLineaProducto,jmenuBarDetalleCuentasContablesLineaProducto,jTtoolBarCuentasContablesLineaProducto,jTtoolBarDetalleCuentasContablesLineaProducto));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesCuentasContablesLineaProducto(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarCuentasContablesLineaProducto(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuCuentasContablesLineaProducto(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarCuentasContablesLineaProducto(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarCuentasContablesLineaProducto,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleCuentasContablesLineaProducto,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuCuentasContablesLineaProducto(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarCuentasContablesLineaProducto,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleCuentasContablesLineaProducto,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.cuentascontableslineaproductoConstantesFunciones.getsFinalQueryCuentasContablesLineaProducto();
		String  finalQueryPaginacionTodos=this.cuentascontableslineaproductoConstantesFunciones.getsFinalQueryCuentasContablesLineaProducto();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=CuentasContablesLineaProductoConstantesFunciones.getArrayColumnasGlobalesNoCuentasContablesLineaProducto(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=CuentasContablesLineaProductoConstantesFunciones.getArrayColumnasGlobalesCuentasContablesLineaProducto(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,CuentasContablesLineaProductoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.cuentascontableslineaproductosEliminados= new ArrayList<CuentasContablesLineaProducto>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessCuentasContablesLineaProducto();
		
				///*CuentasContablesLineaProductoSessionBean*/this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			
			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=CuentasContablesLineaProductoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=CuentasContablesLineaProductoConstantesFunciones.getClassesForeignKeysOfCuentasContablesLineaProducto(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/cuentascontableslineaproducto."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			cuentascontableslineaproductosAux= new ArrayList<CuentasContablesLineaProducto>();
			
				
			cuentascontableslineaproductoLogic.setDatosCliente(this.datosCliente);
			cuentascontableslineaproductoLogic.setDatosDeep(this.datosDeep);
			cuentascontableslineaproductoLogic.setIsConDeep(true);
			
			
			cuentascontableslineaproductoLogic.getCuentasContablesLineaProductoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					cuentascontableslineaproductoLogic.getTodosCuentasContablesLineaProductos(finalQueryGlobal,pagination);
					
					//cuentascontableslineaproductoLogic.getTodosCuentasContablesLineaProductosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()==null|| cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentascontableslineaproductosAux= new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductosAux= new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentascontableslineaproductoLogic.getTodosCuentasContablesLineaProductos(finalQueryGlobal+"",this.pagination);												
							
							//cuentascontableslineaproductoLogic.getTodosCuentasContablesLineaProductosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());					
							cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(cuentascontableslineaproductosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductos.addAll(cuentascontableslineaproductosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idCuentasContablesLineaProducto=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idCuentasContablesLineaProducto=this.idActual;
				
				} else if(this.idCuentasContablesLineaProductoActual!=null && this.idCuentasContablesLineaProductoActual!=0L) {
					idCuentasContablesLineaProducto=idCuentasContablesLineaProductoActual;
				}
				
					
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndicePorId(idCuentasContablesLineaProducto);
				
				this.cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					cuentascontableslineaproductoLogic.getEntity(idCuentasContablesLineaProducto);
					
					//cuentascontableslineaproductoLogic.getEntityWithConnection(idCuentasContablesLineaProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().add(cuentascontableslineaproductoLogic.getCuentasContablesLineaProducto());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
					this.cuentascontableslineaproductos.add(cuentascontableslineaproducto);
				}
				
				if(cuentascontableslineaproductoLogic.getCuentasContablesLineaProducto()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()==null||cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentascontableslineaproductos==null|| cuentascontableslineaproductos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
						cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentasContablesLineaProductos("FK_IdBodega",cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentasContablesLineaProductos("FK_IdBodega",cuentascontableslineaproductos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());
						cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(cuentascontableslineaproductosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductos.addAll(cuentascontableslineaproductosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()==null||cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentascontableslineaproductos==null|| cuentascontableslineaproductos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
						cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentasContablesLineaProductos("FK_IdCentroCosto",cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentasContablesLineaProductos("FK_IdCentroCosto",cuentascontableslineaproductos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());
						cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(cuentascontableslineaproductosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductos.addAll(cuentascontableslineaproductosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()==null||cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentascontableslineaproductos==null|| cuentascontableslineaproductos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
						cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentasContablesLineaProductos("FK_IdEmpresa",cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentasContablesLineaProductos("FK_IdEmpresa",cuentascontableslineaproductos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());
						cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(cuentascontableslineaproductosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductos.addAll(cuentascontableslineaproductosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdLinea")) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdLinea(id_lineaFK_IdLinea);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdLinea(finalQueryGlobal,pagination,id_lineaFK_IdLinea);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdLinea(id_lineaFK_IdLinea);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdLinea(id_lineaFK_IdLinea);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()==null||cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentascontableslineaproductos==null|| cuentascontableslineaproductos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
						cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductosAux=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductosAux.addAll(cuentascontableslineaproductos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdLinea(finalQueryGlobal,pagination,id_lineaFK_IdLinea);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdLinea(id_lineaFK_IdLinea);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentasContablesLineaProductoConstantesFunciones.getDetalleIndiceFK_IdLinea(id_lineaFK_IdLinea);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentasContablesLineaProductos("FK_IdLinea",cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentasContablesLineaProductos("FK_IdLinea",cuentascontableslineaproductos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(new ArrayList<CuentasContablesLineaProducto>());
						cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().addAll(cuentascontableslineaproductosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductos=new ArrayList<CuentasContablesLineaProducto>();
							cuentascontableslineaproductos.addAll(cuentascontableslineaproductosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesCuentasContablesLineaProducto();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessCuentasContablesLineaProducto();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentascontableslineaproductos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentascontableslineaproductos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(CuentasContablesLineaProducto cuentascontableslineaproducto) {
		Boolean permite=true;
		
		if(this.cuentascontableslineaproducto.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=CuentasContablesLineaProductoConstantesFunciones.getOrderByListaCuentasContablesLineaProducto();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=CuentasContablesLineaProductoConstantesFunciones.getOrderByListaCuentasContablesLineaProducto();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				if(cuentascontableslineaproducto.getsType().equals(Constantes2.S_TOTALES)) {
					cuentascontableslineaproductoTotales=cuentascontableslineaproducto;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentasContablesLineaProducto cuentascontableslineaproducto:this.cuentascontableslineaproductos) {
				if(cuentascontableslineaproducto.getsType().equals(Constantes2.S_TOTALES)) {
					cuentascontableslineaproductoTotales=cuentascontableslineaproducto;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.cuentascontableslineaproductoAux=new CuentasContablesLineaProducto();
			this.cuentascontableslineaproductoAux.setsType(Constantes2.S_TOTALES);
			this.cuentascontableslineaproductoAux.setIsNew(false);
			this.cuentascontableslineaproductoAux.setIsChanged(false);
			this.cuentascontableslineaproductoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				CuentasContablesLineaProductoConstantesFunciones.TotalizarValoresFilaCuentasContablesLineaProducto(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this.cuentascontableslineaproductoAux);
				
				this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().add(this.cuentascontableslineaproductoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				CuentasContablesLineaProductoConstantesFunciones.TotalizarValoresFilaCuentasContablesLineaProducto(this.cuentascontableslineaproductos,this.cuentascontableslineaproductoAux);
				
				this.cuentascontableslineaproductos.add(this.cuentascontableslineaproductoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		cuentascontableslineaproductoTotales=new CuentasContablesLineaProducto();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().remove(cuentascontableslineaproductoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentascontableslineaproductos.remove(cuentascontableslineaproductoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		cuentascontableslineaproductoTotales=new CuentasContablesLineaProducto();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				if(cuentascontableslineaproducto.getsType().equals(Constantes2.S_TOTALES)) {
					cuentascontableslineaproductoTotales=cuentascontableslineaproducto;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentasContablesLineaProductoConstantesFunciones.TotalizarValoresFilaCuentasContablesLineaProducto(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),cuentascontableslineaproductoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentasContablesLineaProducto cuentascontableslineaproducto:this.cuentascontableslineaproductos) {
				if(cuentascontableslineaproducto.getsType().equals(Constantes2.S_TOTALES)) {
					cuentascontableslineaproductoTotales=cuentascontableslineaproducto;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentasContablesLineaProductoConstantesFunciones.TotalizarValoresFilaCuentasContablesLineaProducto(this.cuentascontableslineaproductos,cuentascontableslineaproductoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getCuentasContablesLineaProductosFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableBonifica()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableBonifica";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableCostoBonifica()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCostoBonifica";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableCostoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCostoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableDescuento()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDescuento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableDevolucion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDevolucion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableIvaCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableIvaCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableIvaDebito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableIvaDebito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableProduccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableProduccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLinea()throws Exception {
		try {
			sAccionBusqueda="FK_IdLinea";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLineaCategoria()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaCategoria";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLineaGrupo()throws Exception {
		try {
			sAccionBusqueda="FK_IdLineaGrupo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getCuentasContablesLineaProductosFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableBonifica(String sFinalQuery,Long id_cuenta_contable_bonifica)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableBonifica(sFinalQuery,this.pagination,id_cuenta_contable_bonifica);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableCostoBonifica(String sFinalQuery,Long id_cuenta_contable_costo_bonifica)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableCostoBonifica(sFinalQuery,this.pagination,id_cuenta_contable_costo_bonifica);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableCostoVenta(String sFinalQuery,Long id_cuenta_contable_costo_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableCostoVenta(sFinalQuery,this.pagination,id_cuenta_contable_costo_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableDescuento(String sFinalQuery,Long id_cuenta_contable_descuento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableDescuento(sFinalQuery,this.pagination,id_cuenta_contable_descuento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableDevolucion(String sFinalQuery,Long id_cuenta_contable_devolucion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableDevolucion(sFinalQuery,this.pagination,id_cuenta_contable_devolucion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableInventario(String sFinalQuery,Long id_cuenta_contable_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableInventario(sFinalQuery,this.pagination,id_cuenta_contable_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableIvaCredito(String sFinalQuery,Long id_cuenta_contable_iva_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableIvaCredito(sFinalQuery,this.pagination,id_cuenta_contable_iva_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableIvaDebito(String sFinalQuery,Long id_cuenta_contable_iva_debito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableIvaDebito(sFinalQuery,this.pagination,id_cuenta_contable_iva_debito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableProduccion(String sFinalQuery,Long id_cuenta_contable_produccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableProduccion(sFinalQuery,this.pagination,id_cuenta_contable_produccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdCuentaContableVenta(String sFinalQuery,Long id_cuenta_contable_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdCuentaContableVenta(sFinalQuery,this.pagination,id_cuenta_contable_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLinea(String sFinalQuery,Long id_linea)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdLinea(sFinalQuery,this.pagination,id_linea);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLineaCategoria(String sFinalQuery,Long id_linea_categoria)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdLineaCategoria(sFinalQuery,this.pagination,id_linea_categoria);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentasContablesLineaProductosFK_IdLineaGrupo(String sFinalQuery,Long id_linea_grupo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLogic.getCuentasContablesLineaProductosFK_IdLineaGrupo(sFinalQuery,this.pagination,id_linea_grupo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosCuentasContablesLineaProducto() {
		this.isPermisoTodoCuentasContablesLineaProducto=false;
		this.isPermisoNuevoCuentasContablesLineaProducto=false;
		this.isPermisoActualizarCuentasContablesLineaProducto=false;
		this.isPermisoActualizarOriginalCuentasContablesLineaProducto=false;
		this.isPermisoEliminarCuentasContablesLineaProducto=false;
		this.isPermisoGuardarCambiosCuentasContablesLineaProducto=false;
		this.isPermisoConsultaCuentasContablesLineaProducto=false;
		this.isPermisoBusquedaCuentasContablesLineaProducto=false;
		this.isPermisoReporteCuentasContablesLineaProducto=false;		
		this.isPermisoOrdenCuentasContablesLineaProducto=false;		
		this.isPermisoPaginacionMedioCuentasContablesLineaProducto=false;		
		this.isPermisoPaginacionAltoCuentasContablesLineaProducto=false;
		this.isPermisoPaginacionTodoCuentasContablesLineaProducto=false;
		this.isPermisoCopiarCuentasContablesLineaProducto=false;		
		this.isPermisoVerFormCuentasContablesLineaProducto=false;		
		this.isPermisoDuplicarCuentasContablesLineaProducto=false;		
		this.isPermisoOrdenCuentasContablesLineaProducto=false;		
	}
	
	public void setPermisosUsuarioCuentasContablesLineaProducto(Boolean isPermiso) {
		this.isPermisoTodoCuentasContablesLineaProducto=isPermiso;
		this.isPermisoNuevoCuentasContablesLineaProducto=isPermiso;
		this.isPermisoActualizarCuentasContablesLineaProducto=isPermiso;
		this.isPermisoActualizarOriginalCuentasContablesLineaProducto=isPermiso;
		this.isPermisoEliminarCuentasContablesLineaProducto=isPermiso;
		this.isPermisoGuardarCambiosCuentasContablesLineaProducto=isPermiso;
		this.isPermisoConsultaCuentasContablesLineaProducto=isPermiso;
		this.isPermisoBusquedaCuentasContablesLineaProducto=isPermiso;
		this.isPermisoReporteCuentasContablesLineaProducto=isPermiso;
		this.isPermisoOrdenCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoPaginacionMedioCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoPaginacionAltoCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoPaginacionTodoCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoCopiarCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoVerFormCuentasContablesLineaProducto=isPermiso;		
		this.isPermisoDuplicarCuentasContablesLineaProducto=isPermiso;
		this.isPermisoOrdenCuentasContablesLineaProducto=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioCuentasContablesLineaProducto(Boolean isPermiso) {
		//this.isPermisoTodoCuentasContablesLineaProducto=isPermiso;
		this.isPermisoNuevoCuentasContablesLineaProducto=isPermiso;
		this.isPermisoActualizarCuentasContablesLineaProducto=isPermiso;
		this.isPermisoActualizarOriginalCuentasContablesLineaProducto=isPermiso;
		this.isPermisoEliminarCuentasContablesLineaProducto=isPermiso;
		this.isPermisoGuardarCambiosCuentasContablesLineaProducto=isPermiso;
		//this.isPermisoConsultaCuentasContablesLineaProducto=isPermiso;
		//this.isPermisoBusquedaCuentasContablesLineaProducto=isPermiso;
		//this.isPermisoReporteCuentasContablesLineaProducto=isPermiso;
		//this.isPermisoOrdenCuentasContablesLineaProducto=isPermiso;		
		//this.isPermisoPaginacionMedioCuentasContablesLineaProducto=isPermiso;		
		//this.isPermisoPaginacionAltoCuentasContablesLineaProducto=isPermiso;		
		//this.isPermisoPaginacionTodoCuentasContablesLineaProducto=isPermiso;		
		//this.isPermisoCopiarCuentasContablesLineaProducto=isPermiso;		
		//this.isPermisoDuplicarCuentasContablesLineaProducto=isPermiso;
		//this.isPermisoOrdenCuentasContablesLineaProducto=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioCuentasContablesLineaProductoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(CuentasContablesLineaProductoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioCuentasContablesLineaProductoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioCuentasContablesLineaProductoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionCuentasContablesLineaProductoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioCuentasContablesLineaProductoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioCuentasContablesLineaProducto() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(CuentasContablesLineaProductoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoCuentasContablesLineaProducto=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarCuentasContablesLineaProducto=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalCuentasContablesLineaProducto=this.isPermisoActualizarCuentasContablesLineaProducto;
			this.isPermisoEliminarCuentasContablesLineaProducto=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosCuentasContablesLineaProducto=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaCuentasContablesLineaProducto=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaCuentasContablesLineaProducto=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoCuentasContablesLineaProducto=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteCuentasContablesLineaProducto=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentasContablesLineaProducto=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioCuentasContablesLineaProducto=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoCuentasContablesLineaProducto=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoCuentasContablesLineaProducto=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarCuentasContablesLineaProducto=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormCuentasContablesLineaProducto=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarCuentasContablesLineaProducto=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentasContablesLineaProducto=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosCuentasContablesLineaProducto.setToolTipText(this.jTableDatosCuentasContablesLineaProducto.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioCuentasContablesLineaProducto(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioCuentasContablesLineaProducto(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioCuentasContablesLineaProducto() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyCuentasContablesLineaProductoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.lineasForeignKey=new ArrayList();
				this.lineagruposForeignKey=new ArrayList();
				this.lineacategoriasForeignKey=new ArrayList();
				this.cuentacontableinventariosForeignKey=new ArrayList();
				this.cuentacontablecostoventasForeignKey=new ArrayList();
				this.cuentacontableventasForeignKey=new ArrayList();
				this.cuentacontabledescuentosForeignKey=new ArrayList();
				this.cuentacontableproduccionsForeignKey=new ArrayList();
				this.cuentacontabledevolucionsForeignKey=new ArrayList();
				this.cuentacontableivadebitosForeignKey=new ArrayList();
				this.cuentacontableivacreditosForeignKey=new ArrayList();
				this.cuentacontablebonificasForeignKey=new ArrayList();
				this.cuentacontablecostobonificasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyCuentasContablesLineaProductoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(CuentasContablesLineaProductoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyCuentasContablesLineaProductoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaGrupoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLineaCategoriaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableProduccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableIvaDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableIvaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineasForeignKey==null||this.lineasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaGrupoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineagruposForeignKey==null||this.lineagruposForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaGruposForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaCategoriaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.lineacategoriasForeignKey==null||this.lineacategoriasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LineaConstantesFunciones.SFINALQUERY;

				this.cargarCombosLineaCategoriasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostoventasForeignKey==null||this.cuentacontablecostoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableProduccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableproduccionsForeignKey==null||this.cuentacontableproduccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableProduccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIvaDebitoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableivadebitosForeignKey==null||this.cuentacontableivadebitosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableIvaDebitosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIvaCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableivacreditosForeignKey==null||this.cuentacontableivacreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableIvaCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableBonificaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablebonificasForeignKey==null||this.cuentacontablebonificasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableBonificasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoBonificaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostobonificasForeignKey==null||this.cuentacontablecostobonificasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyCuentasContablesLineaProductoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoReturnGeneral=new CuentasContablesLineaProductoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_empresaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_empresaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_bodegaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_bodegaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_centro_costoCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_centro_costoCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalLinea="";

				if(((this.lineasForeignKey==null||this.lineasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_lineaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_lineaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLinea()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalLinea=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

						finalQueryGlobalLinea=Funciones.GetFinalQueryAppend(finalQueryGlobalLinea, "");
						finalQueryGlobalLinea+=LineaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosLineasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalLinea=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidLineaActual();
					}
				} else {
					finalQueryGlobalLinea="NONE";
				}


				String finalQueryGlobalLineaGrupo="";

				if(((this.lineagruposForeignKey==null||this.lineagruposForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_grupoCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_grupoCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaGrupo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalLineaGrupo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

						finalQueryGlobalLineaGrupo=Funciones.GetFinalQueryAppend(finalQueryGlobalLineaGrupo, "");
						finalQueryGlobalLineaGrupo+=LineaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosLineaGruposForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalLineaGrupo=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidLineaGrupoActual();
					}
				} else {
					finalQueryGlobalLineaGrupo="NONE";
				}


				String finalQueryGlobalLineaCategoria="";

				if(((this.lineacategoriasForeignKey==null||this.lineacategoriasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_categoriaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_categoriaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaCategoria()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=LineaConstantesFunciones.getArrayColumnasGlobalesLinea(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalLineaCategoria=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LineaConstantesFunciones.TABLENAME);

						finalQueryGlobalLineaCategoria=Funciones.GetFinalQueryAppend(finalQueryGlobalLineaCategoria, "");
						finalQueryGlobalLineaCategoria+=LineaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosLineaCategoriasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalLineaCategoria=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidLineaCategoriaActual();
					}
				} else {
					finalQueryGlobalLineaCategoria="NONE";
				}


				String finalQueryGlobalCuentaContableInventario="";

				if(((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_inventarioCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_inventarioCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventario, "");
						finalQueryGlobalCuentaContableInventario+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventario=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableInventarioActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventario="NONE";
				}


				String finalQueryGlobalCuentaContableCostoVenta="";

				if(((this.cuentacontablecostoventasForeignKey==null||this.cuentacontablecostoventasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCostoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCostoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCostoVenta, "");
						finalQueryGlobalCuentaContableCostoVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCostoVenta=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableCostoVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableCostoVenta="NONE";
				}


				String finalQueryGlobalCuentaContableVenta="";

				if(((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_ventaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_ventaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableVenta, "");
						finalQueryGlobalCuentaContableVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableVenta=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableVenta="NONE";
				}


				String finalQueryGlobalCuentaContableDescuento="";

				if(((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_descuentoCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_descuentoCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDescuento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDescuento=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDescuento, "");
						finalQueryGlobalCuentaContableDescuento+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDescuento=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableDescuentoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDescuento="NONE";
				}


				String finalQueryGlobalCuentaContableProduccion="";

				if(((this.cuentacontableproduccionsForeignKey==null||this.cuentacontableproduccionsForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_produccionCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_produccionCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableProduccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableProduccion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableProduccion, "");
						finalQueryGlobalCuentaContableProduccion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableProduccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableProduccion=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableProduccionActual();
					}
				} else {
					finalQueryGlobalCuentaContableProduccion="NONE";
				}


				String finalQueryGlobalCuentaContableDevolucion="";

				if(((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_devolucionCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_devolucionCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDevolucion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDevolucion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDevolucion, "");
						finalQueryGlobalCuentaContableDevolucion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDevolucion=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableDevolucionActual();
					}
				} else {
					finalQueryGlobalCuentaContableDevolucion="NONE";
				}


				String finalQueryGlobalCuentaContableIvaDebito="";

				if(((this.cuentacontableivadebitosForeignKey==null||this.cuentacontableivadebitosForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaDebito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableIvaDebito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableIvaDebito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableIvaDebito, "");
						finalQueryGlobalCuentaContableIvaDebito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableIvaDebitosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableIvaDebito=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableIvaDebitoActual();
					}
				} else {
					finalQueryGlobalCuentaContableIvaDebito="NONE";
				}


				String finalQueryGlobalCuentaContableIvaCredito="";

				if(((this.cuentacontableivacreditosForeignKey==null||this.cuentacontableivacreditosForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableIvaCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableIvaCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableIvaCredito, "");
						finalQueryGlobalCuentaContableIvaCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableIvaCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableIvaCredito=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableIvaCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableIvaCredito="NONE";
				}


				String finalQueryGlobalCuentaContableBonifica="";

				if(((this.cuentacontablebonificasForeignKey==null||this.cuentacontablebonificasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_bonificaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_bonificaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableBonifica=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableBonifica=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableBonifica, "");
						finalQueryGlobalCuentaContableBonifica+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableBonificasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableBonifica=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableBonificaActual();
					}
				} else {
					finalQueryGlobalCuentaContableBonifica="NONE";
				}


				String finalQueryGlobalCuentaContableCostoBonifica="";

				if(((this.cuentacontablecostobonificasForeignKey==null||this.cuentacontablecostobonificasForeignKey.size()<=0) && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto)
					 || (this.esRecargarFks && this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto)) {

					if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCostoBonifica=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCostoBonifica=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCostoBonifica, "");
						finalQueryGlobalCuentaContableCostoBonifica+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCostoBonifica=" WHERE " + ConstantesSql.ID + "="+cuentascontableslineaproductoSessionBean.getlidCuentaContableCostoBonificaActual();
					}
				} else {
					finalQueryGlobalCuentaContableCostoBonifica="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.cargarCombosLoteForeignKeyCuentasContablesLineaProducto(finalQueryGlobalEmpresa,finalQueryGlobalBodega,finalQueryGlobalCentroCosto,finalQueryGlobalLinea,finalQueryGlobalLineaGrupo,finalQueryGlobalLineaCategoria,finalQueryGlobalCuentaContableInventario,finalQueryGlobalCuentaContableCostoVenta,finalQueryGlobalCuentaContableVenta,finalQueryGlobalCuentaContableDescuento,finalQueryGlobalCuentaContableProduccion,finalQueryGlobalCuentaContableDevolucion,finalQueryGlobalCuentaContableIvaDebito,finalQueryGlobalCuentaContableIvaCredito,finalQueryGlobalCuentaContableBonifica,finalQueryGlobalCuentaContableCostoBonifica);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=cuentascontableslineaproductoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=cuentascontableslineaproductoReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=cuentascontableslineaproductoReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalLinea.equals("NONE")) {
				this.lineasForeignKey=cuentascontableslineaproductoReturnGeneral.getlineasForeignKey();
			}

			if(!finalQueryGlobalLineaGrupo.equals("NONE")) {
				this.lineagruposForeignKey=cuentascontableslineaproductoReturnGeneral.getlineagruposForeignKey();
			}

			if(!finalQueryGlobalLineaCategoria.equals("NONE")) {
				this.lineacategoriasForeignKey=cuentascontableslineaproductoReturnGeneral.getlineacategoriasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventario.equals("NONE")) {
				this.cuentacontableinventariosForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontableinventariosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCostoVenta.equals("NONE")) {
				this.cuentacontablecostoventasForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontablecostoventasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableVenta.equals("NONE")) {
				this.cuentacontableventasForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontableventasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDescuento.equals("NONE")) {
				this.cuentacontabledescuentosForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontabledescuentosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableProduccion.equals("NONE")) {
				this.cuentacontableproduccionsForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontableproduccionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDevolucion.equals("NONE")) {
				this.cuentacontabledevolucionsForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontabledevolucionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableIvaDebito.equals("NONE")) {
				this.cuentacontableivadebitosForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontableivadebitosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableIvaCredito.equals("NONE")) {
				this.cuentacontableivacreditosForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontableivacreditosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableBonifica.equals("NONE")) {
				this.cuentacontablebonificasForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontablebonificasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCostoBonifica.equals("NONE")) {
				this.cuentacontablecostobonificasForeignKey=cuentascontableslineaproductoReturnGeneral.getcuentacontablecostobonificasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyCuentasContablesLineaProducto()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyLinea();
			this.addItemDefectoCombosForeignKeyLineaGrupo();
			this.addItemDefectoCombosForeignKeyLineaCategoria();
			this.addItemDefectoCombosForeignKeyCuentaContableInventario();
			this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
			this.addItemDefectoCombosForeignKeyCuentaContableVenta();
			this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
			this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
			this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
			this.addItemDefectoCombosForeignKeyCuentaContableIvaDebito();
			this.addItemDefectoCombosForeignKeyCuentaContableIvaCredito();
			this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
			this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.cuentascontableslineaproductoSessionBean==null) {
				this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLinea()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLinea()) {
				Linea linea=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(linea,Constantes.SMENSAJE_ESCOJA_OPCION);
				linea.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineasForeignKey,linea,true)) {

					this.lineasForeignKey.add(0,linea);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaGrupo()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaGrupo()) {
				Linea lineagrupo=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(lineagrupo,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineagrupo.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineagruposForeignKey,lineagrupo,true)) {

					this.lineagruposForeignKey.add(0,lineagrupo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLineaCategoria()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionLineaCategoria()) {
				Linea lineacategoria=new Linea();
				LineaConstantesFunciones.setLineaDescripcion(lineacategoria,Constantes.SMENSAJE_ESCOJA_OPCION);
				lineacategoria.setId(null);

				if(!LineaConstantesFunciones.ExisteEnLista(this.lineacategoriasForeignKey,lineacategoria,true)) {

					this.lineacategoriasForeignKey.add(0,lineacategoria);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventario()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				CuentaContable cuentacontableinventario=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventario.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventariosForeignKey,cuentacontableinventario,true)) {

					this.cuentacontableinventariosForeignKey.add(0,cuentacontableinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCostoVenta()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {
				CuentaContable cuentacontablecostoventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecostoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecostoventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostoventasForeignKey,cuentacontablecostoventa,true)) {

					this.cuentacontablecostoventasForeignKey.add(0,cuentacontablecostoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableVenta()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				CuentaContable cuentacontableventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableventasForeignKey,cuentacontableventa,true)) {

					this.cuentacontableventasForeignKey.add(0,cuentacontableventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDescuento()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				CuentaContable cuentacontabledescuento=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledescuento,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledescuento.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledescuentosForeignKey,cuentacontabledescuento,true)) {

					this.cuentacontabledescuentosForeignKey.add(0,cuentacontabledescuento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableProduccion()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {
				CuentaContable cuentacontableproduccion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableproduccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableproduccion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableproduccionsForeignKey,cuentacontableproduccion,true)) {

					this.cuentacontableproduccionsForeignKey.add(0,cuentacontableproduccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDevolucion()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				CuentaContable cuentacontabledevolucion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledevolucion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledevolucion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledevolucionsForeignKey,cuentacontabledevolucion,true)) {

					this.cuentacontabledevolucionsForeignKey.add(0,cuentacontabledevolucion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableIvaDebito()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaDebito()) {
				CuentaContable cuentacontableivadebito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableivadebito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableivadebito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableivadebitosForeignKey,cuentacontableivadebito,true)) {

					this.cuentacontableivadebitosForeignKey.add(0,cuentacontableivadebito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableIvaCredito()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIvaCredito()) {
				CuentaContable cuentacontableivacredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableivacredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableivacredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableivacreditosForeignKey,cuentacontableivacredito,true)) {

					this.cuentacontableivacreditosForeignKey.add(0,cuentacontableivacredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableBonifica()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {
				CuentaContable cuentacontablebonifica=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablebonifica,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablebonifica.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablebonificasForeignKey,cuentacontablebonifica,true)) {

					this.cuentacontablebonificasForeignKey.add(0,cuentacontablebonifica);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCostoBonifica()throws Exception {
		try {

			if(!this.cuentascontableslineaproductoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {
				CuentaContable cuentacontablecostobonifica=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecostobonifica,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecostobonifica.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostobonificasForeignKey,cuentacontablecostobonifica,true)) {

					this.cuentacontablecostobonificasForeignKey.add(0,cuentacontablecostobonifica);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyCuentasContablesLineaProducto()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyCuentasContablesLineaProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyCuentasContablesLineaProducto()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentasContablesLineaProducto();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto)throws Exception {	
		try {
			
			this.setActualBodegaForeignKey(cuentascontableslineaproducto.getid_bodega(),false,"Formulario");
			this.setActualCentroCostoForeignKey(cuentascontableslineaproducto.getid_centro_costo(),false,"Formulario");
			this.setActualLineaForeignKey(cuentascontableslineaproducto.getid_linea(),false,"Formulario");
			this.setActualLineaGrupoForeignKey(cuentascontableslineaproducto.getid_linea_grupo(),false,"Formulario");
			this.setActualLineaCategoriaForeignKey(cuentascontableslineaproducto.getid_linea_categoria(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoVentaForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_costo_venta(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableProduccionForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_produccion(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableIvaDebitoForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_iva_debito(),false,"Formulario");
			this.setActualCuentaContableIvaCreditoForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_iva_credito(),false,"Formulario");
			this.setActualCuentaContableBonificaForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_bonifica(),false,"Formulario");
			this.setActualCuentaContableCostoBonificaForeignKey(cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,String sTipoEvento)throws Exception {	
		try {
			
			

				if(cuentascontableslineaproducto.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(cuentascontableslineaproducto.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableInventario()!=null && !sTipoEvento.equals("id_cuenta_contable_inventarioCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableinventariosForeignKey.add(cuentascontableslineaproducto.getCuentaContableInventario());

					this.addItemDefectoCombosForeignKeyCuentaContableInventario();
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableCostoVenta()!=null && !sTipoEvento.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostoventasForeignKey.add(cuentascontableslineaproducto.getCuentaContableCostoVenta());

					this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
					this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableVenta()!=null && !sTipoEvento.equals("id_cuenta_contable_ventaCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableventasForeignKey.add(cuentascontableslineaproducto.getCuentaContableVenta());

					this.addItemDefectoCombosForeignKeyCuentaContableVenta();
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableDescuento()!=null && !sTipoEvento.equals("id_cuenta_contable_descuentoCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledescuentosForeignKey.add(cuentascontableslineaproducto.getCuentaContableDescuento());

					this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
					this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableProduccion()!=null && !sTipoEvento.equals("id_cuenta_contable_produccionCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableproduccionsForeignKey.add(cuentascontableslineaproducto.getCuentaContableProduccion());

					this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
					this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableDevolucion()!=null && !sTipoEvento.equals("id_cuenta_contable_devolucionCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledevolucionsForeignKey.add(cuentascontableslineaproducto.getCuentaContableDevolucion());

					this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
					this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableIvaDebito()!=null && !sTipoEvento.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableivadebitosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableivadebitosForeignKey.add(cuentascontableslineaproducto.getCuentaContableIvaDebito());

					this.addItemDefectoCombosForeignKeyCuentaContableIvaDebito();
					this.cargarCombosFrameCuentaContableIvaDebitosForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableIvaCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableivacreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableivacreditosForeignKey.add(cuentascontableslineaproducto.getCuentaContableIvaCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableIvaCredito();
					this.cargarCombosFrameCuentaContableIvaCreditosForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableBonifica()!=null && !sTipoEvento.equals("id_cuenta_contable_bonificaCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablebonificasForeignKey.add(cuentascontableslineaproducto.getCuentaContableBonifica());

					this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
					this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
				}

				if(cuentascontableslineaproducto.getCuentaContableCostoBonifica()!=null && !sTipoEvento.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostobonificasForeignKey.add(cuentascontableslineaproducto.getCuentaContableCostoBonifica());

					this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
					this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyCuentasContablesLineaProducto()throws Exception {	
		try {
			
			this.setActualBodegaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualLineaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_linea(),false,"Formulario");
			this.setActualLineaGrupoForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_linea_grupo(),false,"Formulario");
			this.setActualLineaCategoriaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_linea_categoria(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoVentaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_costo_venta(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableProduccionForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_produccion(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableIvaDebitoForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_iva_debito(),false,"Formulario");
			this.setActualCuentaContableIvaCreditoForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_iva_credito(),false,"Formulario");
			this.setActualCuentaContableBonificaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_bonifica(),false,"Formulario");
			this.setActualCuentaContableCostoBonificaForeignKey(this.cuentascontableslineaproductoConstantesFunciones.getid_cuenta_contable_costo_bonifica(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyCuentasContablesLineaProducto()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyCuentasContablesLineaProducto()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyCuentasContablesLineaProducto()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroCuentasContablesLineaProducto()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyCuentasContablesLineaProducto()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameLineasForeignKey("Todos");
			this.cargarCombosFrameLineaGruposForeignKey("Todos");
			this.cargarCombosFrameLineaCategoriasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableIvaDebitosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableIvaCreditosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyCuentasContablesLineaProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaGruposForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLineaCategoriasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableProduccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableIvaDebitosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableIvaCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableBonificasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostoBonificasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyCuentasContablesLineaProducto()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
































	
	

	public CuentasContablesLineaProductoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public CuentasContablesLineaProductoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public CuentasContablesLineaProductoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean(); 
		this.cuentascontableslineaproductoConstantesFunciones=new CuentasContablesLineaProductoConstantesFunciones(); 
		this.cuentascontableslineaproductoBean=new CuentasContablesLineaProducto();//(this.cuentascontableslineaproductoConstantesFunciones); 		
		this.cuentascontableslineaproductoReturnGeneral=new CuentasContablesLineaProductoParameterReturnGeneral(); 
		
		this.cuentascontableslineaproductoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.cuentascontableslineaproductoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public CuentasContablesLineaProductoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public CuentasContablesLineaProductoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public CuentasContablesLineaProductoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessCuentasContablesLineaProducto(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.cuentascontableslineaproductoConstantesFunciones=new CuentasContablesLineaProductoConstantesFunciones(); 
			this.cuentascontableslineaproductoBean=new CuentasContablesLineaProducto();//this.cuentascontableslineaproductoConstantesFunciones); 			
			this.cuentascontableslineaproductoReturnGeneral=new CuentasContablesLineaProductoParameterReturnGeneral(); 
		
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Cuentas Contables Linea Producto Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			
			
			this.cuentascontableslineaproducto=new CuentasContablesLineaProducto();
			this.cuentascontableslineaproductos = new ArrayList<CuentasContablesLineaProducto>();
			this.cuentascontableslineaproductosAux = new ArrayList<CuentasContablesLineaProducto>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic=new CuentasContablesLineaProductoLogic();
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			//this.cuentascontableslineaproductoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.cuentascontableslineaproductoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormCuentasContablesLineaProducto);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto);	
					}
					
					if(this.jInternalFrameImportacionCuentasContablesLineaProducto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentasContablesLineaProducto);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByCuentasContablesLineaProducto!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByCuentasContablesLineaProducto);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentasContablesLineaProducto);
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setVisible(false);
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto);
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setVisible(false);
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionCuentasContablesLineaProducto!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionCuentasContablesLineaProducto);
					this.jInternalFrameImportacionCuentasContablesLineaProducto.setVisible(false);
					this.jInternalFrameImportacionCuentasContablesLineaProducto.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByCuentasContablesLineaProducto!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByCuentasContablesLineaProducto);
					this.jInternalFrameOrderByCuentasContablesLineaProducto.setVisible(false);
					this.jInternalFrameOrderByCuentasContablesLineaProducto.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idCuentasContablesLineaProductoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=CuentasContablesLineaProductoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.cuentascontableslineaproductoReturnGeneral=new CuentasContablesLineaProductoParameterReturnGeneral();
			
			this.cuentascontableslineaproductoParameterGeneral=new CuentasContablesLineaProductoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado(),this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado(),this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			
			
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContableBonifica=true;
			this.isVisibilidadFK_IdCuentaContableCostoBonifica=true;
			this.isVisibilidadFK_IdCuentaContableCostoVenta=true;
			this.isVisibilidadFK_IdCuentaContableDescuento=true;
			this.isVisibilidadFK_IdCuentaContableDevolucion=true;
			this.isVisibilidadFK_IdCuentaContableInventario=true;
			this.isVisibilidadFK_IdCuentaContableIvaCredito=true;
			this.isVisibilidadFK_IdCuentaContableIvaDebito=true;
			this.isVisibilidadFK_IdCuentaContableProduccion=true;
			this.isVisibilidadFK_IdCuentaContableVenta=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdLinea=true;
			this.isVisibilidadFK_IdLineaCategoria=true;
			this.isVisibilidadFK_IdLineaGrupo=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosCuentasContablesLineaProducto();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioCuentasContablesLineaProducto(false);
			
			this.setPermisosUsuarioCuentasContablesLineaProducto();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado() 
				|| (this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado() && this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioCuentasContablesLineaProductoClasesRelacionadas();
			}
			
			if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioCuentasContablesLineaProductoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosCuentasContablesLineaProducto();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualCuentasContablesLineaProducto();
			}
			
			if(!this.isPermisoBusquedaCuentasContablesLineaProducto) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioCuentasContablesLineaProducto,this.isPermisoPaginacionMedioCuentasContablesLineaProducto,this.isPermisoPaginacionTodoCuentasContablesLineaProducto);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(CuentasContablesLineaProductoConstantesFunciones.getTiposSeleccionarCuentasContablesLineaProducto());
				
				this.tiposColumnasSelect=CuentasContablesLineaProductoConstantesFunciones.getTiposSeleccionarCuentasContablesLineaProducto(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioCuentasContablesLineaProducto();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioCuentasContablesLineaProducto(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioCuentasContablesLineaProducto(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentasContablesLineaProducto() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.bodegaLogic=new BodegaLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.lineaLogic=new LineaLogic();
			this.lineagrupoLogic=new LineaLogic();
			this.lineacategoriaLogic=new LineaLogic();
			this.cuentacontableinventarioLogic=new CuentaContableLogic();
			this.cuentacontablecostoventaLogic=new CuentaContableLogic();
			this.cuentacontableventaLogic=new CuentaContableLogic();
			this.cuentacontabledescuentoLogic=new CuentaContableLogic();
			this.cuentacontableproduccionLogic=new CuentaContableLogic();
			this.cuentacontabledevolucionLogic=new CuentaContableLogic();
			this.cuentacontableivadebitoLogic=new CuentaContableLogic();
			this.cuentacontableivacreditoLogic=new CuentaContableLogic();
			this.cuentacontablebonificaLogic=new CuentaContableLogic();
			this.cuentacontablecostobonificaLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				cuentascontableslineaproductoImplementable= (CuentasContablesLineaProductoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentasContablesLineaProductoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				cuentascontableslineaproductoImplementableHome= (CuentasContablesLineaProductoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentasContablesLineaProductoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.cuentascontableslineaproductos= new ArrayList<CuentasContablesLineaProducto>();
			this.cuentascontableslineaproductosEliminados= new ArrayList<CuentasContablesLineaProducto>();
						
			this.isEsNuevoCuentasContablesLineaProducto=false;
			this.esParaAccionDesdeFormularioCuentasContablesLineaProducto=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCentroCostoActual=0L;
			this.idCuentaContableInventarioActual=0L;
			this.idCuentaContableCostoVentaActual=0L;
			this.idCuentaContableVentaActual=0L;
			this.idCuentaContableDescuentoActual=0L;
			this.idCuentaContableProduccionActual=0L;
			this.idCuentaContableDevolucionActual=0L;
			this.idCuentaContableIvaDebitoActual=0L;
			this.idCuentaContableIvaCreditoActual=0L;
			this.idCuentaContableBonificaActual=0L;
			this.idCuentaContableCostoBonificaActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.lineasForeignKey=new ArrayList<Linea>() ;
			this.lineagruposForeignKey=new ArrayList<Linea>() ;
			this.lineacategoriasForeignKey=new ArrayList<Linea>() ;
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableivadebitosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableivacreditosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyCuentasContablesLineaProducto(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroCuentasContablesLineaProducto();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=CuentasContablesLineaProductoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingCuentasContablesLineaProducto(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioCuentasContablesLineaProducto();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioCuentasContablesLineaProducto();
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getTabCount(); i++) {
					this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessCuentasContablesLineaProducto(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga CuentasContablesLineaProducto: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectCuentasContablesLineaProducto() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesCuentasContablesLineaProducto")) {
				iIndex=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessCuentasContablesLineaProducto();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyCuentasContablesLineaProducto(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyCuentasContablesLineaProducto(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyCuentasContablesLineaProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyCuentasContablesLineaProductoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyCuentasContablesLineaProducto();
		
		this.cargarCombosFrameForeignKeyCuentasContablesLineaProducto();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyCuentasContablesLineaProducto();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyCuentasContablesLineaProducto();
		}
	}
	
	

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLinea(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLinea();
				this.cargarCombosFrameLineasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLinea(this.lineasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaGrupo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaGrupoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaGrupo();
				this.cargarCombosFrameLineaGruposForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaGrupo(this.lineagruposForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLineaCategoria(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLineaCategoriaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLineaCategoria();
				this.cargarCombosFrameLineaCategoriasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLineaCategoria(this.lineacategoriasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
				this.cargarCombosFrameCuentaContableCostoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCostoVenta(this.cuentacontablecostoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDescuento(this.cuentacontabledescuentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableProduccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableProduccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
				this.cargarCombosFrameCuentaContableProduccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableProduccion(this.cuentacontableproduccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDevolucion(this.cuentacontabledevolucionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIvaDebito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableIvaDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableIvaDebito();
				this.cargarCombosFrameCuentaContableIvaDebitosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableIvaDebito(this.cuentacontableivadebitosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIvaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableIvaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableIvaCredito();
				this.cargarCombosFrameCuentaContableIvaCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableIvaCredito(this.cuentacontableivacreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableBonifica(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
				this.cargarCombosFrameCuentaContableBonificasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableBonifica(this.cuentacontablebonificasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoBonifica(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
				this.cargarCombosFrameCuentaContableCostoBonificasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCostoBonifica(this.cuentacontablecostobonificasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoCuentasContablesLineaProductoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			
			if(jTableDatosCuentasContablesLineaProducto.getRowCount()>=1) {
				jTableDatosCuentasContablesLineaProducto.removeRowSelectionInterval(0, jTableDatosCuentasContablesLineaProducto.getRowCount()-1);						
			}
			
			this.isEsNuevoCuentasContablesLineaProducto=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoCuentasContablesLineaProducto(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(true);			
			//this.cuentascontableslineaproducto=new CuentasContablesLineaProducto();
			//this.cuentascontableslineaproducto.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto() ;
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentasContablesLineaProducto(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.cuentascontableslineaproducto);	
			this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);				
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar CuentasContablesLineaProducto: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarCuentasContablesLineaProductoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosCuentasContablesLineaProducto.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosCuentasContablesLineaProducto.getSelectedRows().length;			
			}
			
			cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoCuentasContablesLineaProducto--;			
				//CuentasContablesLineaProducto cuentascontableslineaproductoAux= new CuentasContablesLineaProducto();			
				//cuentascontableslineaproductoAux.setId(this.iIdNuevoCuentasContablesLineaProducto);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//CuentasContablesLineaProducto cuentascontableslineaproductoOrigen=new CuentasContablesLineaProducto();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(CuentasContablesLineaProducto cuentascontableslineaproductoOrigen : cuentascontableslineaproductosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							cuentascontableslineaproductoOrigen =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentascontableslineaproductoOrigen =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaCuentasContablesLineaProducto();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.cuentascontableslineaproducto.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosCuentasContablesLineaProducto(cuentascontableslineaproductoOrigen,this.cuentascontableslineaproducto,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().add(this.cuentascontableslineaproductoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproductos.add(this.cuentascontableslineaproductoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
				
				this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(this.getIndiceNuevoCuentasContablesLineaProducto(), this.getIndiceNuevoCuentasContablesLineaProducto());
				
				int iLastRow =  this.jTableDatosCuentasContablesLineaProducto.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentasContablesLineaProducto.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentasContablesLineaProducto.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();									
		
			CuentasContablesLineaProducto cuentascontableslineaproductoOrigen=new CuentasContablesLineaProducto();
			CuentasContablesLineaProducto cuentascontableslineaproductoDestino=new CuentasContablesLineaProducto();
				
			cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosCuentasContablesLineaProducto.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || cuentascontableslineaproductosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosCuentasContablesLineaProducto.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoOrigen =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentascontableslineaproductoOrigen =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentascontableslineaproductoDestino =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentascontableslineaproductoDestino =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				cuentascontableslineaproductoOrigen =cuentascontableslineaproductosSeleccionados.get(0);
				cuentascontableslineaproductoDestino =cuentascontableslineaproductosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosCuentasContablesLineaProducto(cuentascontableslineaproductoOrigen,cuentascontableslineaproductoDestino,true,false);
				
				cuentascontableslineaproductoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentascontableslineaproductoDestino,cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentascontableslineaproductoDestino,cuentascontableslineaproductos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
				
				//this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(this.getIndiceNuevoCuentasContablesLineaProducto(), this.getIndiceNuevoCuentasContablesLineaProducto());
				
				int iLastRow =  this.jTableDatosCuentasContablesLineaProducto.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentasContablesLineaProducto.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentasContablesLineaProducto.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesCuentasContablesLineaProducto.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(!isVisible);
			this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(!isVisible);
			this.jPanelAccionesCuentasContablesLineaProducto.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameCuentasContablesLineaProducto();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoCuentasContablesLineaProducto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionCuentasContablesLineaProducto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByCuentasContablesLineaProducto();
			
			this.abrirFrameOrderByCuentasContablesLineaProducto();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByCuentasContablesLineaProducto();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleCuentasContablesLineaProducto(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentasContablesLineaProducto);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.isMaximum()) {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSize(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.iWidthFormulario,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormCuentasContablesLineaProducto.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormCuentasContablesLineaProducto.isMaximum()) {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jContentPaneDetalleCuentasContablesLineaProducto.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jContentPaneDetalleCuentasContablesLineaProducto.getWidth(),CuentasContablesLineaProductoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jContentPaneDetalleCuentasContablesLineaProducto.getWidth(),CuentasContablesLineaProductoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jContentPaneDetalleCuentasContablesLineaProducto.getWidth(),CuentasContablesLineaProductoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setVisible(true);
	        this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByCuentasContablesLineaProducto() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByCuentasContablesLineaProducto==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByCuentasContablesLineaProducto=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentasContablesLineaProducto,false,this);
				} else {
					this.jInternalFrameOrderByCuentasContablesLineaProducto=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentasContablesLineaProducto,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByCuentasContablesLineaProducto);
				this.jInternalFrameOrderByCuentasContablesLineaProducto.setVisible(false);
				this.jInternalFrameOrderByCuentasContablesLineaProducto.setSelected(false);
				
				this.jInternalFrameOrderByCuentasContablesLineaProducto.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentasContablesLineaProducto"));
				
				this.inicializarActualizarBindingTablaOrderByCuentasContablesLineaProducto();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionCuentasContablesLineaProducto() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionCuentasContablesLineaProducto==null) {
				
				this.jInternalFrameImportacionCuentasContablesLineaProducto=new ImportacionJInternalFrame(CuentasContablesLineaProductoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentasContablesLineaProducto);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionCuentasContablesLineaProducto);
				this.jInternalFrameImportacionCuentasContablesLineaProducto.setVisible(false);
				this.jInternalFrameImportacionCuentasContablesLineaProducto.setSelected(false);


				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentasContablesLineaProducto"));
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentasContablesLineaProducto"));
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentasContablesLineaProducto"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoCuentasContablesLineaProducto() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto==null) {
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto=new ReporteDinamicoJInternalFrame(CuentasContablesLineaProductoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto);
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setVisible(false);
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentasContablesLineaProducto"));
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentasContablesLineaProducto"));
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentasContablesLineaProducto"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentasContablesLineaProducto();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleCuentasContablesLineaProducto() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentasContablesLineaProducto);
			
	       	this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setVisible(false);
	        this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSelected(false);
			
			//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.dispose();
			//this.jInternalFrameDetalleFormCuentasContablesLineaProducto=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoCuentasContablesLineaProducto() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setVisible(true);
	        this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionCuentasContablesLineaProducto() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionCuentasContablesLineaProducto.setVisible(true);
	        this.jInternalFrameImportacionCuentasContablesLineaProducto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByCuentasContablesLineaProducto() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByCuentasContablesLineaProducto.setVisible(true);
	        this.jInternalFrameOrderByCuentasContablesLineaProducto.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByCuentasContablesLineaProducto() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByCuentasContablesLineaProducto.setVisible(false);
	        this.jInternalFrameOrderByCuentasContablesLineaProducto.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoCuentasContablesLineaProducto() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setVisible(false);
	        this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionCuentasContablesLineaProducto() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionCuentasContablesLineaProducto.setVisible(false);
	        this.jInternalFrameImportacionCuentasContablesLineaProducto.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeLinea(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeLinea);
						LineaBeanSwingJInternalFrame lineaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						lineaBeanSwingJInternalFrame.setJInternalFrameParent(this);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.sTipoBusqueda="Linea";
						}

						lineaBeanSwingJInternalFrame.getTodosLineaArbol();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setLineas(lineaBeanSwingJInternalFrame.lineasArbol);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.CargarTreeLinea();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setVisible(true);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderLinea=(TitledBorder)lineaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

						titledBorderLinea.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,lineaBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(lineaBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeLinea(LineaBeanSwingJInternalFrame jInternalFrameTreeLinea) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeLinea);
						jInternalFrameTreeLinea.setVisible(false);
						jInternalFrameTreeLinea.setSelected(false);
						//jInternalFrameTreeLinea.dispose();
						//jInternalFrameTreeLinea=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeLineaGrupo(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeLinea);
						LineaBeanSwingJInternalFrame lineaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						lineaBeanSwingJInternalFrame.setJInternalFrameParent(this);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.sTipoBusqueda="LineaGrupo";
						}

						lineaBeanSwingJInternalFrame.getTodosLineaArbol();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setLineas(lineaBeanSwingJInternalFrame.lineasArbol);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.CargarTreeLinea();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setVisible(true);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderLineaGrupo=(TitledBorder)lineaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

						titledBorderLineaGrupo.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,lineaBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(lineaBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeLineaGrupo(LineaBeanSwingJInternalFrame jInternalFrameTreeLinea) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeLinea);
						jInternalFrameTreeLinea.setVisible(false);
						jInternalFrameTreeLinea.setSelected(false);
						//jInternalFrameTreeLinea.dispose();
						//jInternalFrameTreeLinea=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeLineaCategoria(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeLinea);
						LineaBeanSwingJInternalFrame lineaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						lineaBeanSwingJInternalFrame.setJInternalFrameParent(this);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.sTipoBusqueda="LineaCategoria";
						}

						lineaBeanSwingJInternalFrame.getTodosLineaArbol();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setLineas(lineaBeanSwingJInternalFrame.lineasArbol);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.CargarTreeLinea();
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setVisible(true);
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						lineaBeanSwingJInternalFrame.jInternalFrameTreeLinea.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderLineaCategoria=(TitledBorder)lineaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

						titledBorderLineaCategoria.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,lineaBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(lineaBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeLineaCategoria(LineaBeanSwingJInternalFrame jInternalFrameTreeLinea) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeLinea);
						jInternalFrameTreeLinea.setVisible(false);
						jInternalFrameTreeLinea.setSelected(false);
						//jInternalFrameTreeLinea.dispose();
						//jInternalFrameTreeLinea=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventario(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventario";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableInventario=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventario.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventario(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCostoVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCostoVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableCostoVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCostoVenta.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCostoVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableVenta.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDescuento(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDescuento";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableDescuento=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDescuento.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDescuento(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableProduccion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableProduccion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableProduccion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableProduccion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableProduccion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDevolucion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDevolucion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableDevolucion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDevolucion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDevolucion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableIvaDebito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableIvaDebito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableIvaDebito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableIvaDebito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableIvaDebito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableIvaCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableIvaCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableIvaCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableIvaCredito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableIvaCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableBonifica(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableBonifica";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableBonifica=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableBonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableBonifica(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCostoBonifica(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCostoBonifica";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
						TitledBorder titledBorderCuentaContableCostoBonifica=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCostoBonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCostoBonifica(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarCuentasContablesLineaProducto(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarCuentasContablesLineaProducto(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(true);
			//this.isEsNuevoCuentasContablesLineaProducto=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false) ;
			
			if(cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentasContablesLineaProducto(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaCuentasContablesLineaProductoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarCuentasContablesLineaProducto(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(true);
			//this.isEsNuevoCuentasContablesLineaProducto=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.cuentascontableslineaproducto.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false) ;
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentasContablesLineaProducto(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CentroCosto")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_centro_costoCuentasContablesLineaProducto) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("CuentaContableInventario")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_inventarioCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (id);

				this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

			}
			
			if(sType.equals("CuentaContableCostoVenta")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableCostoVentasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta (id);

				this.recargarComboTablaCuentaContableCostoVenta(this.cuentacontablecostoventasForeignKey);

			}
			
			if(sType.equals("CuentaContableVenta")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_ventaCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (id);

				this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

			}
			
			if(sType.equals("CuentaContableDescuento")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_descuentoCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableDescuentosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento (id);

				this.recargarComboTablaCuentaContableDescuento(this.cuentacontabledescuentosForeignKey);

			}
			
			if(sType.equals("CuentaContableProduccion")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_produccionCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableProduccionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion (id);

				this.recargarComboTablaCuentaContableProduccion(this.cuentacontableproduccionsForeignKey);

			}
			
			if(sType.equals("CuentaContableDevolucion")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_devolucionCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableDevolucionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion (id);

				this.recargarComboTablaCuentaContableDevolucion(this.cuentacontabledevolucionsForeignKey);

			}
			
			if(sType.equals("CuentaContableIvaDebito")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableIvaDebitosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableIvaDebitosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_debito (id);

				this.recargarComboTablaCuentaContableIvaDebito(this.cuentacontableivadebitosForeignKey);

			}
			
			if(sType.equals("CuentaContableIvaCredito")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableIvaCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableIvaCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_credito (id);

				this.recargarComboTablaCuentaContableIvaCredito(this.cuentacontableivacreditosForeignKey);

			}
			
			if(sType.equals("CuentaContableBonifica")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_bonificaCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableBonificasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica (id);

				this.recargarComboTablaCuentaContableBonifica(this.cuentacontablebonificasForeignKey);

			}
			
			if(sType.equals("CuentaContableCostoBonifica")) {
				if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto) {
					this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
					this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica (id);

				this.recargarComboTablaCuentaContableCostoBonifica(this.cuentacontablecostobonificasForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLinea(List<Linea> lineasForeignKey)throws Exception{
		TableColumn tableColumnLinea=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA));
		TableCellEditor tableCellEditorLinea =tableColumnLinea.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLinea;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineasForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaGrupo(List<Linea> lineagruposForeignKey)throws Exception{
		TableColumn tableColumnLineaGrupo=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO));
		TableCellEditor tableCellEditorLineaGrupo =tableColumnLineaGrupo.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLineaGrupo;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineagruposForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineagruposForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLineaCategoria(List<Linea> lineacategoriasForeignKey)throws Exception{
		TableColumn tableColumnLineaCategoria=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA));
		TableCellEditor tableCellEditorLineaCategoria =tableColumnLineaCategoria.getCellEditor();

		LineaTableCell lineaTableCellFk=(LineaTableCell)tableCellEditorLineaCategoria;

		if(lineaTableCellFk!=null) {
			lineaTableCellFk.setlineasForeignKey(lineacategoriasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//lineaTableCellFk.setRowActual(intSelectedRow);
			//lineaTableCellFk.setlineasForeignKeyActual(lineacategoriasForeignKey);
		//}


		if(lineaTableCellFk!=null) {
			lineaTableCellFk.RecargarLineasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventario(List<CuentaContable> cuentacontableinventariosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventario=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));
		TableCellEditor tableCellEditorCuentaContableInventario =tableColumnCuentaContableInventario.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventario;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventariosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCostoVenta(List<CuentaContable> cuentacontablecostoventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCostoVenta=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA));
		TableCellEditor tableCellEditorCuentaContableCostoVenta =tableColumnCuentaContableCostoVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCostoVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostoventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableVenta(List<CuentaContable> cuentacontableventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableVenta=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));
		TableCellEditor tableCellEditorCuentaContableVenta =tableColumnCuentaContableVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDescuento(List<CuentaContable> cuentacontabledescuentosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDescuento=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));
		TableCellEditor tableCellEditorCuentaContableDescuento =tableColumnCuentaContableDescuento.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDescuento;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledescuentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledescuentosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableProduccion(List<CuentaContable> cuentacontableproduccionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableProduccion=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION));
		TableCellEditor tableCellEditorCuentaContableProduccion =tableColumnCuentaContableProduccion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableProduccion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableproduccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableproduccionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDevolucion(List<CuentaContable> cuentacontabledevolucionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDevolucion=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));
		TableCellEditor tableCellEditorCuentaContableDevolucion =tableColumnCuentaContableDevolucion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDevolucion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledevolucionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledevolucionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableIvaDebito(List<CuentaContable> cuentacontableivadebitosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableIvaDebito=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO));
		TableCellEditor tableCellEditorCuentaContableIvaDebito =tableColumnCuentaContableIvaDebito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableIvaDebito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableivadebitosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableivadebitosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableIvaCredito(List<CuentaContable> cuentacontableivacreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableIvaCredito=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO));
		TableCellEditor tableCellEditorCuentaContableIvaCredito =tableColumnCuentaContableIvaCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableIvaCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableivacreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableivacreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableBonifica(List<CuentaContable> cuentacontablebonificasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableBonifica=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA));
		TableCellEditor tableCellEditorCuentaContableBonifica =tableColumnCuentaContableBonifica.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableBonifica;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablebonificasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablebonificasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCostoBonifica(List<CuentaContable> cuentacontablecostobonificasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCostoBonifica=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA));
		TableCellEditor tableCellEditorCuentaContableCostoBonifica =tableColumnCuentaContableCostoBonifica.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCostoBonifica;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostobonificasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostobonificasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (Long id) throws Exception {
		this.setActualCuentaContableInventarioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta (Long id) throws Exception {
		this.setActualCuentaContableCostoVentaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (Long id) throws Exception {
		this.setActualCuentaContableVentaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento (Long id) throws Exception {
		this.setActualCuentaContableDescuentoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion (Long id) throws Exception {
		this.setActualCuentaContableProduccionForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion (Long id) throws Exception {
		this.setActualCuentaContableDevolucionForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_debito (Long id) throws Exception {
		this.setActualCuentaContableIvaDebitoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_credito (Long id) throws Exception {
		this.setActualCuentaContableIvaCreditoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica (Long id) throws Exception {
		this.setActualCuentaContableBonificaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica (Long id) throws Exception {
		this.setActualCuentaContableCostoBonificaForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesCuentasContablesLineaProducto(false);
			
			//if(!this.isEsNuevoCuentasContablesLineaProducto) {								
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				
			}
			
			if(this.permiteMantenimiento(this.cuentascontableslineaproducto)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoCuentasContablesLineaProducto=true;
					this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
					this.isEsNuevoCuentasContablesLineaProducto=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoCuentasContablesLineaProducto=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoCuentasContablesLineaProducto=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(false);
				
				this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(false);
			
												
				
				if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleCuentasContablesLineaProducto();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,cuentascontableslineaproductoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,cuentascontableslineaproductoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.cuentascontableslineaproducto.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				this.cuentascontableslineaproducto.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				this.cuentascontableslineaproducto.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.cuentascontableslineaproducto)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((CuentasContablesLineaProductoModel) this.jTableDatosCuentasContablesLineaProducto.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoCuentasContablesLineaProducto=true;
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
				this.isEsNuevoCuentasContablesLineaProducto=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(false);
				
				this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(false);
				
				
				
				if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleCuentasContablesLineaProducto();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosCuentasContablesLineaProducto.getRowCount()>=1) {
				jTableDatosCuentasContablesLineaProducto.removeRowSelectionInterval(0, jTableDatosCuentasContablesLineaProducto.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesCuentasContablesLineaProducto(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(false) ;
			
			this.isEsNuevoCuentasContablesLineaProducto=false;
			
			if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleCuentasContablesLineaProducto();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				
				//SI ES MANUAL
				if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoCuentasContablesLineaProducto--;			
			//CuentasContablesLineaProducto cuentascontableslineaproductoAux= new CuentasContablesLineaProducto();			
			//cuentascontableslineaproductoAux.setId(this.iIdNuevoCuentasContablesLineaProducto);
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaCuentasContablesLineaProducto();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
			
			this.cuentascontableslineaproducto.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().add(this.cuentascontableslineaproductoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.cuentascontableslineaproductos.add(this.cuentascontableslineaproductoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			
			this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(this.getIndiceNuevoCuentasContablesLineaProducto(), this.getIndiceNuevoCuentasContablesLineaProducto());
			
			int iLastRow =  this.jTableDatosCuentasContablesLineaProducto.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosCuentasContablesLineaProducto.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosCuentasContablesLineaProducto.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
			
			//SI ES MANUAL
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();
			}
			
			//this.abrirFrameTreeCuentasContablesLineaProducto();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Cuentas Contables Linea ProductoES ?", "MANTENIMIENTO DE Cuentas Contables Linea Producto", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionCuentasContablesLineaProducto.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralCuentasContablesLineaProducto();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.procesarImportacionCuentasContablesLineaProductosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.cuentascontableslineaproductoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarCuentasContablesLineaProductoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionCuentasContablesLineaProducto.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionCuentasContablesLineaProducto.setFileImportacion(this.jInternalFrameImportacionCuentasContablesLineaProducto.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionCuentasContablesLineaProducto.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionCuentasContablesLineaProducto.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		

		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("CuentasContablesLineaProductoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"CuentasContablesLineaProductoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Linea_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Linea_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Linea_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Linea_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_LineaGrupo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_LineaGrupo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_LineaGrupo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_LineaGrupo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_LineaCategoria_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_LineaCategoria_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_LineaCategoria_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_LineaCategoria_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCostoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCostoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCostoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCostoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableProduccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableProduccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableProduccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableProduccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDevolucion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDevolucion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDevolucion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDevolucion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableIvaDebito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableIvaDebito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableIvaDebito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableIvaDebito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableIvaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableIvaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableIvaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableIvaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableBonifica_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableBonifica_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableBonifica_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableBonifica_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCostoBonifica_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCostoBonifica_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCostoBonifica_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCostoBonifica_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA:
					sNombreCampoCategoria="id_linea";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO:
					sNombreCampoCategoria="id_linea_grupo";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA:
					sNombreCampoCategoria="id_linea_categoria";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoria="id_cuenta_contable_inventario";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					sNombreCampoCategoria="id_cuenta_contable_costo_venta";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoria="id_cuenta_contable_venta";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoria="id_cuenta_contable_descuento";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					sNombreCampoCategoria="id_cuenta_contable_produccion";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoria="id_cuenta_contable_devolucion";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO:
					sNombreCampoCategoria="id_cuenta_contable_iva_debito";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO:
					sNombreCampoCategoria="id_cuenta_contable_iva_credito";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					sNombreCampoCategoria="id_cuenta_contable_bonifica";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					sNombreCampoCategoria="id_cuenta_contable_costo_bonifica";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA:
					sNombreCampoCategoriaValor="id_linea";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO:
					sNombreCampoCategoriaValor="id_linea_grupo";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA:
					sNombreCampoCategoriaValor="id_linea_categoria";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo_venta";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_venta";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_descuento";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_produccion";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_devolucion";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_iva_debito";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_iva_credito";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					sNombreCampoCategoriaValor="id_cuenta_contable_bonifica";
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo_bonifica";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Linea",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_linea");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Linea Grupo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_linea_grupo");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Linea Categoria",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_linea_categoria");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Costo Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo_venta");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_venta");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_descuento");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Produccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_produccion");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Devolucion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_devolucion");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Iva Debito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_iva_debito");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Iva Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_iva_credito");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Bonifica",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_bonifica");
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Costo Bonifica",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo_bonifica");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("CuentasContablesLineaProductos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getlinea_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getlineagrupo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getlineacategoria_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontableinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontableventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledescuento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontableproduccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivadebito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivacredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontablebonifica_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
					iRow++;

					for(CuentasContablesLineaProducto cuentascontableslineaproducto:cuentascontableslineaproductosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelCuentasContablesLineaProducto(row);				
			//	iRow++;
			//}				
			
			//for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelCuentasContablesLineaProducto(cuentascontableslineaproductoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
			
			//SI ES MANUAL
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
			
			//SI ES MANUAL
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
			
			//SI ES MANUAL
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentasContablesLineaProducto();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaCuentasContablesLineaProducto() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosCuentasContablesLineaProducto.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosCuentasContablesLineaProducto.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosCuentasContablesLineaProducto.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosCuentasContablesLineaProducto.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosCuentasContablesLineaProducto.setMinimumSize(dimensionMinimum);
		this.jTableDatosCuentasContablesLineaProducto.setMaximumSize(dimensionMaximum);
		this.jTableDatosCuentasContablesLineaProducto.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingCuentasContablesLineaProducto(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingCuentasContablesLineaProducto(esInicializar,true);
	}
	
	public void inicializarActualizarBindingCuentasContablesLineaProducto(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasCuentasContablesLineaProducto(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentasContablesLineaProducto(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesCuentasContablesLineaProducto(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualCuentasContablesLineaProducto() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaCuentasContablesLineaProducto();
		
		this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualCuentasContablesLineaProducto();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentasContablesLineaProducto() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualCuentasContablesLineaProducto(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualCuentasContablesLineaProducto(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosCuentasContablesLineaProducto.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosCuentasContablesLineaProducto.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteCuentasContablesLineaProducto.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionNuevoCuentasContablesLineaProducto.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionSinCerrarCuentasContablesLineaProducto.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionSinMensajeCuentasContablesLineaProducto.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosCuentasContablesLineaProducto.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosCuentasContablesLineaProducto.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteCuentasContablesLineaProducto.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionNuevoCuentasContablesLineaProducto.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionSinCerrarCuentasContablesLineaProducto.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jCheckBoxPostAccionSinMensajeCuentasContablesLineaProducto.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesCuentasContablesLineaProducto.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralCuentasContablesLineaProducto.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesCuentasContablesLineaProducto(Boolean esInicializar) throws Exception {
		try	{	
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualCuentasContablesLineaProducto(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesCuentasContablesLineaProducto() throws Exception {
		try	{
			if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentasContablesLineaProducto();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentasContablesLineaProducto() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentasContablesLineaProducto() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesCuentasContablesLineaProducto.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesCuentasContablesLineaProducto.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesCuentasContablesLineaProducto.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.addItem(reporte);
			}
			
			
			if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionCuentasContablesLineaProducto.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesCuentasContablesLineaProducto.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesCuentasContablesLineaProducto.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentasContablesLineaProducto();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentasContablesLineaProducto() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
				
				if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualCuentasContablesLineaProducto()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaCuentasContablesLineaProducto.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoCuentasContablesLineaProducto.getSelectedItem()).getId();}
		if(this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.getSelectedItem()!=null){this.id_lineaFK_IdLinea=((Linea)this.jComboBoxid_lineaFK_IdLineaCuentasContablesLineaProducto.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasCuentasContablesLineaProducto(Boolean esInicializar) throws Exception {				
		if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualCuentasContablesLineaProducto();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaCuentasContablesLineaProducto() throws Exception {
		this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByCuentasContablesLineaProducto() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosCuentasContablesLineaProductoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProductoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaCuentasContablesLineaProducto(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=cuentascontableslineaproductos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosCuentasContablesLineaProducto.setModel(new CuentasContablesLineaProductoModel(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosCuentasContablesLineaProducto.setModel(new CuentasContablesLineaProductoModel(this.cuentascontableslineaproductos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByCuentasContablesLineaProducto!=null && this.jInternalFrameOrderByCuentasContablesLineaProducto.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByCuentasContablesLineaProducto();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+CuentasContablesLineaProductoConstantesFunciones.SCLASSWEBTITULO,cuentascontableslineaproductoConstantesFunciones.resaltarSeleccionarCuentasContablesLineaProducto,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+CuentasContablesLineaProductoConstantesFunciones.SCLASSWEBTITULO,cuentascontableslineaproductoConstantesFunciones.resaltarSeleccionarCuentasContablesLineaProducto,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_ID));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostraridCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cuentascontableslineaproductoConstantesFunciones.resaltaridCuentasContablesLineaProducto,this.cuentascontableslineaproductoConstantesFunciones.activaridCuentasContablesLineaProducto,this,true,"idCuentasContablesLineaProducto","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentascontableslineaproductoConstantesFunciones.resaltaridCuentasContablesLineaProducto,this.cuentascontableslineaproductoConstantesFunciones.activaridCuentasContablesLineaProducto,this,true,"idCuentasContablesLineaProducto","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_empresaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_empresaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_empresaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_empresaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_empresaCuentasContablesLineaProducto,false,"id_empresaCuentasContablesLineaProducto","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_bodegaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_bodegaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_bodegaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_bodegaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_bodegaCuentasContablesLineaProducto,true,"id_bodegaCuentasContablesLineaProducto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_centro_costoCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_centro_costoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_centro_costoCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_centro_costoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_centro_costoCuentasContablesLineaProducto,true,"id_centro_costoCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_lineaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new LineaTableCell(this.lineasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_lineaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_lineaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new LineaTableCell(this.lineasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_lineaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_lineaCuentasContablesLineaProducto,true,"id_lineaCuentasContablesLineaProducto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_grupoCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new LineaTableCell(this.lineagruposForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_grupoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_grupoCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new LineaTableCell(this.lineagruposForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_grupoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_grupoCuentasContablesLineaProducto,true,"id_linea_grupoCuentasContablesLineaProducto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_categoriaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new LineaTableCell(this.lineacategoriasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_categoriaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_categoriaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new LineaTableCell(this.lineacategoriasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_categoriaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_categoriaCuentasContablesLineaProducto,true,"id_linea_categoriaCuentasContablesLineaProducto","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_inventarioCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_inventarioCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_inventarioCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_inventarioCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_inventarioCuentasContablesLineaProducto,true,"id_cuenta_contable_inventarioCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostoventasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostoventasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto,true,"id_cuenta_contable_costo_ventaCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_ventaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_ventaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_ventaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_ventaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_ventaCuentasContablesLineaProducto,true,"id_cuenta_contable_ventaCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_descuentoCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_descuentoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_descuentoCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_descuentoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_descuentoCuentasContablesLineaProducto,true,"id_cuenta_contable_descuentoCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_produccionCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableproduccionsForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_produccionCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_produccionCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableproduccionsForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_produccionCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_produccionCuentasContablesLineaProducto,true,"id_cuenta_contable_produccionCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_devolucionCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_devolucionCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_devolucionCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_devolucionCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_devolucionCuentasContablesLineaProducto,true,"id_cuenta_contable_devolucionCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableivadebitosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableivadebitosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto,true,"id_cuenta_contable_iva_debitoCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableivacreditosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableivacreditosForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto,true,"id_cuenta_contable_iva_creditoCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_bonificaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablebonificasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_bonificaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_bonificaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablebonificasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_bonificaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_bonificaCuentasContablesLineaProducto,true,"id_cuenta_contable_bonificaCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA));

		if(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostobonificasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostobonificasForeignKey,this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto,this,this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto,true,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentasContablesLineaProductoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentasContablesLineaProducto.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentasContablesLineaProducto.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosCuentasContablesLineaProducto.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosCuentasContablesLineaProducto.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosCuentasContablesLineaProducto.moveColumn(this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosCuentasContablesLineaProducto.moveColumn(this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosCuentasContablesLineaProducto.moveColumn(this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosCuentasContablesLineaProducto.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosCuentasContablesLineaProducto.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosCuentasContablesLineaProducto,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosCuentasContablesLineaProducto.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosCuentasContablesLineaProducto.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosCuentasContablesLineaProducto.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=cuentascontableslineaproductos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosCuentasContablesLineaProducto.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosCuentasContablesLineaProducto.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosCuentasContablesLineaProducto();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoCuentasContablesLineaProducto=false;
					
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
				if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentasContablesLineaProducto.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.cuentascontableslineaproducto.getsType().equals("DUPLICADO")
				   || this.cuentascontableslineaproducto.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoCuentasContablesLineaProducto=true;
				
				} else {
					this.isEsNuevoCuentasContablesLineaProducto=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					if(this.cuentascontableslineaproducto.getId()>=0 && !this.cuentascontableslineaproducto.getIsNew()) {						
						this.isEsNuevoCuentasContablesLineaProducto=false;
						
					} else {
						this.isEsNuevoCuentasContablesLineaProducto=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoCuentasContablesLineaProducto(esRelaciones);						
				
				this.seleccionarCuentasContablesLineaProducto(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.cuentascontableslineaproducto.getId()<0) {
					this.isEsNuevoCuentasContablesLineaProducto=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarCuentasContablesLineaProducto(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarCuentasContablesLineaProducto(evt,rowIndex);
				}	
				
				if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion CuentasContablesLineaProducto: " + this.dDif); 
					}
				}								
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarCuentasContablesLineaProducto(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.cuentascontableslineaproducto)) {
					if(this.cuentascontableslineaproducto.getId()>0) {
						this.cuentascontableslineaproducto.setIsDeleted(true);
						
						this.cuentascontableslineaproductosEliminados.add(this.cuentascontableslineaproducto);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().remove(this.cuentascontableslineaproducto);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproductos.remove(this.cuentascontableslineaproducto);				
					}
					
					
					((CuentasContablesLineaProductoModel) this.jTableDatosCuentasContablesLineaProducto.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarCuentasContablesLineaProducto(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoCuentasContablesLineaProducto) {
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentasContablesLineaProducto.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_empresaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_empresaCuentasContablesLineaProducto) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_empresa());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(cuentascontableslineaproducto.getEmpresa()!=null) {
							this.empresasForeignKey.add(cuentascontableslineaproducto.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.cuentascontableslineaproducto.getid_empresa(),false,"Formulario");

					//Bodega
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_bodegaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_bodegaCuentasContablesLineaProducto) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_bodega());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(cuentascontableslineaproducto.getBodega()!=null) {
							this.bodegasForeignKey.add(cuentascontableslineaproducto.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.cuentascontableslineaproducto.getid_bodega(),false,"Formulario");

					//CentroCosto
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_centro_costoCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_centro_costoCuentasContablesLineaProducto) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_centro_costo());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(cuentascontableslineaproducto.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(cuentascontableslineaproducto.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.cuentascontableslineaproducto.getid_centro_costo(),false,"Formulario");

					//Linea
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_lineaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_lineaCuentasContablesLineaProducto) {
						//this.cargarCombosLineasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_linea());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.lineasForeignKey=new ArrayList<Linea>();

						if(cuentascontableslineaproducto.getLinea()!=null) {
							this.lineasForeignKey.add(cuentascontableslineaproducto.getLinea());
						}

						this.addItemDefectoCombosForeignKeyLinea();
						this.cargarCombosFrameLineasForeignKey("Todos");
					}
					this.setActualLineaForeignKey(this.cuentascontableslineaproducto.getid_linea(),false,"Formulario");

					//LineaGrupo
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_grupoCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_linea_grupoCuentasContablesLineaProducto) {
						//this.cargarCombosLineaGruposForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_linea_grupo());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.lineagruposForeignKey=new ArrayList<Linea>();

						if(cuentascontableslineaproducto.getLineaGrupo()!=null) {
							this.lineagruposForeignKey.add(cuentascontableslineaproducto.getLineaGrupo());
						}

						this.addItemDefectoCombosForeignKeyLineaGrupo();
						this.cargarCombosFrameLineaGruposForeignKey("Todos");
					}
					this.setActualLineaGrupoForeignKey(this.cuentascontableslineaproducto.getid_linea_grupo(),false,"Formulario");

					//LineaCategoria
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_linea_categoriaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_linea_categoriaCuentasContablesLineaProducto) {
						//this.cargarCombosLineaCategoriasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_linea_categoria());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.lineacategoriasForeignKey=new ArrayList<Linea>();

						if(cuentascontableslineaproducto.getLineaCategoria()!=null) {
							this.lineacategoriasForeignKey.add(cuentascontableslineaproducto.getLineaCategoria());
						}

						this.addItemDefectoCombosForeignKeyLineaCategoria();
						this.cargarCombosFrameLineaCategoriasForeignKey("Todos");
					}
					this.setActualLineaCategoriaForeignKey(this.cuentascontableslineaproducto.getid_linea_categoria(),false,"Formulario");

					//CuentaContableInventario
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_inventarioCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_inventarioCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_inventario());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableInventario()!=null) {
							this.cuentacontableinventariosForeignKey.add(cuentascontableslineaproducto.getCuentaContableInventario());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventario();
						this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario(),false,"Formulario");

					//CuentaContableCostoVenta
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_costo_ventaCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableCostoVentasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableCostoVenta()!=null) {
							this.cuentacontablecostoventasForeignKey.add(cuentascontableslineaproducto.getCuentaContableCostoVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
						this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
					}
					this.setActualCuentaContableCostoVentaForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta(),false,"Formulario");

					//CuentaContableVenta
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_ventaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_ventaCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_venta());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableVenta()!=null) {
							this.cuentacontableventasForeignKey.add(cuentascontableslineaproducto.getCuentaContableVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableVenta();
						this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
					}
					this.setActualCuentaContableVentaForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_venta(),false,"Formulario");

					//CuentaContableDescuento
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_descuentoCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_descuentoCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_descuento());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableDescuento()!=null) {
							this.cuentacontabledescuentosForeignKey.add(cuentascontableslineaproducto.getCuentaContableDescuento());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
						this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
					}
					this.setActualCuentaContableDescuentoForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento(),false,"Formulario");

					//CuentaContableProduccion
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_produccionCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_produccionCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableProduccionsForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_produccion());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableProduccion()!=null) {
							this.cuentacontableproduccionsForeignKey.add(cuentascontableslineaproducto.getCuentaContableProduccion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
						this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
					}
					this.setActualCuentaContableProduccionForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion(),false,"Formulario");

					//CuentaContableDevolucion
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_devolucionCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_devolucionCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableDevolucion()!=null) {
							this.cuentacontabledevolucionsForeignKey.add(cuentascontableslineaproducto.getCuentaContableDevolucion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
						this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
					}
					this.setActualCuentaContableDevolucionForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion(),false,"Formulario");

					//CuentaContableIvaDebito
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_iva_debitoCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableIvaDebitosForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontableivadebitosForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableIvaDebito()!=null) {
							this.cuentacontableivadebitosForeignKey.add(cuentascontableslineaproducto.getCuentaContableIvaDebito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableIvaDebito();
						this.cargarCombosFrameCuentaContableIvaDebitosForeignKey("Todos");
					}
					this.setActualCuentaContableIvaDebitoForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito(),false,"Formulario");

					//CuentaContableIvaCredito
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_iva_creditoCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableIvaCreditosForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontableivacreditosForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableIvaCredito()!=null) {
							this.cuentacontableivacreditosForeignKey.add(cuentascontableslineaproducto.getCuentaContableIvaCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableIvaCredito();
						this.cargarCombosFrameCuentaContableIvaCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableIvaCreditoForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito(),false,"Formulario");

					//CuentaContableBonifica
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_bonificaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_bonificaCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableBonificasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableBonifica()!=null) {
							this.cuentacontablebonificasForeignKey.add(cuentascontableslineaproducto.getCuentaContableBonifica());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
						this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
					}
					this.setActualCuentaContableBonificaForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica(),false,"Formulario");

					//CuentaContableCostoBonifica
					if(!this.cuentascontableslineaproductoConstantesFunciones.cargarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto || this.cuentascontableslineaproductoConstantesFunciones.event_dependid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto) {
						//this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(" where id="+this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica());
									//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
						this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();

						if(cuentascontableslineaproducto.getCuentaContableCostoBonifica()!=null) {
							this.cuentacontablecostobonificasForeignKey.add(cuentascontableslineaproducto.getCuentaContableCostoBonifica());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
						this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
					}
					this.setActualCuentaContableCostoBonificaForeignKey(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesCuentasContablesLineaProducto("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesCuentasContablesLineaProducto(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoCuentasContablesLineaProducto(cuentascontableslineaproducto,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(cuentascontableslineaproducto);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyCuentasContablesLineaProducto(cuentascontableslineaproducto,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyCuentasContablesLineaProducto(cuentascontableslineaproducto);
	}
	
	public void setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setText(cuentascontableslineaproducto.getId().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,CuentasContablesLineaProducto cuentascontableslineaproductoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,cuentascontableslineaproductoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,CuentasContablesLineaProducto cuentascontableslineaproductoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				cuentascontableslineaproductoLocal=this.cuentascontableslineaproducto;
			} else {
				cuentascontableslineaproductoLocal=this.cuentascontableslineaproductoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(cuentascontableslineaproductoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoCuentasContablesLineaProducto(cuentascontableslineaproductoLocal,true);
					
					if(cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(cuentascontableslineaproductoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(cuentascontableslineaproductoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(cuentascontableslineaproducto,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(cuentascontableslineaproducto);
	}
	
	public void setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(cuentascontableslineaproducto,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.getText()==null || this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.getText()=="" || this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.getText()=="Id") {
				this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setText("0");
			}

			if(conColumnasBase) {cuentascontableslineaproducto.setId(Long.parseLong(this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentasContablesLineaProductoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelIdCuentasContablesLineaProducto,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproductoBean,CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_bodega()!=null && !cuentascontableslineaproductoBean.getid_bodega().equals(-1L))) {cuentascontableslineaproducto.setid_bodega(cuentascontableslineaproductoBean.getid_bodega());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_centro_costo()!=null && !cuentascontableslineaproductoBean.getid_centro_costo().equals(null))) {cuentascontableslineaproducto.setid_centro_costo(cuentascontableslineaproductoBean.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_linea()!=null && !cuentascontableslineaproductoBean.getid_linea().equals(-1L))) {cuentascontableslineaproducto.setid_linea(cuentascontableslineaproductoBean.getid_linea());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_linea_grupo()!=null && !cuentascontableslineaproductoBean.getid_linea_grupo().equals(-1L))) {cuentascontableslineaproducto.setid_linea_grupo(cuentascontableslineaproductoBean.getid_linea_grupo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_linea_categoria()!=null && !cuentascontableslineaproductoBean.getid_linea_categoria().equals(-1L))) {cuentascontableslineaproducto.setid_linea_categoria(cuentascontableslineaproductoBean.getid_linea_categoria());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_inventario()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_inventario().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_inventario(cuentascontableslineaproductoBean.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_costo_venta()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_costo_venta().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_costo_venta(cuentascontableslineaproductoBean.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_venta()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_venta().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_venta(cuentascontableslineaproductoBean.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_descuento()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_descuento().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_descuento(cuentascontableslineaproductoBean.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_produccion()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_produccion().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_produccion(cuentascontableslineaproductoBean.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_devolucion()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_devolucion().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_devolucion(cuentascontableslineaproductoBean.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_iva_debito()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_iva_debito().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_iva_debito(cuentascontableslineaproductoBean.getid_cuenta_contable_iva_debito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_iva_credito()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_iva_credito().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_iva_credito(cuentascontableslineaproductoBean.getid_cuenta_contable_iva_credito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_bonifica()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_bonifica().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_bonifica(cuentascontableslineaproductoBean.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoBean.getid_cuenta_contable_costo_bonifica()!=null && !cuentascontableslineaproductoBean.getid_cuenta_contable_costo_bonifica().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_costo_bonifica(cuentascontableslineaproductoBean.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproductoOrigen,CuentasContablesLineaProducto cuentascontableslineaproducto,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getId()!=null && !cuentascontableslineaproductoOrigen.getId().equals(0L))) {cuentascontableslineaproducto.setId(cuentascontableslineaproductoOrigen.getId());}}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_bodega()!=null && !cuentascontableslineaproductoOrigen.getid_bodega().equals(-1L))) {cuentascontableslineaproducto.setid_bodega(cuentascontableslineaproductoOrigen.getid_bodega());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_centro_costo()!=null && !cuentascontableslineaproductoOrigen.getid_centro_costo().equals(null))) {cuentascontableslineaproducto.setid_centro_costo(cuentascontableslineaproductoOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_linea()!=null && !cuentascontableslineaproductoOrigen.getid_linea().equals(-1L))) {cuentascontableslineaproducto.setid_linea(cuentascontableslineaproductoOrigen.getid_linea());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_linea_grupo()!=null && !cuentascontableslineaproductoOrigen.getid_linea_grupo().equals(-1L))) {cuentascontableslineaproducto.setid_linea_grupo(cuentascontableslineaproductoOrigen.getid_linea_grupo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_linea_categoria()!=null && !cuentascontableslineaproductoOrigen.getid_linea_categoria().equals(-1L))) {cuentascontableslineaproducto.setid_linea_categoria(cuentascontableslineaproductoOrigen.getid_linea_categoria());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_inventario()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_inventario().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_inventario(cuentascontableslineaproductoOrigen.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_venta()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_venta().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_costo_venta(cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_venta()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_venta().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_venta(cuentascontableslineaproductoOrigen.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_descuento()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_descuento().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_descuento(cuentascontableslineaproductoOrigen.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_produccion()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_produccion().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_produccion(cuentascontableslineaproductoOrigen.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_devolucion()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_devolucion().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_devolucion(cuentascontableslineaproductoOrigen.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_debito()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_debito().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_iva_debito(cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_debito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_credito()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_credito().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_iva_credito(cuentascontableslineaproductoOrigen.getid_cuenta_contable_iva_credito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_bonifica()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_bonifica().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_bonifica(cuentascontableslineaproductoOrigen.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_bonifica()!=null && !cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_bonifica().equals(-1L))) {cuentascontableslineaproducto.setid_cuenta_contable_costo_bonifica(cuentascontableslineaproductoOrigen.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setText(cuentascontableslineaproducto.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentasContablesLineaProducto(CuentasContablesLineaProductoBean cuentascontableslineaproductoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setText(cuentascontableslineaproductoBean.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanCuentasContablesLineaProducto(CuentasContablesLineaProductoParameterReturnGeneral cuentascontableslineaproductoReturnGeneral,CuentasContablesLineaProductoBean cuentascontableslineaproductoBean,Boolean conDefault) throws Exception { 
		try {
			CuentasContablesLineaProducto cuentascontableslineaproductoLocal=new CuentasContablesLineaProducto();
			
			cuentascontableslineaproductoLocal=cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getId()!=null && !cuentascontableslineaproductoLocal.getId().equals(0L))) {cuentascontableslineaproductoBean.setId(cuentascontableslineaproductoLocal.getId());}}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_bodega()!=null && !cuentascontableslineaproductoLocal.getid_bodega().equals(-1L))) {cuentascontableslineaproductoBean.setid_bodega(cuentascontableslineaproductoLocal.getid_bodega());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_centro_costo()!=null && !cuentascontableslineaproductoLocal.getid_centro_costo().equals(null))) {cuentascontableslineaproductoBean.setid_centro_costo(cuentascontableslineaproductoLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_linea()!=null && !cuentascontableslineaproductoLocal.getid_linea().equals(-1L))) {cuentascontableslineaproductoBean.setid_linea(cuentascontableslineaproductoLocal.getid_linea());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_linea_grupo()!=null && !cuentascontableslineaproductoLocal.getid_linea_grupo().equals(-1L))) {cuentascontableslineaproductoBean.setid_linea_grupo(cuentascontableslineaproductoLocal.getid_linea_grupo());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_linea_categoria()!=null && !cuentascontableslineaproductoLocal.getid_linea_categoria().equals(-1L))) {cuentascontableslineaproductoBean.setid_linea_categoria(cuentascontableslineaproductoLocal.getid_linea_categoria());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_inventario()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_inventario().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_inventario(cuentascontableslineaproductoLocal.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_venta()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_venta().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_costo_venta(cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_venta()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_venta().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_venta(cuentascontableslineaproductoLocal.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_descuento()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_descuento().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_descuento(cuentascontableslineaproductoLocal.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_produccion()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_produccion().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_produccion(cuentascontableslineaproductoLocal.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_devolucion()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_devolucion().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_devolucion(cuentascontableslineaproductoLocal.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_debito()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_debito().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_iva_debito(cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_debito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_credito()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_credito().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_iva_credito(cuentascontableslineaproductoLocal.getid_cuenta_contable_iva_credito());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_bonifica()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_bonifica().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_bonifica(cuentascontableslineaproductoLocal.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_bonifica()!=null && !cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_bonifica().equals(-1L))) {cuentascontableslineaproductoBean.setid_cuenta_contable_costo_bonifica(cuentascontableslineaproductoLocal.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxCuentasContablesLineaProductoGenerico(Long idCuentasContablesLineaProductoSeleccionado,JComboBox jComboBoxCuentasContablesLineaProducto,List<CuentasContablesLineaProducto> cuentascontableslineaproductosLocal)throws Exception {
		try {
			CuentasContablesLineaProducto  cuentascontableslineaproductoTemp=null;

			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosLocal) {
				if(cuentascontableslineaproductoAux.getId()!=null && cuentascontableslineaproductoAux.getId().equals(idCuentasContablesLineaProductoSeleccionado)) {
					cuentascontableslineaproductoTemp=cuentascontableslineaproductoAux;
					break;
				}
			}

			jComboBoxCuentasContablesLineaProducto.setSelectedItem(cuentascontableslineaproductoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxCuentasContablesLineaProductoGenerico(JComboBox jComboBoxCuentasContablesLineaProducto,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxCuentasContablesLineaProducto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentasContablesLineaProducto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxCuentasContablesLineaProducto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentasContablesLineaProducto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentasContablesLineaProducto.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxCuentasContablesLineaProducto.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentasContablesLineaProducto.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxCuentasContablesLineaProducto.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxCuentasContablesLineaProducto.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxCuentasContablesLineaProducto.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentascontableslineaproducto=(CuentasContablesLineaProducto) cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentascontableslineaproducto =(CuentasContablesLineaProducto) cuentascontableslineaproductos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getbodega_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("Linea")) {
			//sDescripcion=this.getActualLineaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getlinea_descripcion();
			} else {
				//sDescripcion=this.getActualLineaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getlinea_descripcion();
			}
		}

		if(sTipo.equals("LineaGrupo")) {
			//sDescripcion=this.getActualLineaGrupoForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getlineagrupo_descripcion();
			} else {
				//sDescripcion=this.getActualLineaGrupoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getlineagrupo_descripcion();
			}
		}

		if(sTipo.equals("LineaCategoria")) {
			//sDescripcion=this.getActualLineaCategoriaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getlineacategoria_descripcion();
			} else {
				//sDescripcion=this.getActualLineaCategoriaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getlineacategoria_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventario")) {
			//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontableinventario_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontableinventario_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCostoVenta")) {
			//sDescripcion=this.getActualCuentaContableCostoVentaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableVenta")) {
			//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontableventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontableventa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDescuento")) {
			//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontabledescuento_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontabledescuento_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableProduccion")) {
			//sDescripcion=this.getActualCuentaContableProduccionForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontableproduccion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableProduccionForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontableproduccion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDevolucion")) {
			//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableIvaDebito")) {
			//sDescripcion=this.getActualCuentaContableIvaDebitoForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontableivadebito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableIvaDebitoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontableivadebito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableIvaCredito")) {
			//sDescripcion=this.getActualCuentaContableIvaCreditoForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontableivacredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableIvaCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontableivacredito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableBonifica")) {
			//sDescripcion=this.getActualCuentaContableBonificaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontablebonifica_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableBonificaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontablebonifica_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCostoBonifica")) {
			//sDescripcion=this.getActualCuentaContableCostoBonificaForeignKeyDescripcion((Long)value);
			if(!cuentascontableslineaproducto.getIsNew() && !cuentascontableslineaproducto.getIsChanged() && !cuentascontableslineaproducto.getIsDeleted()) {
				sDescripcion=cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoBonificaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		CuentasContablesLineaProducto cuentascontableslineaproductoRow=new CuentasContablesLineaProducto();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentascontableslineaproductoRow=(CuentasContablesLineaProducto) cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentascontableslineaproductoRow=(CuentasContablesLineaProducto) cuentascontableslineaproductos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));			
			this.jButtonDuplicarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto && this.isPermisoDuplicarCuentasContablesLineaProducto));			
			this.jButtonCopiarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto && this.isPermisoCopiarCuentasContablesLineaProducto));
			this.jButtonVerFormCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto && this.isPermisoVerFormCuentasContablesLineaProducto));
			
			this.jButtonAbrirOrderByCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));			
			
			this.jButtonNuevoRelacionesCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));			
			this.jButtonNuevoGuardarCambiosCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaModificarCuentasContablesLineaProducto && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto && this.isPermisoEliminarCuentasContablesLineaProducto));
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.setVisible(this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto);							
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));			
			
			}
						
			this.jButtonGuardarCambiosTablaCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));						
			this.jButtonDuplicarToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto && this.isPermisoDuplicarCuentasContablesLineaProducto));						
			this.jButtonCopiarToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto && this.isPermisoCopiarCuentasContablesLineaProducto));			
			this.jButtonVerFormToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto && this.isPermisoVerFormCuentasContablesLineaProducto));			
			this.jButtonAbrirOrderByToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));
			this.jButtonNuevoRelacionesToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));			
			this.jButtonNuevoGuardarCambiosToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));			
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaModificarCuentasContablesLineaProducto && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto  && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto && this.isPermisoEliminarCuentasContablesLineaProducto));
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarToolBarCuentasContablesLineaProducto.setVisible(this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto);				
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));			
			this.jMenuItemDuplicarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto && this.isPermisoDuplicarCuentasContablesLineaProducto));			
			this.jMenuItemCopiarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto && this.isPermisoCopiarCuentasContablesLineaProducto));			
			this.jMenuItemVerFormCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto && this.isPermisoVerFormCuentasContablesLineaProducto));			
			this.jMenuItemAbrirOrderByCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));			
			//this.jMenuItemMostrarOcultarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));
			this.jMenuItemDetalleAbrirOrderByCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));			
			//this.jMenuItemDetalleMostrarOcultarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto && this.isPermisoOrdenCuentasContablesLineaProducto));			
			this.jMenuItemNuevoRelacionesCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto));			
			this.jMenuItemNuevoGuardarCambiosCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto && this.isPermisoNuevoCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));									
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemModificarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaModificarCuentasContablesLineaProducto && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemActualizarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto && this.isPermisoActualizarCuentasContablesLineaProducto));	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemEliminarCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto && this.isPermisoEliminarCuentasContablesLineaProducto));
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemCancelarCuentasContablesLineaProducto.setVisible(this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto);				
			}
			
			this.jMenuItemGuardarCambiosCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));						
			this.jMenuItemGuardarCambiosTablaCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=this.jButtonNuevoCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto=this.jButtonDuplicarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto=this.jButtonCopiarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto=this.jButtonVerFormCuentasContablesLineaProducto.isVisible();
			
			this.isVisibilidadCeldaOrdenCuentasContablesLineaProducto=this.jButtonAbrirOrderByCuentasContablesLineaProducto.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=this.jButtonNuevoRelacionesCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=this.jButtonModificarCuentasContablesLineaProducto.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=this.jButtonGuardarCambiosTablaCuentasContablesLineaProducto.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=this.jButtonNuevoToolBarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=this.jButtonNuevoRelacionesToolBarCuentasContablesLineaProducto.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarToolBarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarToolBarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarToolBarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarToolBarCuentasContablesLineaProducto.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=this.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=this.jButtonGuardarCambiosTablaToolBarCuentasContablesLineaProducto.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=this.jMenuItemNuevoCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=this.jMenuItemNuevoRelacionesCuentasContablesLineaProducto.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemModificarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemActualizarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemEliminarCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemCancelarCuentasContablesLineaProducto.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=this.jMenuItemGuardarCambiosCuentasContablesLineaProducto.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=this.jMenuItemGuardarCambiosTablaCuentasContablesLineaProducto.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesCuentasContablesLineaProducto(Boolean esInicializar) {
		if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
				//if(this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesCuentasContablesLineaProducto();
			}
			
			this.inicializarActualizarBindingBotonesManualCuentasContablesLineaProducto(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualCuentasContablesLineaProducto() {
		this.jButtonNuevoCuentasContablesLineaProducto.setVisible(this.isPermisoNuevoCuentasContablesLineaProducto);			
		this.jButtonDuplicarCuentasContablesLineaProducto.setVisible(this.isPermisoDuplicarCuentasContablesLineaProducto);			
		this.jButtonCopiarCuentasContablesLineaProducto.setVisible(this.isPermisoCopiarCuentasContablesLineaProducto);			
		this.jButtonVerFormCuentasContablesLineaProducto.setVisible(this.isPermisoVerFormCuentasContablesLineaProducto);			
		
		this.jButtonAbrirOrderByCuentasContablesLineaProducto.setVisible(this.isPermisoOrdenCuentasContablesLineaProducto);					
		
		this.jButtonNuevoRelacionesCuentasContablesLineaProducto.setVisible(this.isPermisoNuevoCuentasContablesLineaProducto);			
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarCuentasContablesLineaProducto.setVisible(this.isPermisoActualizarCuentasContablesLineaProducto);	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.setVisible(this.isPermisoActualizarCuentasContablesLineaProducto);	
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.setVisible(this.isPermisoEliminarCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.setVisible(this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto);						
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.setVisible(this.isPermisoGuardarCambiosCuentasContablesLineaProducto);							
		}
		
		this.jButtonGuardarCambiosTablaCuentasContablesLineaProducto.setVisible(this.isPermisoActualizarCuentasContablesLineaProducto);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentasContablesLineaProducto() {
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarCuentasContablesLineaProducto.setVisible(this.isPermisoActualizarCuentasContablesLineaProducto);	
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.setVisible(this.isPermisoActualizarCuentasContablesLineaProducto);	
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.setVisible(this.isPermisoEliminarCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.setVisible(this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto);							
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.setVisible((this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto && this.isPermisoGuardarCambiosCuentasContablesLineaProducto));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosCuentasContablesLineaProducto() {
		if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualCuentasContablesLineaProducto();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesCuentasContablesLineaProducto() {
	}
	
	public void jTableDatosCuentasContablesLineaProductoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarCuentasContablesLineaProducto(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.cuentascontableslineaproducto.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.cuentascontableslineaproducto.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.cuentascontableslineaproducto.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.cuentascontableslineaproducto.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_lineaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolinea=true;

			idTienePermisolinea=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolinea) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.lineaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineaBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_linea()!=null) {
					this.lineaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_linea());
					this.lineaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineaBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBorderlinea=(TitledBorder)this.lineaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlinea.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_lineaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_linea()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea = "+this.cuentascontableslineaproducto.getid_linea().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_grupoCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineagrupo=true;

			idTienePermisolineagrupo=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolineagrupo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.lineagrupoBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineagrupoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineagrupoBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_linea_grupo()!=null) {
					this.lineagrupoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineagrupoBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_linea_grupo());
					this.lineagrupoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineagrupoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineagrupoBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineagrupoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBorderlineagrupo=(TitledBorder)this.lineagrupoBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlineagrupo.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_grupoCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_linea_grupo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_grupo = "+this.cuentascontableslineaproducto.getid_linea_grupo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_linea_categoriaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolineacategoria=true;

			idTienePermisolineacategoria=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(LineaConstantesFunciones.CLASSNAME);

			if(idTienePermisolineacategoria) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.lineacategoriaBeanSwingJInternalFrame=new LineaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.lineacategoriaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.lineacategoriaBeanSwingJInternalFrame.getLineaLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_linea_categoria()!=null) {
					this.lineacategoriaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.lineacategoriaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_linea_categoria());
					this.lineacategoriaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.lineacategoriaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.lineacategoriaBeanSwingJInternalFrame.inicializarActualizarBindingTablaLinea();
				}

				JInternalFrameBase jinternalFrame =this.lineacategoriaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBorderlineacategoria=(TitledBorder)this.lineacategoriaBeanSwingJInternalFrame.jScrollPanelDatosLinea.getBorder();

				titledBorderlineacategoria.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Linea");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_linea_categoriaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_linea_categoria()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_linea_categoria = "+this.cuentascontableslineaproducto.getid_linea_categoria().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableInventario";

			if(!this.sFinalQueryGeneral_cuentacontableinventario.equals("")) {
				this.cuentacontableinventarioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableinventario);
				this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableInventario.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontableinventario=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventario=true;

			idTienePermisocuentacontableinventario=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventarioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario()!=null) {
					this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventarioBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario());
					this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario = "+this.cuentascontableslineaproducto.getid_cuenta_contable_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostoventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostoventaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCostoVenta";

			if(!this.sFinalQueryGeneral_cuentacontablecostoventa.equals("")) {
				this.cuentacontablecostoventaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecostoventa);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostoventaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostoventaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCostoVenta.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostoventaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontablecostoventa=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontablecostoventa=(TitledBorder)this.cuentacontablecostoventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostoventa.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecostoventa=true;

			idTienePermisocuentacontablecostoventa=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecostoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontablecostoventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta()!=null) {
					this.cuentacontablecostoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoventaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta());
					this.cuentacontablecostoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontablecostoventa=(TitledBorder)this.cuentacontablecostoventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostoventa.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo_venta = "+this.cuentascontableslineaproducto.getid_cuenta_contable_costo_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableVenta";

			if(!this.sFinalQueryGeneral_cuentacontableventa.equals("")) {
				this.cuentacontableventaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableventa);
				this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableVenta.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontableventa=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableventa=true;

			idTienePermisocuentacontableventa=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_venta()!=null) {
					this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableventaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_venta());
					this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_venta = "+this.cuentascontableslineaproducto.getid_cuenta_contable_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledescuentoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledescuentoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledescuentoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDescuento";

			if(!this.sFinalQueryGeneral_cuentacontabledescuento.equals("")) {
				this.cuentacontabledescuentoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledescuento);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledescuentoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledescuentoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDescuento.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledescuentoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontabledescuento=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontabledescuento=(TitledBorder)this.cuentacontabledescuentoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledescuento.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledescuento=true;

			idTienePermisocuentacontabledescuento=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledescuento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontabledescuentoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledescuentoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento()!=null) {
					this.cuentacontabledescuentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento());
					this.cuentacontabledescuentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledescuentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontabledescuento=(TitledBorder)this.cuentacontabledescuentoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledescuento.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_descuento = "+this.cuentascontableslineaproducto.getid_cuenta_contable_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableproduccionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableproduccionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableproduccionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableProduccion";

			if(!this.sFinalQueryGeneral_cuentacontableproduccion.equals("")) {
				this.cuentacontableproduccionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableproduccion);
				this.cuentacontableproduccionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableproduccionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableproduccionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableproduccionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableProduccion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableproduccionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontableproduccion=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontableproduccion=(TitledBorder)this.cuentacontableproduccionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableproduccion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableproduccion=true;

			idTienePermisocuentacontableproduccion=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableproduccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontableproduccionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableproduccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableproduccionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion()!=null) {
					this.cuentacontableproduccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableproduccionBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion());
					this.cuentacontableproduccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableproduccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableproduccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableproduccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontableproduccion=(TitledBorder)this.cuentacontableproduccionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableproduccion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_produccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_produccion = "+this.cuentascontableslineaproducto.getid_cuenta_contable_produccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledevolucionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledevolucionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledevolucionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDevolucion";

			if(!this.sFinalQueryGeneral_cuentacontabledevolucion.equals("")) {
				this.cuentacontabledevolucionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledevolucion);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledevolucionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledevolucionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDevolucion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledevolucionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontabledevolucion=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontabledevolucion=(TitledBorder)this.cuentacontabledevolucionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledevolucion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledevolucion=true;

			idTienePermisocuentacontabledevolucion=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledevolucion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontabledevolucionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledevolucionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion()!=null) {
					this.cuentacontabledevolucionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion());
					this.cuentacontabledevolucionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledevolucionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontabledevolucion=(TitledBorder)this.cuentacontabledevolucionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledevolucion.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_devolucion = "+this.cuentascontableslineaproducto.getid_cuenta_contable_devolucion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableivadebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableivadebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableivadebitoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableIvaDebito";

			if(!this.sFinalQueryGeneral_cuentacontableivadebito.equals("")) {
				this.cuentacontableivadebitoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableivadebito);
				this.cuentacontableivadebitoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableivadebitoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableivadebitoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableivadebitoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableIvaDebito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableivadebitoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontableivadebito=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontableivadebito=(TitledBorder)this.cuentacontableivadebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableivadebito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableivadebito=true;

			idTienePermisocuentacontableivadebito=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableivadebito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontableivadebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableivadebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableivadebitoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito()!=null) {
					this.cuentacontableivadebitoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableivadebitoBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito());
					this.cuentacontableivadebitoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableivadebitoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableivadebitoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableivadebitoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontableivadebito=(TitledBorder)this.cuentacontableivadebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableivadebito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_iva_debito = "+this.cuentascontableslineaproducto.getid_cuenta_contable_iva_debito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableivacreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableivacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableivacreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableIvaCredito";

			if(!this.sFinalQueryGeneral_cuentacontableivacredito.equals("")) {
				this.cuentacontableivacreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableivacredito);
				this.cuentacontableivacreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableivacreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableivacreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableivacreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableIvaCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableivacreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontableivacredito=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontableivacredito=(TitledBorder)this.cuentacontableivacreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableivacredito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableivacredito=true;

			idTienePermisocuentacontableivacredito=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableivacredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontableivacreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableivacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableivacreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito()!=null) {
					this.cuentacontableivacreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableivacreditoBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito());
					this.cuentacontableivacreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableivacreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableivacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableivacreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontableivacredito=(TitledBorder)this.cuentacontableivacreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableivacredito.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_iva_credito = "+this.cuentascontableslineaproducto.getid_cuenta_contable_iva_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablebonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablebonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablebonificaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableBonifica";

			if(!this.sFinalQueryGeneral_cuentacontablebonifica.equals("")) {
				this.cuentacontablebonificaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablebonifica);
				this.cuentacontablebonificaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablebonificaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablebonificaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablebonificaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableBonifica.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablebonificaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontablebonifica=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontablebonifica=(TitledBorder)this.cuentacontablebonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablebonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablebonifica=true;

			idTienePermisocuentacontablebonifica=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablebonifica) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontablebonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablebonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablebonificaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica()!=null) {
					this.cuentacontablebonificaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablebonificaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica());
					this.cuentacontablebonificaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablebonificaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablebonificaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablebonificaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontablebonifica=(TitledBorder)this.cuentacontablebonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablebonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_bonifica = "+this.cuentascontableslineaproducto.getid_cuenta_contable_bonifica().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostobonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostobonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostobonificaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCostoBonifica";

			if(!this.sFinalQueryGeneral_cuentacontablecostobonifica.equals("")) {
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecostobonifica);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostobonificaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostobonificaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCostoBonifica.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostobonificaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentasContablesLineaProducto=null;
			TitledBorder titledBordercuentacontablecostobonifica=null;

			if(!this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				titledBordercuentacontablecostobonifica=(TitledBorder)this.cuentacontablecostobonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostobonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecostobonifica=true;

			idTienePermisocuentacontablecostobonifica=this.tienePermisosUsuarioEnPaginaWebCuentasContablesLineaProducto(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecostobonifica) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentasContablesLineaProducto.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentasContablesLineaProducto.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);

				this.cuentacontablecostobonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostobonificaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentascontableslineaproductoLogic.getConnexion());

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica()!=null) {
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.setIdActual(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica());
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostobonificaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentasContablesLineaProducto=(TitledBorder)this.jScrollPanelDatosCuentasContablesLineaProducto.getBorder();
				TitledBorder titledBordercuentacontablecostobonifica=(TitledBorder)this.cuentacontablecostobonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostobonifica.setTitle(titledBorderCuentasContablesLineaProducto.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.getcuentascontableslineaproducto(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentascontableslineaproducto==null) {
						this.cuentascontableslineaproducto = new CuentasContablesLineaProducto();
					}

					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);
				}

				if(this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo_bonifica = "+this.cuentascontableslineaproducto.getid_cuenta_contable_costo_bonifica().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBodegaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdBodega();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCentroCosto();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableBonificaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableBonifica();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoBonificaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableCostoBonifica();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoVentaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableCostoVenta();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDescuentoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableDescuento();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDevolucionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableDevolucion();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableInventario();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableIvaCreditoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableIvaCredito();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableIvaDebitoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableIvaDebito();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableProduccionCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableProduccion();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableVentaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdCuentaContableVenta();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdEmpresa();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdLinea();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaCategoriaCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdLineaCategoria();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLineaGrupoCuentasContablesLineaProductoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);

			this.getCuentasContablesLineaProductosFK_IdLineaGrupo();

			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);

			//if(CuentasContablesLineaProductoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentascontableslineaproductoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameCuentasContablesLineaProducto() {
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setVisible(false);	    			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.dispose();
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
			this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.dispose();
			this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto=null;
		}
		
		if(this.jInternalFrameImportacionCuentasContablesLineaProducto!=null) {
			this.jInternalFrameImportacionCuentasContablesLineaProducto.setVisible(false);	    			
			this.jInternalFrameImportacionCuentasContablesLineaProducto.dispose();
			this.jInternalFrameImportacionCuentasContablesLineaProducto=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessCuentasContablesLineaProducto();
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			
			if(sTipo.equals("NuevoCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarCuentasContablesLineaProducto")) {
				jButtonDuplicarCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarCuentasContablesLineaProducto")) {
				jButtonCopiarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("VerFormCuentasContablesLineaProducto")) {
				jButtonVerFormCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarCuentasContablesLineaProducto")) {
				jButtonDuplicarCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarCuentasContablesLineaProducto")) {
				jButtonDuplicarCuentasContablesLineaProductoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarCuentasContablesLineaProducto")) {
				jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarCuentasContablesLineaProducto")) {
				jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarCuentasContablesLineaProducto")) {
				jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarCuentasContablesLineaProducto")) {
				jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarCuentasContablesLineaProducto")) {
				jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarCuentasContablesLineaProducto")) {
				jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("EliminarCuentasContablesLineaProducto")) {
				jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarCuentasContablesLineaProducto")) {
				jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarCuentasContablesLineaProducto")) {
				jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("CancelarCuentasContablesLineaProducto")) {
				jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarCuentasContablesLineaProducto")) {
				jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarCuentasContablesLineaProducto")) {
				jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("CerrarCuentasContablesLineaProducto")) {
				jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarCuentasContablesLineaProducto")) {
				jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarCuentasContablesLineaProducto")) {
				jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarCuentasContablesLineaProducto")) {
				jButtonMostrarOcultarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarCuentasContablesLineaProducto")) {
				jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarCuentasContablesLineaProducto")) {
				jButtonCopiarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarCuentasContablesLineaProducto")) {
				jButtonVerFormCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarCuentasContablesLineaProducto")) {
				jButtonCopiarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormCuentasContablesLineaProducto")) {
				jButtonVerFormCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionCuentasContablesLineaProducto")) {
				jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarCuentasContablesLineaProducto")) {
				jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionCuentasContablesLineaProducto")) {
				jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresCuentasContablesLineaProducto")) {
				jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarCuentasContablesLineaProducto")) {
				jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreCuentasContablesLineaProducto")) {
				jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesCuentasContablesLineaProducto")) {
				jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarCuentasContablesLineaProducto")) {
				jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesCuentasContablesLineaProducto")) {
				jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByCuentasContablesLineaProducto") || sTipo.equals("MenuItemDetalleAbrirOrderByCuentasContablesLineaProducto")) {
				jButtonAbrirOrderByCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarCuentasContablesLineaProducto") || sTipo.equals("MenuItemDetalleMostrarOcultarCuentasContablesLineaProducto")) {
				jButtonMostrarOcultarCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosCuentasContablesLineaProducto")) {
				jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarCuentasContablesLineaProducto")) {
				jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosCuentasContablesLineaProducto")) {
				jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoCuentasContablesLineaProducto")) {
				jButtonCerrarReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoCuentasContablesLineaProducto")) {
				jButtonGenerarReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoCuentasContablesLineaProducto")) {
				
				jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionCuentasContablesLineaProducto")) {
				jButtonCerrarImportacionCuentasContablesLineaProductoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionCuentasContablesLineaProducto")) {
				
				jButtonGenerarImportacionCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionCuentasContablesLineaProducto")) {
				
				jButtonAbrirImportacionCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesCuentasContablesLineaProducto")) {
				jComboBoxTiposAccionesCuentasContablesLineaProductoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesCuentasContablesLineaProducto")) {
				jComboBoxTiposRelacionesCuentasContablesLineaProductoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioCuentasContablesLineaProducto")) {
				jComboBoxTiposAccionesCuentasContablesLineaProductoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarCuentasContablesLineaProducto")) {
				
				jComboBoxTiposSeleccionarCuentasContablesLineaProductoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralCuentasContablesLineaProducto")) {
				jTextFieldValorCampoGeneralCuentasContablesLineaProductoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByCuentasContablesLineaProducto")) {
				jButtonAbrirOrderByCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarCuentasContablesLineaProducto")) {
				jButtonAbrirOrderByCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByCuentasContablesLineaProducto")) {
				jButtonCerrarOrderByCuentasContablesLineaProductoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentasContablesLineaProductoBusqueda")) {
				this.jButtonidCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_empresaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_empresaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_bodegaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_bodegaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProducto")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_lineaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_lineaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_lineaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_lineaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_grupoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_linea_grupoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_grupoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_linea_grupoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_categoriaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_linea_categoriaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_categoriaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_linea_categoriaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableIvaDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableIvaCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProducto")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaCuentasContablesLineaProducto")) {
				this.jButtonFK_IdBodegaCuentasContablesLineaProductoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoCuentasContablesLineaProducto")) {
				this.jButtonFK_IdCentroCostoCuentasContablesLineaProductoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdLineaCuentasContablesLineaProducto")) {
				this.jButtonFK_IdLineaCuentasContablesLineaProductoActionPerformed(evt);
			}
			
			;
			
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessCuentasContablesLineaProducto();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			CuentasContablesLineaProducto cuentascontableslineaproductoLocal=null;
			
			if(!this.getEsControlTabla()) {
				cuentascontableslineaproductoLocal=this.cuentascontableslineaproducto;
			} else {
				cuentascontableslineaproductoLocal=this.cuentascontableslineaproductoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
							
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
								
						
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
								
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
							
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
								
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosCuentasContablesLineaProducto")) {
					jCheckBoxSeleccionarTodosCuentasContablesLineaProductoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosCuentasContablesLineaProducto")) {
					jCheckBoxSeleccionadosCuentasContablesLineaProductoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarCuentasContablesLineaProducto")) {
					
				}
				
				


				
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
												
				
				


				
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentascontableslineaproducto);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentascontableslineaproducto);
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentasContablesLineaProducto.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentasContablesLineaProducto.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentasContablesLineaProductoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentascontableslineaproductoAnterior =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarCuentasContablesLineaProducto")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosCuentasContablesLineaProductoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosCuentasContablesLineaProducto.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.cuentascontableslineaproducto =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.cuentascontableslineaproducto);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarCuentasContablesLineaProducto")) {
				
				}
				
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarCuentasContablesLineaProducto")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosCuentasContablesLineaProducto.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarCuentasContablesLineaProducto")) {
			
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessCuentasContablesLineaProducto();
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			if(sTipo.equals("NuevoCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarCuentasContablesLineaProducto")) {
				jButtonDuplicarCuentasContablesLineaProductoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarCuentasContablesLineaProducto")) {
				jButtonCopiarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormCuentasContablesLineaProducto")) {
				jButtonVerFormCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesCuentasContablesLineaProducto")) {
				jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarCuentasContablesLineaProducto")) {
				jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarCuentasContablesLineaProducto")) {
				jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarCuentasContablesLineaProducto")) {
				jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarCuentasContablesLineaProducto")) {
				jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarCuentasContablesLineaProducto")) {
				jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosCuentasContablesLineaProducto")) {
				jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosCuentasContablesLineaProducto")) {
				jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByCuentasContablesLineaProducto")) {
				jButtonAbrirOrderByCuentasContablesLineaProductoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionCuentasContablesLineaProducto")) {
				jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresCuentasContablesLineaProducto")) {
				jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesCuentasContablesLineaProducto")) {
				jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentasContablesLineaProductoBusqueda")) {
				this.jButtonidCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_empresaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_empresaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_bodegaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_bodegaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProducto")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_centro_costoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_lineaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_lineaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_lineaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_lineaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_grupoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_linea_grupoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_grupoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_linea_grupoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_linea_categoriaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_linea_categoriaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_linea_categoriaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_linea_categoriaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableIvaDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableIvaCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol")) {
				this.abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusquedaActionPerformed(evt);
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessCuentasContablesLineaProducto();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameCuentasContablesLineaProducto")) {
				closingInternalFrameCuentasContablesLineaProducto();
				
			} else if(sTipo.equals("jButtonCancelarCuentasContablesLineaProducto")) {
				JInternalFrameBase jInternalFrameDetalleFormCuentasContablesLineaProducto = (JInternalFrameBase)evt.getSource();
	            	
	            CuentasContablesLineaProductoBeanSwingJInternalFrame jInternalFrameParent=(CuentasContablesLineaProductoBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentasContablesLineaProducto.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarCuentasContablesLineaProductoActionPerformed(null);
			}
			
			CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentascontableslineaproducto,new Object(),this.cuentascontableslineaproductoParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormCuentasContablesLineaProducto(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormCuentasContablesLineaProducto(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormCuentasContablesLineaProducto(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.cuentascontableslineaproducto)) {
			if(!esControlTabla) {
				if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);			
				}
				
				if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.procesarEventosCuentasContablesLineaProductosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this.cuentascontableslineaproducto,this.cuentascontableslineaproductoParameterGeneral,this.isEsNuevoCuentasContablesLineaProducto,classes);//this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProducto()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral,this.cuentascontableslineaproductoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanCuentasContablesLineaProducto(classes,this.cuentascontableslineaproductoReturnGeneral,this.cuentascontableslineaproductoBean,false);
					}
						
					if(this.cuentascontableslineaproductoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto());	
					}
						
					if(this.cuentascontableslineaproductoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto(),classes);//this.cuentascontableslineaproductoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioCuentasContablesLineaProducto(this.cuentascontableslineaproducto,classes);//this.cuentascontableslineaproductoBean);									
				}
			
				if(CuentasContablesLineaProductoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualCuentasContablesLineaProducto(this.cuentascontableslineaproducto,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentasContablesLineaProducto(this.cuentascontableslineaproducto);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.cuentascontableslineaproductoAnterior!=null) {
						this.cuentascontableslineaproducto=this.cuentascontableslineaproductoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.procesarEventosCuentasContablesLineaProductosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this.cuentascontableslineaproducto,this.cuentascontableslineaproductoParameterGeneral,this.isEsNuevoCuentasContablesLineaProducto,classes);//this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProducto()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentascontableslineaproductoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto(),cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto(),this.cuentascontableslineaproductos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosCuentasContablesLineaProducto.repaint();
				
				//((AbstractTableModel) this.jTableDatosCuentasContablesLineaProducto.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosCuentasContablesLineaProducto();
			}
		}
	}
	
	public void actualizarVisualTableDatosCuentasContablesLineaProducto() throws Exception {
		
		CuentasContablesLineaProductoModel cuentascontableslineaproductoModel=(CuentasContablesLineaProductoModel)this.jTableDatosCuentasContablesLineaProducto.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentascontableslineaproductoModel.cuentascontableslineaproductos=this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			cuentascontableslineaproductoModel.cuentascontableslineaproductos=this.cuentascontableslineaproductos;
		}
		
		
		((CuentasContablesLineaProductoModel) this.jTableDatosCuentasContablesLineaProducto.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaCuentasContablesLineaProducto() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getcuentascontableslineaproductoAnterior(),this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getcuentascontableslineaproductoAnterior(),this.cuentascontableslineaproductos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosCuentasContablesLineaProducto();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentascontableslineaproducto,new Object(),generalEntityParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=CuentasContablesLineaProductoConstantesFunciones.getClassesRelationshipsOfCuentasContablesLineaProducto(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=CuentasContablesLineaProductoConstantesFunciones.getClassesRelationshipsFromStringsOfCuentasContablesLineaProducto(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormCuentasContablesLineaProducto(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentascontableslineaproducto,new Object(),generalEntityParameterGeneral,this.cuentascontableslineaproductoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioCuentasContablesLineaProducto(CuentasContablesLineaProductoBean cuentascontableslineaproductoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanCuentasContablesLineaProducto(ArrayList<Classe> classes,CuentasContablesLineaProductoReturnGeneral cuentascontableslineaproductoReturnGeneral,CuentasContablesLineaProductoBean cuentascontableslineaproductoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.cuentascontableslineaproducto)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto = new CuentasContablesLineaProductoDetalleFormJInternalFrame(jDesktopPane,this.cuentascontableslineaproductoSessionBean.getConGuardarRelaciones(),this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setVisible(false);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setSelected(false);						
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.cuentascontableslineaproductoLogic=this.cuentascontableslineaproductoLogic;
		
		this.cargarCombosFrameForeignKeyCuentasContablesLineaProducto("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentasContablesLineaProducto();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentasContablesLineaProducto();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyCuentasContablesLineaProducto("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyCuentasContablesLineaProducto();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentasContablesLineaProducto"));
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ModificarCuentasContablesLineaProducto"));

		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentasContablesLineaProducto"));
					
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemModificarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentasContablesLineaProducto"));		
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"ActualizarCuentasContablesLineaProducto"));
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentasContablesLineaProducto"));
						
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemActualizarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentasContablesLineaProducto"));		
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"EliminarCuentasContablesLineaProducto"));
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentasContablesLineaProducto"));
								
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemEliminarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentasContablesLineaProducto"));		
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CancelarCuentasContablesLineaProducto"));
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentasContablesLineaProducto"));
					
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemCancelarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentasContablesLineaProducto"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemDetalleCerrarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentasContablesLineaProducto"));		
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentasContablesLineaProducto"));
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentasContablesLineaProducto"));
		
		
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentasContablesLineaProducto"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonidCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProducto"));
		//jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentasContablesLineaProducto"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameCuentasContablesLineaProducto"));
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentasContablesLineaProducto"));
		}
		
		this.jTableDatosCuentasContablesLineaProducto.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarCuentasContablesLineaProducto"));
		
		this.jTableDatosCuentasContablesLineaProducto.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarCuentasContablesLineaProducto"));
		
		this.jButtonNuevoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"NuevoCuentasContablesLineaProducto"));
		
		this.jButtonDuplicarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"DuplicarCuentasContablesLineaProducto"));
		
		this.jButtonCopiarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"CopiarCuentasContablesLineaProducto"));
		
		this.jButtonVerFormCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"VerFormCuentasContablesLineaProducto"));
		
		
		this.jButtonNuevoToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"NuevoToolBarCuentasContablesLineaProducto"));
			
		this.jButtonDuplicarToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"DuplicarToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemNuevoCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemNuevoCuentasContablesLineaProducto"));
			
		this.jMenuItemDuplicarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarCuentasContablesLineaProducto"));		
		
		
		this.jButtonNuevoRelacionesCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"NuevoRelacionesCuentasContablesLineaProducto"));
		
		
		this.jButtonNuevoRelacionesToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemNuevoRelacionesCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesCuentasContablesLineaProducto"));		
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ModificarCuentasContablesLineaProducto"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonModificarToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentasContablesLineaProducto"));
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemModificarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentasContablesLineaProducto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"ActualizarCuentasContablesLineaProducto"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonActualizarToolBarCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentasContablesLineaProducto"));
				
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemActualizarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentasContablesLineaProducto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"EliminarCuentasContablesLineaProducto"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonEliminarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentasContablesLineaProducto"));
						
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemEliminarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentasContablesLineaProducto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CancelarCuentasContablesLineaProducto"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonCancelarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentasContablesLineaProducto"));
			
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemCancelarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentasContablesLineaProducto"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarCuentasContablesLineaProducto"));		
		
		
		this.jButtonCerrarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CerrarCuentasContablesLineaProducto"));
		
		
		this.jButtonCerrarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CerrarToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemCerrarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemCerrarCuentasContablesLineaProducto"));
			
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jMenuItemDetalleCerrarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentasContablesLineaProducto"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosCuentasContablesLineaProducto"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentasContablesLineaProducto"));
		}
		
		this.jButtonCopiarToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CopiarToolBarCuentasContablesLineaProducto"));
			
		this.jButtonVerFormToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"VerFormToolBarCuentasContablesLineaProducto"));
		
		this.jMenuItemGuardarCambiosCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosCuentasContablesLineaProducto"));
			
		this.jMenuItemCopiarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemCopiarCuentasContablesLineaProducto"));		
		
		this.jMenuItemVerFormCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemVerFormCuentasContablesLineaProducto"));		
		
		
		this.jButtonGuardarCambiosTablaCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentasContablesLineaProducto"));
		
		
		this.jButtonGuardarCambiosTablaToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemGuardarCambiosTablaCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentasContablesLineaProducto"));		
		
		
		
		this.jButtonRecargarInformacionCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"RecargarInformacionCuentasContablesLineaProducto"));
					
		this.jButtonRecargarInformacionToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarCuentasContablesLineaProducto"));
		
		this.jMenuItemRecargarInformacionCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionCuentasContablesLineaProducto"));		
		
		
		
		this.jButtonAnterioresCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"AnterioresCuentasContablesLineaProducto"));
		
		
		this.jButtonAnterioresToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"AnterioresToolBarCuentasContablesLineaProducto"));
		
		this.jMenuItemAnterioresCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresCuentasContablesLineaProducto"));		
		
		
		this.jButtonSiguientesCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"SiguientesCuentasContablesLineaProducto"));
		
		
		this.jButtonSiguientesToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"SiguientesToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemSiguientesCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesCuentasContablesLineaProducto"));
			
		this.jMenuItemAbrirOrderByCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByCuentasContablesLineaProducto"));
			
		this.jMenuItemMostrarOcultarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarCuentasContablesLineaProducto"));
			
		this.jMenuItemDetalleAbrirOrderByCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByCuentasContablesLineaProducto"));
			
		this.jMenuItemDetalleMostarOcultarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarCuentasContablesLineaProducto"));		
		
		
		this.jButtonNuevoGuardarCambiosCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosCuentasContablesLineaProducto"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarCuentasContablesLineaProducto"));
			
		this.jMenuItemNuevoGuardarCambiosCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosCuentasContablesLineaProducto"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosCuentasContablesLineaProducto.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosCuentasContablesLineaProducto"));

		this.jCheckBoxSeleccionadosCuentasContablesLineaProducto.addItemListener(new CheckBoxItemListener(this,"SeleccionadosCuentasContablesLineaProducto"));
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentasContablesLineaProducto"));
		}
		
		
		this.jComboBoxTiposRelacionesCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"TiposRelacionesCuentasContablesLineaProducto"));
			
		this.jComboBoxTiposAccionesCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"TiposAccionesCuentasContablesLineaProducto"));
					
		this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"TiposSeleccionarCuentasContablesLineaProducto"));
			
		this.jTextFieldValorCampoGeneralCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralCuentasContablesLineaProducto"));		
		
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonidCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProducto"));
		//jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdBodegaCuentasContablesLineaProducto"));

			this.jButtonFK_IdCentroCostoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoCuentasContablesLineaProducto"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProducto"));

			this.jButtonFK_IdLineaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdLineaCuentasContablesLineaProducto"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto!=null) {
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentasContablesLineaProducto"));
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentasContablesLineaProducto"));
				this.jInternalFrameReporteDinamicoCuentasContablesLineaProducto.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentasContablesLineaProducto"));
			}
			
			//this.jButtonCerrarReporteDinamicoCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentasContablesLineaProducto"));				
			//this.jButtonGenerarReporteDinamicoCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentasContablesLineaProducto"));
			//this.jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentasContablesLineaProducto"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionCuentasContablesLineaProducto!=null) {
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentasContablesLineaProducto"));
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentasContablesLineaProducto"));
				this.jInternalFrameImportacionCuentasContablesLineaProducto.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentasContablesLineaProducto"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"AbrirOrderByCuentasContablesLineaProducto"));
			
			this.jButtonAbrirOrderByToolBarCuentasContablesLineaProducto.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarCuentasContablesLineaProducto"));			
			
			if(this.jInternalFrameOrderByCuentasContablesLineaProducto!=null) {
				this.jInternalFrameOrderByCuentasContablesLineaProducto.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentasContablesLineaProducto"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jTabbedPaneRelacionesCuentasContablesLineaProducto.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentasContablesLineaProducto"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameCuentasContablesLineaProducto();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormCuentasContablesLineaProducto = (JInternalFrameBase)event.getSource();
	            	
	            CuentasContablesLineaProductoBeanSwingJInternalFrame jInternalFrameParent=(CuentasContablesLineaProductoBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentasContablesLineaProducto.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarCuentasContablesLineaProductoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosCuentasContablesLineaProducto.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosCuentasContablesLineaProductoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosCuentasContablesLineaProducto.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosCuentasContablesLineaProducto.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoCuentasContablesLineaProducto";
		inputMap = this.jButtonNuevoCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesCuentasContablesLineaProducto";
		inputMap = this.jButtonNuevoRelacionesCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentasContablesLineaProductoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarCuentasContablesLineaProducto";
		inputMap = this.jButtonModificarCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarCuentasContablesLineaProducto";
		inputMap = this.jButtonActualizarCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarCuentasContablesLineaProducto";
		inputMap = this.jButtonEliminarCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarCuentasContablesLineaProducto";
		inputMap = this.jButtonCancelarCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarCuentasContablesLineaProducto";
		inputMap = this.jButtonCerrarCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosCuentasContablesLineaProducto";
		inputMap = this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonGuardarCambiosCuentasContablesLineaProducto.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosCuentasContablesLineaProducto.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosCuentasContablesLineaProductoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesCuentasContablesLineaProducto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesCuentasContablesLineaProductoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarCuentasContablesLineaProductoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralCuentasContablesLineaProducto.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralCuentasContablesLineaProductoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonidCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_empresaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_bodegaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProducto"));
		//jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_lineaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_lineaCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_grupoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_grupoCuentasContablesLineaProductoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_linea_categoriaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_linea_categoriaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_debitoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIvaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva_creditoCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaCuentasContablesLineaProductoBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProducto"));
		//jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaCuentasContablesLineaProductoBusqueda"));
		
		
		this.jButtonFK_IdBodegaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdBodegaCuentasContablesLineaProducto"));

		this.jButtonFK_IdCentroCostoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoCuentasContablesLineaProducto"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"id_centro_costoCuentasContablesLineaProducto"));

		this.jButtonFK_IdLineaCuentasContablesLineaProducto.addActionListener(new ButtonActionListener(this,"FK_IdLineaCuentasContablesLineaProducto"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionCuentasContablesLineaProducto.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionCuentasContablesLineaProductoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarCuentasContablesLineaProductoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarCuentasContablesLineaProducto.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosCuentasContablesLineaProducto(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
					cuentascontableslineaproductoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductos) {
					cuentascontableslineaproductoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosCuentasContablesLineaProductoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
						cuentascontableslineaproductoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductos) {
						cuentascontableslineaproductoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentasContablesLineaProducto.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentasContablesLineaProducto.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosCuentasContablesLineaProductoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosCuentasContablesLineaProducto.getSelectedRows();
			
			CuentasContablesLineaProducto cuentascontableslineaproductoLocal=new CuentasContablesLineaProducto();
			
			//this.seleccionarTodosCuentasContablesLineaProducto(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentascontableslineaproductoLocal =(CuentasContablesLineaProducto) this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos().toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					cuentascontableslineaproductoLocal =(CuentasContablesLineaProducto) this.cuentascontableslineaproductos.toArray()[this.jTableDatosCuentasContablesLineaProducto.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				cuentascontableslineaproductoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
						cuentascontableslineaproductoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductos) {
						cuentascontableslineaproductoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentasContablesLineaProducto.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentasContablesLineaProducto.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentasContablesLineaProducto,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualCuentasContablesLineaProductoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarCuentasContablesLineaProductoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralCuentasContablesLineaProductoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralCuentasContablesLineaProducto.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
				
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductos) {
					
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesCuentasContablesLineaProductoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioCuentasContablesLineaProducto=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesCuentasContablesLineaProducto.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteCuentasContablesLineaProducto) {				
					conSplash=true;//false;										
					
					//this.startProcessCuentasContablesLineaProducto(conSplash);
				
					this.generarReporteCuentasContablesLineaProductosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoCuentasContablesLineaProductosSeleccionados();
				//this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentasContablesLineaProductosSeleccionados(false);
				//this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentasContablesLineaProductosSeleccionados(true);
				//this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentasContablesLineaProducto();
				
				this.exportarCuentasContablesLineaProductosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionCuentasContablesLineaProductos();
				//this.importarCuentasContablesLineaProductos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentasContablesLineaProducto();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelCuentasContablesLineaProductosSeleccionados();
				//this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Cuentas Contables Linea Producto", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessCuentasContablesLineaProducto();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoCuentasContablesLineaProducto)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyCuentasContablesLineaProducto(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
				}	
			} 			
			else if(CuentasContablesLineaProductoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteCuentasContablesLineaProducto) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessCuentasContablesLineaProducto(conSplash);
					
						//this.actualizarParametrosGeneralCuentasContablesLineaProducto();
						
						this.generarReporteProcesoAccionCuentasContablesLineaProductosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Cuentas Contables Linea ProductoES SELECCIONADOS?", "MANTENIMIENTO DE Cuentas Contables Linea Producto", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessCuentasContablesLineaProducto();
				
						this.actualizarParametrosGeneralCuentasContablesLineaProducto();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.cuentascontableslineaproductoReturnGeneral=cuentascontableslineaproductoLogic.procesarAccionCuentasContablesLineaProductosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos(),this.cuentascontableslineaproductoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarCuentasContablesLineaProductoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralCuentasContablesLineaProducto();
					
					CuentasContablesLineaProductoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarCuentasContablesLineaProductoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentasContablesLineaProducto.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxTiposAccionesFormularioCuentasContablesLineaProducto.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessCuentasContablesLineaProducto(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesCuentasContablesLineaProductoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessCuentasContablesLineaProducto();
			
			if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
			CuentasContablesLineaProducto cuentascontableslineaproducto=new CuentasContablesLineaProducto();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesCuentasContablesLineaProducto.getSelectedItem();
			
			
			
			
			cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
			//this.sTipoAccion;
			
			if(cuentascontableslineaproductosSeleccionados.size()==1) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
					cuentascontableslineaproducto=cuentascontableslineaproductoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessCuentasContablesLineaProducto();
			
      		//this.finishProcessCuentasContablesLineaProducto(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarCuentasContablesLineaProductoReturnGeneral() throws Exception {
		if(this.cuentascontableslineaproductoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.cuentascontableslineaproductoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.cuentascontableslineaproductoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.cuentascontableslineaproductoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.cuentascontableslineaproductoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.cuentascontableslineaproductoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
		}
		
		if(this.cuentascontableslineaproductoReturnGeneral.getConRetornoLista() || this.cuentascontableslineaproductoReturnGeneral.getConRetornoObjeto()) {
			if(this.cuentascontableslineaproductoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentascontableslineaproductoLogic.setCuentasContablesLineaProductos(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProductos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.cuentascontableslineaproductoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentascontableslineaproductoLogic.setCuentasContablesLineaProducto(this.cuentascontableslineaproductoReturnGeneral.getCuentasContablesLineaProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingCuentasContablesLineaProducto(false);
		}
	}
	
	public void actualizarParametrosGeneralCuentasContablesLineaProducto() throws Exception {
		
		
	}
	
	public ArrayList<CuentasContablesLineaProducto> getCuentasContablesLineaProductosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioCuentasContablesLineaProducto) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos()) {
					if(cuentascontableslineaproductoAux.getIsSelected()) {
						cuentascontableslineaproductosSeleccionados.add(cuentascontableslineaproductoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:this.cuentascontableslineaproductos) {
					if(cuentascontableslineaproductoAux.getIsSelected()) {
						cuentascontableslineaproductosSeleccionados.add(cuentascontableslineaproductoAux);				
					}
				}
			}
			
			if(cuentascontableslineaproductosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						cuentascontableslineaproductosSeleccionados.addAll(this.cuentascontableslineaproductoLogic.getCuentasContablesLineaProductos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						cuentascontableslineaproductosSeleccionados.addAll(this.cuentascontableslineaproductos);				
					}
				}
			}
		} else {
			cuentascontableslineaproductosSeleccionados.add(this.cuentascontableslineaproducto);
		}
		
		return cuentascontableslineaproductosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteCuentasContablesLineaProductosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalCuentasContablesLineaProductosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoCuentasContablesLineaProductosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentasContablesLineaProductosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentasContablesLineaProductosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Cuentas Contables Linea Producto",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados);
		
	}	
	
	public void generarReporteNormalCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionCuentasContablesLineaProductosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		
		this.abrirInicializarFrameReporteDinamicoCuentasContablesLineaProducto();
		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoCuentasContablesLineaProducto();
		
		
		//this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados ,cuentascontableslineaproductoImplementable,cuentascontableslineaproductoImplementableHome);
	}
	
	public void mostrarImportacionCuentasContablesLineaProductos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionCuentasContablesLineaProducto();
		
		this.abrirFrameImportacionCuentasContablesLineaProducto();		
		
			
		//this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados ,cuentascontableslineaproductoImplementable,cuentascontableslineaproductoImplementableHome);
	}
	
	public void importarCuentasContablesLineaProductos() throws Exception {		
	
	}
	
	public void exportarCuentasContablesLineaProductosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelCuentasContablesLineaProductosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoCuentasContablesLineaProductosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlCuentasContablesLineaProductosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Cuentas Contables Linea Producto",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarCuentasContablesLineaProducto(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarCuentasContablesLineaProducto(cuentascontableslineaproductoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//cuentascontableslineaproductoAux.setsDetalleGeneralEntityReporte(cuentascontableslineaproductoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarCuentasContablesLineaProducto(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=cuentascontableslineaproducto.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getlinea_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getlineagrupo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getlineacategoria_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontableinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontableventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontabledescuento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontableproduccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontableivadebito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontableivacredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontablebonifica_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("CuentasContablesLineaProductos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelCuentasContablesLineaProducto(row);				
				iRow++;
			}				
			
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelCuentasContablesLineaProducto(cuentascontableslineaproductoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlCuentasContablesLineaProductosSeleccionados() throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();		
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentascontableslineaproducto.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("cuentascontableslineaproductos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("cuentascontableslineaproducto");
			//elementRoot.appendChild(element);
		
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
				element = document.createElement("cuentascontableslineaproducto");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlCuentasContablesLineaProducto(cuentascontableslineaproductoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuentas Contables Linea Producto",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelCuentasContablesLineaProducto(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getlinea_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getlineagrupo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getlineacategoria_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontableinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontableventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledescuento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontableproduccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivadebito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontableivacredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontablebonifica_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion());				
	}
	
	public void setFilaDatosExportarXmlCuentasContablesLineaProducto(CuentasContablesLineaProducto cuentascontableslineaproducto,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(CuentasContablesLineaProductoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(cuentascontableslineaproducto.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(CuentasContablesLineaProductoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(cuentascontableslineaproducto.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementbodega_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementlinea_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDLINEA);
		elementlinea_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getlinea_descripcion()));
		element.appendChild(elementlinea_descripcion);

		Element elementlineagrupo_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDLINEAGRUPO);
		elementlineagrupo_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getlineagrupo_descripcion()));
		element.appendChild(elementlineagrupo_descripcion);

		Element elementlineacategoria_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDLINEACATEGORIA);
		elementlineacategoria_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getlineacategoria_descripcion()));
		element.appendChild(elementlineacategoria_descripcion);

		Element elementcuentacontableinventario_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEINVENTARIO);
		elementcuentacontableinventario_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontableinventario_descripcion()));
		element.appendChild(elementcuentacontableinventario_descripcion);

		Element elementcuentacontablecostoventa_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLECOSTOVENTA);
		elementcuentacontablecostoventa_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontablecostoventa_descripcion()));
		element.appendChild(elementcuentacontablecostoventa_descripcion);

		Element elementcuentacontableventa_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEVENTA);
		elementcuentacontableventa_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontableventa_descripcion()));
		element.appendChild(elementcuentacontableventa_descripcion);

		Element elementcuentacontabledescuento_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEDESCUENTO);
		elementcuentacontabledescuento_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontabledescuento_descripcion()));
		element.appendChild(elementcuentacontabledescuento_descripcion);

		Element elementcuentacontableproduccion_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEPRODUCCION);
		elementcuentacontableproduccion_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontableproduccion_descripcion()));
		element.appendChild(elementcuentacontableproduccion_descripcion);

		Element elementcuentacontabledevolucion_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEDEVOLUCION);
		elementcuentacontabledevolucion_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontabledevolucion_descripcion()));
		element.appendChild(elementcuentacontabledevolucion_descripcion);

		Element elementcuentacontableivadebito_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEIVADEBITO);
		elementcuentacontableivadebito_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontableivadebito_descripcion()));
		element.appendChild(elementcuentacontableivadebito_descripcion);

		Element elementcuentacontableivacredito_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEIVACREDITO);
		elementcuentacontableivacredito_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontableivacredito_descripcion()));
		element.appendChild(elementcuentacontableivacredito_descripcion);

		Element elementcuentacontablebonifica_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLEBONIFICA);
		elementcuentacontablebonifica_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontablebonifica_descripcion()));
		element.appendChild(elementcuentacontablebonifica_descripcion);

		Element elementcuentacontablecostobonifica_descripcion = document.createElement(CuentasContablesLineaProductoConstantesFunciones.IDCUENTACONTABLECOSTOBONIFICA);
		elementcuentacontablecostobonifica_descripcion.appendChild(document.createTextNode(cuentascontableslineaproducto.getcuentacontablecostobonifica_descripcion()));
		element.appendChild(elementcuentacontablecostobonifica_descripcion);
	}
	
	public void generarReporteGroupGenericoCuentasContablesLineaProductosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados=new ArrayList<CuentasContablesLineaProducto>();
		
		cuentascontableslineaproductosSeleccionados=this.getCuentasContablesLineaProductosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoCuentasContablesLineaProducto(cuentascontableslineaproductosSeleccionados);
		
		this.generarReporteCuentasContablesLineaProductos("Todos",cuentascontableslineaproductosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoCuentasContablesLineaProducto(ArrayList<CuentasContablesLineaProducto> cuentascontableslineaproductosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(CuentasContablesLineaProducto cuentascontableslineaproductoAux:cuentascontableslineaproductosSeleccionados) {
				cuentascontableslineaproductoAux.setsDetalleGeneralEntityReporte(cuentascontableslineaproductoAux.toString());
			
				if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getlinea_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEAGRUPO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getlineagrupo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDLINEACATEGORIA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getlineacategoria_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontableinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontablecostoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontableventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontabledescuento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontableproduccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontabledevolucion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVADEBITO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontableivadebito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEIVACREDITO)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontableivacredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontablebonifica_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentasContablesLineaProductoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA)) {
					existe=true;
					cuentascontableslineaproductoAux.setsDescripcionGeneralEntityReporte1(cuentascontableslineaproductoAux.getcuentacontablecostobonifica_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentasContablesLineaProductoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesCuentasContablesLineaProducto(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=true;
				this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=true;
				this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=true;
			}
			
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaModificarCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaCancelarCuentasContablesLineaProducto=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentasContablesLineaProducto=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(CuentasContablesLineaProductoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=true;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=true;
		} else {
			this.actualizarEstadoPanelsCuentasContablesLineaProducto(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarCuentasContablesLineaProducto=false;
			//this.isVisibilidadCeldaVerFormCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaDuplicarCuentasContablesLineaProducto=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
		} else {
			this.isVisibilidadCeldaNuevoCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaGuardarCambiosCuentasContablesLineaProducto=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			if(!cuentascontableslineaproductoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;												
			}
			
			this.jButtonCerrarCuentasContablesLineaProducto.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesCuentasContablesLineaProducto=false;
		}
		
		if(!this.permiteMantenimiento(this.cuentascontableslineaproducto)) {
			this.isVisibilidadCeldaActualizarCuentasContablesLineaProducto=false;
			this.isVisibilidadCeldaEliminarCuentasContablesLineaProducto=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesCuentasContablesLineaProducto() {
	}
	
	public void actualizarEstadoPanelsCuentasContablesLineaProducto(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosEdicionCuentasContablesLineaProducto.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentasContablesLineaProducto!=null) {
				this.jScrollPanelDatosCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentasContablesLineaProducto!=null) {
				this.jPanelPaginacionCuentasContablesLineaProducto.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
					this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.cuentascontableslineaproductoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto!=null) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesCuentasContablesLineaProducto!=null) {
				this.jPanelParametrosReportesCuentasContablesLineaProducto.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaLinea(Boolean isParaLinea){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaNegation=!isParaLinea;

			this.isVisibilidadFK_IdBodega=isParaLineaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaLineaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaLinea;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaGrupo(Boolean isParaLineaGrupo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaGrupoNegation=!isParaLineaGrupo;

			this.isVisibilidadFK_IdBodega=isParaLineaGrupoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaLineaGrupoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaLineaGrupoNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaLineaCategoria(Boolean isParaLineaCategoria){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLineaCategoriaNegation=!isParaLineaCategoria;

			this.isVisibilidadFK_IdBodega=isParaLineaCategoriaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaLineaCategoriaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaLineaCategoriaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventario(Boolean isParaCuentaContableInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioNegation=!isParaCuentaContableInventario;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCostoVenta(Boolean isParaCuentaContableCostoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoVentaNegation=!isParaCuentaContableCostoVenta;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableVenta(Boolean isParaCuentaContableVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableVentaNegation=!isParaCuentaContableVenta;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDescuento(Boolean isParaCuentaContableDescuento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDescuentoNegation=!isParaCuentaContableDescuento;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableProduccion(Boolean isParaCuentaContableProduccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableProduccionNegation=!isParaCuentaContableProduccion;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDevolucion(Boolean isParaCuentaContableDevolucion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDevolucionNegation=!isParaCuentaContableDevolucion;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableIvaDebito(Boolean isParaCuentaContableIvaDebito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableIvaDebitoNegation=!isParaCuentaContableIvaDebito;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableIvaDebitoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableIvaDebitoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableIvaDebitoNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableIvaCredito(Boolean isParaCuentaContableIvaCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableIvaCreditoNegation=!isParaCuentaContableIvaCredito;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableIvaCreditoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableIvaCreditoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableIvaCreditoNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableBonifica(Boolean isParaCuentaContableBonifica){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableBonificaNegation=!isParaCuentaContableBonifica;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCostoBonifica(Boolean isParaCuentaContableCostoBonifica){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoBonificaNegation=!isParaCuentaContableCostoBonifica;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdBodegaCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdCentroCostoCuentasContablesLineaProducto);}

			this.isVisibilidadFK_IdLinea=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdLinea) {this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(jPanelFK_IdLineaCuentasContablesLineaProducto);}
		}
		
	}
	
	
	
	

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//centrocostoSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableInventarios() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontableinventarioSessionBean==null) {
				cuentacontableinventarioSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableinventarioSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableinventarioSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableinventarioSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableinventarioSessionBean.getisPaginaPopup();
			cuentacontableinventarioSessionBean.setisPaginaPopup(false);
			cuentacontableinventarioSessionBean.setEstaModoBusqueda(true);
			cuentacontableinventarioSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario(TO_REPLACE);");
			cuentacontableinventarioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableinventarioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableCostoVentas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontablecostoventaSessionBean==null) {
				cuentacontablecostoventaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostoventaSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostoventaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostoventaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostoventaSessionBean.getisPaginaPopup();
			cuentacontablecostoventaSessionBean.setisPaginaPopup(false);
			cuentacontablecostoventaSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostoventaSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta(TO_REPLACE);");
			cuentacontablecostoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableVentas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontableventaSessionBean==null) {
				cuentacontableventaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableventaSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableventaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableventaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableventaSessionBean.getisPaginaPopup();
			cuentacontableventaSessionBean.setisPaginaPopup(false);
			cuentacontableventaSessionBean.setEstaModoBusqueda(true);
			cuentacontableventaSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta(TO_REPLACE);");
			cuentacontableventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableDescuentos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontabledescuentoSessionBean==null) {
				cuentacontabledescuentoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledescuentoSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledescuentoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledescuentoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledescuentoSessionBean.getisPaginaPopup();
			cuentacontabledescuentoSessionBean.setisPaginaPopup(false);
			cuentacontabledescuentoSessionBean.setEstaModoBusqueda(true);
			cuentacontabledescuentoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento(TO_REPLACE);");
			cuentacontabledescuentoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledescuentoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableProduccions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontableproduccionSessionBean==null) {
				cuentacontableproduccionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableproduccionSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableproduccionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableproduccionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableproduccionSessionBean.getisPaginaPopup();
			cuentacontableproduccionSessionBean.setisPaginaPopup(false);
			cuentacontableproduccionSessionBean.setEstaModoBusqueda(true);
			cuentacontableproduccionSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion(TO_REPLACE);");
			cuentacontableproduccionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableproduccionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableDevolucions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontabledevolucionSessionBean==null) {
				cuentacontabledevolucionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledevolucionSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledevolucionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledevolucionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledevolucionSessionBean.getisPaginaPopup();
			cuentacontabledevolucionSessionBean.setisPaginaPopup(false);
			cuentacontabledevolucionSessionBean.setEstaModoBusqueda(true);
			cuentacontabledevolucionSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion(TO_REPLACE);");
			cuentacontabledevolucionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledevolucionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableIvaDebitos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontableivadebitoSessionBean==null) {
				cuentacontableivadebitoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableivadebitoSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableivadebitoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableivadebitoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableivadebitoSessionBean.getisPaginaPopup();
			cuentacontableivadebitoSessionBean.setisPaginaPopup(false);
			cuentacontableivadebitoSessionBean.setEstaModoBusqueda(true);
			cuentacontableivadebitoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_debito(TO_REPLACE);");
			cuentacontableivadebitoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableivadebitoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableIvaCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontableivacreditoSessionBean==null) {
				cuentacontableivacreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableivacreditoSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableivacreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableivacreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableivacreditoSessionBean.getisPaginaPopup();
			cuentacontableivacreditoSessionBean.setisPaginaPopup(false);
			cuentacontableivacreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontableivacreditoSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva_credito(TO_REPLACE);");
			cuentacontableivacreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableivacreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableBonificas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontablebonificaSessionBean==null) {
				cuentacontablebonificaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablebonificaSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablebonificaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablebonificaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablebonificaSessionBean.getisPaginaPopup();
			cuentacontablebonificaSessionBean.setisPaginaPopup(false);
			cuentacontablebonificaSessionBean.setEstaModoBusqueda(true);
			cuentacontablebonificaSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica(TO_REPLACE);");
			cuentacontablebonificaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablebonificaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionCuentasContablesLineaProductoParaBusquedaCuentaContableCostoBonificas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentascontableslineaproductoSessionBean==null) {
				cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
			}

			if(cuentacontablecostobonificaSessionBean==null) {
				cuentacontablecostobonificaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostobonificaSessionBean.setsPathNavegacionActual(cuentascontableslineaproductoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostobonificaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostobonificaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostobonificaSessionBean.getisPaginaPopup();
			cuentacontablecostobonificaSessionBean.setisPaginaPopup(false);
			cuentacontablecostobonificaSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostobonificaSessionBean.setsFuncionBusquedaRapida("window.opener.cuentascontableslineaproductoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica(TO_REPLACE);");
			cuentacontablecostobonificaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostobonificaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentasContablesLineaProductoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentasContablesLineaProducto(true);
			//cuentacontableSessionBean.setlidCuentasContablesLineaProductoActual(this.idCuentasContablesLineaProductoActual);

			cuentascontableslineaproductoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentasContablesLineaProducto(true);
			cuentascontableslineaproductoSessionBean.setlIdCuentasContablesLineaProductoActualForeignKey(this.idCuentasContablesLineaProductoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//CuentasContablesLineaProductoSessionBean cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
		
		if(this.cuentascontableslineaproductoSessionBean==null) {
			this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
		}
		
		this.cuentascontableslineaproductoSessionBean.setsUltimaBusquedaCuentasContablesLineaProducto(this.getsAccionBusqueda());
		this.cuentascontableslineaproductoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.cuentascontableslineaproductoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			cuentascontableslineaproductoSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			cuentascontableslineaproductoSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			cuentascontableslineaproductoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdLinea")) {
			cuentascontableslineaproductoSessionBean.setid_linea(this.getid_lineaFK_IdLinea());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//CuentasContablesLineaProductoSessionBean cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
		
		if(this.cuentascontableslineaproductoSessionBean==null) {
			this.cuentascontableslineaproductoSessionBean=new CuentasContablesLineaProductoSessionBean();
		}
		
		if(this.cuentascontableslineaproductoSessionBean.getsUltimaBusquedaCuentasContablesLineaProducto()!=null&&!this.cuentascontableslineaproductoSessionBean.getsUltimaBusquedaCuentasContablesLineaProducto().equals("")) {
			this.setsAccionBusqueda(cuentascontableslineaproductoSessionBean.getsUltimaBusquedaCuentasContablesLineaProducto());
			this.setiNumeroPaginacion(cuentascontableslineaproductoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(cuentascontableslineaproductoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(cuentascontableslineaproductoSessionBean.getid_bodega());
				cuentascontableslineaproductoSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(cuentascontableslineaproductoSessionBean.getid_centro_costo());
				cuentascontableslineaproductoSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(cuentascontableslineaproductoSessionBean.getid_empresa());
				cuentascontableslineaproductoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdLinea")) {
				this.setid_lineaFK_IdLinea(cuentascontableslineaproductoSessionBean.getid_linea());
				cuentascontableslineaproductoSessionBean.setid_linea(-1L);
			}
		}
		
		this.cuentascontableslineaproductoSessionBean.setsUltimaBusquedaCuentasContablesLineaProducto("");
		this.cuentascontableslineaproductoSessionBean.setiNumeroPaginacion(CuentasContablesLineaProductoConstantesFunciones.INUMEROPAGINACION);
		this.cuentascontableslineaproductoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaCuentasContablesLineaProducto(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioCuentasContablesLineaProducto() {
		this.updateBorderResaltarBusquedasFormularioCuentasContablesLineaProducto();
		this.updateVisibilidadBusquedasFormularioCuentasContablesLineaProducto();
		this.updateHabilitarBusquedasFormularioCuentasContablesLineaProducto();
	}
	
	public void updateBorderResaltarBusquedasFormularioCuentasContablesLineaProducto() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponents().length>0) {
	

		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdBodegaCuentasContablesLineaProducto!=null) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdBodegaCuentasContablesLineaProducto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdBodegaCuentasContablesLineaProducto);
			}
		}

		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdCentroCostoCuentasContablesLineaProducto!=null) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdCentroCostoCuentasContablesLineaProducto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdCentroCostoCuentasContablesLineaProducto);
			}
		}

		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdLineaCuentasContablesLineaProducto!=null) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdLineaCuentasContablesLineaProducto);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdLineaCuentasContablesLineaProducto);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioCuentasContablesLineaProducto() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdBodegaCuentasContablesLineaProducto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdBodegaCuentasContablesLineaProducto);
			if(!this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdBodegaCuentasContablesLineaProducto && index>-1) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdCentroCostoCuentasContablesLineaProducto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdCentroCostoCuentasContablesLineaProducto);
			if(!this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdCentroCostoCuentasContablesLineaProducto && index>-1) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdLineaCuentasContablesLineaProducto);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdLineaCuentasContablesLineaProducto);
			if(!this.cuentascontableslineaproductoConstantesFunciones.mostrarFK_IdLineaCuentasContablesLineaProducto && index>-1) {
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioCuentasContablesLineaProducto() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdBodegaCuentasContablesLineaProducto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdBodegaCuentasContablesLineaProducto);
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setEnabledAt(index,this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdBodegaCuentasContablesLineaProducto);
			}

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdCentroCostoCuentasContablesLineaProducto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdCentroCostoCuentasContablesLineaProducto);
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setEnabledAt(index,this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdCentroCostoCuentasContablesLineaProducto);
			}

			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdLineaCuentasContablesLineaProducto);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdLineaCuentasContablesLineaProducto);
				this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setEnabledAt(index,this.cuentascontableslineaproductoConstantesFunciones.activarFK_IdLineaCuentasContablesLineaProducto);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaCuentasContablesLineaProducto(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdBodegaCuentasContablesLineaProducto);

			this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);

			this.cuentascontableslineaproductoConstantesFunciones.setResaltarFK_IdBodegaCuentasContablesLineaProducto(resaltar);

			jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdBodegaCuentasContablesLineaProducto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdCentroCostoCuentasContablesLineaProducto);

			this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);

			this.cuentascontableslineaproductoConstantesFunciones.setResaltarFK_IdCentroCostoCuentasContablesLineaProducto(resaltar);

			jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdCentroCostoCuentasContablesLineaProducto);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdLinea")) {
			index= this.jTabbedPaneBusquedasCuentasContablesLineaProducto.indexOfComponent(this.jPanelFK_IdLineaCuentasContablesLineaProducto);

			this.jTabbedPaneBusquedasCuentasContablesLineaProducto.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentasContablesLineaProducto.getComponent(index);

			this.cuentascontableslineaproductoConstantesFunciones.setResaltarFK_IdLineaCuentasContablesLineaProducto(resaltar);

			jPanel.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarFK_IdLineaCuentasContablesLineaProducto);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarCuentasContablesLineaProducto.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioCuentasContablesLineaProducto() throws Exception {

		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioCuentasContablesLineaProducto();
		this.updateVisibilidadResaltarControlesFormularioCuentasContablesLineaProducto();
		this.updateHabilitarResaltarControlesFormularioCuentasContablesLineaProducto();
		
	}
	
	public void updateBorderResaltarControlesFormularioCuentasContablesLineaProducto() throws Exception {
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltaridCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltaridCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_empresaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_empresaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_bodegaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_bodegaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_centro_costoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_centro_costoCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_lineaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_lineaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_grupoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_grupoCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_categoriaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_linea_categoriaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_inventarioCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_inventarioCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_ventaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_ventaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_descuentoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_descuentoCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_produccionCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_produccionCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_devolucionCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_devolucionCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_bonificaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_bonificaCuentasContablesLineaProducto);}
		if(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto!=null && this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setBorder(this.cuentascontableslineaproductoConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioCuentasContablesLineaProducto() throws Exception {		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
	
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostraridCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelidCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostraridCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_empresaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_empresaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_empresaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_bodegaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_bodegaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_bodegaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_centro_costoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_centro_costoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_centro_costoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_centro_costoCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_lineaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_lineaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_lineaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_grupoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_linea_grupoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_grupoCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_categoriaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_linea_categoriaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_linea_categoriaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_inventarioCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_ventaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_ventaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_descuentoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_produccionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_produccionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_produccionCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_produccionCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_devolucionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
		//this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jPanelid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setVisible(this.cuentascontableslineaproductoConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioCuentasContablesLineaProducto() throws Exception {
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentasContablesLineaProducto!=null) {
	
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jLabelidCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activaridCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_empresaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_empresaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_bodegaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_bodegaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_centro_costoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_centro_costoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_centro_costoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_centro_costoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_lineaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_lineaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_grupoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_grupoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_linea_categoriaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_linea_categoriaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_inventarioCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_inventarioCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_inventarioCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_ventaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_ventaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_ventaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_ventaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_ventaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_descuentoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_descuentoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_descuentoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_produccionCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_produccionCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_produccionCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_produccionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_devolucionCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_devolucionCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_devolucionCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_debitoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_debitoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_iva_creditoCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_iva_creditoCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_bonificaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_bonificaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_bonificaCuentasContablesLineaProducto);
		this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jComboBoxid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
			this.jInternalFrameDetalleFormCuentasContablesLineaProducto.jButtonid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto.setEnabled(this.cuentascontableslineaproductoConstantesFunciones.activarid_cuenta_contable_costo_bonificaCuentasContablesLineaProducto);
		}
	}
	
		
}