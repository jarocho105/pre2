/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.BodegaConstantesFunciones;
import com.bydan.erp.inventario.util.BodegaParameterReturnGeneral;
//import com.bydan.erp.inventario.util.BodegaParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.BodegaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class BodegaBeanSwingJInternalFrame extends BodegaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(BodegaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Bodega> bodegaValidator = new ClassValidator<Bodega>(Bodega.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Bodega bodega;	
	public Bodega bodegaAux;
	public Bodega bodegaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Bodega bodegaTotales;
	public Long idBodegaActual;
	public Long iIdNuevoBodega=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboGrupoBodega="";

	public List<GrupoBodega> grupobodegasForeignKey;

	public List<GrupoBodega> getgrupobodegasForeignKey() {
		return grupobodegasForeignKey;
	}

	public void setgrupobodegasForeignKey(List<GrupoBodega> grupobodegasForeignKey) {
		this.grupobodegasForeignKey = grupobodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public GrupoBodega grupobodegaForeignKey;

	public GrupoBodega getgrupobodegaForeignKey() {
		return grupobodegaForeignKey;
	}

	public void setgrupobodegaForeignKey(GrupoBodega grupobodegaForeignKey) {
		this.grupobodegaForeignKey = grupobodegaForeignKey;
	}

	public String sFinalQueryComboCalidadProducto="";

	public List<CalidadProducto> calidadproductosForeignKey;

	public List<CalidadProducto> getcalidadproductosForeignKey() {
		return calidadproductosForeignKey;
	}

	public void setcalidadproductosForeignKey(List<CalidadProducto> calidadproductosForeignKey) {
		this.calidadproductosForeignKey = calidadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CalidadProducto calidadproductoForeignKey;

	public CalidadProducto getcalidadproductoForeignKey() {
		return calidadproductoForeignKey;
	}

	public void setcalidadproductoForeignKey(CalidadProducto calidadproductoForeignKey) {
		this.calidadproductoForeignKey = calidadproductoForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboCiudad="";

	public List<Ciudad> ciudadsForeignKey;

	public List<Ciudad> getciudadsForeignKey() {
		return ciudadsForeignKey;
	}

	public void setciudadsForeignKey(List<Ciudad> ciudadsForeignKey) {
		this.ciudadsForeignKey = ciudadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ciudad ciudadForeignKey;

	public Ciudad getciudadForeignKey() {
		return ciudadForeignKey;
	}

	public void setciudadForeignKey(Ciudad ciudadForeignKey) {
		this.ciudadForeignKey = ciudadForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventario="";

	public List<CuentaContable> cuentacontableinventariosForeignKey;

	public List<CuentaContable> getcuentacontableinventariosForeignKey() {
		return cuentacontableinventariosForeignKey;
	}

	public void setcuentacontableinventariosForeignKey(List<CuentaContable> cuentacontableinventariosForeignKey) {
		this.cuentacontableinventariosForeignKey = cuentacontableinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventarioForeignKey;

	public CuentaContable getcuentacontableinventarioForeignKey() {
		return cuentacontableinventarioForeignKey;
	}

	public void setcuentacontableinventarioForeignKey(CuentaContable cuentacontableinventarioForeignKey) {
		this.cuentacontableinventarioForeignKey = cuentacontableinventarioForeignKey;
	}

	public String sFinalQueryComboCuentaContableCosto="";

	public List<CuentaContable> cuentacontablecostosForeignKey;

	public List<CuentaContable> getcuentacontablecostosForeignKey() {
		return cuentacontablecostosForeignKey;
	}

	public void setcuentacontablecostosForeignKey(List<CuentaContable> cuentacontablecostosForeignKey) {
		this.cuentacontablecostosForeignKey = cuentacontablecostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoForeignKey;

	public CuentaContable getcuentacontablecostoForeignKey() {
		return cuentacontablecostoForeignKey;
	}

	public void setcuentacontablecostoForeignKey(CuentaContable cuentacontablecostoForeignKey) {
		this.cuentacontablecostoForeignKey = cuentacontablecostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableVenta="";

	public List<CuentaContable> cuentacontableventasForeignKey;

	public List<CuentaContable> getcuentacontableventasForeignKey() {
		return cuentacontableventasForeignKey;
	}

	public void setcuentacontableventasForeignKey(List<CuentaContable> cuentacontableventasForeignKey) {
		this.cuentacontableventasForeignKey = cuentacontableventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableventaForeignKey;

	public CuentaContable getcuentacontableventaForeignKey() {
		return cuentacontableventaForeignKey;
	}

	public void setcuentacontableventaForeignKey(CuentaContable cuentacontableventaForeignKey) {
		this.cuentacontableventaForeignKey = cuentacontableventaForeignKey;
	}

	public String sFinalQueryComboCuentaContableDescuento="";

	public List<CuentaContable> cuentacontabledescuentosForeignKey;

	public List<CuentaContable> getcuentacontabledescuentosForeignKey() {
		return cuentacontabledescuentosForeignKey;
	}

	public void setcuentacontabledescuentosForeignKey(List<CuentaContable> cuentacontabledescuentosForeignKey) {
		this.cuentacontabledescuentosForeignKey = cuentacontabledescuentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledescuentoForeignKey;

	public CuentaContable getcuentacontabledescuentoForeignKey() {
		return cuentacontabledescuentoForeignKey;
	}

	public void setcuentacontabledescuentoForeignKey(CuentaContable cuentacontabledescuentoForeignKey) {
		this.cuentacontabledescuentoForeignKey = cuentacontabledescuentoForeignKey;
	}

	public String sFinalQueryComboCuentaContableDevolucion="";

	public List<CuentaContable> cuentacontabledevolucionsForeignKey;

	public List<CuentaContable> getcuentacontabledevolucionsForeignKey() {
		return cuentacontabledevolucionsForeignKey;
	}

	public void setcuentacontabledevolucionsForeignKey(List<CuentaContable> cuentacontabledevolucionsForeignKey) {
		this.cuentacontabledevolucionsForeignKey = cuentacontabledevolucionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledevolucionForeignKey;

	public CuentaContable getcuentacontabledevolucionForeignKey() {
		return cuentacontabledevolucionForeignKey;
	}

	public void setcuentacontabledevolucionForeignKey(CuentaContable cuentacontabledevolucionForeignKey) {
		this.cuentacontabledevolucionForeignKey = cuentacontabledevolucionForeignKey;
	}

	public String sFinalQueryComboCuentaContableDebito="";

	public List<CuentaContable> cuentacontabledebitosForeignKey;

	public List<CuentaContable> getcuentacontabledebitosForeignKey() {
		return cuentacontabledebitosForeignKey;
	}

	public void setcuentacontabledebitosForeignKey(List<CuentaContable> cuentacontabledebitosForeignKey) {
		this.cuentacontabledebitosForeignKey = cuentacontabledebitosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledebitoForeignKey;

	public CuentaContable getcuentacontabledebitoForeignKey() {
		return cuentacontabledebitoForeignKey;
	}

	public void setcuentacontabledebitoForeignKey(CuentaContable cuentacontabledebitoForeignKey) {
		this.cuentacontabledebitoForeignKey = cuentacontabledebitoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCredito="";

	public List<CuentaContable> cuentacontablecreditosForeignKey;

	public List<CuentaContable> getcuentacontablecreditosForeignKey() {
		return cuentacontablecreditosForeignKey;
	}

	public void setcuentacontablecreditosForeignKey(List<CuentaContable> cuentacontablecreditosForeignKey) {
		this.cuentacontablecreditosForeignKey = cuentacontablecreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoForeignKey;

	public CuentaContable getcuentacontablecreditoForeignKey() {
		return cuentacontablecreditoForeignKey;
	}

	public void setcuentacontablecreditoForeignKey(CuentaContable cuentacontablecreditoForeignKey) {
		this.cuentacontablecreditoForeignKey = cuentacontablecreditoForeignKey;
	}

	public String sFinalQueryComboCuentaContableBonifica="";

	public List<CuentaContable> cuentacontablebonificasForeignKey;

	public List<CuentaContable> getcuentacontablebonificasForeignKey() {
		return cuentacontablebonificasForeignKey;
	}

	public void setcuentacontablebonificasForeignKey(List<CuentaContable> cuentacontablebonificasForeignKey) {
		this.cuentacontablebonificasForeignKey = cuentacontablebonificasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablebonificaForeignKey;

	public CuentaContable getcuentacontablebonificaForeignKey() {
		return cuentacontablebonificaForeignKey;
	}

	public void setcuentacontablebonificaForeignKey(CuentaContable cuentacontablebonificaForeignKey) {
		this.cuentacontablebonificaForeignKey = cuentacontablebonificaForeignKey;
	}

	public String sFinalQueryComboCuentaContableProduccion="";

	public List<CuentaContable> cuentacontableproduccionsForeignKey;

	public List<CuentaContable> getcuentacontableproduccionsForeignKey() {
		return cuentacontableproduccionsForeignKey;
	}

	public void setcuentacontableproduccionsForeignKey(List<CuentaContable> cuentacontableproduccionsForeignKey) {
		this.cuentacontableproduccionsForeignKey = cuentacontableproduccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableproduccionForeignKey;

	public CuentaContable getcuentacontableproduccionForeignKey() {
		return cuentacontableproduccionForeignKey;
	}

	public void setcuentacontableproduccionForeignKey(CuentaContable cuentacontableproduccionForeignKey) {
		this.cuentacontableproduccionForeignKey = cuentacontableproduccionForeignKey;
	}

	public String sFinalQueryComboCuentaContableCostoBonifica="";

	public List<CuentaContable> cuentacontablecostobonificasForeignKey;

	public List<CuentaContable> getcuentacontablecostobonificasForeignKey() {
		return cuentacontablecostobonificasForeignKey;
	}

	public void setcuentacontablecostobonificasForeignKey(List<CuentaContable> cuentacontablecostobonificasForeignKey) {
		this.cuentacontablecostobonificasForeignKey = cuentacontablecostobonificasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostobonificaForeignKey;

	public CuentaContable getcuentacontablecostobonificaForeignKey() {
		return cuentacontablecostobonificaForeignKey;
	}

	public void setcuentacontablecostobonificaForeignKey(CuentaContable cuentacontablecostobonificaForeignKey) {
		this.cuentacontablecostobonificaForeignKey = cuentacontablecostobonificaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idCuentaContableInventarioActual=0L;

	public Long getidCuentaContableInventarioActual() {
		return idCuentaContableInventarioActual;
	}

	public void setidCuentaContableInventarioActual(Long idCuentaContableInventarioActual) {
		this.idCuentaContableInventarioActual= idCuentaContableInventarioActual;
	}
	public Long idCuentaContableCostoActual=0L;

	public Long getidCuentaContableCostoActual() {
		return idCuentaContableCostoActual;
	}

	public void setidCuentaContableCostoActual(Long idCuentaContableCostoActual) {
		this.idCuentaContableCostoActual= idCuentaContableCostoActual;
	}
	public Long idCuentaContableVentaActual=0L;

	public Long getidCuentaContableVentaActual() {
		return idCuentaContableVentaActual;
	}

	public void setidCuentaContableVentaActual(Long idCuentaContableVentaActual) {
		this.idCuentaContableVentaActual= idCuentaContableVentaActual;
	}
	public Long idCuentaContableDescuentoActual=0L;

	public Long getidCuentaContableDescuentoActual() {
		return idCuentaContableDescuentoActual;
	}

	public void setidCuentaContableDescuentoActual(Long idCuentaContableDescuentoActual) {
		this.idCuentaContableDescuentoActual= idCuentaContableDescuentoActual;
	}
	public Long idCuentaContableDevolucionActual=0L;

	public Long getidCuentaContableDevolucionActual() {
		return idCuentaContableDevolucionActual;
	}

	public void setidCuentaContableDevolucionActual(Long idCuentaContableDevolucionActual) {
		this.idCuentaContableDevolucionActual= idCuentaContableDevolucionActual;
	}
	public Long idCuentaContableDebitoActual=0L;

	public Long getidCuentaContableDebitoActual() {
		return idCuentaContableDebitoActual;
	}

	public void setidCuentaContableDebitoActual(Long idCuentaContableDebitoActual) {
		this.idCuentaContableDebitoActual= idCuentaContableDebitoActual;
	}
	public Long idCuentaContableCreditoActual=0L;

	public Long getidCuentaContableCreditoActual() {
		return idCuentaContableCreditoActual;
	}

	public void setidCuentaContableCreditoActual(Long idCuentaContableCreditoActual) {
		this.idCuentaContableCreditoActual= idCuentaContableCreditoActual;
	}
	public Long idCuentaContableBonificaActual=0L;

	public Long getidCuentaContableBonificaActual() {
		return idCuentaContableBonificaActual;
	}

	public void setidCuentaContableBonificaActual(Long idCuentaContableBonificaActual) {
		this.idCuentaContableBonificaActual= idCuentaContableBonificaActual;
	}
	public Long idCuentaContableProduccionActual=0L;

	public Long getidCuentaContableProduccionActual() {
		return idCuentaContableProduccionActual;
	}

	public void setidCuentaContableProduccionActual(Long idCuentaContableProduccionActual) {
		this.idCuentaContableProduccionActual= idCuentaContableProduccionActual;
	}
	public Long idCuentaContableCostoBonificaActual=0L;

	public Long getidCuentaContableCostoBonificaActual() {
		return idCuentaContableCostoBonificaActual;
	}

	public void setidCuentaContableCostoBonificaActual(Long idCuentaContableCostoBonificaActual) {
		this.idCuentaContableCostoBonificaActual= idCuentaContableCostoBonificaActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoBodega;
	public Boolean isPermisoNuevoBodega;
	public Boolean isPermisoActualizarBodega;
	public Boolean isPermisoActualizarOriginalBodega;
	public Boolean isPermisoEliminarBodega;
	public Boolean isPermisoGuardarCambiosBodega;
	public Boolean isPermisoConsultaBodega;
	public Boolean isPermisoBusquedaBodega;
	public Boolean isPermisoReporteBodega;
	public Boolean isPermisoPaginacionMedioBodega;
	public Boolean isPermisoPaginacionAltoBodega;
	public Boolean isPermisoPaginacionTodoBodega;
	public Boolean isPermisoCopiarBodega;
	public Boolean isPermisoVerFormBodega;
	public Boolean isPermisoDuplicarBodega;
	public Boolean isPermisoOrdenBodega;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public BodegaParameterReturnGeneral bodegaReturnGeneral;
	public BodegaParameterReturnGeneral bodegaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoBodega=false;
	public Boolean esParaAccionDesdeFormularioBodega=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected BodegaSessionBeanAdditional bodegaSessionBeanAdditional=null;
	
	public BodegaSessionBeanAdditional getBodegaSessionBeanAdditional() {
		return this.bodegaSessionBeanAdditional;
	}
	
	public void setBodegaSessionBeanAdditional(BodegaSessionBeanAdditional bodegaSessionBeanAdditional) {
		try {
			this.bodegaSessionBeanAdditional=bodegaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected BodegaBeanSwingJInternalFrameAdditional bodegaBeanSwingJInternalFrameAdditional=null;
	//public class BodegaBeanSwingJInternalFrame
	
	public BodegaBeanSwingJInternalFrameAdditional getBodegaBeanSwingJInternalFrameAdditional() {
		return this.bodegaBeanSwingJInternalFrameAdditional;
	}
	
	public void setBodegaBeanSwingJInternalFrameAdditional(BodegaBeanSwingJInternalFrameAdditional bodegaBeanSwingJInternalFrameAdditional) {
		try {
			this.bodegaBeanSwingJInternalFrameAdditional=bodegaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public BodegaLogic bodegaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Bodega bodegaBean;
	public BodegaConstantesFunciones bodegaConstantesFunciones;
	//public BodegaParameterReturnGeneral bodegaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public GrupoBodegaLogic grupobodegaLogic;
	public CalidadProductoLogic calidadproductoLogic;
	public PaisLogic paisLogic;
	public CiudadLogic ciudadLogic;
	public CentroCostoLogic centrocostoLogic;
	public EmpleadoLogic empleadoLogic;
	public CuentaContableLogic cuentacontableinventarioLogic;
	public CuentaContableLogic cuentacontablecostoLogic;
	public CuentaContableLogic cuentacontableventaLogic;
	public CuentaContableLogic cuentacontabledescuentoLogic;
	public CuentaContableLogic cuentacontabledevolucionLogic;
	public CuentaContableLogic cuentacontabledebitoLogic;
	public CuentaContableLogic cuentacontablecreditoLogic;
	public CuentaContableLogic cuentacontablebonificaLogic;
	public CuentaContableLogic cuentacontableproduccionLogic;
	public CuentaContableLogic cuentacontablecostobonificaLogic;
	
	//PARAMETROS
	
	
	//public List<Bodega> bodegas;	
	//public List<Bodega> bodegasEliminados;
	//public List<Bodega> bodegasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoBodega=false;
	public Boolean isVisibilidadCeldaDuplicarBodega=true;
	public Boolean isVisibilidadCeldaCopiarBodega=true;
	public Boolean isVisibilidadCeldaVerFormBodega=true;
	public Boolean isVisibilidadCeldaOrdenBodega=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesBodega=false;
	public Boolean isVisibilidadCeldaModificarBodega=false;
	public Boolean isVisibilidadCeldaActualizarBodega=false;
	public Boolean isVisibilidadCeldaEliminarBodega=false;
	public Boolean isVisibilidadCeldaCancelarBodega=false;
	public Boolean isVisibilidadCeldaGuardarBodega=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosBodega=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNombre=false;
	public Boolean isVisibilidadBusquedaPorResponsableNombre=false;
	public Boolean isVisibilidadBusquedaPorRuc=false;
	public Boolean isVisibilidadBusquedaPorSiglas=false;
	public Boolean isVisibilidadBusquedaPorTelefono=false;
	public Boolean isVisibilidadFK_IdCalidadProducto=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCiudad=false;
	public Boolean isVisibilidadFK_IdCuentaContableBonifica=false;
	public Boolean isVisibilidadFK_IdCuentaContableCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableCostoBonifica=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableDebito=false;
	public Boolean isVisibilidadFK_IdCuentaContableDescuento=false;
	public Boolean isVisibilidadFK_IdCuentaContableDevolucion=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventario=false;
	public Boolean isVisibilidadFK_IdCuentaContableProduccion=false;
	public Boolean isVisibilidadFK_IdCuentaContableVenta=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdGrupoBodega=false;
	public Boolean isVisibilidadFK_IdPais=false;
	
	public Long getiIdNuevoBodega() {
		return this.iIdNuevoBodega;
	}

	public void setiIdNuevoBodega(Long iIdNuevoBodega) {
		this.iIdNuevoBodega = iIdNuevoBodega;
	}
	
	public Long getidBodegaActual() {
		return this.idBodegaActual;
	}

	public void setidBodegaActual(Long idBodegaActual) {
		this.idBodegaActual = idBodegaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Bodega getbodega() {
		return this.bodega;
	}

	public void setbodega(Bodega bodega) {
		this.bodega = bodega;
	}
	
	public Bodega getbodegaAux() {
		return this.bodegaAux;
	}

	public void setbodegaAux(Bodega bodegaAux) {
		this.bodegaAux = bodegaAux;
	}				
	
	public Bodega getbodegaAnterior() {
		return this.bodegaAnterior;
	}

	public void setbodegaAnterior(Bodega bodegaAnterior) {
		this.bodegaAnterior = bodegaAnterior;
	}	
	
	public Bodega getbodegaTotales() {
		return this.bodegaTotales;
	}

	public void setbodegaTotales(Bodega bodegaTotales) {
		this.bodegaTotales = bodegaTotales;
	}	
	
	public Bodega getbodegaBean() {
		return this.bodegaBean;
	}

	public void setbodegaBean(Bodega bodegaBean) {
		this.bodegaBean = bodegaBean;
	}	
	
	public BodegaParameterReturnGeneral getbodegaReturnGeneral() {
		return this.bodegaReturnGeneral;
	}

	public void setbodegaReturnGeneral(BodegaParameterReturnGeneral bodegaReturnGeneral) {
		this.bodegaReturnGeneral = bodegaReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String nombreBusquedaPorNombre="";

	public String getnombreBusquedaPorNombre() {
		return this.nombreBusquedaPorNombre;
	}

	public void setnombreBusquedaPorNombre(String nombreBusquedaPorNombre) {
		this.nombreBusquedaPorNombre = nombreBusquedaPorNombre;
	}

	public String responsable_nombreBusquedaPorResponsableNombre="";

	public String getresponsable_nombreBusquedaPorResponsableNombre() {
		return this.responsable_nombreBusquedaPorResponsableNombre;
	}

	public void setresponsable_nombreBusquedaPorResponsableNombre(String responsable_nombreBusquedaPorResponsableNombre) {
		this.responsable_nombreBusquedaPorResponsableNombre = responsable_nombreBusquedaPorResponsableNombre;
	}

	public String rucBusquedaPorRuc="";

	public String getrucBusquedaPorRuc() {
		return this.rucBusquedaPorRuc;
	}

	public void setrucBusquedaPorRuc(String rucBusquedaPorRuc) {
		this.rucBusquedaPorRuc = rucBusquedaPorRuc;
	}

	public String siglasBusquedaPorSiglas="";

	public String getsiglasBusquedaPorSiglas() {
		return this.siglasBusquedaPorSiglas;
	}

	public void setsiglasBusquedaPorSiglas(String siglasBusquedaPorSiglas) {
		this.siglasBusquedaPorSiglas = siglasBusquedaPorSiglas;
	}

	public String telefonoBusquedaPorTelefono="";

	public String gettelefonoBusquedaPorTelefono() {
		return this.telefonoBusquedaPorTelefono;
	}

	public void settelefonoBusquedaPorTelefono(String telefonoBusquedaPorTelefono) {
		this.telefonoBusquedaPorTelefono = telefonoBusquedaPorTelefono;
	}

	public Long id_calidad_productoFK_IdCalidadProducto=-1L;

	public Long getid_calidad_productoFK_IdCalidadProducto() {
		return this.id_calidad_productoFK_IdCalidadProducto;
	}

	public void setid_calidad_productoFK_IdCalidadProducto(Long id_calidad_productoFK_IdCalidadProducto) {
		this.id_calidad_productoFK_IdCalidadProducto = id_calidad_productoFK_IdCalidadProducto;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_ciudadFK_IdCiudad=-1L;

	public Long getid_ciudadFK_IdCiudad() {
		return this.id_ciudadFK_IdCiudad;
	}

	public void setid_ciudadFK_IdCiudad(Long id_ciudadFK_IdCiudad) {
		this.id_ciudadFK_IdCiudad = id_ciudadFK_IdCiudad;
	}

	public Long id_cuenta_contable_bonificaFK_IdCuentaContableBonifica=-1L;

	public Long getid_cuenta_contable_bonificaFK_IdCuentaContableBonifica() {
		return this.id_cuenta_contable_bonificaFK_IdCuentaContableBonifica;
	}

	public void setid_cuenta_contable_bonificaFK_IdCuentaContableBonifica(Long id_cuenta_contable_bonificaFK_IdCuentaContableBonifica) {
		this.id_cuenta_contable_bonificaFK_IdCuentaContableBonifica = id_cuenta_contable_bonificaFK_IdCuentaContableBonifica;
	}

	public Long id_cuenta_contable_costoFK_IdCuentaContableCosto=-1L;

	public Long getid_cuenta_contable_costoFK_IdCuentaContableCosto() {
		return this.id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public void setid_cuenta_contable_costoFK_IdCuentaContableCosto(Long id_cuenta_contable_costoFK_IdCuentaContableCosto) {
		this.id_cuenta_contable_costoFK_IdCuentaContableCosto = id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public Long id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica=-1L;

	public Long getid_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica() {
		return this.id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica;
	}

	public void setid_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica(Long id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica) {
		this.id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica = id_cuenta_contable_costo_bonificaFK_IdCuentaContableCostoBonifica;
	}

	public Long id_cuenta_contable_creditoFK_IdCuentaContableCredito=null;

	public Long getid_cuenta_contable_creditoFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_creditoFK_IdCuentaContableCredito(Long id_cuenta_contable_creditoFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_creditoFK_IdCuentaContableCredito = id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_debitoFK_IdCuentaContableDebito=null;

	public Long getid_cuenta_contable_debitoFK_IdCuentaContableDebito() {
		return this.id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public void setid_cuenta_contable_debitoFK_IdCuentaContableDebito(Long id_cuenta_contable_debitoFK_IdCuentaContableDebito) {
		this.id_cuenta_contable_debitoFK_IdCuentaContableDebito = id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento=-1L;

	public Long getid_cuenta_contable_descuentoFK_IdCuentaContableDescuento() {
		return this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public void setid_cuenta_contable_descuentoFK_IdCuentaContableDescuento(Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento) {
		this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento = id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion=-1L;

	public Long getid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion() {
		return this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public void setid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion(Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion) {
		this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion = id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario=-1L;

	public Long getid_cuenta_contable_inventarioFK_IdCuentaContableInventario() {
		return this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public void setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario) {
		this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario = id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public Long id_cuenta_contable_produccionFK_IdCuentaContableProduccion=-1L;

	public Long getid_cuenta_contable_produccionFK_IdCuentaContableProduccion() {
		return this.id_cuenta_contable_produccionFK_IdCuentaContableProduccion;
	}

	public void setid_cuenta_contable_produccionFK_IdCuentaContableProduccion(Long id_cuenta_contable_produccionFK_IdCuentaContableProduccion) {
		this.id_cuenta_contable_produccionFK_IdCuentaContableProduccion = id_cuenta_contable_produccionFK_IdCuentaContableProduccion;
	}

	public Long id_cuenta_contable_ventaFK_IdCuentaContableVenta=-1L;

	public Long getid_cuenta_contable_ventaFK_IdCuentaContableVenta() {
		return this.id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public void setid_cuenta_contable_ventaFK_IdCuentaContableVenta(Long id_cuenta_contable_ventaFK_IdCuentaContableVenta) {
		this.id_cuenta_contable_ventaFK_IdCuentaContableVenta = id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_grupo_bodegaFK_IdGrupoBodega=-1L;

	public Long getid_grupo_bodegaFK_IdGrupoBodega() {
		return this.id_grupo_bodegaFK_IdGrupoBodega;
	}

	public void setid_grupo_bodegaFK_IdGrupoBodega(Long id_grupo_bodegaFK_IdGrupoBodega) {
		this.id_grupo_bodegaFK_IdGrupoBodega = id_grupo_bodegaFK_IdGrupoBodega;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public BodegaLogic getBodegaLogic()	{		
		return bodegaLogic;
	}

	public void setBodegaLogic(BodegaLogic bodegaLogic) {
		this.bodegaLogic = bodegaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoBodega() {
		return isEsNuevoBodega;
	}

	public void setIsEsNuevoBodega(Boolean isEsNuevoBodega) {
		this.isEsNuevoBodega = isEsNuevoBodega;
	}

	public Boolean getEsParaAccionDesdeFormularioBodega() {
		return esParaAccionDesdeFormularioBodega;
	}
	
	public void setEsParaAccionDesdeFormularioBodega(Boolean esParaAccionDesdeFormularioBodega) {
		this.esParaAccionDesdeFormularioBodega = esParaAccionDesdeFormularioBodega;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(bodegaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosGrupoBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.grupobodegasForeignKey=new ArrayList<GrupoBodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			GrupoBodegaLogic grupobodegaLogic=new GrupoBodegaLogic();

			//grupobodegaLogic.getGrupoBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//grupobodegaLogic.getGrupoBodegaDataAccess().setIsForForeingKeyData(true);

					grupobodegaLogic.getTodosGrupoBodegasWithConnection(sFinalQuery,new Pagination());

					this.grupobodegasForeignKey=grupobodegaLogic.getGrupoBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaGrupoBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					grupobodegaLogic.getEntityWithConnection(bodegaSessionBean.getlidGrupoBodegaActual());
					this.grupobodegasForeignKey.add(grupobodegaLogic.getGrupoBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCalidadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.calidadproductosForeignKey=new ArrayList<CalidadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CalidadProductoLogic calidadproductoLogic=new CalidadProductoLogic();

			//calidadproductoLogic.getCalidadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//calidadproductoLogic.getCalidadProductoDataAccess().setIsForForeingKeyData(true);

					calidadproductoLogic.getTodosCalidadProductosWithConnection(sFinalQuery,new Pagination());

					this.calidadproductosForeignKey=calidadproductoLogic.getCalidadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCalidadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					calidadproductoLogic.getEntityWithConnection(bodegaSessionBean.getlidCalidadProductoActual());
					this.calidadproductosForeignKey.add(calidadproductoLogic.getCalidadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(bodegaSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCiudadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ciudadsForeignKey=new ArrayList<Ciudad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CiudadLogic ciudadLogic=new CiudadLogic();

			//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

					ciudadLogic.getTodosCiudadsWithConnection(sFinalQuery,new Pagination());

					this.ciudadsForeignKey=ciudadLogic.getCiudads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCiudad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ciudadLogic.getEntityWithConnection(bodegaSessionBean.getlidCiudadActual());
					this.ciudadsForeignKey.add(ciudadLogic.getCiudad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(bodegaSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(bodegaSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventarioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventariosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableInventarioActual());
					this.cuentacontableinventariosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableCostoActual());
					this.cuentacontablecostosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableVentaActual());
					this.cuentacontableventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDescuentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledescuentoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledescuentosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDescuento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableDescuentoActual());
					this.cuentacontabledescuentosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDevolucionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledevolucionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledevolucionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDevolucion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableDevolucionActual());
					this.cuentacontabledevolucionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDebitosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledebitoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledebitosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDebito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableDebitoActual());
					this.cuentacontabledebitosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableCreditoActual());
					this.cuentacontablecreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableBonificasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablebonificaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablebonificasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableBonifica(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableBonificaActual());
					this.cuentacontablebonificasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableProduccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableproduccionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableproduccionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableProduccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableProduccionActual());
					this.cuentacontableproduccionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostoBonificasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostobonificaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostobonificasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCostoBonifica(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(bodegaSessionBean.getlidCuentaContableCostoBonificaActual());
					this.cuentacontablecostobonificasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaBodega.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaBodegaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaBodegaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaBodegaGenerico!=null && jComboBoxid_empresaBodegaGenerico.getItemCount()>0) {
					jComboBoxid_empresaBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualGrupoBodegaForeignKey(Long idGrupoBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(grupobodegaTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setGrupoBodega(grupobodegaTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setSelectedItem(grupobodegaTemp);
					}
				} else {
					//jComboBoxid_grupo_bodegaBodega.setSelectedItem(grupobodegaTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdGrupoBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(grupobodegaTemp!=null && jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega!=null) {
						jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.setSelectedItem(grupobodegaTemp);
					} else {
						if(jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega!=null) {
							//jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.setSelectedItem(grupobodegaTemp);
							if(jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.getItemCount()>0) {
								jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualGrupoBodegaForeignKeyDescripcion(Long idGrupoBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}


			sDescripcion=GrupoBodegaConstantesFunciones.getGrupoBodegaDescripcion(grupobodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualGrupoBodegaForeignKeyGenerico(Long idGrupoBodegaSeleccionado,JComboBox jComboBoxid_grupo_bodegaBodegaGenerico)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaTemp=null;

			for(GrupoBodega grupobodegaAux:grupobodegasForeignKey) {
				if(grupobodegaAux.getId()!=null && grupobodegaAux.getId().equals(idGrupoBodegaSeleccionado)) {
					grupobodegaTemp=grupobodegaAux;
					break;
				}
			}

			if(grupobodegaTemp!=null) {
				jComboBoxid_grupo_bodegaBodegaGenerico.setSelectedItem(grupobodegaTemp);
			} else {
				if(jComboBoxid_grupo_bodegaBodegaGenerico!=null && jComboBoxid_grupo_bodegaBodegaGenerico.getItemCount()>0) {
					jComboBoxid_grupo_bodegaBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCalidadProductoForeignKey(Long idCalidadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(calidadproductoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCalidadProducto(calidadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setSelectedItem(calidadproductoTemp);
					}
				} else {
					//jComboBoxid_calidad_productoBodega.setSelectedItem(calidadproductoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCalidadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(calidadproductoTemp!=null && jComboBoxid_calidad_productoFK_IdCalidadProductoBodega!=null) {
						jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.setSelectedItem(calidadproductoTemp);
					} else {
						if(jComboBoxid_calidad_productoFK_IdCalidadProductoBodega!=null) {
							//jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.setSelectedItem(calidadproductoTemp);
							if(jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.getItemCount()>0) {
								jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCalidadProductoForeignKeyDescripcion(Long idCalidadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}


			sDescripcion=CalidadProductoConstantesFunciones.getCalidadProductoDescripcion(calidadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCalidadProductoForeignKeyGenerico(Long idCalidadProductoSeleccionado,JComboBox jComboBoxid_calidad_productoBodegaGenerico)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoTemp=null;

			for(CalidadProducto calidadproductoAux:calidadproductosForeignKey) {
				if(calidadproductoAux.getId()!=null && calidadproductoAux.getId().equals(idCalidadProductoSeleccionado)) {
					calidadproductoTemp=calidadproductoAux;
					break;
				}
			}

			if(calidadproductoTemp!=null) {
				jComboBoxid_calidad_productoBodegaGenerico.setSelectedItem(calidadproductoTemp);
			} else {
				if(jComboBoxid_calidad_productoBodegaGenerico!=null && jComboBoxid_calidad_productoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_calidad_productoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisBodega.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisBodegaGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisBodegaGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisBodegaGenerico!=null && jComboBoxid_paisBodegaGenerico.getItemCount()>0) {
					jComboBoxid_paisBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCiudadForeignKey(Long idCiudadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ciudadTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCiudad(ciudadTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setSelectedItem(ciudadTemp);
					}
				} else {
					//jComboBoxid_ciudadBodega.setSelectedItem(ciudadTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCiudadForeignKeyDescripcion(Long idCiudadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}


			sDescripcion=CiudadConstantesFunciones.getCiudadDescripcion(ciudadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCiudadForeignKeyGenerico(Long idCiudadSeleccionado,JComboBox jComboBoxid_ciudadBodegaGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(ciudadTemp!=null) {
				jComboBoxid_ciudadBodegaGenerico.setSelectedItem(ciudadTemp);
			} else {
				if(jComboBoxid_ciudadBodegaGenerico!=null && jComboBoxid_ciudadBodegaGenerico.getItemCount()>0) {
					jComboBoxid_ciudadBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoBodega.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoBodega!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoBodega.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoBodega!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoBodega.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoBodega.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoBodega.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoBodegaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoBodegaGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoBodegaGenerico!=null && jComboBoxid_centro_costoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoBodega.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoBodega!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoBodega.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoBodega!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoBodega.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoBodega.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoBodega.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoBodegaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoBodegaGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoBodegaGenerico!=null && jComboBoxid_empleadoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_empleadoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioForeignKey(Long idCuentaContableInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventarioTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableInventario(cuentacontableinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setSelectedItem(cuentacontableinventarioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventarioBodega.setSelectedItem(cuentacontableinventarioTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioForeignKeyDescripcion(Long idCuentaContableInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioForeignKeyGenerico(Long idCuentaContableInventarioSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventarioBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(cuentacontableinventarioTemp!=null) {
				jComboBoxid_cuenta_contable_inventarioBodegaGenerico.setSelectedItem(cuentacontableinventarioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventarioBodegaGenerico!=null && jComboBoxid_cuenta_contable_inventarioBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventarioBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoForeignKey(Long idCuentaContableCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableCosto(cuentacontablecostoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setSelectedItem(cuentacontablecostoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costoBodega.setSelectedItem(cuentacontablecostoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoForeignKeyDescripcion(Long idCuentaContableCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoForeignKeyGenerico(Long idCuentaContableCostoSeleccionado,JComboBox jComboBoxid_cuenta_contable_costoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(cuentacontablecostoTemp!=null) {
				jComboBoxid_cuenta_contable_costoBodegaGenerico.setSelectedItem(cuentacontablecostoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costoBodegaGenerico!=null && jComboBoxid_cuenta_contable_costoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableVentaForeignKey(Long idCuentaContableVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableventaTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableVenta(cuentacontableventaTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setSelectedItem(cuentacontableventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_ventaBodega.setSelectedItem(cuentacontableventaTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableVentaForeignKeyDescripcion(Long idCuentaContableVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableVentaForeignKeyGenerico(Long idCuentaContableVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_ventaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(cuentacontableventaTemp!=null) {
				jComboBoxid_cuenta_contable_ventaBodegaGenerico.setSelectedItem(cuentacontableventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_ventaBodegaGenerico!=null && jComboBoxid_cuenta_contable_ventaBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_ventaBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDescuentoForeignKey(Long idCuentaContableDescuentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledescuentoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableDescuento(cuentacontabledescuentoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setSelectedItem(cuentacontabledescuentoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_descuentoBodega.setSelectedItem(cuentacontabledescuentoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDescuentoForeignKeyDescripcion(Long idCuentaContableDescuentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledescuentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDescuentoForeignKeyGenerico(Long idCuentaContableDescuentoSeleccionado,JComboBox jComboBoxid_cuenta_contable_descuentoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(cuentacontabledescuentoTemp!=null) {
				jComboBoxid_cuenta_contable_descuentoBodegaGenerico.setSelectedItem(cuentacontabledescuentoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_descuentoBodegaGenerico!=null && jComboBoxid_cuenta_contable_descuentoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_descuentoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDevolucionForeignKey(Long idCuentaContableDevolucionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledevolucionTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableDevolucion(cuentacontabledevolucionTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setSelectedItem(cuentacontabledevolucionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_devolucionBodega.setSelectedItem(cuentacontabledevolucionTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDevolucionForeignKeyDescripcion(Long idCuentaContableDevolucionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledevolucionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDevolucionForeignKeyGenerico(Long idCuentaContableDevolucionSeleccionado,JComboBox jComboBoxid_cuenta_contable_devolucionBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(cuentacontabledevolucionTemp!=null) {
				jComboBoxid_cuenta_contable_devolucionBodegaGenerico.setSelectedItem(cuentacontabledevolucionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_devolucionBodegaGenerico!=null && jComboBoxid_cuenta_contable_devolucionBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_devolucionBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDebitoForeignKey(Long idCuentaContableDebitoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledebitoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableDebito(cuentacontabledebitoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setSelectedItem(cuentacontabledebitoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_debitoBodega.setSelectedItem(cuentacontabledebitoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDebitoForeignKeyDescripcion(Long idCuentaContableDebitoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledebitoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDebitoForeignKeyGenerico(Long idCuentaContableDebitoSeleccionado,JComboBox jComboBoxid_cuenta_contable_debitoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(cuentacontabledebitoTemp!=null) {
				jComboBoxid_cuenta_contable_debitoBodegaGenerico.setSelectedItem(cuentacontabledebitoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_debitoBodegaGenerico!=null && jComboBoxid_cuenta_contable_debitoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_debitoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoForeignKey(Long idCuentaContableCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableCredito(cuentacontablecreditoTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setSelectedItem(cuentacontablecreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_creditoBodega.setSelectedItem(cuentacontablecreditoTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoForeignKeyDescripcion(Long idCuentaContableCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoForeignKeyGenerico(Long idCuentaContableCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_creditoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(cuentacontablecreditoTemp!=null) {
				jComboBoxid_cuenta_contable_creditoBodegaGenerico.setSelectedItem(cuentacontablecreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_creditoBodegaGenerico!=null && jComboBoxid_cuenta_contable_creditoBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_creditoBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableBonificaForeignKey(Long idCuentaContableBonificaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablebonificaTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableBonifica(cuentacontablebonificaTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setSelectedItem(cuentacontablebonificaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_bonificaBodega.setSelectedItem(cuentacontablebonificaTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableBonificaForeignKeyDescripcion(Long idCuentaContableBonificaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablebonificaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableBonificaForeignKeyGenerico(Long idCuentaContableBonificaSeleccionado,JComboBox jComboBoxid_cuenta_contable_bonificaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablebonificaTemp=null;

			for(CuentaContable cuentacontablebonificaAux:cuentacontablebonificasForeignKey) {
				if(cuentacontablebonificaAux.getId()!=null && cuentacontablebonificaAux.getId().equals(idCuentaContableBonificaSeleccionado)) {
					cuentacontablebonificaTemp=cuentacontablebonificaAux;
					break;
				}
			}

			if(cuentacontablebonificaTemp!=null) {
				jComboBoxid_cuenta_contable_bonificaBodegaGenerico.setSelectedItem(cuentacontablebonificaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_bonificaBodegaGenerico!=null && jComboBoxid_cuenta_contable_bonificaBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_bonificaBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableProduccionForeignKey(Long idCuentaContableProduccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableproduccionTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableProduccion(cuentacontableproduccionTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setSelectedItem(cuentacontableproduccionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_produccionBodega.setSelectedItem(cuentacontableproduccionTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableProduccionForeignKeyDescripcion(Long idCuentaContableProduccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableproduccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableProduccionForeignKeyGenerico(Long idCuentaContableProduccionSeleccionado,JComboBox jComboBoxid_cuenta_contable_produccionBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableproduccionTemp=null;

			for(CuentaContable cuentacontableproduccionAux:cuentacontableproduccionsForeignKey) {
				if(cuentacontableproduccionAux.getId()!=null && cuentacontableproduccionAux.getId().equals(idCuentaContableProduccionSeleccionado)) {
					cuentacontableproduccionTemp=cuentacontableproduccionAux;
					break;
				}
			}

			if(cuentacontableproduccionTemp!=null) {
				jComboBoxid_cuenta_contable_produccionBodegaGenerico.setSelectedItem(cuentacontableproduccionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_produccionBodegaGenerico!=null && jComboBoxid_cuenta_contable_produccionBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_produccionBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoBonificaForeignKey(Long idCuentaContableCostoBonificaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostobonificaTemp!=null) {

					if(this.bodega!=null) {
						this.bodega.setCuentaContableCostoBonifica(cuentacontablecostobonificaTemp);
					}

					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedItem(cuentacontablecostobonificaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedItem(cuentacontablecostobonificaTemp);
					if(this.jInternalFrameDetalleFormBodega!=null) {
						if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.getItemCount()>0) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoBonificaForeignKeyDescripcion(Long idCuentaContableCostoBonificaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostobonificaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoBonificaForeignKeyGenerico(Long idCuentaContableCostoBonificaSeleccionado,JComboBox jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostobonificaTemp=null;

			for(CuentaContable cuentacontablecostobonificaAux:cuentacontablecostobonificasForeignKey) {
				if(cuentacontablecostobonificaAux.getId()!=null && cuentacontablecostobonificaAux.getId().equals(idCuentaContableCostoBonificaSeleccionado)) {
					cuentacontablecostobonificaTemp=cuentacontablecostobonificaAux;
					break;
				}
			}

			if(cuentacontablecostobonificaTemp!=null) {
				jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico.setSelectedItem(cuentacontablecostobonificaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico!=null && jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Bodega bodega,JComboBox jComboBoxid_empresaBodegaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaBodegaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaBodegaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				bodega.setid_empresa(empresaAux.getId());
				bodega.setempresa_descripcion(BodegaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				bodega.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarGrupoBodegaForeignKey(Bodega bodega,JComboBox jComboBoxid_grupo_bodegaBodegaGenerico)throws Exception
	{
		try
		{
			GrupoBodega  grupobodegaAux=new GrupoBodega();

			if(jComboBoxid_grupo_bodegaBodegaGenerico==null) {
				grupobodegaAux=(GrupoBodega)this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.getSelectedItem();
			} else {
				grupobodegaAux=(GrupoBodega)jComboBoxid_grupo_bodegaBodegaGenerico.getSelectedItem();
			}

			if(grupobodegaAux!=null && grupobodegaAux.getId()!=null) {
				bodega.setid_grupo_bodega(grupobodegaAux.getId());
				bodega.setgrupobodega_descripcion(BodegaConstantesFunciones.getGrupoBodegaDescripcion(grupobodegaAux));
				bodega.setGrupoBodega(grupobodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCalidadProductoForeignKey(Bodega bodega,JComboBox jComboBoxid_calidad_productoBodegaGenerico)throws Exception
	{
		try
		{
			CalidadProducto  calidadproductoAux=new CalidadProducto();

			if(jComboBoxid_calidad_productoBodegaGenerico==null) {
				calidadproductoAux=(CalidadProducto)this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.getSelectedItem();
			} else {
				calidadproductoAux=(CalidadProducto)jComboBoxid_calidad_productoBodegaGenerico.getSelectedItem();
			}

			if(calidadproductoAux!=null && calidadproductoAux.getId()!=null) {
				bodega.setid_calidad_producto(calidadproductoAux.getId());
				bodega.setcalidadproducto_descripcion(BodegaConstantesFunciones.getCalidadProductoDescripcion(calidadproductoAux));
				bodega.setCalidadProducto(calidadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(Bodega bodega,JComboBox jComboBoxid_paisBodegaGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisBodegaGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisBodegaGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				bodega.setid_pais(paisAux.getId());
				bodega.setpais_descripcion(BodegaConstantesFunciones.getPaisDescripcion(paisAux));
				bodega.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCiudadForeignKey(Bodega bodega,JComboBox jComboBoxid_ciudadBodegaGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadAux=new Ciudad();

			if(jComboBoxid_ciudadBodegaGenerico==null) {
				ciudadAux=(Ciudad)this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.getSelectedItem();
			} else {
				ciudadAux=(Ciudad)jComboBoxid_ciudadBodegaGenerico.getSelectedItem();
			}

			if(ciudadAux!=null && ciudadAux.getId()!=null) {
				bodega.setid_ciudad(ciudadAux.getId());
				bodega.setciudad_descripcion(BodegaConstantesFunciones.getCiudadDescripcion(ciudadAux));
				bodega.setCiudad(ciudadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(Bodega bodega,JComboBox jComboBoxid_centro_costoBodegaGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoBodegaGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoBodegaGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				bodega.setid_centro_costo(centrocostoAux.getId());
				bodega.setcentrocosto_descripcion(BodegaConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				bodega.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(Bodega bodega,JComboBox jComboBoxid_empleadoBodegaGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoBodegaGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoBodegaGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				bodega.setid_empleado(empleadoAux.getId());
				bodega.setempleado_descripcion(BodegaConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				bodega.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_inventarioBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventarioBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventarioBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_inventario(cuentacontableAux.getId());
				bodega.setcuentacontableinventario_descripcion(BodegaConstantesFunciones.getCuentaContableInventarioDescripcion(cuentacontableAux));
				bodega.setCuentaContableInventario(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_costoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costoBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costoBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_costo(cuentacontableAux.getId());
				bodega.setcuentacontablecosto_descripcion(BodegaConstantesFunciones.getCuentaContableCostoDescripcion(cuentacontableAux));
				bodega.setCuentaContableCosto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableVentaForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_ventaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_ventaBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_ventaBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_venta(cuentacontableAux.getId());
				bodega.setcuentacontableventa_descripcion(BodegaConstantesFunciones.getCuentaContableVentaDescripcion(cuentacontableAux));
				bodega.setCuentaContableVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDescuentoForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_descuentoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_descuentoBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_descuentoBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_descuento(cuentacontableAux.getId());
				bodega.setcuentacontabledescuento_descripcion(BodegaConstantesFunciones.getCuentaContableDescuentoDescripcion(cuentacontableAux));
				bodega.setCuentaContableDescuento(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDevolucionForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_devolucionBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_devolucionBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_devolucionBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_devolucion(cuentacontableAux.getId());
				bodega.setcuentacontabledevolucion_descripcion(BodegaConstantesFunciones.getCuentaContableDevolucionDescripcion(cuentacontableAux));
				bodega.setCuentaContableDevolucion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDebitoForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_debitoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_debitoBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_debitoBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				bodega.setid_cuenta_contable_debito(cuentacontableAux.getId());
				bodega.setcuentacontabledebito_descripcion(BodegaConstantesFunciones.getCuentaContableDebitoDescripcion(cuentacontableAux));
				bodega.setCuentaContableDebito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_creditoBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_creditoBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_creditoBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				bodega.setid_cuenta_contable_credito(cuentacontableAux.getId());
				bodega.setcuentacontablecredito_descripcion(BodegaConstantesFunciones.getCuentaContableCreditoDescripcion(cuentacontableAux));
				bodega.setCuentaContableCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableBonificaForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_bonificaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_bonificaBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_bonificaBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_bonifica(cuentacontableAux.getId());
				bodega.setcuentacontablebonifica_descripcion(BodegaConstantesFunciones.getCuentaContableBonificaDescripcion(cuentacontableAux));
				bodega.setCuentaContableBonifica(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableProduccionForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_produccionBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_produccionBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_produccionBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_produccion(cuentacontableAux.getId());
				bodega.setcuentacontableproduccion_descripcion(BodegaConstantesFunciones.getCuentaContableProduccionDescripcion(cuentacontableAux));
				bodega.setCuentaContableProduccion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoBonificaForeignKey(Bodega bodega,JComboBox jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costo_bonificaBodegaGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				bodega.setid_cuenta_contable_costo_bonifica(cuentacontableAux.getId());
				bodega.setcuentacontablecostobonifica_descripcion(BodegaConstantesFunciones.getCuentaContableCostoBonificaDescripcion(cuentacontableAux));
				bodega.setCuentaContableCostoBonifica(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameGrupoBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingGrupoBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.removeAllItems();

							for(GrupoBodega grupobodega:this.grupobodegasForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.addItem(grupobodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdGrupoBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.removeAllItems();

							for(GrupoBodega grupobodega:this.grupobodegasForeignKey) {
								this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.addItem(grupobodega);
							}
						}

						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCalidadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCalidadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.removeAllItems();

							for(CalidadProducto calidadproducto:this.calidadproductosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.addItem(calidadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCalidadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.removeAllItems();

							for(CalidadProducto calidadproducto:this.calidadproductosForeignKey) {
								this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.addItem(calidadproducto);
							}
						}

						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCiudadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCiudad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.addItem(ciudad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.addItem(centrocosto);
							}
						}

						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoBodega.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoBodega.addItem(empleado);
							}
						}

						if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.addItem(cuentacontableinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.addItem(cuentacontablecosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.addItem(cuentacontableventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDescuentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.removeAllItems();

							for(CuentaContable cuentacontabledescuento:this.cuentacontabledescuentosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.addItem(cuentacontabledescuento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDevolucionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.removeAllItems();

							for(CuentaContable cuentacontabledevolucion:this.cuentacontabledevolucionsForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.addItem(cuentacontabledevolucion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDebitosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.removeAllItems();

							for(CuentaContable cuentacontabledebito:this.cuentacontabledebitosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.addItem(cuentacontabledebito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.addItem(cuentacontablecredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableBonificasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.removeAllItems();

							for(CuentaContable cuentacontablebonifica:this.cuentacontablebonificasForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.addItem(cuentacontablebonifica);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableProduccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.removeAllItems();

							for(CuentaContable cuentacontableproduccion:this.cuentacontableproduccionsForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.addItem(cuentacontableproduccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostoBonificasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) { 
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.removeAllItems();

							for(CuentaContable cuentacontablecostobonifica:this.cuentacontablecostobonificasForeignKey) {
								this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.addItem(cuentacontablecostobonifica);
							}
						}
					}

					if(this.jInternalFrameDetalleFormBodega!=null) { 
					}

					if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameGrupoBodegaForeignKey(GrupoBodega grupobodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setSelectedItem(grupobodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.setSelectedItem(grupobodega);
						} else {
							this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCalidadProductoForeignKey(CalidadProducto calidadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setSelectedItem(calidadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.setSelectedItem(calidadproducto);
						} else {
							this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCiudadForeignKey(Ciudad ciudad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setSelectedItem(ciudad);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoBodega.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoBodega.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioForeignKey(CuentaContable cuentacontableinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setSelectedItem(cuentacontableinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoForeignKey(CuentaContable cuentacontablecosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setSelectedItem(cuentacontablecosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableVentaForeignKey(CuentaContable cuentacontableventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setSelectedItem(cuentacontableventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDescuentoForeignKey(CuentaContable cuentacontabledescuento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setSelectedItem(cuentacontabledescuento);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDevolucionForeignKey(CuentaContable cuentacontabledevolucion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setSelectedItem(cuentacontabledevolucion);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDebitoForeignKey(CuentaContable cuentacontabledebito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setSelectedItem(cuentacontabledebito);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoForeignKey(CuentaContable cuentacontablecredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setSelectedItem(cuentacontablecredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableBonificaForeignKey(CuentaContable cuentacontablebonifica,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setSelectedItem(cuentacontablebonifica);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableProduccionForeignKey(CuentaContable cuentacontableproduccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setSelectedItem(cuentacontableproduccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoBonificaForeignKey(CuentaContable cuentacontablecostobonifica,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedItem(cuentacontablecostobonifica);
						}
					} else {
						if(this.jInternalFrameDetalleFormBodega!=null) {
							this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesBodega() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			BodegaConstantesFunciones.refrescarForeignKeysDescripcionesBodega(this.bodegaLogic.getBodegas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			BodegaConstantesFunciones.refrescarForeignKeysDescripcionesBodega(this.bodegas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(GrupoBodega.class));
		classes.add(new Classe(CalidadProducto.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Ciudad.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//bodegaLogic.setBodegas(this.bodegas);
			bodegaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public BodegaParameterReturnGeneral getBodegaParameterGeneral() {
		return this.bodegaParameterGeneral;
	}
	
	public void setBodegaParameterGeneral(BodegaParameterReturnGeneral bodegaParameterGeneral) {
		this.bodegaParameterGeneral = bodegaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoBodega() {
		return isPermisoTodoBodega;
	}

	public void setIsPermisoTodoBodega(Boolean isPermisoTodoBodega) {
		this.isPermisoTodoBodega = isPermisoTodoBodega;
	}

	public Boolean getIsPermisoNuevoBodega() {
		return isPermisoNuevoBodega;
	}

	public void setIsPermisoNuevoBodega(Boolean isPermisoNuevoBodega) {
		this.isPermisoNuevoBodega = isPermisoNuevoBodega;
	}

	public Boolean getIsPermisoActualizarBodega() {
		return isPermisoActualizarBodega;
	}

	public void setIsPermisoActualizarBodega(Boolean isPermisoActualizarBodega) {
		this.isPermisoActualizarBodega = isPermisoActualizarBodega;
	}

	public Boolean getIsPermisoEliminarBodega() {
		return isPermisoEliminarBodega;
	}

	public void setIsPermisoEliminarBodega(Boolean isPermisoEliminarBodega) {
		this.isPermisoEliminarBodega = isPermisoEliminarBodega;
	}

	public Boolean getIsPermisoGuardarCambiosBodega() {
		return isPermisoGuardarCambiosBodega;
	}

	public void setIsPermisoGuardarCambiosBodega(Boolean isPermisoGuardarCambiosBodega) {
		this.isPermisoGuardarCambiosBodega = isPermisoGuardarCambiosBodega;
	}
	
	public Boolean getIsPermisoConsultaBodega() {
		return isPermisoConsultaBodega;
	}

	public void setIsPermisoConsultaBodega(Boolean isPermisoConsultaBodega) {
		this.isPermisoConsultaBodega = isPermisoConsultaBodega;
	}

	public Boolean getIsPermisoBusquedaBodega() {
		return isPermisoBusquedaBodega;
	}

	public void setIsPermisoBusquedaBodega(Boolean isPermisoBusquedaBodega) {
		this.isPermisoBusquedaBodega = isPermisoBusquedaBodega;
	}

	public Boolean getIsPermisoReporteBodega() {
		return isPermisoReporteBodega;
	}

	public void setIsPermisoReporteBodega(Boolean isPermisoReporteBodega) {
		this.isPermisoReporteBodega = isPermisoReporteBodega;
	}
	
	public Boolean getIsPermisoPaginacionMedioBodega() {
		return isPermisoPaginacionMedioBodega;
	}

	public void setIsPermisoPaginacionMedioBodega(Boolean isPermisoPaginacionMedioBodega) {
		this.isPermisoPaginacionMedioBodega = isPermisoPaginacionMedioBodega;
	}
	
	public Boolean getIsPermisoPaginacionTodoBodega() {
		return isPermisoPaginacionTodoBodega;
	}

	public void setIsPermisoPaginacionTodoBodega(Boolean isPermisoPaginacionTodoBodega) {
		this.isPermisoPaginacionTodoBodega = isPermisoPaginacionTodoBodega;
	}
	
	public Boolean getIsPermisoPaginacionAltoBodega() {
		return isPermisoPaginacionAltoBodega;
	}

	public void setIsPermisoPaginacionAltoBodega(Boolean isPermisoPaginacionAltoBodega) {
		this.isPermisoPaginacionAltoBodega = isPermisoPaginacionAltoBodega;
	}
	
	public Boolean getIsPermisoCopiarBodega() {
		return isPermisoCopiarBodega;
	}

	public void setIsPermisoCopiarBodega(Boolean isPermisoCopiarBodega) {
		this.isPermisoCopiarBodega = isPermisoCopiarBodega;
	}
	
	public Boolean getIsPermisoVerFormBodega() {
		return isPermisoVerFormBodega;
	}

	public void setIsPermisoVerFormBodega(Boolean isPermisoVerFormBodega) {
		this.isPermisoVerFormBodega = isPermisoVerFormBodega;
	}
	
	public Boolean getIsPermisoDuplicarBodega() {
		return isPermisoDuplicarBodega;
	}

	public void setIsPermisoDuplicarBodega(Boolean isPermisoDuplicarBodega) {
		this.isPermisoDuplicarBodega = isPermisoDuplicarBodega;
	}
	
	public Boolean getIsPermisoOrdenBodega() {
		return isPermisoOrdenBodega;
	}

	public void setIsPermisoOrdenBodega(Boolean isPermisoOrdenBodega) {
		this.isPermisoOrdenBodega = isPermisoOrdenBodega;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoBodega() {
		return isVisibilidadCeldaNuevoBodega;
	}

	public void setIsVisibilidadCeldaNuevoBodega(Boolean isVisibilidadCeldaNuevoBodega) {
		this.isVisibilidadCeldaNuevoBodega = isVisibilidadCeldaNuevoBodega;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarBodega() {
		return isVisibilidadCeldaDuplicarBodega;
	}

	public void setIsVisibilidadCeldaDuplicarBodega(Boolean isVisibilidadCeldaDuplicarBodega) {
		this.isVisibilidadCeldaDuplicarBodega = isVisibilidadCeldaDuplicarBodega;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarBodega() {
		return isVisibilidadCeldaCopiarBodega;
	}

	public void setIsVisibilidadCeldaCopiarBodega(Boolean isVisibilidadCeldaCopiarBodega) {
		this.isVisibilidadCeldaCopiarBodega = isVisibilidadCeldaCopiarBodega;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormBodega() {
		return isVisibilidadCeldaVerFormBodega;
	}

	public void setIsVisibilidadCeldaVerFormBodega(Boolean isVisibilidadCeldaVerFormBodega) {
		this.isVisibilidadCeldaVerFormBodega = isVisibilidadCeldaVerFormBodega;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenBodega() {
		return isVisibilidadCeldaOrdenBodega;
	}

	public void setIsVisibilidadCeldaOrdenBodega(Boolean isVisibilidadCeldaOrdenBodega) {
		this.isVisibilidadCeldaOrdenBodega = isVisibilidadCeldaOrdenBodega;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesBodega() {
		return isVisibilidadCeldaNuevoRelacionesBodega;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesBodega(Boolean isVisibilidadCeldaNuevoRelacionesBodega) {
		this.isVisibilidadCeldaNuevoRelacionesBodega = isVisibilidadCeldaNuevoRelacionesBodega;
	}
	
	public Boolean getIsVisibilidadCeldaModificarBodega() {
		return isVisibilidadCeldaModificarBodega;
	}

	public void setIsVisibilidadCeldaModificarBodega(Boolean isVisibilidadCeldaModificarBodega) {
		this.isVisibilidadCeldaModificarBodega = isVisibilidadCeldaModificarBodega;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarBodega() {
		return isVisibilidadCeldaActualizarBodega;
	}

	public void setIsVisibilidadCeldaActualizarBodega(Boolean isVisibilidadCeldaActualizarBodega) {
		this.isVisibilidadCeldaActualizarBodega = isVisibilidadCeldaActualizarBodega;
	}

	public Boolean getIsVisibilidadCeldaEliminarBodega() {
		return isVisibilidadCeldaEliminarBodega;
	}

	public void setIsVisibilidadCeldaEliminarBodega(Boolean isVisibilidadCeldaEliminarBodega) {
		this.isVisibilidadCeldaEliminarBodega = isVisibilidadCeldaEliminarBodega;
	}

	public Boolean getIsVisibilidadCeldaCancelarBodega() {
		return isVisibilidadCeldaCancelarBodega;
	}

	public void setIsVisibilidadCeldaCancelarBodega(Boolean isVisibilidadCeldaCancelarBodega) {
		this.isVisibilidadCeldaCancelarBodega = isVisibilidadCeldaCancelarBodega;
	}

	public Boolean getIsVisibilidadCeldaGuardarBodega() {
		return isVisibilidadCeldaGuardarBodega;
	}

	public void setIsVisibilidadCeldaGuardarBodega(Boolean isVisibilidadCeldaGuardarBodega) {
		this.isVisibilidadCeldaGuardarBodega = isVisibilidadCeldaGuardarBodega;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosBodega() {
		return isVisibilidadCeldaGuardarCambiosBodega;
	}

	public void setIsVisibilidadCeldaGuardarCambiosBodega(Boolean isVisibilidadCeldaGuardarCambiosBodega) {
		this.isVisibilidadCeldaGuardarCambiosBodega = isVisibilidadCeldaGuardarCambiosBodega;
	}
		
	public BodegaSessionBean getbodegaSessionBean() {
		return this.bodegaSessionBean;
	}
	
	public void setbodegaSessionBean(BodegaSessionBean bodegaSessionBean) {
		this.bodegaSessionBean=bodegaSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNombre() {
		return this.isVisibilidadBusquedaPorNombre;
	}

	public void setisVisibilidadBusquedaPorNombre(Boolean isVisibilidadBusquedaPorNombre) {
		this.isVisibilidadBusquedaPorNombre=isVisibilidadBusquedaPorNombre;
	}

	public Boolean getisVisibilidadBusquedaPorResponsableNombre() {
		return this.isVisibilidadBusquedaPorResponsableNombre;
	}

	public void setisVisibilidadBusquedaPorResponsableNombre(Boolean isVisibilidadBusquedaPorResponsableNombre) {
		this.isVisibilidadBusquedaPorResponsableNombre=isVisibilidadBusquedaPorResponsableNombre;
	}

	public Boolean getisVisibilidadBusquedaPorRuc() {
		return this.isVisibilidadBusquedaPorRuc;
	}

	public void setisVisibilidadBusquedaPorRuc(Boolean isVisibilidadBusquedaPorRuc) {
		this.isVisibilidadBusquedaPorRuc=isVisibilidadBusquedaPorRuc;
	}

	public Boolean getisVisibilidadBusquedaPorSiglas() {
		return this.isVisibilidadBusquedaPorSiglas;
	}

	public void setisVisibilidadBusquedaPorSiglas(Boolean isVisibilidadBusquedaPorSiglas) {
		this.isVisibilidadBusquedaPorSiglas=isVisibilidadBusquedaPorSiglas;
	}

	public Boolean getisVisibilidadBusquedaPorTelefono() {
		return this.isVisibilidadBusquedaPorTelefono;
	}

	public void setisVisibilidadBusquedaPorTelefono(Boolean isVisibilidadBusquedaPorTelefono) {
		this.isVisibilidadBusquedaPorTelefono=isVisibilidadBusquedaPorTelefono;
	}

	public Boolean getisVisibilidadFK_IdCalidadProducto() {
		return this.isVisibilidadFK_IdCalidadProducto;
	}

	public void setisVisibilidadFK_IdCalidadProducto(Boolean isVisibilidadFK_IdCalidadProducto) {
		this.isVisibilidadFK_IdCalidadProducto=isVisibilidadFK_IdCalidadProducto;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCiudad() {
		return this.isVisibilidadFK_IdCiudad;
	}

	public void setisVisibilidadFK_IdCiudad(Boolean isVisibilidadFK_IdCiudad) {
		this.isVisibilidadFK_IdCiudad=isVisibilidadFK_IdCiudad;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableBonifica() {
		return this.isVisibilidadFK_IdCuentaContableBonifica;
	}

	public void setisVisibilidadFK_IdCuentaContableBonifica(Boolean isVisibilidadFK_IdCuentaContableBonifica) {
		this.isVisibilidadFK_IdCuentaContableBonifica=isVisibilidadFK_IdCuentaContableBonifica;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCosto() {
		return this.isVisibilidadFK_IdCuentaContableCosto;
	}

	public void setisVisibilidadFK_IdCuentaContableCosto(Boolean isVisibilidadFK_IdCuentaContableCosto) {
		this.isVisibilidadFK_IdCuentaContableCosto=isVisibilidadFK_IdCuentaContableCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCostoBonifica() {
		return this.isVisibilidadFK_IdCuentaContableCostoBonifica;
	}

	public void setisVisibilidadFK_IdCuentaContableCostoBonifica(Boolean isVisibilidadFK_IdCuentaContableCostoBonifica) {
		this.isVisibilidadFK_IdCuentaContableCostoBonifica=isVisibilidadFK_IdCuentaContableCostoBonifica;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDebito() {
		return this.isVisibilidadFK_IdCuentaContableDebito;
	}

	public void setisVisibilidadFK_IdCuentaContableDebito(Boolean isVisibilidadFK_IdCuentaContableDebito) {
		this.isVisibilidadFK_IdCuentaContableDebito=isVisibilidadFK_IdCuentaContableDebito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDescuento() {
		return this.isVisibilidadFK_IdCuentaContableDescuento;
	}

	public void setisVisibilidadFK_IdCuentaContableDescuento(Boolean isVisibilidadFK_IdCuentaContableDescuento) {
		this.isVisibilidadFK_IdCuentaContableDescuento=isVisibilidadFK_IdCuentaContableDescuento;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDevolucion() {
		return this.isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public void setisVisibilidadFK_IdCuentaContableDevolucion(Boolean isVisibilidadFK_IdCuentaContableDevolucion) {
		this.isVisibilidadFK_IdCuentaContableDevolucion=isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventario() {
		return this.isVisibilidadFK_IdCuentaContableInventario;
	}

	public void setisVisibilidadFK_IdCuentaContableInventario(Boolean isVisibilidadFK_IdCuentaContableInventario) {
		this.isVisibilidadFK_IdCuentaContableInventario=isVisibilidadFK_IdCuentaContableInventario;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableProduccion() {
		return this.isVisibilidadFK_IdCuentaContableProduccion;
	}

	public void setisVisibilidadFK_IdCuentaContableProduccion(Boolean isVisibilidadFK_IdCuentaContableProduccion) {
		this.isVisibilidadFK_IdCuentaContableProduccion=isVisibilidadFK_IdCuentaContableProduccion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableVenta() {
		return this.isVisibilidadFK_IdCuentaContableVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableVenta(Boolean isVisibilidadFK_IdCuentaContableVenta) {
		this.isVisibilidadFK_IdCuentaContableVenta=isVisibilidadFK_IdCuentaContableVenta;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdGrupoBodega() {
		return this.isVisibilidadFK_IdGrupoBodega;
	}

	public void setisVisibilidadFK_IdGrupoBodega(Boolean isVisibilidadFK_IdGrupoBodega) {
		this.isVisibilidadFK_IdGrupoBodega=isVisibilidadFK_IdGrupoBodega;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysBodega(Bodega bodega)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(bodega,null);
				this.setActualParaGuardarGrupoBodegaForeignKey(bodega,null);
				this.setActualParaGuardarCalidadProductoForeignKey(bodega,null);
				this.setActualParaGuardarPaisForeignKey(bodega,null);
				this.setActualParaGuardarCiudadForeignKey(bodega,null);
				this.setActualParaGuardarCentroCostoForeignKey(bodega,null);
				this.setActualParaGuardarEmpleadoForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableInventarioForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableCostoForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableVentaForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableDescuentoForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableDevolucionForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableDebitoForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableCreditoForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableBonificaForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableProduccionForeignKey(bodega,null);
				this.setActualParaGuardarCuentaContableCostoBonificaForeignKey(bodega,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Bodega bodega,Bodega bodegaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalBodega(bodega);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		bodegaAux.setId(bodega.getId());
		bodegaAux.setVersionRow(bodega.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessBodega();
		
			int intSelectedRow = this.jTableDatosBodega.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = bodegaValidator.getInvalidValues(this.bodega);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			bodegaLogic.setDatosCliente(datosCliente);
			bodegaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				bodegaAux=new  Bodega();
				
				bodegaAux.setIsNew(true);
				bodegaAux.setIsChanged(true);
				
				bodegaAux.setBodegaOriginal(this.bodega);
				
				bodegaAux.setId(this.bodega.getId());	
				bodegaAux.setVersionRow(this.bodega.getVersionRow());	
				bodegaAux.setid_empresa(this.bodega.getid_empresa());	
				bodegaAux.setid_grupo_bodega(this.bodega.getid_grupo_bodega());	
				bodegaAux.setid_calidad_producto(this.bodega.getid_calidad_producto());	
				bodegaAux.setcodigo(this.bodega.getcodigo());	
				bodegaAux.setnombre(this.bodega.getnombre());	
				bodegaAux.setsiglas(this.bodega.getsiglas());	
				bodegaAux.setdireccion(this.bodega.getdireccion());	
				bodegaAux.settelefono(this.bodega.gettelefono());	
				bodegaAux.setruc(this.bodega.getruc());	
				bodegaAux.setresponsable_nombre(this.bodega.getresponsable_nombre());	
				bodegaAux.setdescripcion(this.bodega.getdescripcion());	
				bodegaAux.setid_pais(this.bodega.getid_pais());	
				bodegaAux.setid_ciudad(this.bodega.getid_ciudad());	
				bodegaAux.setid_centro_costo(this.bodega.getid_centro_costo());	
				bodegaAux.setid_empleado(this.bodega.getid_empleado());	
				bodegaAux.setes_multi_empresa(this.bodega.getes_multi_empresa());	
				bodegaAux.setcon_mostrar_stock(this.bodega.getcon_mostrar_stock());	
				bodegaAux.setes_bodega_transito(this.bodega.getes_bodega_transito());	
				bodegaAux.setcon_stock_negativo(this.bodega.getcon_stock_negativo());	
				bodegaAux.setid_cuenta_contable_inventario(this.bodega.getid_cuenta_contable_inventario());	
				bodegaAux.setid_cuenta_contable_costo(this.bodega.getid_cuenta_contable_costo());	
				bodegaAux.setid_cuenta_contable_venta(this.bodega.getid_cuenta_contable_venta());	
				bodegaAux.setid_cuenta_contable_descuento(this.bodega.getid_cuenta_contable_descuento());	
				bodegaAux.setid_cuenta_contable_devolucion(this.bodega.getid_cuenta_contable_devolucion());	
				bodegaAux.setid_cuenta_contable_debito(this.bodega.getid_cuenta_contable_debito());	
				bodegaAux.setid_cuenta_contable_credito(this.bodega.getid_cuenta_contable_credito());	
				bodegaAux.setid_cuenta_contable_bonifica(this.bodega.getid_cuenta_contable_bonifica());	
				bodegaAux.setid_cuenta_contable_produccion(this.bodega.getid_cuenta_contable_produccion());	
				bodegaAux.setid_cuenta_contable_costo_bonifica(this.bodega.getid_cuenta_contable_costo_bonifica());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.bodegaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.bodegaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(bodegaAux,bodegaLogic.getBodegas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(bodegaAux,bodegas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.bodegaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.bodegaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.saveBodegas();//WithConnection
						//bodegaLogic.getSetVersionRowBodegas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.bodega,bodegaAux);
					
					this.refrescarForeignKeysDescripcionesBodega();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				bodegaAux=new  Bodega();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.bodegaSessionBean.getEsGuardarRelacionado() 
					|| (this.bodegaSessionBean.getEsGuardarRelacionado() && this.bodega.getId()>=0)) {
						
					bodegaAux.setIsNew(false);
				}
				
				bodegaAux.setIsDeleted(false);
			
				bodegaAux.setId(this.bodega.getId());	
				bodegaAux.setVersionRow(this.bodega.getVersionRow());	
				bodegaAux.setid_empresa(this.bodega.getid_empresa());	
				bodegaAux.setid_grupo_bodega(this.bodega.getid_grupo_bodega());	
				bodegaAux.setid_calidad_producto(this.bodega.getid_calidad_producto());	
				bodegaAux.setcodigo(this.bodega.getcodigo());	
				bodegaAux.setnombre(this.bodega.getnombre());	
				bodegaAux.setsiglas(this.bodega.getsiglas());	
				bodegaAux.setdireccion(this.bodega.getdireccion());	
				bodegaAux.settelefono(this.bodega.gettelefono());	
				bodegaAux.setruc(this.bodega.getruc());	
				bodegaAux.setresponsable_nombre(this.bodega.getresponsable_nombre());	
				bodegaAux.setdescripcion(this.bodega.getdescripcion());	
				bodegaAux.setid_pais(this.bodega.getid_pais());	
				bodegaAux.setid_ciudad(this.bodega.getid_ciudad());	
				bodegaAux.setid_centro_costo(this.bodega.getid_centro_costo());	
				bodegaAux.setid_empleado(this.bodega.getid_empleado());	
				bodegaAux.setes_multi_empresa(this.bodega.getes_multi_empresa());	
				bodegaAux.setcon_mostrar_stock(this.bodega.getcon_mostrar_stock());	
				bodegaAux.setes_bodega_transito(this.bodega.getes_bodega_transito());	
				bodegaAux.setcon_stock_negativo(this.bodega.getcon_stock_negativo());	
				bodegaAux.setid_cuenta_contable_inventario(this.bodega.getid_cuenta_contable_inventario());	
				bodegaAux.setid_cuenta_contable_costo(this.bodega.getid_cuenta_contable_costo());	
				bodegaAux.setid_cuenta_contable_venta(this.bodega.getid_cuenta_contable_venta());	
				bodegaAux.setid_cuenta_contable_descuento(this.bodega.getid_cuenta_contable_descuento());	
				bodegaAux.setid_cuenta_contable_devolucion(this.bodega.getid_cuenta_contable_devolucion());	
				bodegaAux.setid_cuenta_contable_debito(this.bodega.getid_cuenta_contable_debito());	
				bodegaAux.setid_cuenta_contable_credito(this.bodega.getid_cuenta_contable_credito());	
				bodegaAux.setid_cuenta_contable_bonifica(this.bodega.getid_cuenta_contable_bonifica());	
				bodegaAux.setid_cuenta_contable_produccion(this.bodega.getid_cuenta_contable_produccion());	
				bodegaAux.setid_cuenta_contable_costo_bonifica(this.bodega.getid_cuenta_contable_costo_bonifica());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(bodegaAux,bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(bodegaAux,bodegas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.bodegaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.bodegaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.saveBodegas();//WithConnection
						//bodegaLogic.getSetVersionRowBodegas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.bodega,bodegaAux);
					
					this.refrescarForeignKeysDescripcionesBodega();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				bodegaAux=new  Bodega();
				
				bodegaAux.setIsNew(false);
				bodegaAux.setIsChanged(false);
				
				bodegaAux.setIsDeleted(true);
				
				bodegaAux.setId(this.bodega.getId());	
				bodegaAux.setVersionRow(this.bodega.getVersionRow());	
				bodegaAux.setid_empresa(this.bodega.getid_empresa());	
				bodegaAux.setid_grupo_bodega(this.bodega.getid_grupo_bodega());	
				bodegaAux.setid_calidad_producto(this.bodega.getid_calidad_producto());	
				bodegaAux.setcodigo(this.bodega.getcodigo());	
				bodegaAux.setnombre(this.bodega.getnombre());	
				bodegaAux.setsiglas(this.bodega.getsiglas());	
				bodegaAux.setdireccion(this.bodega.getdireccion());	
				bodegaAux.settelefono(this.bodega.gettelefono());	
				bodegaAux.setruc(this.bodega.getruc());	
				bodegaAux.setresponsable_nombre(this.bodega.getresponsable_nombre());	
				bodegaAux.setdescripcion(this.bodega.getdescripcion());	
				bodegaAux.setid_pais(this.bodega.getid_pais());	
				bodegaAux.setid_ciudad(this.bodega.getid_ciudad());	
				bodegaAux.setid_centro_costo(this.bodega.getid_centro_costo());	
				bodegaAux.setid_empleado(this.bodega.getid_empleado());	
				bodegaAux.setes_multi_empresa(this.bodega.getes_multi_empresa());	
				bodegaAux.setcon_mostrar_stock(this.bodega.getcon_mostrar_stock());	
				bodegaAux.setes_bodega_transito(this.bodega.getes_bodega_transito());	
				bodegaAux.setcon_stock_negativo(this.bodega.getcon_stock_negativo());	
				bodegaAux.setid_cuenta_contable_inventario(this.bodega.getid_cuenta_contable_inventario());	
				bodegaAux.setid_cuenta_contable_costo(this.bodega.getid_cuenta_contable_costo());	
				bodegaAux.setid_cuenta_contable_venta(this.bodega.getid_cuenta_contable_venta());	
				bodegaAux.setid_cuenta_contable_descuento(this.bodega.getid_cuenta_contable_descuento());	
				bodegaAux.setid_cuenta_contable_devolucion(this.bodega.getid_cuenta_contable_devolucion());	
				bodegaAux.setid_cuenta_contable_debito(this.bodega.getid_cuenta_contable_debito());	
				bodegaAux.setid_cuenta_contable_credito(this.bodega.getid_cuenta_contable_credito());	
				bodegaAux.setid_cuenta_contable_bonifica(this.bodega.getid_cuenta_contable_bonifica());	
				bodegaAux.setid_cuenta_contable_produccion(this.bodega.getid_cuenta_contable_produccion());	
				bodegaAux.setid_cuenta_contable_costo_bonifica(this.bodega.getid_cuenta_contable_costo_bonifica());	
				
				if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.bodegaAux.getId()>=0) {	
						this.bodegasEliminados.add(bodegaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(bodegaAux,bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(bodegaAux,bodegas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.bodegaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.bodegaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.saveBodegas();//WithConnection
						//bodegaLogic.getSetVersionRowBodegas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getBodegas().addAll(this.bodegasEliminados);
					
					bodegaLogic.saveBodegas();//WithConnection
					//bodegaLogic.getSetVersionRowBodegas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesBodega();
				
				this.bodegasEliminados= new ArrayList<Bodega>();		
			}
			
			if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Bodega GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.bodega=bodegaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessBodega();
      	}
		
	}	
	
	public void actualizarRelaciones(Bodega bodegaLocal) throws Exception {
		
		if(this.bodegaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Bodega bodegaLocal) throws Exception {	
		if(this.bodegaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				bodegaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(GrupoBodegaDetalleFormJInternalFrame.class)) {
				GrupoBodegaBeanSwingJInternalFrame grupobodegaBeanSwingJInternalFrameLocal=(GrupoBodegaBeanSwingJInternalFrame) ((GrupoBodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				grupobodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoGrupoBodega(grupobodegaBeanSwingJInternalFrameLocal.getgrupobodega(),true);
				grupobodegaBeanSwingJInternalFrameLocal.actualizarLista(grupobodegaBeanSwingJInternalFrameLocal.grupobodega,this.grupobodegasForeignKey);

				grupobodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(grupobodegaBeanSwingJInternalFrameLocal.grupobodega);

				bodegaLocal.setGrupoBodega(grupobodegaBeanSwingJInternalFrameLocal.grupobodega);

				this.addItemDefectoCombosForeignKeyGrupoBodega();
				this.cargarCombosFrameGrupoBodegasForeignKey("Formulario");
				this.setActualGrupoBodegaForeignKey(grupobodegaBeanSwingJInternalFrameLocal.grupobodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CalidadProductoDetalleFormJInternalFrame.class)) {
				CalidadProductoBeanSwingJInternalFrame calidadproductoBeanSwingJInternalFrameLocal=(CalidadProductoBeanSwingJInternalFrame) ((CalidadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				calidadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCalidadProducto(calidadproductoBeanSwingJInternalFrameLocal.getcalidadproducto(),true);
				calidadproductoBeanSwingJInternalFrameLocal.actualizarLista(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto,this.calidadproductosForeignKey);

				calidadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto);

				bodegaLocal.setCalidadProducto(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto);

				this.addItemDefectoCombosForeignKeyCalidadProducto();
				this.cargarCombosFrameCalidadProductosForeignKey("Formulario");
				this.setActualCalidadProductoForeignKey(calidadproductoBeanSwingJInternalFrameLocal.calidadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				bodegaLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CiudadDetalleFormJInternalFrame.class)) {
				CiudadBeanSwingJInternalFrame ciudadBeanSwingJInternalFrameLocal=(CiudadBeanSwingJInternalFrame) ((CiudadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ciudadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCiudad(ciudadBeanSwingJInternalFrameLocal.getciudad(),true);
				ciudadBeanSwingJInternalFrameLocal.actualizarLista(ciudadBeanSwingJInternalFrameLocal.ciudad,this.ciudadsForeignKey);

				ciudadBeanSwingJInternalFrameLocal.actualizarRelaciones(ciudadBeanSwingJInternalFrameLocal.ciudad);

				bodegaLocal.setCiudad(ciudadBeanSwingJInternalFrameLocal.ciudad);

				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey("Formulario");
				this.setActualCiudadForeignKey(ciudadBeanSwingJInternalFrameLocal.ciudad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				bodegaLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				bodegaLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventarioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventarioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventariosForeignKey);

				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableInventario(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey("Formulario");
				this.setActualCuentaContableInventarioForeignKey(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostosForeignKey);

				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableCosto(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey("Formulario");
				this.setActualCuentaContableCostoForeignKey(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableventasForeignKey);

				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableVenta(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey("Formulario");
				this.setActualCuentaContableVentaForeignKey(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledescuentoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledescuentoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledescuentosForeignKey);

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableDescuento(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey("Formulario");
				this.setActualCuentaContableDescuentoForeignKey(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledevolucionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledevolucionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledevolucionsForeignKey);

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableDevolucion(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Formulario");
				this.setActualCuentaContableDevolucionForeignKey(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledebitoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledebitoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledebitoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledebitosForeignKey);

				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableDebito(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey("Formulario");
				this.setActualCuentaContableDebitoForeignKey(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditosForeignKey);

				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableCredito(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey("Formulario");
				this.setActualCuentaContableCreditoForeignKey(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablebonificaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablebonificaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablebonificaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablebonificaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablebonificasForeignKey);

				cuentacontablebonificaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableBonifica(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
				this.cargarCombosFrameCuentaContableBonificasForeignKey("Formulario");
				this.setActualCuentaContableBonificaForeignKey(cuentacontablebonificaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableproduccionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableproduccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableproduccionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableproduccionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableproduccionsForeignKey);

				cuentacontableproduccionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableProduccion(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
				this.cargarCombosFrameCuentaContableProduccionsForeignKey("Formulario");
				this.setActualCuentaContableProduccionForeignKey(cuentacontableproduccionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostobonificaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostobonificasForeignKey);

				cuentacontablecostobonificaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable);

				bodegaLocal.setCuentaContableCostoBonifica(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
				this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Formulario");
				this.setActualCuentaContableCostoBonificaForeignKey(cuentacontablecostobonificaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarBodegaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosBodega.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = bodegaValidator.getInvalidValues(this.bodega);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Bodega bodega,List<Bodega> bodegas) throws Exception {
		try	{		
			BodegaConstantesFunciones.actualizarLista(bodega,bodegas,this.bodegaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Bodega bodega,List<Bodega> bodegas) throws Exception {
		try	{			
			BodegaConstantesFunciones.actualizarSelectedLista(bodega,bodegas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Bodega> bodegasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				bodegasLocal=this.bodegaLogic.getBodegas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				bodegasLocal=this.bodegas;
			}
			//ARCHITECTURE
		
			for(Bodega bodegaLocal:bodegasLocal) {
				if(this.permiteMantenimiento(bodegaLocal) && bodegaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+BodegaConstantesFunciones.getBodegaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_empresaBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDGRUPOBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_grupo_bodegaBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCALIDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_calidad_productoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcodigoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelnombreBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.SIGLAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelsiglasBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.DIRECCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeldireccionBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.TELEFONO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeltelefonoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelrucBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.RESPONSABLENOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelresponsable_nombreBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeldescripcionBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_paisBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCIUDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_ciudadBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_centro_costoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_empleadoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.ESMULTIEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeles_multi_empresaBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.CONMOSTRARSTOCK)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcon_mostrar_stockBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.ESBODEGATRANSITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeles_bodega_transitoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.CONSTOCKNEGATIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcon_stock_negativoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_inventarioBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLECOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_costoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_ventaBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_descuentoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEDEVOLUCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_devolucionBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEDEBITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_debitoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_creditoBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEBONIFICA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_bonificaBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLEPRODUCCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_produccionBodega,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(BodegaConstantesFunciones.IDCUENTACONTABLECOSTOBONIFICA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_costo_bonificaBodega,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_empresaBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_grupo_bodegaBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_calidad_productoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelcodigoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelnombreBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelsiglasBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabeldireccionBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabeltelefonoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelrucBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelresponsable_nombreBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabeldescripcionBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_paisBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_ciudadBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_centro_costoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_empleadoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabeles_multi_empresaBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelcon_mostrar_stockBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabeles_bodega_transitoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelcon_stock_negativoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_inventarioBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_costoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_ventaBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_descuentoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_devolucionBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_debitoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_creditoBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_bonificaBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_produccionBodega,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormBodega.jLabelid_cuenta_contable_costo_bonificaBodega,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoBodega--;	
		
		
		this.bodegaAux=new Bodega();
		
		this.bodegaAux.setId(this.iIdNuevoBodega);
		this.bodegaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.bodegaLogic.getBodegas().add(this.bodegaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.bodegas.add(this.bodegaAux);
		}
		//ARCHITECTURE
		
		this.bodega=this.bodegaAux;
		
		if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioBodega(this.bodega);
			this.setVariablesObjetoActualToFormularioForeignKeyBodega(this.bodega);
		}
				
		//this.setDefaultControlesBodega();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyBodega();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyBodega();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyBodega();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualBodega(this.bodegaBean,this.bodega,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(BodegaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.bodegaSessionBean.getConGuardarRelaciones()) {
			classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.bodegaReturnGeneral=bodegaLogic.procesarEventosBodegasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.bodegaLogic.getBodegas(),this.bodega,this.bodegaParameterGeneral,this.isEsNuevoBodega,classes);//this.bodegaLogic.getBodega()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanBodega(this.bodegaReturnGeneral,this.bodegaBean,false);
		
		if(this.bodegaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyBodega(this.bodegaReturnGeneral.getBodega());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioBodega(this.bodegaReturnGeneral.getBodega());
		}
		
		if(this.bodegaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioBodega(this.bodegaReturnGeneral.getBodega(),classes);//this.bodegaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualBodega(this.bodega,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyBodega();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyBodega();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			BodegaBeanSwingJInternalFrameAdditional.RecargarFormBodega(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingBodega(false);
						
			if(bodegaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBodega();
			}
			
			this.actualizarVisualTableDatosBodega();
			
			this.jTableDatosBodega.setRowSelectionInterval(this.getIndiceNuevoBodega(), this.getIndiceNuevoBodega());
			
			this.seleccionarFilaTablaBodegaActual();
						
			this.actualizarEstadoCeldasBotonesBodega("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesBodega(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarcodigoBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarnombreBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarsiglasBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activardireccionBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activartelefonoBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarrucBodega);
		this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarresponsable_nombreBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activardescripcionBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activares_multi_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarcon_mostrar_stockBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activares_bodega_transitoBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarcon_stock_negativoBodega);	
		//
		this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_grupo_bodegaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_calidad_productoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_paisBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_ciudadBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_centro_costoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_empleadoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_inventarioBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_costoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_ventaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_descuentoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_devolucionBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_debitoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_creditoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_bonificaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_produccionBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setEnabled(isHabilitar && this.bodegaConstantesFunciones.activarid_cuenta_contable_costo_bonificaBodega);
	};
	
	public void setDefaultControlesBodega() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoBodega(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.bodegaSessionBean.setConGuardarRelaciones(true);			
			this.bodegaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.setVisible(true);
			
					
		} else {
			//this.bodegaSessionBean.setConGuardarRelaciones(false);			
			this.bodegaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoBodega() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
				if(bodegaAux.getId().equals(this.iIdNuevoBodega)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Bodega bodegaAux:this.bodegas) {
				if(bodegaAux.getId().equals(this.iIdNuevoBodega)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualBodega(Bodega bodega,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
				if(bodegaAux.getId().equals(bodega.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Bodega bodegaAux:this.bodegas) {
				if(bodegaAux.getId().equals(bodega.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalBodega(Bodega bodegaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
				if(bodegaAux.getBodegaOriginal().getId().equals(bodegaOriginal.getId())) {
					existe=true;
					bodegaOriginal.setId(bodegaAux.getId());
					bodegaOriginal.setVersionRow(bodegaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Bodega bodegaAux:this.bodegas) {
				if(bodegaAux.getBodegaOriginal().getId().equals(bodegaOriginal.getId())) {
					existe=true;
					bodegaOriginal.setId(bodegaAux.getId());
					bodegaOriginal.setVersionRow(bodegaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosBodega(Boolean esParaCancelar) throws Exception {
		bodegasAux=new ArrayList<Bodega>();
		bodegaAux=new Bodega();
		
		if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
					if(bodegaAux.getId()<0) {
						bodegasAux.add(bodegaAux);
					}		
				}
				this.iIdNuevoBodega=0L;
				this.bodegaLogic.getBodegas().removeAll(bodegasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Bodega bodegaAux:this.bodegas) {
					if(bodegaAux.getId()<0) {
						bodegasAux.add(bodegaAux);
					}		
				}
				this.iIdNuevoBodega=0L;
				this.bodegas.removeAll(bodegasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoBodega 
					&& this.bodegaLogic.getBodegas().size()>0
					) {
					bodegaAux=this.bodegaLogic.getBodegas().get(this.bodegaLogic.getBodegas().size() - 1);
				
					if(bodegaAux.getId()<0) {
						this.bodegaLogic.getBodegas().remove(bodegaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoBodega && this.bodegas.size()>0) {
					bodegaAux=this.bodegas.get(this.bodegas.size() - 1);
				
					if(bodegaAux.getId()<0) {
						this.bodegas.remove(bodegaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoBodega(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(bodega.getId()<0) {
				this.bodegaLogic.getBodegas().remove(this.bodega);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(bodega.getId()<0) {
				this.bodegas.remove(this.bodega);
			}
		}			
	}
	
	public void setEstadosInicialesBodega(List<Bodega> bodegasAux) throws Exception {
		BodegaConstantesFunciones.setEstadosInicialesBodega(bodegasAux);
	}
	
	public void setEstadosInicialesBodega(Bodega bodegaAux) throws Exception {
		BodegaConstantesFunciones.setEstadosInicialesBodega(bodegaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarBodegaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarBodegaActual()) {
				if(!this.isEsNuevoBodega) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoBodega=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarBodegaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Bodega ?", "MANTENIMIENTO DE Bodega", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Bodega bodega) throws Exception {
		BodegaConstantesFunciones.seleccionarAsignar(this.bodega,bodega);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarBodega=this.isPermisoActualizarOriginalBodega;
			
			
			this.seleccionarAsignar(bodega);
			
			

			idCentroCostoActual=bodega.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idEmpleadoActual=bodega.getid_empleado();
			this.seleccionarEmpleadoActual();

			idCuentaContableInventarioActual=bodega.getid_cuenta_contable_inventario();
			this.seleccionarCuentaContableInventarioActual();

			idCuentaContableCostoActual=bodega.getid_cuenta_contable_costo();
			this.seleccionarCuentaContableCostoActual();

			idCuentaContableVentaActual=bodega.getid_cuenta_contable_venta();
			this.seleccionarCuentaContableVentaActual();

			idCuentaContableDescuentoActual=bodega.getid_cuenta_contable_descuento();
			this.seleccionarCuentaContableDescuentoActual();

			idCuentaContableDevolucionActual=bodega.getid_cuenta_contable_devolucion();
			this.seleccionarCuentaContableDevolucionActual();

			idCuentaContableDebitoActual=bodega.getid_cuenta_contable_debito();
			this.seleccionarCuentaContableDebitoActual();

			idCuentaContableCreditoActual=bodega.getid_cuenta_contable_credito();
			this.seleccionarCuentaContableCreditoActual();

			idCuentaContableBonificaActual=bodega.getid_cuenta_contable_bonifica();
			this.seleccionarCuentaContableBonificaActual();

			idCuentaContableProduccionActual=bodega.getid_cuenta_contable_produccion();
			this.seleccionarCuentaContableProduccionActual();

			idCuentaContableCostoBonificaActual=bodega.getid_cuenta_contable_costo_bonifica();
			this.seleccionarCuentaContableCostoBonificaActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			BodegaConstantesFunciones.quitarEspaciosBodega(this.bodega,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesBodega("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.bodegaSessionBean.setsFuncionBusquedaRapida(this.bodegaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableInventarioActual() throws Exception {
		try	{
			CuentaContable cuentacontableinventarioAux=new CuentaContable();

			if(this.idCuentaContableInventarioActual != null && this.idCuentaContableInventarioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableinventarioLogic.getEntityWithConnection(this.idCuentaContableInventarioActual);
					cuentacontableinventarioAux= cuentacontableinventarioLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableinventariosForeignKey.add(cuentacontableinventarioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostoAux=new CuentaContable();

			if(this.idCuentaContableCostoActual != null && this.idCuentaContableCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostoLogic.getEntityWithConnection(this.idCuentaContableCostoActual);
					cuentacontablecostoAux= cuentacontablecostoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostosForeignKey.add(cuentacontablecostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableVentaActual() throws Exception {
		try	{
			CuentaContable cuentacontableventaAux=new CuentaContable();

			if(this.idCuentaContableVentaActual != null && this.idCuentaContableVentaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableventaLogic.getEntityWithConnection(this.idCuentaContableVentaActual);
					cuentacontableventaAux= cuentacontableventaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
				cuentacontableventasForeignKey.add(cuentacontableventaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDescuentoActual() throws Exception {
		try	{
			CuentaContable cuentacontabledescuentoAux=new CuentaContable();

			if(this.idCuentaContableDescuentoActual != null && this.idCuentaContableDescuentoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledescuentoLogic.getEntityWithConnection(this.idCuentaContableDescuentoActual);
					cuentacontabledescuentoAux= cuentacontabledescuentoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledescuentosForeignKey.add(cuentacontabledescuentoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDevolucionActual() throws Exception {
		try	{
			CuentaContable cuentacontabledevolucionAux=new CuentaContable();

			if(this.idCuentaContableDevolucionActual != null && this.idCuentaContableDevolucionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledevolucionLogic.getEntityWithConnection(this.idCuentaContableDevolucionActual);
					cuentacontabledevolucionAux= cuentacontabledevolucionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledevolucionsForeignKey.add(cuentacontabledevolucionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDebitoActual() throws Exception {
		try	{
			CuentaContable cuentacontabledebitoAux=new CuentaContable();

			if(this.idCuentaContableDebitoActual != null && this.idCuentaContableDebitoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledebitoLogic.getEntityWithConnection(this.idCuentaContableDebitoActual);
					cuentacontabledebitoAux= cuentacontabledebitoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledebitosForeignKey.add(cuentacontabledebitoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditoAux=new CuentaContable();

			if(this.idCuentaContableCreditoActual != null && this.idCuentaContableCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditoLogic.getEntityWithConnection(this.idCuentaContableCreditoActual);
					cuentacontablecreditoAux= cuentacontablecreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditosForeignKey.add(cuentacontablecreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableBonificaActual() throws Exception {
		try	{
			CuentaContable cuentacontablebonificaAux=new CuentaContable();

			if(this.idCuentaContableBonificaActual != null && this.idCuentaContableBonificaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablebonificaLogic.getEntityWithConnection(this.idCuentaContableBonificaActual);
					cuentacontablebonificaAux= cuentacontablebonificaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablebonificasForeignKey.add(cuentacontablebonificaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableProduccionActual() throws Exception {
		try	{
			CuentaContable cuentacontableproduccionAux=new CuentaContable();

			if(this.idCuentaContableProduccionActual != null && this.idCuentaContableProduccionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableproduccionLogic.getEntityWithConnection(this.idCuentaContableProduccionActual);
					cuentacontableproduccionAux= cuentacontableproduccionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableproduccionsForeignKey.add(cuentacontableproduccionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoBonificaActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostobonificaAux=new CuentaContable();

			if(this.idCuentaContableCostoBonificaActual != null && this.idCuentaContableCostoBonificaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostobonificaLogic.getEntityWithConnection(this.idCuentaContableCostoBonificaActual);
					cuentacontablecostobonificaAux= cuentacontablecostobonificaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostobonificasForeignKey.add(cuentacontablecostobonificaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoBodega) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosBodega(esParaCancelar);				
				this.cancelarNuevoBodega(esParaCancelar);								
			}
			
			this.bodega=new Bodega();
			
			this.inicializarBodega();
			
			this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarBodega() throws Exception {
		try {
			BodegaConstantesFunciones.inicializarBodega(this.bodega);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.bodegaLogic.getBodegas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteBodegas(String sAccionBusqueda,List<Bodega> bodegasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Bodega"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="BodegaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("BodegaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Bodega"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Bodegas");		
		parameters.put("busquedapor", BodegaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceBodega=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			BodegaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			BodegaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceBodega=new JRBeanArrayDataSource(BodegaJInternalFrame.TraerBodegaBeans(bodegasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceBodega);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+BodegaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+BodegaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(BodegaBean.TraerBodegaBeans(bodegasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoBodegaActionPerformed(null);
					//this.generarExcelReporteBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesBodegas(sAccionBusqueda,sTipoArchivoReporte,bodegasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteBodegas(String sAccionBusqueda,String sTipoArchivoReporte,List<Bodega> bodegasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Bodegas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderBodega("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Bodega bodega : bodegasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			BodegaConstantesFunciones.generarExcelReporteDataBodega("NORMAL",row,workbook,bodega,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderBodega(String sTipo,Row row,Workbook workbook) {
		
		BodegaConstantesFunciones.generarExcelReporteHeaderBodega(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalBodegas(String sAccionBusqueda,String sTipoArchivoReporte,List<Bodega> bodegasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Bodegas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Bodega bodega : bodegasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(BodegaConstantesFunciones.getBodegaDescripcion(bodega));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getgrupobodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcalidadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_SIGLAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_SIGLAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getsiglas());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_DIRECCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_DIRECCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getdireccion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_TELEFONO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_TELEFONO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.gettelefono());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getresponsable_nombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCIUDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCIUDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getciudad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(bodega.getes_multi_empresa()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(bodega.getcon_mostrar_stock()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(bodega.getes_bodega_transito()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(bodega.getcon_stock_negativo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontableinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontablecosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontableventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontabledescuento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontabledevolucion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontabledebito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontablecredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontablebonifica_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontableproduccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(bodega.getcuentacontablecostobonifica_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesBodegas(String sAccionBusqueda,String sTipoArchivoReporte,List<Bodega> bodegasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Bodega> bodegasRespaldo=null;
		
		classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.bodegaLogic.setDatosCliente(this.datosCliente);
		this.bodegaLogic.setDatosDeep(this.datosDeep);
		this.bodegaLogic.setIsConDeep(true);
		
		bodegasRespaldo=this.bodegaLogic.getBodegas();
		
		this.bodegaLogic.setBodegas(bodegasParaReportes);	
		this.bodegaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		bodegasParaReportes=this.bodegaLogic.getBodegas();
		this.bodegaLogic.setBodegas(bodegasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Bodegas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderBodega("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Bodega bodega : bodegasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderBodega("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			BodegaConstantesFunciones.generarExcelReporteDataBodega("NORMAL",row,workbook,bodega,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(BodegaConstantesFunciones.getBodegaDescripcion(bodega));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoBodega.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBodega.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessBodega() throws Exception {		
		this.startProcessBodega(true);
	}
	
	public void startProcessBodega(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasBodega ,this.jPanelParametrosReportesBodega, this.jScrollPanelDatosBodega,this.jPanelPaginacionBodega, this.jScrollPanelDatosEdicionBodega, this.jPanelAccionesBodega,this.jPanelAccionesFormularioBodega,this.jmenuBarBodega,this.jmenuBarDetalleBodega,this.jTtoolBarBodega,this.jTtoolBarDetalleBodega);		
		
		final JTabbedPane jTabbedPaneBusquedasBodega=this.jTabbedPaneBusquedasBodega; 
		
		final JPanel jPanelParametrosReportesBodega=this.jPanelParametrosReportesBodega;
		//final JScrollPane jScrollPanelDatosBodega=this.jScrollPanelDatosBodega;
		final JTable jTableDatosBodega=this.jTableDatosBodega;		
		final JPanel jPanelPaginacionBodega=this.jPanelPaginacionBodega;
		//final JScrollPane jScrollPanelDatosEdicionBodega=this.jScrollPanelDatosEdicionBodega;
		final JPanel jPanelAccionesBodega=this.jPanelAccionesBodega;
		
		JPanel jPanelCamposAuxiliarBodega=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarBodega=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
			jPanelCamposAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jPanelCamposBodega;
			jPanelAccionesFormularioAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jPanelAccionesFormularioBodega;
		}
		
		final JPanel jPanelCamposBodega=jPanelCamposAuxiliarBodega;
		final JPanel jPanelAccionesFormularioBodega=jPanelAccionesFormularioAuxiliarBodega;
		
		
		final JMenuBar jmenuBarBodega=this.jmenuBarBodega;
		final JToolBar jTtoolBarBodega=this.jTtoolBarBodega;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarBodega=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarBodega=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
			jmenuBarDetalleAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jmenuBarDetalleBodega;
			jTtoolBarDetalleAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jTtoolBarDetalleBodega;
		}
		
		final JMenuBar jmenuBarDetalleBodega=jmenuBarDetalleAuxiliarBodega;
		final JToolBar jTtoolBarDetalleBodega=jTtoolBarDetalleAuxiliarBodega;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasBodega;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesBodega;
			processRunnable.jTableDatos=jTableDatosBodega;
			processRunnable.jPanelCampos=jPanelCamposBodega;
			processRunnable.jPanelPaginacion=jPanelPaginacionBodega;
			processRunnable.jPanelAcciones=jPanelAccionesBodega;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioBodega;
			
			
			processRunnable.jmenuBar=jmenuBarBodega;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleBodega;
			processRunnable.jTtoolBar=jTtoolBarBodega;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleBodega;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasBodega ,jPanelParametrosReportesBodega,jTableDatosBodega, /*jScrollPanelDatosBodega,*/jPanelCamposBodega,jPanelPaginacionBodega, /*jScrollPanelDatosEdicionBodega,*/ jPanelAccionesBodega,jPanelAccionesFormularioBodega,jmenuBarBodega,jmenuBarDetalleBodega,jTtoolBarBodega,jTtoolBarDetalleBodega);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasBodega ,jPanelParametrosReportesBodega, jScrollPanelDatosBodega,jPanelPaginacionBodega, jScrollPanelDatosEdicionBodega, jPanelAccionesBodega,jPanelAccionesFormularioBodega,jmenuBarBodega,jmenuBarDetalleBodega,jTtoolBarBodega,jTtoolBarDetalleBodega);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessBodega() {// throws Exception 
		this.finishProcessBodega(true);
	}
	
	public void finishProcessBodega(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasBodega ,this.jPanelParametrosReportesBodega, this.jScrollPanelDatosBodega,this.jPanelPaginacionBodega, this.jScrollPanelDatosEdicionBodega, this.jPanelAccionesBodega,this.jPanelAccionesFormularioBodega,this.jmenuBarBodega,this.jmenuBarDetalleBodega,this.jTtoolBarBodega,this.jTtoolBarDetalleBodega);		
		
		final JTabbedPane jTabbedPaneBusquedasBodega=this.jTabbedPaneBusquedasBodega; 
		
		final JPanel jPanelParametrosReportesBodega=this.jPanelParametrosReportesBodega;
		//final JScrollPane jScrollPanelDatosBodega=this.jScrollPanelDatosBodega;
		final JTable jTableDatosBodega=this.jTableDatosBodega;		
		final JPanel jPanelPaginacionBodega=this.jPanelPaginacionBodega;
		//final JScrollPane jScrollPanelDatosEdicionBodega=this.jScrollPanelDatosEdicionBodega;
		final JPanel jPanelAccionesBodega=this.jPanelAccionesBodega;
		
		JPanel jPanelCamposAuxiliarBodega=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarBodega=new JPanel();
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
			jPanelCamposAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jPanelCamposBodega;
			jPanelAccionesFormularioAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jPanelAccionesFormularioBodega;
		}
		
		final JPanel jPanelCamposBodega=jPanelCamposAuxiliarBodega;
		final JPanel jPanelAccionesFormularioBodega=jPanelAccionesFormularioAuxiliarBodega;
		
		
		final JMenuBar jmenuBarBodega=this.jmenuBarBodega;		
		final JToolBar jTtoolBarBodega=this.jTtoolBarBodega;
				
		JMenuBar jmenuBarDetalleAuxiliarBodega=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarBodega=new JToolBar();
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
			jmenuBarDetalleAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jmenuBarDetalleBodega;
			jTtoolBarDetalleAuxiliarBodega=this.jInternalFrameDetalleFormBodega.jTtoolBarDetalleBodega;		
		}
		
		final JMenuBar jmenuBarDetalleBodega=jmenuBarDetalleAuxiliarBodega;
		final JToolBar jTtoolBarDetalleBodega=jTtoolBarDetalleAuxiliarBodega;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasBodega;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesBodega;
			processRunnable.jTableDatos=jTableDatosBodega;
			processRunnable.jPanelCampos=jPanelCamposBodega;
			processRunnable.jPanelPaginacion=jPanelPaginacionBodega;
			processRunnable.jPanelAcciones=jPanelAccionesBodega;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioBodega;
			
			
			processRunnable.jmenuBar=jmenuBarBodega;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleBodega;
			processRunnable.jTtoolBar=jTtoolBarBodega;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleBodega;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasBodega ,jPanelParametrosReportesBodega, jTableDatosBodega,/*jScrollPanelDatosBodega,*/jPanelCamposBodega,jPanelPaginacionBodega, /*jScrollPanelDatosEdicionBodega,*/ jPanelAccionesBodega,jPanelAccionesFormularioBodega,jmenuBarBodega,jmenuBarDetalleBodega,jTtoolBarBodega,jTtoolBarDetalleBodega));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesBodega(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarBodega(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuBodega(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarBodega(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarBodega,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleBodega,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuBodega(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarBodega,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleBodega,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.bodegaConstantesFunciones.getsFinalQueryBodega();
		String  finalQueryPaginacionTodos=this.bodegaConstantesFunciones.getsFinalQueryBodega();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=BodegaConstantesFunciones.getArrayColumnasGlobalesNoBodega(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.bodegasEliminados= new ArrayList<Bodega>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessBodega();
		
				///*BodegaSessionBean*/this.bodegaSessionBean=new BodegaSessionBean();
			
			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=BodegaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=BodegaConstantesFunciones.getClassesForeignKeysOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/bodega."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			bodegasAux= new ArrayList<Bodega>();
			
				
			bodegaLogic.setDatosCliente(this.datosCliente);
			bodegaLogic.setDatosDeep(this.datosDeep);
			bodegaLogic.setIsConDeep(true);
			
			
			bodegaLogic.getBodegaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					bodegaLogic.getTodosBodegas(finalQueryGlobal,pagination);
					
					//bodegaLogic.getTodosBodegasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(bodegaLogic.getBodegas()==null|| bodegaLogic.getBodegas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							bodegasAux= new ArrayList<Bodega>();
							bodegasAux.addAll(bodegaLogic.getBodegas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux= new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							bodegaLogic.getTodosBodegas(finalQueryGlobal+"",this.pagination);												
							
							//bodegaLogic.getTodosBodegasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteBodegas("Todos",bodegaLogic.getBodegas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							bodegaLogic.setBodegas(new ArrayList<Bodega>());					
							bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idBodega=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idBodega=this.idActual;
				
				} else if(this.idBodegaActual!=null && this.idBodegaActual!=0L) {
					idBodega=idBodegaActual;
				}
				
					
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndicePorId(idBodega);
				
				this.bodegas=new ArrayList<Bodega>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					bodegaLogic.getEntity(idBodega);
					
					//bodegaLogic.getEntityWithConnection(idBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.setBodegas(new ArrayList<Bodega>());
					bodegaLogic.getBodegas().add(bodegaLogic.getBodega());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodegas=new ArrayList<Bodega>();
					this.bodegas.add(bodega);
				}
				
				if(bodegaLogic.getBodega()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("BusquedaPorCodigo",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("BusquedaPorCodigo",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNombre")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("BusquedaPorNombre",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("BusquedaPorNombre",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorResponsableNombre")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorResponsableNombre(responsable_nombreBusquedaPorResponsableNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasBusquedaPorResponsableNombre(finalQueryGlobal,pagination,responsable_nombreBusquedaPorResponsableNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorResponsableNombre(responsable_nombreBusquedaPorResponsableNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorResponsableNombre(responsable_nombreBusquedaPorResponsableNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasBusquedaPorResponsableNombre(finalQueryGlobal,pagination,responsable_nombreBusquedaPorResponsableNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorResponsableNombre(responsable_nombreBusquedaPorResponsableNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceBusquedaPorResponsableNombre(responsable_nombreBusquedaPorResponsableNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("BusquedaPorResponsableNombre",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("BusquedaPorResponsableNombre",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCalidadProducto")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasFK_IdCalidadProducto(finalQueryGlobal,pagination,id_calidad_productoFK_IdCalidadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasFK_IdCalidadProducto(finalQueryGlobal,pagination,id_calidad_productoFK_IdCalidadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCalidadProducto(id_calidad_productoFK_IdCalidadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("FK_IdCalidadProducto",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("FK_IdCalidadProducto",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("FK_IdCentroCosto",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("FK_IdCentroCosto",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("FK_IdEmpleado",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("FK_IdEmpleado",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("FK_IdEmpresa",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("FK_IdEmpresa",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdGrupoBodega")) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					bodegaLogic.getBodegasFK_IdGrupoBodega(finalQueryGlobal,pagination,id_grupo_bodegaFK_IdGrupoBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=bodegaLogic.getBodegas()==null||bodegaLogic.getBodegas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=bodegas==null|| bodegas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegasAux=new ArrayList<Bodega>();
						bodegasAux.addAll(bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegasAux=new ArrayList<Bodega>();
							bodegasAux.addAll(bodegas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							bodegaLogic.getBodegasFK_IdGrupoBodega(finalQueryGlobal,pagination,id_grupo_bodegaFK_IdGrupoBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=BodegaConstantesFunciones.getDetalleIndiceFK_IdGrupoBodega(id_grupo_bodegaFK_IdGrupoBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteBodegas("FK_IdGrupoBodega",bodegaLogic.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteBodegas("FK_IdGrupoBodega",bodegas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaLogic.setBodegas(new ArrayList<Bodega>());
						bodegaLogic.getBodegas().addAll(bodegasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegas=new ArrayList<Bodega>();
							bodegas.addAll(bodegasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesBodega();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessBodega();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=bodegaLogic.getBodegas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=bodegas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=bodegaLogic.getBodegas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=bodegas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Bodega bodega) {
		Boolean permite=true;
		
		if(this.bodega.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=BodegaConstantesFunciones.getOrderByListaBodega();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=BodegaConstantesFunciones.getOrderByListaBodega();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Bodega bodega:bodegaLogic.getBodegas()) {
				if(bodega.getsType().equals(Constantes2.S_TOTALES)) {
					bodegaTotales=bodega;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Bodega bodega:this.bodegas) {
				if(bodega.getsType().equals(Constantes2.S_TOTALES)) {
					bodegaTotales=bodega;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.bodegaAux=new Bodega();
			this.bodegaAux.setsType(Constantes2.S_TOTALES);
			this.bodegaAux.setIsNew(false);
			this.bodegaAux.setIsChanged(false);
			this.bodegaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				BodegaConstantesFunciones.TotalizarValoresFilaBodega(this.bodegaLogic.getBodegas(),this.bodegaAux);
				
				this.bodegaLogic.getBodegas().add(this.bodegaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				BodegaConstantesFunciones.TotalizarValoresFilaBodega(this.bodegas,this.bodegaAux);
				
				this.bodegas.add(this.bodegaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		bodegaTotales=new Bodega();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.bodegaLogic.getBodegas().remove(bodegaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.bodegas.remove(bodegaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		bodegaTotales=new Bodega();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Bodega bodega:bodegaLogic.getBodegas()) {
				if(bodega.getsType().equals(Constantes2.S_TOTALES)) {
					bodegaTotales=bodega;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				BodegaConstantesFunciones.TotalizarValoresFilaBodega(this.bodegaLogic.getBodegas(),bodegaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Bodega bodega:this.bodegas) {
				if(bodega.getsType().equals(Constantes2.S_TOTALES)) {
					bodegaTotales=bodega;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				BodegaConstantesFunciones.TotalizarValoresFilaBodega(this.bodegas,bodegaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getBodegasBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasBusquedaPorNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasBusquedaPorResponsableNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorResponsableNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasBusquedaPorRuc()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorRuc";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasBusquedaPorSiglas()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorSiglas";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasBusquedaPorTelefono()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorTelefono";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCalidadProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCalidadProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCiudad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCiudad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableBonifica()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableBonifica";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableCostoBonifica()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCostoBonifica";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableDebito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDebito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableDescuento()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDescuento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableDevolucion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDevolucion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableProduccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableProduccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdCuentaContableVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdGrupoBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdGrupoBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getBodegasFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getBodegasBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasBusquedaPorNombre(String sFinalQuery,String nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorNombre(sFinalQuery,this.pagination,nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasBusquedaPorResponsableNombre(String sFinalQuery,String responsable_nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorResponsableNombre(sFinalQuery,this.pagination,responsable_nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasBusquedaPorRuc(String sFinalQuery,String ruc)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorRuc(sFinalQuery,this.pagination,ruc);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasBusquedaPorSiglas(String sFinalQuery,String siglas)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorSiglas(sFinalQuery,this.pagination,siglas);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasBusquedaPorTelefono(String sFinalQuery,String telefono)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasBusquedaPorTelefono(sFinalQuery,this.pagination,telefono);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCalidadProducto(String sFinalQuery,Long id_calidad_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCalidadProducto(sFinalQuery,this.pagination,id_calidad_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCiudad(String sFinalQuery,Long id_ciudad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCiudad(sFinalQuery,this.pagination,id_ciudad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableBonifica(String sFinalQuery,Long id_cuenta_contable_bonifica)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableBonifica(sFinalQuery,this.pagination,id_cuenta_contable_bonifica);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableCosto(String sFinalQuery,Long id_cuenta_contable_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableCosto(sFinalQuery,this.pagination,id_cuenta_contable_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableCostoBonifica(String sFinalQuery,Long id_cuenta_contable_costo_bonifica)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableCostoBonifica(sFinalQuery,this.pagination,id_cuenta_contable_costo_bonifica);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableDebito(String sFinalQuery,Long id_cuenta_contable_debito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableDebito(sFinalQuery,this.pagination,id_cuenta_contable_debito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableDescuento(String sFinalQuery,Long id_cuenta_contable_descuento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableDescuento(sFinalQuery,this.pagination,id_cuenta_contable_descuento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableDevolucion(String sFinalQuery,Long id_cuenta_contable_devolucion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableDevolucion(sFinalQuery,this.pagination,id_cuenta_contable_devolucion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableInventario(String sFinalQuery,Long id_cuenta_contable_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableInventario(sFinalQuery,this.pagination,id_cuenta_contable_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableProduccion(String sFinalQuery,Long id_cuenta_contable_produccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableProduccion(sFinalQuery,this.pagination,id_cuenta_contable_produccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdCuentaContableVenta(String sFinalQuery,Long id_cuenta_contable_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdCuentaContableVenta(sFinalQuery,this.pagination,id_cuenta_contable_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdGrupoBodega(String sFinalQuery,Long id_grupo_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdGrupoBodega(sFinalQuery,this.pagination,id_grupo_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getBodegasFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getBodegasFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosBodega() {
		this.isPermisoTodoBodega=false;
		this.isPermisoNuevoBodega=false;
		this.isPermisoActualizarBodega=false;
		this.isPermisoActualizarOriginalBodega=false;
		this.isPermisoEliminarBodega=false;
		this.isPermisoGuardarCambiosBodega=false;
		this.isPermisoConsultaBodega=false;
		this.isPermisoBusquedaBodega=false;
		this.isPermisoReporteBodega=false;		
		this.isPermisoOrdenBodega=false;		
		this.isPermisoPaginacionMedioBodega=false;		
		this.isPermisoPaginacionAltoBodega=false;
		this.isPermisoPaginacionTodoBodega=false;
		this.isPermisoCopiarBodega=false;		
		this.isPermisoVerFormBodega=false;		
		this.isPermisoDuplicarBodega=false;		
		this.isPermisoOrdenBodega=false;		
	}
	
	public void setPermisosUsuarioBodega(Boolean isPermiso) {
		this.isPermisoTodoBodega=isPermiso;
		this.isPermisoNuevoBodega=isPermiso;
		this.isPermisoActualizarBodega=isPermiso;
		this.isPermisoActualizarOriginalBodega=isPermiso;
		this.isPermisoEliminarBodega=isPermiso;
		this.isPermisoGuardarCambiosBodega=isPermiso;
		this.isPermisoConsultaBodega=isPermiso;
		this.isPermisoBusquedaBodega=isPermiso;
		this.isPermisoReporteBodega=isPermiso;
		this.isPermisoOrdenBodega=isPermiso;		
		this.isPermisoPaginacionMedioBodega=isPermiso;		
		this.isPermisoPaginacionAltoBodega=isPermiso;		
		this.isPermisoPaginacionTodoBodega=isPermiso;		
		this.isPermisoCopiarBodega=isPermiso;		
		this.isPermisoVerFormBodega=isPermiso;		
		this.isPermisoDuplicarBodega=isPermiso;
		this.isPermisoOrdenBodega=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioBodega(Boolean isPermiso) {
		//this.isPermisoTodoBodega=isPermiso;
		this.isPermisoNuevoBodega=isPermiso;
		this.isPermisoActualizarBodega=isPermiso;
		this.isPermisoActualizarOriginalBodega=isPermiso;
		this.isPermisoEliminarBodega=isPermiso;
		this.isPermisoGuardarCambiosBodega=isPermiso;
		//this.isPermisoConsultaBodega=isPermiso;
		//this.isPermisoBusquedaBodega=isPermiso;
		//this.isPermisoReporteBodega=isPermiso;
		//this.isPermisoOrdenBodega=isPermiso;		
		//this.isPermisoPaginacionMedioBodega=isPermiso;		
		//this.isPermisoPaginacionAltoBodega=isPermiso;		
		//this.isPermisoPaginacionTodoBodega=isPermiso;		
		//this.isPermisoCopiarBodega=isPermiso;		
		//this.isPermisoDuplicarBodega=isPermiso;
		//this.isPermisoOrdenBodega=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioBodegaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(BodegaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebBodega(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioBodegaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioBodegaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionBodegaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioBodegaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioBodega() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(BodegaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, BodegaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoBodega=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarBodega=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalBodega=this.isPermisoActualizarBodega;
			this.isPermisoEliminarBodega=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosBodega=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaBodega=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaBodega=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoBodega=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteBodega=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenBodega=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioBodega=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoBodega=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoBodega=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarBodega=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormBodega=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarBodega=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenBodega=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosBodega.setToolTipText(this.jTableDatosBodega.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioBodega(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioBodega(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(BodegaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(BodegaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioBodega() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyBodegaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.grupobodegasForeignKey=new ArrayList();
				this.calidadproductosForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.ciudadsForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.cuentacontableinventariosForeignKey=new ArrayList();
				this.cuentacontablecostosForeignKey=new ArrayList();
				this.cuentacontableventasForeignKey=new ArrayList();
				this.cuentacontabledescuentosForeignKey=new ArrayList();
				this.cuentacontabledevolucionsForeignKey=new ArrayList();
				this.cuentacontabledebitosForeignKey=new ArrayList();
				this.cuentacontablecreditosForeignKey=new ArrayList();
				this.cuentacontablebonificasForeignKey=new ArrayList();
				this.cuentacontableproduccionsForeignKey=new ArrayList();
				this.cuentacontablecostobonificasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyBodegaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(BodegaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyBodegaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyGrupoBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCalidadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableProduccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyGrupoBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.grupobodegasForeignKey==null||this.grupobodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=GrupoBodegaConstantesFunciones.getArrayColumnasGlobalesGrupoBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GrupoBodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=GrupoBodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosGrupoBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCalidadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.calidadproductosForeignKey==null||this.calidadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CalidadProductoConstantesFunciones.getArrayColumnasGlobalesCalidadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CalidadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CalidadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCalidadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CiudadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebitoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableBonificaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablebonificasForeignKey==null||this.cuentacontablebonificasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableBonificasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableProduccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableproduccionsForeignKey==null||this.cuentacontableproduccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableProduccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoBonificaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostobonificasForeignKey==null||this.cuentacontablecostobonificasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyBodegaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			BodegaParameterReturnGeneral bodegaReturnGeneral=new BodegaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_empresaBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_empresaBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalGrupoBodega="";

				if(((this.grupobodegasForeignKey==null||this.grupobodegasForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_grupo_bodegaBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_grupo_bodegaBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=GrupoBodegaConstantesFunciones.getArrayColumnasGlobalesGrupoBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalGrupoBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,GrupoBodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalGrupoBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalGrupoBodega, "");
						finalQueryGlobalGrupoBodega+=GrupoBodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosGrupoBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalGrupoBodega=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidGrupoBodegaActual();
					}
				} else {
					finalQueryGlobalGrupoBodega="NONE";
				}


				String finalQueryGlobalCalidadProducto="";

				if(((this.calidadproductosForeignKey==null||this.calidadproductosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_calidad_productoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_calidad_productoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CalidadProductoConstantesFunciones.getArrayColumnasGlobalesCalidadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCalidadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CalidadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalCalidadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalCalidadProducto, "");
						finalQueryGlobalCalidadProducto+=CalidadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCalidadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCalidadProducto=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCalidadProductoActual();
					}
				} else {
					finalQueryGlobalCalidadProducto="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_paisBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_paisBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalCiudad="";

				if(cargarCombosDependencia && ((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_ciudadBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_ciudadBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCiudad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

						finalQueryGlobalCiudad=Funciones.GetFinalQueryAppend(finalQueryGlobalCiudad, "");
						finalQueryGlobalCiudad+=CiudadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCiudad=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCiudadActual();
					}
				} else {
					finalQueryGlobalCiudad="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_centro_costoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_centro_costoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_empleadoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_empleadoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalCuentaContableInventario="";

				if(((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_inventarioBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_inventarioBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventario, "");
						finalQueryGlobalCuentaContableInventario+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventario=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableInventarioActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventario="NONE";
				}


				String finalQueryGlobalCuentaContableCosto="";

				if(((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_costoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_costoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCosto, "");
						finalQueryGlobalCuentaContableCosto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCosto=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableCostoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCosto="NONE";
				}


				String finalQueryGlobalCuentaContableVenta="";

				if(((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_ventaBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_ventaBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableVenta, "");
						finalQueryGlobalCuentaContableVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableVenta=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableVenta="NONE";
				}


				String finalQueryGlobalCuentaContableDescuento="";

				if(((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_descuentoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_descuentoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDescuento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDescuento=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDescuento, "");
						finalQueryGlobalCuentaContableDescuento+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDescuento=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableDescuentoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDescuento="NONE";
				}


				String finalQueryGlobalCuentaContableDevolucion="";

				if(((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_devolucionBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_devolucionBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDevolucion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDevolucion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDevolucion, "");
						finalQueryGlobalCuentaContableDevolucion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDevolucion=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableDevolucionActual();
					}
				} else {
					finalQueryGlobalCuentaContableDevolucion="NONE";
				}


				String finalQueryGlobalCuentaContableDebito="";

				if(((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_debitoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_debitoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDebito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDebito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDebito, "");
						finalQueryGlobalCuentaContableDebito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDebito=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableDebitoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDebito="NONE";
				}


				String finalQueryGlobalCuentaContableCredito="";

				if(((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_creditoBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_creditoBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCredito, "");
						finalQueryGlobalCuentaContableCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCredito=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCredito="NONE";
				}


				String finalQueryGlobalCuentaContableBonifica="";

				if(((this.cuentacontablebonificasForeignKey==null||this.cuentacontablebonificasForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_bonificaBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_bonificaBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableBonifica=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableBonifica=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableBonifica, "");
						finalQueryGlobalCuentaContableBonifica+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableBonificasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableBonifica=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableBonificaActual();
					}
				} else {
					finalQueryGlobalCuentaContableBonifica="NONE";
				}


				String finalQueryGlobalCuentaContableProduccion="";

				if(((this.cuentacontableproduccionsForeignKey==null||this.cuentacontableproduccionsForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_produccionBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_produccionBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableProduccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableProduccion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableProduccion, "");
						finalQueryGlobalCuentaContableProduccion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableProduccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableProduccion=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableProduccionActual();
					}
				} else {
					finalQueryGlobalCuentaContableProduccion="NONE";
				}


				String finalQueryGlobalCuentaContableCostoBonifica="";

				if(((this.cuentacontablecostobonificasForeignKey==null||this.cuentacontablecostobonificasForeignKey.size()<=0) && this.bodegaConstantesFunciones.cargarid_cuenta_contable_costo_bonificaBodega)
					 || (this.esRecargarFks && this.bodegaConstantesFunciones.cargarid_cuenta_contable_costo_bonificaBodega)) {

					if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCostoBonifica=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCostoBonifica=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCostoBonifica, "");
						finalQueryGlobalCuentaContableCostoBonifica+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCostoBonifica=" WHERE " + ConstantesSql.ID + "="+bodegaSessionBean.getlidCuentaContableCostoBonificaActual();
					}
				} else {
					finalQueryGlobalCuentaContableCostoBonifica="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				bodegaReturnGeneral=bodegaLogic.cargarCombosLoteForeignKeyBodega(finalQueryGlobalEmpresa,finalQueryGlobalGrupoBodega,finalQueryGlobalCalidadProducto,finalQueryGlobalPais,finalQueryGlobalCiudad,finalQueryGlobalCentroCosto,finalQueryGlobalEmpleado,finalQueryGlobalCuentaContableInventario,finalQueryGlobalCuentaContableCosto,finalQueryGlobalCuentaContableVenta,finalQueryGlobalCuentaContableDescuento,finalQueryGlobalCuentaContableDevolucion,finalQueryGlobalCuentaContableDebito,finalQueryGlobalCuentaContableCredito,finalQueryGlobalCuentaContableBonifica,finalQueryGlobalCuentaContableProduccion,finalQueryGlobalCuentaContableCostoBonifica);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=bodegaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalGrupoBodega.equals("NONE")) {
				this.grupobodegasForeignKey=bodegaReturnGeneral.getgrupobodegasForeignKey();
			}

			if(!finalQueryGlobalCalidadProducto.equals("NONE")) {
				this.calidadproductosForeignKey=bodegaReturnGeneral.getcalidadproductosForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=bodegaReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalCiudad.equals("NONE")) {
				this.ciudadsForeignKey=bodegaReturnGeneral.getciudadsForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=bodegaReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=bodegaReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventario.equals("NONE")) {
				this.cuentacontableinventariosForeignKey=bodegaReturnGeneral.getcuentacontableinventariosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCosto.equals("NONE")) {
				this.cuentacontablecostosForeignKey=bodegaReturnGeneral.getcuentacontablecostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableVenta.equals("NONE")) {
				this.cuentacontableventasForeignKey=bodegaReturnGeneral.getcuentacontableventasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDescuento.equals("NONE")) {
				this.cuentacontabledescuentosForeignKey=bodegaReturnGeneral.getcuentacontabledescuentosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDevolucion.equals("NONE")) {
				this.cuentacontabledevolucionsForeignKey=bodegaReturnGeneral.getcuentacontabledevolucionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDebito.equals("NONE")) {
				this.cuentacontabledebitosForeignKey=bodegaReturnGeneral.getcuentacontabledebitosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCredito.equals("NONE")) {
				this.cuentacontablecreditosForeignKey=bodegaReturnGeneral.getcuentacontablecreditosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableBonifica.equals("NONE")) {
				this.cuentacontablebonificasForeignKey=bodegaReturnGeneral.getcuentacontablebonificasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableProduccion.equals("NONE")) {
				this.cuentacontableproduccionsForeignKey=bodegaReturnGeneral.getcuentacontableproduccionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCostoBonifica.equals("NONE")) {
				this.cuentacontablecostobonificasForeignKey=bodegaReturnGeneral.getcuentacontablecostobonificasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyBodega()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyGrupoBodega();
			this.addItemDefectoCombosForeignKeyCalidadProducto();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyCiudad();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyCuentaContableInventario();
			this.addItemDefectoCombosForeignKeyCuentaContableCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableVenta();
			this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
			this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
			this.addItemDefectoCombosForeignKeyCuentaContableDebito();
			this.addItemDefectoCombosForeignKeyCuentaContableCredito();
			this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
			this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
			this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.bodegaSessionBean==null) {
				this.bodegaSessionBean=new BodegaSessionBean();
			}

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyGrupoBodega()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionGrupoBodega()) {
				GrupoBodega grupobodega=new GrupoBodega();
				GrupoBodegaConstantesFunciones.setGrupoBodegaDescripcion(grupobodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				grupobodega.setId(null);

				if(!GrupoBodegaConstantesFunciones.ExisteEnLista(this.grupobodegasForeignKey,grupobodega,true)) {

					this.grupobodegasForeignKey.add(0,grupobodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCalidadProducto()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCalidadProducto()) {
				CalidadProducto calidadproducto=new CalidadProducto();
				CalidadProductoConstantesFunciones.setCalidadProductoDescripcion(calidadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				calidadproducto.setId(null);

				if(!CalidadProductoConstantesFunciones.ExisteEnLista(this.calidadproductosForeignKey,calidadproducto,true)) {

					this.calidadproductosForeignKey.add(0,calidadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCiudad()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				Ciudad ciudad=new Ciudad();
				CiudadConstantesFunciones.setCiudadDescripcion(ciudad,Constantes.SMENSAJE_ESCOJA_OPCION);
				ciudad.setId(null);

				if(!CiudadConstantesFunciones.ExisteEnLista(this.ciudadsForeignKey,ciudad,true)) {

					this.ciudadsForeignKey.add(0,ciudad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventario()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				CuentaContable cuentacontableinventario=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventario.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventariosForeignKey,cuentacontableinventario,true)) {

					this.cuentacontableinventariosForeignKey.add(0,cuentacontableinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCosto()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				CuentaContable cuentacontablecosto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecosto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostosForeignKey,cuentacontablecosto,true)) {

					this.cuentacontablecostosForeignKey.add(0,cuentacontablecosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableVenta()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				CuentaContable cuentacontableventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableventasForeignKey,cuentacontableventa,true)) {

					this.cuentacontableventasForeignKey.add(0,cuentacontableventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDescuento()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				CuentaContable cuentacontabledescuento=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledescuento,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledescuento.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledescuentosForeignKey,cuentacontabledescuento,true)) {

					this.cuentacontabledescuentosForeignKey.add(0,cuentacontabledescuento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDevolucion()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				CuentaContable cuentacontabledevolucion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledevolucion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledevolucion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledevolucionsForeignKey,cuentacontabledevolucion,true)) {

					this.cuentacontabledevolucionsForeignKey.add(0,cuentacontabledevolucion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDebito()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				CuentaContable cuentacontabledebito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledebito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledebito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledebitosForeignKey,cuentacontabledebito,true)) {

					this.cuentacontabledebitosForeignKey.add(0,cuentacontabledebito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCredito()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				CuentaContable cuentacontablecredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditosForeignKey,cuentacontablecredito,true)) {

					this.cuentacontablecreditosForeignKey.add(0,cuentacontablecredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableBonifica()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableBonifica()) {
				CuentaContable cuentacontablebonifica=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablebonifica,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablebonifica.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablebonificasForeignKey,cuentacontablebonifica,true)) {

					this.cuentacontablebonificasForeignKey.add(0,cuentacontablebonifica);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableProduccion()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableProduccion()) {
				CuentaContable cuentacontableproduccion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableproduccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableproduccion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableproduccionsForeignKey,cuentacontableproduccion,true)) {

					this.cuentacontableproduccionsForeignKey.add(0,cuentacontableproduccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCostoBonifica()throws Exception {
		try {

			if(!this.bodegaSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoBonifica()) {
				CuentaContable cuentacontablecostobonifica=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecostobonifica,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecostobonifica.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostobonificasForeignKey,cuentacontablecostobonifica,true)) {

					this.cuentacontablecostobonificasForeignKey.add(0,cuentacontablecostobonifica);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyBodega()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyPais("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyPais(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyPais(JComboBox jComboBoxPaisGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Pais paisLocal=(Pais)jComboBoxPaisGenerico.getSelectedItem();

			if(paisLocal!=null  && paisLocal.getId()!=null  && paisLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_pais="+paisLocal.getId();
			}
			//REDEFINE

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboCiudad=sFinalQueryCombo;

			this.ciudadsForeignKey=new ArrayList<Ciudad>();
			this.cargarCombosForeignKeyCiudad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyPais(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.addItemListener(new ComboBoxItemListener(this,"id_paisBodega"));
						this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.addFocusListener(new ComboBoxFocusListener(this,"id_paisBodega"));
					}
				} else {
					if(this.jInternalFrameDetalleFormBodega!=null) {
						this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.addActionListener(new ComboBoxActionListener(this,"id_paisBodega"));
						this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.addFocusListener(new ComboBoxFocusListener(this,"id_paisBodega"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyBodega()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyBodega();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyBodega(Bodega bodega)throws Exception {	
		try {
			
			this.setActualGrupoBodegaForeignKey(bodega.getid_grupo_bodega(),false,"Formulario");
			this.setActualCalidadProductoForeignKey(bodega.getid_calidad_producto(),false,"Formulario");
			this.setActualPaisForeignKey(bodega.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(bodega.getid_ciudad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(bodega.getid_centro_costo(),false,"Formulario");
			this.setActualEmpleadoForeignKey(bodega.getid_empleado(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(bodega.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(bodega.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(bodega.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(bodega.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(bodega.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(bodega.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(bodega.getid_cuenta_contable_credito(),false,"Formulario");
			this.setActualCuentaContableBonificaForeignKey(bodega.getid_cuenta_contable_bonifica(),false,"Formulario");
			this.setActualCuentaContableProduccionForeignKey(bodega.getid_cuenta_contable_produccion(),false,"Formulario");
			this.setActualCuentaContableCostoBonificaForeignKey(bodega.getid_cuenta_contable_costo_bonifica(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyBodega(Bodega bodega,String sTipoEvento)throws Exception {	
		try {
			
			

				if(bodega.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(bodega.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(bodega.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(bodega.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(bodega.getCuentaContableInventario()!=null && !sTipoEvento.equals("id_cuenta_contable_inventarioBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableinventariosForeignKey.add(bodega.getCuentaContableInventario());

					this.addItemDefectoCombosForeignKeyCuentaContableInventario();
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				if(bodega.getCuentaContableCosto()!=null && !sTipoEvento.equals("id_cuenta_contable_costoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostosForeignKey.add(bodega.getCuentaContableCosto());

					this.addItemDefectoCombosForeignKeyCuentaContableCosto();
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}

				if(bodega.getCuentaContableVenta()!=null && !sTipoEvento.equals("id_cuenta_contable_ventaBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableventasForeignKey.add(bodega.getCuentaContableVenta());

					this.addItemDefectoCombosForeignKeyCuentaContableVenta();
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}

				if(bodega.getCuentaContableDescuento()!=null && !sTipoEvento.equals("id_cuenta_contable_descuentoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledescuentosForeignKey.add(bodega.getCuentaContableDescuento());

					this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
					this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
				}

				if(bodega.getCuentaContableDevolucion()!=null && !sTipoEvento.equals("id_cuenta_contable_devolucionBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledevolucionsForeignKey.add(bodega.getCuentaContableDevolucion());

					this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
					this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
				}

				if(bodega.getCuentaContableDebito()!=null && !sTipoEvento.equals("id_cuenta_contable_debitoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledebitosForeignKey.add(bodega.getCuentaContableDebito());

					this.addItemDefectoCombosForeignKeyCuentaContableDebito();
					this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
				}

				if(bodega.getCuentaContableCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_creditoBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditosForeignKey.add(bodega.getCuentaContableCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableCredito();
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}

				if(bodega.getCuentaContableBonifica()!=null && !sTipoEvento.equals("id_cuenta_contable_bonificaBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablebonificasForeignKey.add(bodega.getCuentaContableBonifica());

					this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
					this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
				}

				if(bodega.getCuentaContableProduccion()!=null && !sTipoEvento.equals("id_cuenta_contable_produccionBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableproduccionsForeignKey.add(bodega.getCuentaContableProduccion());

					this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
					this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
				}

				if(bodega.getCuentaContableCostoBonifica()!=null && !sTipoEvento.equals("id_cuenta_contable_costo_bonificaBodega")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostobonificasForeignKey.add(bodega.getCuentaContableCostoBonifica());

					this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
					this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyBodega()throws Exception {	
		try {
			
			this.setActualGrupoBodegaForeignKey(this.bodegaConstantesFunciones.getid_grupo_bodega(),false,"Formulario");
			this.setActualCalidadProductoForeignKey(this.bodegaConstantesFunciones.getid_calidad_producto(),false,"Formulario");
			this.setActualPaisForeignKey(this.bodegaConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(this.bodegaConstantesFunciones.getid_ciudad(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.bodegaConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualEmpleadoForeignKey(this.bodegaConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_credito(),false,"Formulario");
			this.setActualCuentaContableBonificaForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_bonifica(),false,"Formulario");
			this.setActualCuentaContableProduccionForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_produccion(),false,"Formulario");
			this.setActualCuentaContableCostoBonificaForeignKey(this.bodegaConstantesFunciones.getid_cuenta_contable_costo_bonifica(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyBodega()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyBodega()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyBodega()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroBodega()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyBodega()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameGrupoBodegasForeignKey("Todos");
			this.cargarCombosFrameCalidadProductosForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameCiudadsForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameGrupoBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCalidadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableBonificasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableProduccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostoBonificasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyBodega()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega!=null && this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.getItemCount()>0) {
				this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	







	public void recargarFormBodegaPais(JComboBox<?> jComboBoxGenericoPais,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormBodegaid_ciudad(jComboBoxGenericoPais,sFormularioTipoBusqueda,"Pais",false);
	}


























	
	



	public void recargarFormBodegaid_ciudad(JComboBox<?> jComboBoxGenericoCiudad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Pais")){
				this.setActualParaGuardarPaisForeignKey(this.bodega,jComboBoxGenericoCiudad);
			}

			if(this.bodega.getid_pais()!=null && this.bodega.getid_pais()!=0L) {
				sFinalQuery+="  WHERE  id_pais="+this.bodega.getid_pais();
			} else {
				sFinalQuery+="  WHERE  id_pais=-1";
			}



			//BUCLE RECURSIVO
			this.setActualCiudadForeignKey(this.bodega.getid_pais(),true,sFormularioTipoBusqueda);

			this.cargarCombosCiudadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public BodegaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public BodegaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public BodegaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.bodegaSessionBean=new BodegaSessionBean(); 
		this.bodegaConstantesFunciones=new BodegaConstantesFunciones(); 
		this.bodegaBean=new Bodega();//(this.bodegaConstantesFunciones); 		
		this.bodegaReturnGeneral=new BodegaParameterReturnGeneral(); 
		
		this.bodegaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.bodegaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public BodegaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public BodegaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public BodegaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessBodega(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.bodegaConstantesFunciones=new BodegaConstantesFunciones(); 
			this.bodegaBean=new Bodega();//this.bodegaConstantesFunciones); 			
			this.bodegaReturnGeneral=new BodegaParameterReturnGeneral(); 
		
			BodegaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Bodega Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			
			
			this.bodega=new Bodega();
			this.bodegas = new ArrayList<Bodega>();
			this.bodegasAux = new ArrayList<Bodega>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic=new BodegaLogic();
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			//this.bodegaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.bodegaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormBodega);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoBodega!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoBodega);	
					}
					
					if(this.jInternalFrameImportacionBodega!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionBodega);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByBodega!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByBodega);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormBodega!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormBodega);
				this.jInternalFrameDetalleFormBodega.setVisible(false);
				this.jInternalFrameDetalleFormBodega.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoBodega!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoBodega);
					this.jInternalFrameReporteDinamicoBodega.setVisible(false);
					this.jInternalFrameReporteDinamicoBodega.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionBodega!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionBodega);
					this.jInternalFrameImportacionBodega.setVisible(false);
					this.jInternalFrameImportacionBodega.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByBodega!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByBodega);
					this.jInternalFrameOrderByBodega.setVisible(false);
					this.jInternalFrameOrderByBodega.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idBodegaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=BodegaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.bodegaReturnGeneral=new BodegaParameterReturnGeneral();
			
			this.bodegaParameterGeneral=new BodegaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.bodegaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(BodegaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,BodegaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.bodegaSessionBean.getEsGuardarRelacionado(),this.bodegaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,BodegaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.bodegaSessionBean.getEsGuardarRelacionado(),this.bodegaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaDuplicarBodega=true;
			this.isVisibilidadCeldaCopiarBodega=true;
			this.isVisibilidadCeldaVerFormBodega=true;
			this.isVisibilidadCeldaOrdenBodega=true;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=false;
			this.isVisibilidadCeldaGuardarBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNombre=true;
			this.isVisibilidadBusquedaPorResponsableNombre=true;
			this.isVisibilidadBusquedaPorRuc=true;
			this.isVisibilidadBusquedaPorSiglas=true;
			this.isVisibilidadBusquedaPorTelefono=true;
			this.isVisibilidadFK_IdCalidadProducto=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCiudad=true;
			this.isVisibilidadFK_IdCuentaContableBonifica=true;
			this.isVisibilidadFK_IdCuentaContableCosto=true;
			this.isVisibilidadFK_IdCuentaContableCostoBonifica=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableDebito=true;
			this.isVisibilidadFK_IdCuentaContableDescuento=true;
			this.isVisibilidadFK_IdCuentaContableDevolucion=true;
			this.isVisibilidadFK_IdCuentaContableInventario=true;
			this.isVisibilidadFK_IdCuentaContableProduccion=true;
			this.isVisibilidadFK_IdCuentaContableVenta=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdGrupoBodega=true;
			this.isVisibilidadFK_IdPais=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosBodega();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioBodega(false);
			
			this.setPermisosUsuarioBodega();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.bodegaSessionBean.getEsGuardarRelacionado() 
				|| (this.bodegaSessionBean.getEsGuardarRelacionado() && this.bodegaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioBodegaClasesRelacionadas();
			}
			
			if(this.bodegaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioBodegaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!BodegaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosBodega();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualBodega();
			}
			
			if(!this.isPermisoBusquedaBodega) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasBodega.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioBodega,this.isPermisoPaginacionMedioBodega,this.isPermisoPaginacionTodoBodega);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(BodegaConstantesFunciones.getTiposSeleccionarBodega());
				
				this.tiposColumnasSelect=BodegaConstantesFunciones.getTiposSeleccionarBodega(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioBodega();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioBodega(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioBodega(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesBodega() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.grupobodegaLogic=new GrupoBodegaLogic();
			this.calidadproductoLogic=new CalidadProductoLogic();
			this.paisLogic=new PaisLogic();
			this.ciudadLogic=new CiudadLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.cuentacontableinventarioLogic=new CuentaContableLogic();
			this.cuentacontablecostoLogic=new CuentaContableLogic();
			this.cuentacontableventaLogic=new CuentaContableLogic();
			this.cuentacontabledescuentoLogic=new CuentaContableLogic();
			this.cuentacontabledevolucionLogic=new CuentaContableLogic();
			this.cuentacontabledebitoLogic=new CuentaContableLogic();
			this.cuentacontablecreditoLogic=new CuentaContableLogic();
			this.cuentacontablebonificaLogic=new CuentaContableLogic();
			this.cuentacontableproduccionLogic=new CuentaContableLogic();
			this.cuentacontablecostobonificaLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				bodegaImplementable= (BodegaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+BodegaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				bodegaImplementableHome= (BodegaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+BodegaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.bodegas= new ArrayList<Bodega>();
			this.bodegasEliminados= new ArrayList<Bodega>();
						
			this.isEsNuevoBodega=false;
			this.esParaAccionDesdeFormularioBodega=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCentroCostoActual=0L;
			this.idEmpleadoActual=0L;
			this.idCuentaContableInventarioActual=0L;
			this.idCuentaContableCostoActual=0L;
			this.idCuentaContableVentaActual=0L;
			this.idCuentaContableDescuentoActual=0L;
			this.idCuentaContableDevolucionActual=0L;
			this.idCuentaContableDebitoActual=0L;
			this.idCuentaContableCreditoActual=0L;
			this.idCuentaContableBonificaActual=0L;
			this.idCuentaContableProduccionActual=0L;
			this.idCuentaContableCostoBonificaActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.grupobodegasForeignKey=new ArrayList<GrupoBodega>() ;
			this.calidadproductosForeignKey=new ArrayList<CalidadProducto>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.ciudadsForeignKey=new ArrayList<Ciudad>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyBodega(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroBodega();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			BodegaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=BodegaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesBodega("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingBodega(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormBodega!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioBodega();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioBodega();
			}
			
			BodegaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasBodega.getTabCount(); i++) {
					this.jTabbedPaneBusquedasBodega.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasBodega.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessBodega(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Bodega: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectBodega() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesBodega")) {
				iIndex=this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosBodega.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessBodega();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyBodega(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyBodegaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyBodega();
		
		this.cargarCombosFrameForeignKeyBodega();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyBodega();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyBodega();
		}
	}
	
	

	public void cargarCombosForeignKeyGrupoBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyGrupoBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyGrupoBodega();
				this.cargarCombosFrameGrupoBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaGrupoBodega(this.grupobodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCalidadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCalidadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCalidadProducto();
				this.cargarCombosFrameCalidadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCalidadProducto(this.calidadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCiudad(this.ciudadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableDescuento(this.cuentacontabledescuentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableDevolucion(this.cuentacontabledevolucionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableDebito(this.cuentacontabledebitosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableBonifica(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
				this.cargarCombosFrameCuentaContableBonificasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableBonifica(this.cuentacontablebonificasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableProduccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableProduccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
				this.cargarCombosFrameCuentaContableProduccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableProduccion(this.cuentacontableproduccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoBonifica(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoBonificaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
				this.cargarCombosFrameCuentaContableCostoBonificasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyPais("Todos");
				}

			this.recargarComboTablaCuentaContableCostoBonifica(this.cuentacontablecostobonificasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoBodegaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.bodegaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			
			if(jTableDatosBodega.getRowCount()>=1) {
				jTableDatosBodega.removeRowSelectionInterval(0, jTableDatosBodega.getRowCount()-1);						
			}
			
			this.isEsNuevoBodega=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoBodega(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesBodega(true);			
			//this.bodega=new Bodega();
			//this.bodega.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBodega(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBodega() ;
			
			if(BodegaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBodega(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.bodega);	
			this.actualizarInformacion("INFO_PADRE",false,this.bodega);				
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			if(this.bodegaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Bodega: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarBodegaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosBodega.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosBodega.getSelectedRows().length;			
			}
			
			bodegasSeleccionados=this.getBodegasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoBodega--;			
				//Bodega bodegaAux= new Bodega();			
				//bodegaAux.setId(this.iIdNuevoBodega);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Bodega bodegaOrigen=new Bodega();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Bodega bodegaOrigen : bodegasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosBodega.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							bodegaOrigen =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							bodegaOrigen =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaBodega();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.bodega.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosBodega(bodegaOrigen,this.bodega,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.bodegaLogic.getBodegas().add(this.bodegaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.bodegas.add(this.bodegaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaBodega(false);
				
				this.jTableDatosBodega.setRowSelectionInterval(this.getIndiceNuevoBodega(), this.getIndiceNuevoBodega());
				
				int iLastRow =  this.jTableDatosBodega.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosBodega.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosBodega.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaBodega(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();									
		
			Bodega bodegaOrigen=new Bodega();
			Bodega bodegaDestino=new Bodega();
				
			bodegasSeleccionados=this.getBodegasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosBodega.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || bodegasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosBodega.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaOrigen =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						bodegaOrigen =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						bodegaDestino =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						bodegaDestino =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				bodegaOrigen =bodegasSeleccionados.get(0);
				bodegaDestino =bodegasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosBodega(bodegaOrigen,bodegaDestino,true,false);
				
				bodegaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(bodegaDestino,bodegaLogic.getBodegas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(bodegaDestino,bodegas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaBodega(false);
				
				//this.jTableDatosBodega.setRowSelectionInterval(this.getIndiceNuevoBodega(), this.getIndiceNuevoBodega());
				
				int iLastRow =  this.jTableDatosBodega.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosBodega.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosBodega.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaBodega(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormBodega.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesBodega.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasBodega.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesBodega.setVisible(!isVisible);
			this.jPanelPaginacionBodega.setVisible(!isVisible);
			this.jPanelAccionesBodega.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameBodega();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoBodega();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionBodega();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByBodega();
			
			this.abrirFrameOrderByBodega();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByBodega();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleBodega(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormBodega);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormBodega.isMaximum()) {
					this.jInternalFrameDetalleFormBodega.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormBodega.setSize(this.jInternalFrameDetalleFormBodega.iWidthFormulario,this.jInternalFrameDetalleFormBodega.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormBodega.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormBodega.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormBodega.isMaximum()) {
						this.jInternalFrameDetalleFormBodega.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormBodega.jContentPaneDetalleBodega.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormBodega.jContentPaneDetalleBodega.getWidth(),BodegaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormBodega.jContentPaneDetalleBodega.getWidth(),BodegaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormBodega.jContentPaneDetalleBodega.getWidth(),BodegaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormBodega.setVisible(true);
	        this.jInternalFrameDetalleFormBodega.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByBodega() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByBodega==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByBodega=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByBodega,false,this);
				} else {
					this.jInternalFrameOrderByBodega=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByBodega,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByBodega);
				this.jInternalFrameOrderByBodega.setVisible(false);
				this.jInternalFrameOrderByBodega.setSelected(false);
				
				this.jInternalFrameOrderByBodega.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByBodega"));
				
				this.inicializarActualizarBindingTablaOrderByBodega();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionBodega() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionBodega==null) {
				
				this.jInternalFrameImportacionBodega=new ImportacionJInternalFrame(BodegaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionBodega);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionBodega);
				this.jInternalFrameImportacionBodega.setVisible(false);
				this.jInternalFrameImportacionBodega.setSelected(false);


				this.jInternalFrameImportacionBodega.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionBodega"));
				this.jInternalFrameImportacionBodega.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionBodega"));
				this.jInternalFrameImportacionBodega.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionBodega"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoBodega() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoBodega==null) {
				this.jInternalFrameReporteDinamicoBodega=new ReporteDinamicoJInternalFrame(BodegaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoBodega);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoBodega);
				this.jInternalFrameReporteDinamicoBodega.setVisible(false);
				this.jInternalFrameReporteDinamicoBodega.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoBodega.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBodega"));
				this.jInternalFrameReporteDinamicoBodega.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBodega"));
				this.jInternalFrameReporteDinamicoBodega.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBodega"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBodega();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
					
	public void cerrarFrameDetalleBodega() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormBodega);
			
	       	this.jInternalFrameDetalleFormBodega.setVisible(false);
	        this.jInternalFrameDetalleFormBodega.setSelected(false);
			
			//this.jInternalFrameDetalleFormBodega.dispose();
			//this.jInternalFrameDetalleFormBodega=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoBodega() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoBodega.setVisible(true);
	        this.jInternalFrameReporteDinamicoBodega.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionBodega() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionBodega.setVisible(true);
	        this.jInternalFrameImportacionBodega.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByBodega() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByBodega.setVisible(true);
	        this.jInternalFrameOrderByBodega.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByBodega() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByBodega.setVisible(false);
	        this.jInternalFrameOrderByBodega.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoBodega() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoBodega.setVisible(false);
	        this.jInternalFrameReporteDinamicoBodega.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionBodega() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionBodega.setVisible(false);
	        this.jInternalFrameImportacionBodega.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderBodega.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventario(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventario";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableInventario=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventario.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventario(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCosto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableCosto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCosto.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCosto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableVenta.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDescuento(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDescuento";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableDescuento=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDescuento.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDescuento(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDevolucion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDevolucion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableDevolucion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDevolucion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDevolucion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDebito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDebito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableDebito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDebito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDebito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCredito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableBonifica(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableBonifica";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableBonifica=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableBonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableBonifica(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableProduccion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableProduccion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableProduccion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableProduccion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableProduccion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCostoBonifica(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCostoBonifica";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
						TitledBorder titledBorderCuentaContableCostoBonifica=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCostoBonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCostoBonifica(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarBodega(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarBodega(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosBodega.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesBodega(true);
			//this.isEsNuevoBodega=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesBodega("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBodega(false) ;
			
			if(bodegaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(BodegaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBodega(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBodega(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaBodegaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarBodega(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosBodega.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesBodega(true);
			//this.isEsNuevoBodega=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.bodega.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesBodega("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesBodega(false) ;
			
			if(BodegaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleBodega(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBodega(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CentroCosto")) {
				if(!this.bodegaConstantesFunciones.cargarid_centro_costoBodega) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("Empleado")) {
				if(!this.bodegaConstantesFunciones.cargarid_empleadoBodega) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("CuentaContableInventario")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_inventarioBodega) {
					this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (id);

				this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

			}
			
			if(sType.equals("CuentaContableCosto")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_costoBodega) {
					this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (id);

				this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

			}
			
			if(sType.equals("CuentaContableVenta")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_ventaBodega) {
					this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (id);

				this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

			}
			
			if(sType.equals("CuentaContableDescuento")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_descuentoBodega) {
					this.cargarCombosCuentaContableDescuentosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento (id);

				this.recargarComboTablaCuentaContableDescuento(this.cuentacontabledescuentosForeignKey);

			}
			
			if(sType.equals("CuentaContableDevolucion")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_devolucionBodega) {
					this.cargarCombosCuentaContableDevolucionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion (id);

				this.recargarComboTablaCuentaContableDevolucion(this.cuentacontabledevolucionsForeignKey);

			}
			
			if(sType.equals("CuentaContableDebito")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_debitoBodega) {
					this.cargarCombosCuentaContableDebitosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_debito (id);

				this.recargarComboTablaCuentaContableDebito(this.cuentacontabledebitosForeignKey);

			}
			
			if(sType.equals("CuentaContableCredito")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_creditoBodega) {
					this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (id);

				this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

			}
			
			if(sType.equals("CuentaContableBonifica")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_bonificaBodega) {
					this.cargarCombosCuentaContableBonificasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica (id);

				this.recargarComboTablaCuentaContableBonifica(this.cuentacontablebonificasForeignKey);

			}
			
			if(sType.equals("CuentaContableProduccion")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_produccionBodega) {
					this.cargarCombosCuentaContableProduccionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion (id);

				this.recargarComboTablaCuentaContableProduccion(this.cuentacontableproduccionsForeignKey);

			}
			
			if(sType.equals("CuentaContableCostoBonifica")) {
				if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_costo_bonificaBodega) {
					this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingBodega(false,false);
					this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica (id);

				this.recargarComboTablaCuentaContableCostoBonifica(this.cuentacontablecostobonificasForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaGrupoBodega(List<GrupoBodega> grupobodegasForeignKey)throws Exception{
		TableColumn tableColumnGrupoBodega=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA));
		TableCellEditor tableCellEditorGrupoBodega =tableColumnGrupoBodega.getCellEditor();

		GrupoBodegaTableCell grupobodegaTableCellFk=(GrupoBodegaTableCell)tableCellEditorGrupoBodega;

		if(grupobodegaTableCellFk!=null) {
			grupobodegaTableCellFk.setgrupobodegasForeignKey(grupobodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//grupobodegaTableCellFk.setRowActual(intSelectedRow);
			//grupobodegaTableCellFk.setgrupobodegasForeignKeyActual(grupobodegasForeignKey);
		//}


		if(grupobodegaTableCellFk!=null) {
			grupobodegaTableCellFk.RecargarGrupoBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCalidadProducto(List<CalidadProducto> calidadproductosForeignKey)throws Exception{
		TableColumn tableColumnCalidadProducto=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO));
		TableCellEditor tableCellEditorCalidadProducto =tableColumnCalidadProducto.getCellEditor();

		CalidadProductoTableCell calidadproductoTableCellFk=(CalidadProductoTableCell)tableCellEditorCalidadProducto;

		if(calidadproductoTableCellFk!=null) {
			calidadproductoTableCellFk.setcalidadproductosForeignKey(calidadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//calidadproductoTableCellFk.setRowActual(intSelectedRow);
			//calidadproductoTableCellFk.setcalidadproductosForeignKeyActual(calidadproductosForeignKey);
		//}


		if(calidadproductoTableCellFk!=null) {
			calidadproductoTableCellFk.RecargarCalidadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCiudad(List<Ciudad> ciudadsForeignKey)throws Exception{
		TableColumn tableColumnCiudad=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCIUDAD));
		TableCellEditor tableCellEditorCiudad =tableColumnCiudad.getCellEditor();

		CiudadTableCell ciudadTableCellFk=(CiudadTableCell)tableCellEditorCiudad;

		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.setciudadsForeignKey(ciudadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ciudadTableCellFk.setRowActual(intSelectedRow);
			//ciudadTableCellFk.setciudadsForeignKeyActual(ciudadsForeignKey);
		//}


		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.RecargarCiudadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventario(List<CuentaContable> cuentacontableinventariosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventario=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));
		TableCellEditor tableCellEditorCuentaContableInventario =tableColumnCuentaContableInventario.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventario;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventariosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCosto(List<CuentaContable> cuentacontablecostosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCosto=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));
		TableCellEditor tableCellEditorCuentaContableCosto =tableColumnCuentaContableCosto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCosto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableVenta(List<CuentaContable> cuentacontableventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableVenta=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));
		TableCellEditor tableCellEditorCuentaContableVenta =tableColumnCuentaContableVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDescuento(List<CuentaContable> cuentacontabledescuentosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDescuento=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));
		TableCellEditor tableCellEditorCuentaContableDescuento =tableColumnCuentaContableDescuento.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDescuento;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledescuentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledescuentosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDevolucion(List<CuentaContable> cuentacontabledevolucionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDevolucion=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));
		TableCellEditor tableCellEditorCuentaContableDevolucion =tableColumnCuentaContableDevolucion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDevolucion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledevolucionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledevolucionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDebito(List<CuentaContable> cuentacontabledebitosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDebito=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));
		TableCellEditor tableCellEditorCuentaContableDebito =tableColumnCuentaContableDebito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDebito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledebitosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledebitosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCredito(List<CuentaContable> cuentacontablecreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCredito=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));
		TableCellEditor tableCellEditorCuentaContableCredito =tableColumnCuentaContableCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableBonifica(List<CuentaContable> cuentacontablebonificasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableBonifica=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA));
		TableCellEditor tableCellEditorCuentaContableBonifica =tableColumnCuentaContableBonifica.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableBonifica;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablebonificasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablebonificasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableProduccion(List<CuentaContable> cuentacontableproduccionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableProduccion=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION));
		TableCellEditor tableCellEditorCuentaContableProduccion =tableColumnCuentaContableProduccion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableProduccion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableproduccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableproduccionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCostoBonifica(List<CuentaContable> cuentacontablecostobonificasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCostoBonifica=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA));
		TableCellEditor tableCellEditorCuentaContableCostoBonifica =tableColumnCuentaContableCostoBonifica.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCostoBonifica;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostobonificasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosBodega.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostobonificasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (Long id) throws Exception {
		this.setActualCuentaContableInventarioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (Long id) throws Exception {
		this.setActualCuentaContableCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (Long id) throws Exception {
		this.setActualCuentaContableVentaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento (Long id) throws Exception {
		this.setActualCuentaContableDescuentoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion (Long id) throws Exception {
		this.setActualCuentaContableDevolucionForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_debito (Long id) throws Exception {
		this.setActualCuentaContableDebitoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (Long id) throws Exception {
		this.setActualCuentaContableCreditoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica (Long id) throws Exception {
		this.setActualCuentaContableBonificaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion (Long id) throws Exception {
		this.setActualCuentaContableProduccionForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica (Long id) throws Exception {
		this.setActualCuentaContableCostoBonificaForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesBodega(false);
			
			//if(!this.isEsNuevoBodega) {								
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				
			}
			
			if(this.permiteMantenimiento(this.bodega)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.bodegaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoBodega=true;
					this.inicializarActualizarBindingTablaBodega(false);
					this.isEsNuevoBodega=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoBodega=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoBodega=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesBodega(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBodega(false);
				
				this.habilitarDeshabilitarControlesBodega(false);
			
												
				
				if(BodegaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleBodega();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoBodegaActionPerformed(evt,bodegaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualBodega(this.bodega,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosBodega.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,bodegaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.bodega.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarBodegaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosBodega.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				this.bodega.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				this.bodega.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.bodega)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.bodegaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((BodegaModel) this.jTableDatosBodega.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoBodega=true;
				this.inicializarActualizarBindingTablaBodega(false);
				this.isEsNuevoBodega=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesBodega(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBodega(false);
				
				this.habilitarDeshabilitarControlesBodega(false);
				
				
				
				if(BodegaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleBodega();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarBodegaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosBodega.getRowCount()>=1) {
				jTableDatosBodega.removeRowSelectionInterval(0, jTableDatosBodega.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesBodega(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaBodega(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesBodega(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualBodega(false) ;
			
			this.isEsNuevoBodega=false;
			
			if(BodegaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleBodega();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBodega(false);
				
				//SI ES MANUAL
				if(BodegaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualBodega();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoBodega--;			
			//Bodega bodegaAux= new Bodega();			
			//bodegaAux.setId(this.iIdNuevoBodega);
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaBodega();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
			
			this.bodega.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.bodegaLogic.getBodegas().add(this.bodegaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.bodegas.add(this.bodegaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaBodega(false);
			
			this.jTableDatosBodega.setRowSelectionInterval(this.getIndiceNuevoBodega(), this.getIndiceNuevoBodega());
			
			int iLastRow =  this.jTableDatosBodega.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosBodega.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosBodega.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaBodega(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingBodega(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBodega(false);
			
			//SI ES MANUAL
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBodega();
			}
			
			//this.abrirFrameTreeBodega();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionBodegaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE BodegaS ?", "MANTENIMIENTO DE Bodega", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionBodega.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralBodega();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.bodegaReturnGeneral=bodegaLogic.procesarImportacionBodegasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.bodegaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarBodegaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionBodegaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionBodega.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionBodega.setFileImportacion(this.jInternalFrameImportacionBodega.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionBodega.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionBodega.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionBodega.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionBodega.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		

		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("BodegaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"BodegaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteBodegas("Todos",bodegasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case BodegaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_GrupoBodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_GrupoBodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_GrupoBodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_GrupoBodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CalidadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CalidadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CalidadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CalidadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_SIGLAS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_glas_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_glas_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_glas_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_glas_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_DIRECCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_TELEFONO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefono_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefono_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefono_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefono_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponsableNombre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponsableNombre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponsableNombre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponsableNombre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCIUDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ciudad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ciudad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ciudad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ciudad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_MultiEmpresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_MultiEmpresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_MultiEmpresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_MultiEmpresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nMostrarStock_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nMostrarStock_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nMostrarStock_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nMostrarStock_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_BodegaTransito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_BodegaTransito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_BodegaTransito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_BodegaTransito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nStockNegativo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nStockNegativo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nStockNegativo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nStockNegativo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDevolucion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDevolucion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDevolucion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDevolucion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDebito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDebito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDebito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDebito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableBonifica_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableBonifica_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableBonifica_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableBonifica_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableProduccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableProduccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableProduccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableProduccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCostoBonifica_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCostoBonifica_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCostoBonifica_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCostoBonifica_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoBodega.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case BodegaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA:
					sNombreCampoCategoria="id_grupo_bodega";
					break;

				case BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					sNombreCampoCategoria="id_calidad_producto";
					break;

				case BodegaConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case BodegaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case BodegaConstantesFunciones.LABEL_SIGLAS:
					sNombreCampoCategoria="siglas";
					break;

				case BodegaConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoria="direccion";
					break;

				case BodegaConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoria="telefono";
					break;

				case BodegaConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE:
					sNombreCampoCategoria="responsable_nombre";
					break;

				case BodegaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case BodegaConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case BodegaConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoria="id_ciudad";
					break;

				case BodegaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case BodegaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA:
					sNombreCampoCategoria="es_multi_empresa";
					break;

				case BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK:
					sNombreCampoCategoria="con_mostrar_stock";
					break;

				case BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO:
					sNombreCampoCategoria="es_bodega_transito";
					break;

				case BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO:
					sNombreCampoCategoria="con_stock_negativo";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoria="id_cuenta_contable_inventario";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoria="id_cuenta_contable_costo";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoria="id_cuenta_contable_venta";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoria="id_cuenta_contable_descuento";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoria="id_cuenta_contable_devolucion";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoria="id_cuenta_contable_debito";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoria="id_cuenta_contable_credito";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					sNombreCampoCategoria="id_cuenta_contable_bonifica";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					sNombreCampoCategoria="id_cuenta_contable_produccion";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					sNombreCampoCategoria="id_cuenta_contable_costo_bonifica";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case BodegaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA:
					sNombreCampoCategoriaValor="id_grupo_bodega";
					break;

				case BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					sNombreCampoCategoriaValor="id_calidad_producto";
					break;

				case BodegaConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case BodegaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case BodegaConstantesFunciones.LABEL_SIGLAS:
					sNombreCampoCategoriaValor="siglas";
					break;

				case BodegaConstantesFunciones.LABEL_DIRECCION:
					sNombreCampoCategoriaValor="direccion";
					break;

				case BodegaConstantesFunciones.LABEL_TELEFONO:
					sNombreCampoCategoriaValor="telefono";
					break;

				case BodegaConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE:
					sNombreCampoCategoriaValor="responsable_nombre";
					break;

				case BodegaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case BodegaConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case BodegaConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoriaValor="id_ciudad";
					break;

				case BodegaConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case BodegaConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA:
					sNombreCampoCategoriaValor="es_multi_empresa";
					break;

				case BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK:
					sNombreCampoCategoriaValor="con_mostrar_stock";
					break;

				case BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO:
					sNombreCampoCategoriaValor="es_bodega_transito";
					break;

				case BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO:
					sNombreCampoCategoriaValor="con_stock_negativo";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_venta";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_descuento";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_devolucion";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_debito";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					sNombreCampoCategoriaValor="id_cuenta_contable_bonifica";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_produccion";
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo_bonifica";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoBodega.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoBodega.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case BodegaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Grupo Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_grupo_bodega");
					break;

				case BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Calidad Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_calidad_producto");
					break;

				case BodegaConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case BodegaConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case BodegaConstantesFunciones.LABEL_SIGLAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Siglas",sNombreCampoCategoria,sNombreCampoCategoriaValor,"siglas");
					break;

				case BodegaConstantesFunciones.LABEL_DIRECCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion");
					break;

				case BodegaConstantesFunciones.LABEL_TELEFONO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono");
					break;

				case BodegaConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Responsable Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"responsable_nombre");
					break;

				case BodegaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case BodegaConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case BodegaConstantesFunciones.LABEL_IDCIUDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ciudad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ciudad");
					break;

				case BodegaConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case BodegaConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Multi Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_multi_empresa");
					break;

				case BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mostrar Stock",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_mostrar_stock");
					break;

				case BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega Transito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_bodega_transito");
					break;

				case BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Stock Negativo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_stock_negativo");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_venta");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_descuento");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Devolucion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_devolucion");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Debito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_debito");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Bonifica",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_bonifica");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Produccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_produccion");
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Costo Bonifica",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo_bonifica");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoBodegaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Bodegas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case BodegaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getgrupobodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcalidadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_SIGLAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_SIGLAS);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getsiglas());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_DIRECCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_DIRECCION);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getdireccion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_TELEFONO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_TELEFONO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.gettelefono());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_RUC);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getresponsable_nombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCIUDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCIUDAD);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getciudad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getes_multi_empresa());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcon_mostrar_stock());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getes_bodega_transito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcon_stock_negativo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontableinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontablecosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontableventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontabledescuento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontabledevolucion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontabledebito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontablecredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontablebonifica_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontableproduccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
					iRow++;

					for(Bodega bodega:bodegasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(bodega.getcuentacontablecostobonifica_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelBodega(row);				
			//	iRow++;
			//}				
			
			//for(Bodega bodegaAux:bodegasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelBodega(bodegaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBodega(false);
			
			//SI ES MANUAL
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualBodega();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBodega(false);
			
			//SI ES MANUAL
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualBodega();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesBodegaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBodega(false);
			
			//SI ES MANUAL
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualBodega();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaBodega() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosBodega.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosBodega.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosBodega.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosBodega.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosBodega.setMinimumSize(dimensionMinimum);
		this.jTableDatosBodega.setMaximumSize(dimensionMaximum);
		this.jTableDatosBodega.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingBodega(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingBodega(esInicializar,true);
	}
	
	public void inicializarActualizarBindingBodega(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaBodega(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesBodega(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasBodega(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesBodega(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesBodega(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !BodegaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!BodegaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualBodega() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaBodega();
		
		this.inicializarActualizarBindingBotonesManualBodega(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualBodega();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesBodega() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualBodega(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualBodega(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosBodega.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosBodega.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteBodega.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormBodega!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionNuevoBodega.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionSinCerrarBodega.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionSinMensajeBodega.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosBodega.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosBodega.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteBodega.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormBodega!=null) {
				this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionNuevoBodega.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionSinCerrarBodega.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormBodega.jCheckBoxPostAccionSinMensajeBodega.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionBodega.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionBodega.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesBodega.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoBodega!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesBodega.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesBodega.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarBodega.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesBodega.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoBodega!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesBodega.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralBodega.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesBodega(Boolean esInicializar) throws Exception {
		try	{	
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualBodega(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesBodega() throws Exception {
		try	{
			if(BodegaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualBodega();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleBodega() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualBodega() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesBodega.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesBodega.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesBodega.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionBodega.addItem(reporte);
			}
			
			
			if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionBodega.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionBodega.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesBodega.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesBodega.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarBodega.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarBodega.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarBodega.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBodega();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualBodega() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoBodega!=null) {
				this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoBodega!=null) {
				this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoBodega.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoBodega!=null) {
				
				if(this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoBodega.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoBodega.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoBodega.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoBodega.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualBodega()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextAreacodigoBusquedaPorCodigoBodega.getText();
		this.nombreBusquedaPorNombre=this.jTextAreanombreBusquedaPorNombreBodega.getText();
		this.responsable_nombreBusquedaPorResponsableNombre=this.jTextArearesponsable_nombreBusquedaPorResponsableNombreBodega.getText();
		if(this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.getSelectedItem()!=null){this.id_calidad_productoFK_IdCalidadProducto=((CalidadProducto)this.jComboBoxid_calidad_productoFK_IdCalidadProductoBodega.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoBodega.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoBodega.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoBodega.getSelectedItem()).getId();}
		if(this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.getSelectedItem()!=null){this.id_grupo_bodegaFK_IdGrupoBodega=((GrupoBodega)this.jComboBoxid_grupo_bodegaFK_IdGrupoBodegaBodega.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasBodega(Boolean esInicializar) throws Exception {				
		if(BodegaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualBodega();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaBodega() throws Exception {
		this.inicializarActualizarBindingTablaBodega(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByBodega() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByBodega.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByBodega.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBodega.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByBodega.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBodega.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosBodegaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodegaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByBodega.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByBodega.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByBodega.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaBodega(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=bodegaLogic.getBodegas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=bodegas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosBodega.setModel(new BodegaModel(this.bodegaLogic.getBodegas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosBodega.setModel(new BodegaModel(this.bodegas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByBodega!=null && this.jInternalFrameOrderByBodega.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByBodega();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+BodegaConstantesFunciones.SCLASSWEBTITULO,bodegaConstantesFunciones.resaltarSeleccionarBodega,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+BodegaConstantesFunciones.SCLASSWEBTITULO,bodegaConstantesFunciones.resaltarSeleccionarBodega,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_ID));

		if(this.bodegaConstantesFunciones.mostraridBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.bodegaConstantesFunciones.resaltaridBodega,this.bodegaConstantesFunciones.activaridBodega,this,true,"idBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltaridBodega,this.bodegaConstantesFunciones.activaridBodega,this,true,"idBodega","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.bodegaConstantesFunciones.mostrarid_empresaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.bodegaConstantesFunciones.resaltarid_empresaBodega,this,this.bodegaConstantesFunciones.activarid_empresaBodega));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.bodegaConstantesFunciones.resaltarid_empresaBodega,this,this.bodegaConstantesFunciones.activarid_empresaBodega,false,"id_empresaBodega","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA));

		if(this.bodegaConstantesFunciones.mostrarid_grupo_bodegaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new GrupoBodegaTableCell(this.grupobodegasForeignKey,this.bodegaConstantesFunciones.resaltarid_grupo_bodegaBodega,this,this.bodegaConstantesFunciones.activarid_grupo_bodegaBodega));
			tableColumn.setCellEditor(new GrupoBodegaTableCell(this.grupobodegasForeignKey,this.bodegaConstantesFunciones.resaltarid_grupo_bodegaBodega,this,this.bodegaConstantesFunciones.activarid_grupo_bodegaBodega,true,"id_grupo_bodegaBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO));

		if(this.bodegaConstantesFunciones.mostrarid_calidad_productoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CalidadProductoTableCell(this.calidadproductosForeignKey,this.bodegaConstantesFunciones.resaltarid_calidad_productoBodega,this,this.bodegaConstantesFunciones.activarid_calidad_productoBodega));
			tableColumn.setCellEditor(new CalidadProductoTableCell(this.calidadproductosForeignKey,this.bodegaConstantesFunciones.resaltarid_calidad_productoBodega,this,this.bodegaConstantesFunciones.activarid_calidad_productoBodega,true,"id_calidad_productoBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_CODIGO));

		if(this.bodegaConstantesFunciones.mostrarcodigoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltarcodigoBodega,this.bodegaConstantesFunciones.activarcodigoBodega,this,true,"codigoBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltarcodigoBodega,this.bodegaConstantesFunciones.activarcodigoBodega,this,true,"codigoBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_NOMBRE));

		if(this.bodegaConstantesFunciones.mostrarnombreBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltarnombreBodega,this.bodegaConstantesFunciones.activarnombreBodega,this,true,"nombreBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltarnombreBodega,this.bodegaConstantesFunciones.activarnombreBodega,this,true,"nombreBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_SIGLAS));

		if(this.bodegaConstantesFunciones.mostrarsiglasBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_SIGLAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltarsiglasBodega,this.bodegaConstantesFunciones.activarsiglasBodega,this,true,"siglasBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltarsiglasBodega,this.bodegaConstantesFunciones.activarsiglasBodega,this,true,"siglasBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_DIRECCION));

		if(this.bodegaConstantesFunciones.mostrardireccionBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_DIRECCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltardireccionBodega,this.bodegaConstantesFunciones.activardireccionBodega,this,true,"direccionBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltardireccionBodega,this.bodegaConstantesFunciones.activardireccionBodega,this,true,"direccionBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_TELEFONO));

		if(this.bodegaConstantesFunciones.mostrartelefonoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_TELEFONO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltartelefonoBodega,this.bodegaConstantesFunciones.activartelefonoBodega,this,true,"telefonoBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltartelefonoBodega,this.bodegaConstantesFunciones.activartelefonoBodega,this,true,"telefonoBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_RUC));

		if(this.bodegaConstantesFunciones.mostrarrucBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltarrucBodega,this.bodegaConstantesFunciones.activarrucBodega,this,true,"rucBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltarrucBodega,this.bodegaConstantesFunciones.activarrucBodega,this,true,"rucBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE));

		if(this.bodegaConstantesFunciones.mostrarresponsable_nombreBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltarresponsable_nombreBodega,this.bodegaConstantesFunciones.activarresponsable_nombreBodega,this,true,"responsable_nombreBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltarresponsable_nombreBodega,this.bodegaConstantesFunciones.activarresponsable_nombreBodega,this,true,"responsable_nombreBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.bodegaConstantesFunciones.mostrardescripcionBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.bodegaConstantesFunciones.resaltardescripcionBodega,this.bodegaConstantesFunciones.activardescripcionBodega,this,true,"descripcionBodega","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.bodegaConstantesFunciones.resaltardescripcionBodega,this.bodegaConstantesFunciones.activardescripcionBodega,this,true,"descripcionBodega","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDPAIS));

		if(this.bodegaConstantesFunciones.mostrarid_paisBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.bodegaConstantesFunciones.resaltarid_paisBodega,this,this.bodegaConstantesFunciones.activarid_paisBodega));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.bodegaConstantesFunciones.resaltarid_paisBodega,this,this.bodegaConstantesFunciones.activarid_paisBodega,true,"id_paisBodega","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCIUDAD));

		if(this.bodegaConstantesFunciones.mostrarid_ciudadBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCIUDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CiudadTableCell(this.ciudadsForeignKey,this.bodegaConstantesFunciones.resaltarid_ciudadBodega,this,this.bodegaConstantesFunciones.activarid_ciudadBodega));
			tableColumn.setCellEditor(new CiudadTableCell(this.ciudadsForeignKey,this.bodegaConstantesFunciones.resaltarid_ciudadBodega,this,this.bodegaConstantesFunciones.activarid_ciudadBodega,true,"id_ciudadBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.bodegaConstantesFunciones.mostrarid_centro_costoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.bodegaConstantesFunciones.resaltarid_centro_costoBodega,this,this.bodegaConstantesFunciones.activarid_centro_costoBodega));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.bodegaConstantesFunciones.resaltarid_centro_costoBodega,this,this.bodegaConstantesFunciones.activarid_centro_costoBodega,true,"id_centro_costoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.bodegaConstantesFunciones.mostrarid_empleadoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.bodegaConstantesFunciones.resaltarid_empleadoBodega,this,this.bodegaConstantesFunciones.activarid_empleadoBodega));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.bodegaConstantesFunciones.resaltarid_empleadoBodega,this,this.bodegaConstantesFunciones.activarid_empleadoBodega,true,"id_empleadoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA));

		if(this.bodegaConstantesFunciones.mostrares_multi_empresaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.bodegaConstantesFunciones.resaltares_multi_empresaBodega,this.bodegaConstantesFunciones.activares_multi_empresaBodega));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.bodegaConstantesFunciones.resaltares_multi_empresaBodega,this.bodegaConstantesFunciones.activares_multi_empresaBodega,this,true,"es_multi_empresaBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK));

		if(this.bodegaConstantesFunciones.mostrarcon_mostrar_stockBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.bodegaConstantesFunciones.resaltarcon_mostrar_stockBodega,this.bodegaConstantesFunciones.activarcon_mostrar_stockBodega));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.bodegaConstantesFunciones.resaltarcon_mostrar_stockBodega,this.bodegaConstantesFunciones.activarcon_mostrar_stockBodega,this,true,"con_mostrar_stockBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO));

		if(this.bodegaConstantesFunciones.mostrares_bodega_transitoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.bodegaConstantesFunciones.resaltares_bodega_transitoBodega,this.bodegaConstantesFunciones.activares_bodega_transitoBodega));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.bodegaConstantesFunciones.resaltares_bodega_transitoBodega,this.bodegaConstantesFunciones.activares_bodega_transitoBodega,this,true,"es_bodega_transitoBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO));

		if(this.bodegaConstantesFunciones.mostrarcon_stock_negativoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.bodegaConstantesFunciones.resaltarcon_stock_negativoBodega,this.bodegaConstantesFunciones.activarcon_stock_negativoBodega));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.bodegaConstantesFunciones.resaltarcon_stock_negativoBodega,this.bodegaConstantesFunciones.activarcon_stock_negativoBodega,this,true,"con_stock_negativoBodega","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_inventarioBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_inventarioBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_inventarioBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_inventarioBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_inventarioBodega,true,"id_cuenta_contable_inventarioBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_costoBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_costoBodega,true,"id_cuenta_contable_costoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_ventaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_ventaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_ventaBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_ventaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_ventaBodega,true,"id_cuenta_contable_ventaBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_descuentoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_descuentoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_descuentoBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_descuentoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_descuentoBodega,true,"id_cuenta_contable_descuentoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_devolucionBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_devolucionBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_devolucionBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_devolucionBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_devolucionBodega,true,"id_cuenta_contable_devolucionBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_debitoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_debitoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_debitoBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_debitoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_debitoBodega,true,"id_cuenta_contable_debitoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_creditoBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_creditoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_creditoBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_creditoBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_creditoBodega,true,"id_cuenta_contable_creditoBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_bonificaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablebonificasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_bonificaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_bonificaBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablebonificasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_bonificaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_bonificaBodega,true,"id_cuenta_contable_bonificaBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_produccionBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableproduccionsForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_produccionBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_produccionBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableproduccionsForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_produccionBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_produccionBodega,true,"id_cuenta_contable_produccionBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosBodega,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA));

		if(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaBodega && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostobonificasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_costo_bonificaBodega));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostobonificasForeignKey,this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaBodega,this,this.bodegaConstantesFunciones.activarid_cuenta_contable_costo_bonificaBodega,true,"id_cuenta_contable_costo_bonificaBodega","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new BodegaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.bodegaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.bodegaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.bodegaSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosBodega.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.bodegaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.bodegaSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosBodega.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarBodega && this.isPermisoGuardarCambiosBodega) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.bodegaSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.bodegaSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosBodega.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosBodega.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarBodega && this.isPermisoGuardarCambiosBodega) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarBodega && this.isPermisoGuardarCambiosBodega) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosBodega.moveColumn(this.jTableDatosBodega.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosBodega.moveColumn(this.jTableDatosBodega.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosBodega.moveColumn(this.jTableDatosBodega.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosBodega.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosBodega.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosBodega,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosBodega.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosBodega.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosBodega.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosBodega.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosBodega.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=bodegaLogic.getBodegas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=bodegas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosBodega.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosBodega.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosBodega();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoBodega=false;
					
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormBodega==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosBodega.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosBodega.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.bodega.getsType().equals("DUPLICADO")
				   || this.bodega.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoBodega=true;
				
				} else {
					this.isEsNuevoBodega=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.bodegaSessionBean.getEsGuardarRelacionado()) {
					if(this.bodega.getId()>=0 && !this.bodega.getIsNew()) {						
						this.isEsNuevoBodega=false;
						
					} else {
						this.isEsNuevoBodega=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoBodega(esRelaciones);						
				
				this.seleccionarBodega(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.bodega.getId()<0) {
					this.isEsNuevoBodega=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarBodega(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarBodega(evt,rowIndex);
				}	
				
				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Bodega: " + this.dDif); 
					}
				}								
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarBodega(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.bodega)) {
					if(this.bodega.getId()>0) {
						this.bodega.setIsDeleted(true);
						
						this.bodegasEliminados.add(this.bodega);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.bodegaLogic.getBodegas().remove(this.bodega);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.bodegas.remove(this.bodega);				
					}
					
					
					((BodegaModel) this.jTableDatosBodega.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaBodega(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarBodega(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoBodega) {
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosBodega.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosBodega.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioBodega(this.bodega);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.bodegaConstantesFunciones.cargarid_empresaBodega || this.bodegaConstantesFunciones.event_dependid_empresaBodega) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.bodega.getid_empresa());
									//this.inicializarActualizarBindingBodega(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(bodega.getEmpresa()!=null) {
							this.empresasForeignKey.add(bodega.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.bodega.getid_empresa(),false,"Formulario");

					//GrupoBodega
					if(!this.bodegaConstantesFunciones.cargarid_grupo_bodegaBodega || this.bodegaConstantesFunciones.event_dependid_grupo_bodegaBodega) {
						//this.cargarCombosGrupoBodegasForeignKeyLista(" where id="+this.bodega.getid_grupo_bodega());
									//this.inicializarActualizarBindingBodega(false,false);
						this.grupobodegasForeignKey=new ArrayList<GrupoBodega>();

						if(bodega.getGrupoBodega()!=null) {
							this.grupobodegasForeignKey.add(bodega.getGrupoBodega());
						}

						this.addItemDefectoCombosForeignKeyGrupoBodega();
						this.cargarCombosFrameGrupoBodegasForeignKey("Todos");
					}
					this.setActualGrupoBodegaForeignKey(this.bodega.getid_grupo_bodega(),false,"Formulario");

					//CalidadProducto
					if(!this.bodegaConstantesFunciones.cargarid_calidad_productoBodega || this.bodegaConstantesFunciones.event_dependid_calidad_productoBodega) {
						//this.cargarCombosCalidadProductosForeignKeyLista(" where id="+this.bodega.getid_calidad_producto());
									//this.inicializarActualizarBindingBodega(false,false);
						this.calidadproductosForeignKey=new ArrayList<CalidadProducto>();

						if(bodega.getCalidadProducto()!=null) {
							this.calidadproductosForeignKey.add(bodega.getCalidadProducto());
						}

						this.addItemDefectoCombosForeignKeyCalidadProducto();
						this.cargarCombosFrameCalidadProductosForeignKey("Todos");
					}
					this.setActualCalidadProductoForeignKey(this.bodega.getid_calidad_producto(),false,"Formulario");

					//Pais
					if(!this.bodegaConstantesFunciones.cargarid_paisBodega || this.bodegaConstantesFunciones.event_dependid_paisBodega) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.bodega.getid_pais());
									//this.inicializarActualizarBindingBodega(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(bodega.getPais()!=null) {
							this.paissForeignKey.add(bodega.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.bodega.getid_pais(),false,"Formulario");

					//Ciudad
					if(!this.bodegaConstantesFunciones.cargarid_ciudadBodega || this.bodegaConstantesFunciones.event_dependid_ciudadBodega) {
						//this.cargarCombosCiudadsForeignKeyLista(" where id="+this.bodega.getid_ciudad());
									//this.inicializarActualizarBindingBodega(false,false);
						this.ciudadsForeignKey=new ArrayList<Ciudad>();

						if(bodega.getCiudad()!=null) {
							this.ciudadsForeignKey.add(bodega.getCiudad());
						}

						this.addItemDefectoCombosForeignKeyCiudad();
						this.cargarCombosFrameCiudadsForeignKey("Todos");
					}
					this.setActualCiudadForeignKey(this.bodega.getid_ciudad(),false,"Formulario");

					//CentroCosto
					if(!this.bodegaConstantesFunciones.cargarid_centro_costoBodega || this.bodegaConstantesFunciones.event_dependid_centro_costoBodega) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.bodega.getid_centro_costo());
									//this.inicializarActualizarBindingBodega(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(bodega.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(bodega.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.bodega.getid_centro_costo(),false,"Formulario");

					//Empleado
					if(!this.bodegaConstantesFunciones.cargarid_empleadoBodega || this.bodegaConstantesFunciones.event_dependid_empleadoBodega) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.bodega.getid_empleado());
									//this.inicializarActualizarBindingBodega(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(bodega.getEmpleado()!=null) {
							this.empleadosForeignKey.add(bodega.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.bodega.getid_empleado(),false,"Formulario");

					//CuentaContableInventario
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_inventarioBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_inventarioBodega) {
						//this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_inventario());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableInventario()!=null) {
							this.cuentacontableinventariosForeignKey.add(bodega.getCuentaContableInventario());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventario();
						this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioForeignKey(this.bodega.getid_cuenta_contable_inventario(),false,"Formulario");

					//CuentaContableCosto
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_costoBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_costoBodega) {
						//this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_costo());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableCosto()!=null) {
							this.cuentacontablecostosForeignKey.add(bodega.getCuentaContableCosto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCosto();
						this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
					}
					this.setActualCuentaContableCostoForeignKey(this.bodega.getid_cuenta_contable_costo(),false,"Formulario");

					//CuentaContableVenta
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_ventaBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_ventaBodega) {
						//this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_venta());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableVenta()!=null) {
							this.cuentacontableventasForeignKey.add(bodega.getCuentaContableVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableVenta();
						this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
					}
					this.setActualCuentaContableVentaForeignKey(this.bodega.getid_cuenta_contable_venta(),false,"Formulario");

					//CuentaContableDescuento
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_descuentoBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_descuentoBodega) {
						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_descuento());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableDescuento()!=null) {
							this.cuentacontabledescuentosForeignKey.add(bodega.getCuentaContableDescuento());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
						this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
					}
					this.setActualCuentaContableDescuentoForeignKey(this.bodega.getid_cuenta_contable_descuento(),false,"Formulario");

					//CuentaContableDevolucion
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_devolucionBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_devolucionBodega) {
						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_devolucion());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableDevolucion()!=null) {
							this.cuentacontabledevolucionsForeignKey.add(bodega.getCuentaContableDevolucion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
						this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
					}
					this.setActualCuentaContableDevolucionForeignKey(this.bodega.getid_cuenta_contable_devolucion(),false,"Formulario");

					//CuentaContableDebito
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_debitoBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_debitoBodega) {
						//this.cargarCombosCuentaContableDebitosForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_debito());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableDebito()!=null) {
							this.cuentacontabledebitosForeignKey.add(bodega.getCuentaContableDebito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDebito();
						this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
					}
					this.setActualCuentaContableDebitoForeignKey(this.bodega.getid_cuenta_contable_debito(),false,"Formulario");

					//CuentaContableCredito
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_creditoBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_creditoBodega) {
						//this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_credito());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableCredito()!=null) {
							this.cuentacontablecreditosForeignKey.add(bodega.getCuentaContableCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCredito();
						this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoForeignKey(this.bodega.getid_cuenta_contable_credito(),false,"Formulario");

					//CuentaContableBonifica
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_bonificaBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_bonificaBodega) {
						//this.cargarCombosCuentaContableBonificasForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_bonifica());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontablebonificasForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableBonifica()!=null) {
							this.cuentacontablebonificasForeignKey.add(bodega.getCuentaContableBonifica());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableBonifica();
						this.cargarCombosFrameCuentaContableBonificasForeignKey("Todos");
					}
					this.setActualCuentaContableBonificaForeignKey(this.bodega.getid_cuenta_contable_bonifica(),false,"Formulario");

					//CuentaContableProduccion
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_produccionBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_produccionBodega) {
						//this.cargarCombosCuentaContableProduccionsForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_produccion());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontableproduccionsForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableProduccion()!=null) {
							this.cuentacontableproduccionsForeignKey.add(bodega.getCuentaContableProduccion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableProduccion();
						this.cargarCombosFrameCuentaContableProduccionsForeignKey("Todos");
					}
					this.setActualCuentaContableProduccionForeignKey(this.bodega.getid_cuenta_contable_produccion(),false,"Formulario");

					//CuentaContableCostoBonifica
					if(!this.bodegaConstantesFunciones.cargarid_cuenta_contable_costo_bonificaBodega || this.bodegaConstantesFunciones.event_dependid_cuenta_contable_costo_bonificaBodega) {
						//this.cargarCombosCuentaContableCostoBonificasForeignKeyLista(" where id="+this.bodega.getid_cuenta_contable_costo_bonifica());
									//this.inicializarActualizarBindingBodega(false,false);
						this.cuentacontablecostobonificasForeignKey=new ArrayList<CuentaContable>();

						if(bodega.getCuentaContableCostoBonifica()!=null) {
							this.cuentacontablecostobonificasForeignKey.add(bodega.getCuentaContableCostoBonifica());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCostoBonifica();
						this.cargarCombosFrameCuentaContableCostoBonificasForeignKey("Todos");
					}
					this.setActualCuentaContableCostoBonificaForeignKey(this.bodega.getid_cuenta_contable_costo_bonifica(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesBodega("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesBodega(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualBodega() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoBodega(Bodega bodega) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoBodega(bodega,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoBodega(Bodega bodega,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioBodega(bodega);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyBodega(bodega,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyBodega(bodega);
	}
	
	public void setVariablesObjetoActualToFormularioBodega(Bodega bodega) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormBodega.jLabelidBodega.setText(bodega.getId().toString());
			this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setText(bodega.getcodigo());
			this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setText(bodega.getnombre());
			this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setText(bodega.getsiglas());
			this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setText(bodega.getdireccion());
			this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setText(bodega.gettelefono());
			this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setText(bodega.getruc());
			this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setText(bodega.getresponsable_nombre());
			this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setText(bodega.getdescripcion());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setSelected(bodega.getes_multi_empresa());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setSelected(bodega.getcon_mostrar_stock());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setSelected(bodega.getes_bodega_transito());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setSelected(bodega.getcon_stock_negativo());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Bodega bodegaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,bodegaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Bodega bodegaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				bodegaLocal=this.bodega;
			} else {
				bodegaLocal=this.bodegaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(bodegaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoBodega(bodegaLocal,true);
					
					if(bodegaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(bodegaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(bodegaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoBodega(Bodega bodega,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualBodega(bodega,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysBodega(bodega);
	}
	
	public void setVariablesFormularioToObjetoActualBodega(Bodega bodega,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualBodega(bodega,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualBodega(Bodega bodega,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormBodega.jLabelidBodega.getText()==null || this.jInternalFrameDetalleFormBodega.jLabelidBodega.getText()=="" || this.jInternalFrameDetalleFormBodega.jLabelidBodega.getText()=="Id") {
				this.jInternalFrameDetalleFormBodega.jLabelidBodega.setText("0");
			}

			if(conColumnasBase) {bodega.setId(Long.parseLong(this.jInternalFrameDetalleFormBodega.jLabelidBodega.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelIdBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setcodigo(this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcodigoBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setnombre(this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelnombreBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setsiglas(this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_SIGLAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelsiglasBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setdireccion(this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_DIRECCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeldireccionBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.settelefono(this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_TELEFONO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeltelefonoBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setruc(this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelrucBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setresponsable_nombre(this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelresponsable_nombreBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setdescripcion(this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeldescripcionBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setes_multi_empresa(this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeles_multi_empresaBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setcon_mostrar_stock(this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcon_mostrar_stockBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setes_bodega_transito(this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabeles_bodega_transitoBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			bodega.setcon_stock_negativo(this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormBodega.jLabelcon_stock_negativoBodega,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualBodega(Bodega bodegaBean,Bodega bodega,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && bodegaBean.getid_grupo_bodega()!=null && !bodegaBean.getid_grupo_bodega().equals(-1L))) {bodega.setid_grupo_bodega(bodegaBean.getid_grupo_bodega());}
			if(conDefault || (!conDefault && bodegaBean.getid_calidad_producto()!=null && !bodegaBean.getid_calidad_producto().equals(-1L))) {bodega.setid_calidad_producto(bodegaBean.getid_calidad_producto());}
			if(conDefault || (!conDefault && bodegaBean.getid_pais()!=null && !bodegaBean.getid_pais().equals(-1L))) {bodega.setid_pais(bodegaBean.getid_pais());}
			if(conDefault || (!conDefault && bodegaBean.getid_ciudad()!=null && !bodegaBean.getid_ciudad().equals(-1L))) {bodega.setid_ciudad(bodegaBean.getid_ciudad());}
			if(conDefault || (!conDefault && bodegaBean.getid_centro_costo()!=null && !bodegaBean.getid_centro_costo().equals(null))) {bodega.setid_centro_costo(bodegaBean.getid_centro_costo());}
			if(conDefault || (!conDefault && bodegaBean.getid_empleado()!=null && !bodegaBean.getid_empleado().equals(-1L))) {bodega.setid_empleado(bodegaBean.getid_empleado());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_inventario()!=null && !bodegaBean.getid_cuenta_contable_inventario().equals(-1L))) {bodega.setid_cuenta_contable_inventario(bodegaBean.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_costo()!=null && !bodegaBean.getid_cuenta_contable_costo().equals(-1L))) {bodega.setid_cuenta_contable_costo(bodegaBean.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_venta()!=null && !bodegaBean.getid_cuenta_contable_venta().equals(-1L))) {bodega.setid_cuenta_contable_venta(bodegaBean.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_descuento()!=null && !bodegaBean.getid_cuenta_contable_descuento().equals(-1L))) {bodega.setid_cuenta_contable_descuento(bodegaBean.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_devolucion()!=null && !bodegaBean.getid_cuenta_contable_devolucion().equals(-1L))) {bodega.setid_cuenta_contable_devolucion(bodegaBean.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_debito()!=null && !bodegaBean.getid_cuenta_contable_debito().equals(null))) {bodega.setid_cuenta_contable_debito(bodegaBean.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_credito()!=null && !bodegaBean.getid_cuenta_contable_credito().equals(null))) {bodega.setid_cuenta_contable_credito(bodegaBean.getid_cuenta_contable_credito());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_bonifica()!=null && !bodegaBean.getid_cuenta_contable_bonifica().equals(-1L))) {bodega.setid_cuenta_contable_bonifica(bodegaBean.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_produccion()!=null && !bodegaBean.getid_cuenta_contable_produccion().equals(-1L))) {bodega.setid_cuenta_contable_produccion(bodegaBean.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && bodegaBean.getid_cuenta_contable_costo_bonifica()!=null && !bodegaBean.getid_cuenta_contable_costo_bonifica().equals(-1L))) {bodega.setid_cuenta_contable_costo_bonifica(bodegaBean.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosBodega(Bodega bodegaOrigen,Bodega bodega,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && bodegaOrigen.getId()!=null && !bodegaOrigen.getId().equals(0L))) {bodega.setId(bodegaOrigen.getId());}}
			if(conDefault || (!conDefault && bodegaOrigen.getid_grupo_bodega()!=null && !bodegaOrigen.getid_grupo_bodega().equals(-1L))) {bodega.setid_grupo_bodega(bodegaOrigen.getid_grupo_bodega());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_calidad_producto()!=null && !bodegaOrigen.getid_calidad_producto().equals(-1L))) {bodega.setid_calidad_producto(bodegaOrigen.getid_calidad_producto());}
			if(conDefault || (!conDefault && bodegaOrigen.getcodigo()!=null && !bodegaOrigen.getcodigo().equals(""))) {bodega.setcodigo(bodegaOrigen.getcodigo());}
			if(conDefault || (!conDefault && bodegaOrigen.getnombre()!=null && !bodegaOrigen.getnombre().equals(""))) {bodega.setnombre(bodegaOrigen.getnombre());}
			if(conDefault || (!conDefault && bodegaOrigen.getsiglas()!=null && !bodegaOrigen.getsiglas().equals(""))) {bodega.setsiglas(bodegaOrigen.getsiglas());}
			if(conDefault || (!conDefault && bodegaOrigen.getdireccion()!=null && !bodegaOrigen.getdireccion().equals(""))) {bodega.setdireccion(bodegaOrigen.getdireccion());}
			if(conDefault || (!conDefault && bodegaOrigen.gettelefono()!=null && !bodegaOrigen.gettelefono().equals(""))) {bodega.settelefono(bodegaOrigen.gettelefono());}
			if(conDefault || (!conDefault && bodegaOrigen.getruc()!=null && !bodegaOrigen.getruc().equals(""))) {bodega.setruc(bodegaOrigen.getruc());}
			if(conDefault || (!conDefault && bodegaOrigen.getresponsable_nombre()!=null && !bodegaOrigen.getresponsable_nombre().equals(""))) {bodega.setresponsable_nombre(bodegaOrigen.getresponsable_nombre());}
			if(conDefault || (!conDefault && bodegaOrigen.getdescripcion()!=null && !bodegaOrigen.getdescripcion().equals(""))) {bodega.setdescripcion(bodegaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_pais()!=null && !bodegaOrigen.getid_pais().equals(-1L))) {bodega.setid_pais(bodegaOrigen.getid_pais());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_ciudad()!=null && !bodegaOrigen.getid_ciudad().equals(-1L))) {bodega.setid_ciudad(bodegaOrigen.getid_ciudad());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_centro_costo()!=null && !bodegaOrigen.getid_centro_costo().equals(null))) {bodega.setid_centro_costo(bodegaOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_empleado()!=null && !bodegaOrigen.getid_empleado().equals(-1L))) {bodega.setid_empleado(bodegaOrigen.getid_empleado());}
			if(conDefault || (!conDefault && bodegaOrigen.getes_multi_empresa()!=null && !bodegaOrigen.getes_multi_empresa().equals(false))) {bodega.setes_multi_empresa(bodegaOrigen.getes_multi_empresa());}
			if(conDefault || (!conDefault && bodegaOrigen.getcon_mostrar_stock()!=null && !bodegaOrigen.getcon_mostrar_stock().equals(false))) {bodega.setcon_mostrar_stock(bodegaOrigen.getcon_mostrar_stock());}
			if(conDefault || (!conDefault && bodegaOrigen.getes_bodega_transito()!=null && !bodegaOrigen.getes_bodega_transito().equals(false))) {bodega.setes_bodega_transito(bodegaOrigen.getes_bodega_transito());}
			if(conDefault || (!conDefault && bodegaOrigen.getcon_stock_negativo()!=null && !bodegaOrigen.getcon_stock_negativo().equals(false))) {bodega.setcon_stock_negativo(bodegaOrigen.getcon_stock_negativo());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_inventario()!=null && !bodegaOrigen.getid_cuenta_contable_inventario().equals(-1L))) {bodega.setid_cuenta_contable_inventario(bodegaOrigen.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_costo()!=null && !bodegaOrigen.getid_cuenta_contable_costo().equals(-1L))) {bodega.setid_cuenta_contable_costo(bodegaOrigen.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_venta()!=null && !bodegaOrigen.getid_cuenta_contable_venta().equals(-1L))) {bodega.setid_cuenta_contable_venta(bodegaOrigen.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_descuento()!=null && !bodegaOrigen.getid_cuenta_contable_descuento().equals(-1L))) {bodega.setid_cuenta_contable_descuento(bodegaOrigen.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_devolucion()!=null && !bodegaOrigen.getid_cuenta_contable_devolucion().equals(-1L))) {bodega.setid_cuenta_contable_devolucion(bodegaOrigen.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_debito()!=null && !bodegaOrigen.getid_cuenta_contable_debito().equals(null))) {bodega.setid_cuenta_contable_debito(bodegaOrigen.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_credito()!=null && !bodegaOrigen.getid_cuenta_contable_credito().equals(null))) {bodega.setid_cuenta_contable_credito(bodegaOrigen.getid_cuenta_contable_credito());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_bonifica()!=null && !bodegaOrigen.getid_cuenta_contable_bonifica().equals(-1L))) {bodega.setid_cuenta_contable_bonifica(bodegaOrigen.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_produccion()!=null && !bodegaOrigen.getid_cuenta_contable_produccion().equals(-1L))) {bodega.setid_cuenta_contable_produccion(bodegaOrigen.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && bodegaOrigen.getid_cuenta_contable_costo_bonifica()!=null && !bodegaOrigen.getid_cuenta_contable_costo_bonifica().equals(-1L))) {bodega.setid_cuenta_contable_costo_bonifica(bodegaOrigen.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioBodega(Bodega bodega) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormBodega.jLabelidBodega.setText(bodega.getId().toString());
			this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setText(bodega.getcodigo());
			this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setText(bodega.getnombre());
			this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setText(bodega.getsiglas());
			this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setText(bodega.getdireccion());
			this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setText(bodega.gettelefono());
			this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setText(bodega.getruc());
			this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setText(bodega.getresponsable_nombre());
			this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setText(bodega.getdescripcion());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setSelected(bodega.getes_multi_empresa());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setSelected(bodega.getcon_mostrar_stock());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setSelected(bodega.getes_bodega_transito());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setSelected(bodega.getcon_stock_negativo());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioBodega(BodegaBean bodegaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormBodega.jLabelidBodega.setText(bodegaBean.getId().toString());
			this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setText(bodegaBean.getcodigo());
			this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setText(bodegaBean.getnombre());
			this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setText(bodegaBean.getsiglas());
			this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setText(bodegaBean.getdireccion());
			this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setText(bodegaBean.gettelefono());
			this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setText(bodegaBean.getruc());
			this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setText(bodegaBean.getresponsable_nombre());
			this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setText(bodegaBean.getdescripcion());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setSelected(bodegaBean.getes_multi_empresa());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setSelected(bodegaBean.getcon_mostrar_stock());
			this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setSelected(bodegaBean.getes_bodega_transito());
			this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setSelected(bodegaBean.getcon_stock_negativo());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanBodega(BodegaParameterReturnGeneral bodegaReturnGeneral,BodegaBean bodegaBean,Boolean conDefault) throws Exception { 
		try {
			Bodega bodegaLocal=new Bodega();
			
			bodegaLocal=bodegaReturnGeneral.getBodega();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && bodegaLocal.getId()!=null && !bodegaLocal.getId().equals(0L))) {bodegaBean.setId(bodegaLocal.getId());}}
			if(conDefault || (!conDefault && bodegaLocal.getid_grupo_bodega()!=null && !bodegaLocal.getid_grupo_bodega().equals(-1L))) {bodegaBean.setid_grupo_bodega(bodegaLocal.getid_grupo_bodega());}
			if(conDefault || (!conDefault && bodegaLocal.getid_calidad_producto()!=null && !bodegaLocal.getid_calidad_producto().equals(-1L))) {bodegaBean.setid_calidad_producto(bodegaLocal.getid_calidad_producto());}
			if(conDefault || (!conDefault && bodegaLocal.getcodigo()!=null && !bodegaLocal.getcodigo().equals(""))) {bodegaBean.setcodigo(bodegaLocal.getcodigo());}
			if(conDefault || (!conDefault && bodegaLocal.getnombre()!=null && !bodegaLocal.getnombre().equals(""))) {bodegaBean.setnombre(bodegaLocal.getnombre());}
			if(conDefault || (!conDefault && bodegaLocal.getsiglas()!=null && !bodegaLocal.getsiglas().equals(""))) {bodegaBean.setsiglas(bodegaLocal.getsiglas());}
			if(conDefault || (!conDefault && bodegaLocal.getdireccion()!=null && !bodegaLocal.getdireccion().equals(""))) {bodegaBean.setdireccion(bodegaLocal.getdireccion());}
			if(conDefault || (!conDefault && bodegaLocal.gettelefono()!=null && !bodegaLocal.gettelefono().equals(""))) {bodegaBean.settelefono(bodegaLocal.gettelefono());}
			if(conDefault || (!conDefault && bodegaLocal.getruc()!=null && !bodegaLocal.getruc().equals(""))) {bodegaBean.setruc(bodegaLocal.getruc());}
			if(conDefault || (!conDefault && bodegaLocal.getresponsable_nombre()!=null && !bodegaLocal.getresponsable_nombre().equals(""))) {bodegaBean.setresponsable_nombre(bodegaLocal.getresponsable_nombre());}
			if(conDefault || (!conDefault && bodegaLocal.getdescripcion()!=null && !bodegaLocal.getdescripcion().equals(""))) {bodegaBean.setdescripcion(bodegaLocal.getdescripcion());}
			if(conDefault || (!conDefault && bodegaLocal.getid_pais()!=null && !bodegaLocal.getid_pais().equals(-1L))) {bodegaBean.setid_pais(bodegaLocal.getid_pais());}
			if(conDefault || (!conDefault && bodegaLocal.getid_ciudad()!=null && !bodegaLocal.getid_ciudad().equals(-1L))) {bodegaBean.setid_ciudad(bodegaLocal.getid_ciudad());}
			if(conDefault || (!conDefault && bodegaLocal.getid_centro_costo()!=null && !bodegaLocal.getid_centro_costo().equals(null))) {bodegaBean.setid_centro_costo(bodegaLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && bodegaLocal.getid_empleado()!=null && !bodegaLocal.getid_empleado().equals(-1L))) {bodegaBean.setid_empleado(bodegaLocal.getid_empleado());}
			if(conDefault || (!conDefault && bodegaLocal.getes_multi_empresa()!=null && !bodegaLocal.getes_multi_empresa().equals(false))) {bodegaBean.setes_multi_empresa(bodegaLocal.getes_multi_empresa());}
			if(conDefault || (!conDefault && bodegaLocal.getcon_mostrar_stock()!=null && !bodegaLocal.getcon_mostrar_stock().equals(false))) {bodegaBean.setcon_mostrar_stock(bodegaLocal.getcon_mostrar_stock());}
			if(conDefault || (!conDefault && bodegaLocal.getes_bodega_transito()!=null && !bodegaLocal.getes_bodega_transito().equals(false))) {bodegaBean.setes_bodega_transito(bodegaLocal.getes_bodega_transito());}
			if(conDefault || (!conDefault && bodegaLocal.getcon_stock_negativo()!=null && !bodegaLocal.getcon_stock_negativo().equals(false))) {bodegaBean.setcon_stock_negativo(bodegaLocal.getcon_stock_negativo());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_inventario()!=null && !bodegaLocal.getid_cuenta_contable_inventario().equals(-1L))) {bodegaBean.setid_cuenta_contable_inventario(bodegaLocal.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_costo()!=null && !bodegaLocal.getid_cuenta_contable_costo().equals(-1L))) {bodegaBean.setid_cuenta_contable_costo(bodegaLocal.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_venta()!=null && !bodegaLocal.getid_cuenta_contable_venta().equals(-1L))) {bodegaBean.setid_cuenta_contable_venta(bodegaLocal.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_descuento()!=null && !bodegaLocal.getid_cuenta_contable_descuento().equals(-1L))) {bodegaBean.setid_cuenta_contable_descuento(bodegaLocal.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_devolucion()!=null && !bodegaLocal.getid_cuenta_contable_devolucion().equals(-1L))) {bodegaBean.setid_cuenta_contable_devolucion(bodegaLocal.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_debito()!=null && !bodegaLocal.getid_cuenta_contable_debito().equals(null))) {bodegaBean.setid_cuenta_contable_debito(bodegaLocal.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_credito()!=null && !bodegaLocal.getid_cuenta_contable_credito().equals(null))) {bodegaBean.setid_cuenta_contable_credito(bodegaLocal.getid_cuenta_contable_credito());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_bonifica()!=null && !bodegaLocal.getid_cuenta_contable_bonifica().equals(-1L))) {bodegaBean.setid_cuenta_contable_bonifica(bodegaLocal.getid_cuenta_contable_bonifica());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_produccion()!=null && !bodegaLocal.getid_cuenta_contable_produccion().equals(-1L))) {bodegaBean.setid_cuenta_contable_produccion(bodegaLocal.getid_cuenta_contable_produccion());}
			if(conDefault || (!conDefault && bodegaLocal.getid_cuenta_contable_costo_bonifica()!=null && !bodegaLocal.getid_cuenta_contable_costo_bonifica().equals(-1L))) {bodegaBean.setid_cuenta_contable_costo_bonifica(bodegaLocal.getid_cuenta_contable_costo_bonifica());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxBodegaGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxBodega,List<Bodega> bodegasLocal)throws Exception {
		try {
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasLocal) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			jComboBoxBodega.setSelectedItem(bodegaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxBodegaGenerico(JComboBox jComboBoxBodega,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxBodega.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxBodega.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxBodega.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxBodega.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxBodega.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxBodega.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxBodega.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxBodega.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxBodega.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxBodega.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			bodega=(Bodega) bodegaLogic.getBodegas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			bodega =(Bodega) bodegas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getempresa_descripcion();
			}
		}

		if(sTipo.equals("GrupoBodega")) {
			//sDescripcion=this.getActualGrupoBodegaForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getgrupobodega_descripcion();
			} else {
				//sDescripcion=this.getActualGrupoBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getgrupobodega_descripcion();
			}
		}

		if(sTipo.equals("CalidadProducto")) {
			//sDescripcion=this.getActualCalidadProductoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcalidadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualCalidadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcalidadproducto_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getpais_descripcion();
			}
		}

		if(sTipo.equals("Ciudad")) {
			//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getciudad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=bodega.getciudad_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getempleado_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventario")) {
			//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontableinventario_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontableinventario_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCosto")) {
			//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontablecosto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontablecosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableVenta")) {
			//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontableventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontableventa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDescuento")) {
			//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontabledescuento_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontabledescuento_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDevolucion")) {
			//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontabledevolucion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontabledevolucion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDebito")) {
			//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontabledebito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontabledebito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCredito")) {
			//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontablecredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontablecredito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableBonifica")) {
			//sDescripcion=this.getActualCuentaContableBonificaForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontablebonifica_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableBonificaForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontablebonifica_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableProduccion")) {
			//sDescripcion=this.getActualCuentaContableProduccionForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontableproduccion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableProduccionForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontableproduccion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCostoBonifica")) {
			//sDescripcion=this.getActualCuentaContableCostoBonificaForeignKeyDescripcion((Long)value);
			if(!bodega.getIsNew() && !bodega.getIsChanged() && !bodega.getIsDeleted()) {
				sDescripcion=bodega.getcuentacontablecostobonifica_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoBonificaForeignKeyDescripcion((Long)value);
				sDescripcion=bodega.getcuentacontablecostobonifica_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Bodega bodegaRow=new Bodega();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			bodegaRow=(Bodega) bodegaLogic.getBodegas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			bodegaRow=(Bodega) bodegas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualBodega(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega));			
			this.jButtonDuplicarBodega.setVisible((this.isVisibilidadCeldaDuplicarBodega && this.isPermisoDuplicarBodega));			
			this.jButtonCopiarBodega.setVisible((this.isVisibilidadCeldaCopiarBodega && this.isPermisoCopiarBodega));
			this.jButtonVerFormBodega.setVisible((this.isVisibilidadCeldaVerFormBodega && this.isPermisoVerFormBodega));
			
			this.jButtonAbrirOrderByBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));			
			
			this.jButtonNuevoRelacionesBodega.setVisible((this.isVisibilidadCeldaNuevoRelacionesBodega && this.isPermisoNuevoBodega));			
			this.jButtonNuevoGuardarCambiosBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega && this.isPermisoGuardarCambiosBodega));
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.jInternalFrameDetalleFormBodega.jButtonModificarBodega.setVisible((this.isVisibilidadCeldaModificarBodega && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.setVisible((this.isVisibilidadCeldaActualizarBodega && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.setVisible((this.isVisibilidadCeldaEliminarBodega && this.isPermisoEliminarBodega));
			this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.setVisible(this.isVisibilidadCeldaCancelarBodega);							
			this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.setVisible((this.isVisibilidadCeldaGuardarBodega && this.isPermisoGuardarCambiosBodega));			
			
			}
						
			this.jButtonGuardarCambiosTablaBodega.setVisible((this.isVisibilidadCeldaGuardarCambiosBodega && this.isPermisoGuardarCambiosBodega));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega));						
			this.jButtonDuplicarToolBarBodega.setVisible((this.isVisibilidadCeldaDuplicarBodega && this.isPermisoDuplicarBodega));						
			this.jButtonCopiarToolBarBodega.setVisible((this.isVisibilidadCeldaCopiarBodega && this.isPermisoCopiarBodega));			
			this.jButtonVerFormToolBarBodega.setVisible((this.isVisibilidadCeldaVerFormBodega && this.isPermisoVerFormBodega));			
			this.jButtonAbrirOrderByToolBarBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));
			this.jButtonNuevoRelacionesToolBarBodega.setVisible((this.isVisibilidadCeldaNuevoRelacionesBodega && this.isPermisoNuevoBodega));			
			this.jButtonNuevoGuardarCambiosToolBarBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega && this.isPermisoGuardarCambiosBodega));			
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.jInternalFrameDetalleFormBodega.jButtonModificarToolBarBodega.setVisible((this.isVisibilidadCeldaModificarBodega && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jButtonActualizarToolBarBodega.setVisible((this.isVisibilidadCeldaActualizarBodega  && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jButtonEliminarToolBarBodega.setVisible((this.isVisibilidadCeldaEliminarBodega && this.isPermisoEliminarBodega));
			this.jInternalFrameDetalleFormBodega.jButtonCancelarToolBarBodega.setVisible(this.isVisibilidadCeldaCancelarBodega);				
			this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosToolBarBodega.setVisible((this.isVisibilidadCeldaGuardarBodega && this.isPermisoGuardarCambiosBodega));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarBodega.setVisible((this.isVisibilidadCeldaGuardarCambiosBodega && this.isPermisoGuardarCambiosBodega));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega));			
			this.jMenuItemDuplicarBodega.setVisible((this.isVisibilidadCeldaDuplicarBodega && this.isPermisoDuplicarBodega));			
			this.jMenuItemCopiarBodega.setVisible((this.isVisibilidadCeldaCopiarBodega && this.isPermisoCopiarBodega));			
			this.jMenuItemVerFormBodega.setVisible((this.isVisibilidadCeldaVerFormBodega && this.isPermisoVerFormBodega));			
			this.jMenuItemAbrirOrderByBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));			
			//this.jMenuItemMostrarOcultarBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));
			this.jMenuItemDetalleAbrirOrderByBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));			
			//this.jMenuItemDetalleMostrarOcultarBodega.setVisible((this.isVisibilidadCeldaOrdenBodega && this.isPermisoOrdenBodega));			
			this.jMenuItemNuevoRelacionesBodega.setVisible((this.isVisibilidadCeldaNuevoRelacionesBodega && this.isPermisoNuevoBodega));			
			this.jMenuItemNuevoGuardarCambiosBodega.setVisible((this.isVisibilidadCeldaNuevoBodega && this.isPermisoNuevoBodega && this.isPermisoGuardarCambiosBodega));									
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.jInternalFrameDetalleFormBodega.jMenuItemModificarBodega.setVisible((this.isVisibilidadCeldaModificarBodega && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jMenuItemActualizarBodega.setVisible((this.isVisibilidadCeldaActualizarBodega && this.isPermisoActualizarBodega));	
			this.jInternalFrameDetalleFormBodega.jMenuItemEliminarBodega.setVisible((this.isVisibilidadCeldaEliminarBodega && this.isPermisoEliminarBodega));
			this.jInternalFrameDetalleFormBodega.jMenuItemCancelarBodega.setVisible(this.isVisibilidadCeldaCancelarBodega);				
			}
			
			this.jMenuItemGuardarCambiosBodega.setVisible((this.isVisibilidadCeldaGuardarBodega && this.isPermisoGuardarCambiosBodega));						
			this.jMenuItemGuardarCambiosTablaBodega.setVisible((this.isVisibilidadCeldaGuardarCambiosBodega && this.isPermisoGuardarCambiosBodega));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoBodega=this.jButtonNuevoBodega.isVisible();
			this.isVisibilidadCeldaDuplicarBodega=this.jButtonDuplicarBodega.isVisible();
			this.isVisibilidadCeldaCopiarBodega=this.jButtonCopiarBodega.isVisible();
			this.isVisibilidadCeldaVerFormBodega=this.jButtonVerFormBodega.isVisible();
			
			this.isVisibilidadCeldaOrdenBodega=this.jButtonAbrirOrderByBodega.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesBodega=this.jButtonNuevoRelacionesBodega.isVisible();
			this.isVisibilidadCeldaModificarBodega=this.jButtonModificarBodega.isVisible();
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.isVisibilidadCeldaActualizarBodega=this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.isVisible();
			this.isVisibilidadCeldaEliminarBodega=this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.isVisible();
			this.isVisibilidadCeldaCancelarBodega=this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.isVisible();
			this.isVisibilidadCeldaGuardarBodega=this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosBodega=this.jButtonGuardarCambiosTablaBodega.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoBodega=this.jButtonNuevoToolBarBodega.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesBodega=this.jButtonNuevoRelacionesToolBarBodega.isVisible();
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.isVisibilidadCeldaModificarBodega=this.jInternalFrameDetalleFormBodega.jButtonModificarToolBarBodega.isVisible();
			this.isVisibilidadCeldaActualizarBodega=this.jInternalFrameDetalleFormBodega.jButtonActualizarToolBarBodega.isVisible();
			this.isVisibilidadCeldaEliminarBodega=this.jInternalFrameDetalleFormBodega.jButtonEliminarToolBarBodega.isVisible();
			this.isVisibilidadCeldaCancelarBodega=this.jInternalFrameDetalleFormBodega.jButtonCancelarToolBarBodega.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarBodega=this.jButtonGuardarCambiosToolBarBodega.isVisible();
			this.isVisibilidadCeldaGuardarCambiosBodega=this.jButtonGuardarCambiosTablaToolBarBodega.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoBodega=this.jMenuItemNuevoBodega.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesBodega=this.jMenuItemNuevoRelacionesBodega.isVisible();
			
			if(this.jInternalFrameDetalleFormBodega!=null) {
			this.isVisibilidadCeldaModificarBodega=this.jInternalFrameDetalleFormBodega.jMenuItemModificarBodega.isVisible();
			this.isVisibilidadCeldaActualizarBodega=this.jInternalFrameDetalleFormBodega.jMenuItemActualizarBodega.isVisible();
			this.isVisibilidadCeldaEliminarBodega=this.jInternalFrameDetalleFormBodega.jMenuItemEliminarBodega.isVisible();
			this.isVisibilidadCeldaCancelarBodega=this.jInternalFrameDetalleFormBodega.jMenuItemCancelarBodega.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarBodega=this.jMenuItemGuardarCambiosBodega.isVisible();
			this.isVisibilidadCeldaGuardarCambiosBodega=this.jMenuItemGuardarCambiosTablaBodega.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesBodega(Boolean esInicializar) {
		if(BodegaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.bodegaSessionBean.getConGuardarRelaciones()) {
				//if(this.bodegaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesBodega();
			}
			
			this.inicializarActualizarBindingBotonesManualBodega(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualBodega() {
		this.jButtonNuevoBodega.setVisible(this.isPermisoNuevoBodega);			
		this.jButtonDuplicarBodega.setVisible(this.isPermisoDuplicarBodega);			
		this.jButtonCopiarBodega.setVisible(this.isPermisoCopiarBodega);			
		this.jButtonVerFormBodega.setVisible(this.isPermisoVerFormBodega);			
		
		this.jButtonAbrirOrderByBodega.setVisible(this.isPermisoOrdenBodega);					
		
		this.jButtonNuevoRelacionesBodega.setVisible(this.isPermisoNuevoBodega);			
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonModificarBodega.setVisible(this.isPermisoActualizarBodega);	
			this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.setVisible(this.isPermisoActualizarBodega);	
			this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.setVisible(this.isPermisoEliminarBodega);
			this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.setVisible(this.isVisibilidadCeldaCancelarBodega);						
			this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.setVisible(this.isPermisoGuardarCambiosBodega);							
		}
		
		this.jButtonGuardarCambiosTablaBodega.setVisible(this.isPermisoActualizarBodega);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleBodega() {
		this.jInternalFrameDetalleFormBodega.jButtonModificarBodega.setVisible(this.isPermisoActualizarBodega);	
		this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.setVisible(this.isPermisoActualizarBodega);	
		this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.setVisible(this.isPermisoEliminarBodega);
		this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.setVisible(this.isVisibilidadCeldaCancelarBodega);							
		this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.setVisible((this.isVisibilidadCeldaGuardarBodega && this.isPermisoGuardarCambiosBodega));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosBodega() {
		if(BodegaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualBodega();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesBodega() {
	}
	
	public void jTableDatosBodegaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarBodega(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.bodega.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebBodega(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.bodega.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderBodega.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.bodega.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_grupo_bodegaBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisogrupobodega=true;

			idTienePermisogrupobodega=this.tienePermisosUsuarioEnPaginaWebBodega(GrupoBodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisogrupobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.grupobodegaBeanSwingJInternalFrame=new GrupoBodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.grupobodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.grupobodegaBeanSwingJInternalFrame.getGrupoBodegaLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_grupo_bodega()!=null) {
					this.grupobodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.grupobodegaBeanSwingJInternalFrame.setIdActual(this.bodega.getid_grupo_bodega());
					this.grupobodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.grupobodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.grupobodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaGrupoBodega();
				}

				JInternalFrameBase jinternalFrame =this.grupobodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordergrupobodega=(TitledBorder)this.grupobodegaBeanSwingJInternalFrame.jScrollPanelDatosGrupoBodega.getBorder();

				titledBordergrupobodega.setTitle(titledBorderBodega.getTitle() + " -> Grupo Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_grupo_bodegaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_grupo_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_grupo_bodega = "+this.bodega.getid_grupo_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_calidad_productoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocalidadproducto=true;

			idTienePermisocalidadproducto=this.tienePermisosUsuarioEnPaginaWebBodega(CalidadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisocalidadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.calidadproductoBeanSwingJInternalFrame=new CalidadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.calidadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.calidadproductoBeanSwingJInternalFrame.getCalidadProductoLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_calidad_producto()!=null) {
					this.calidadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.calidadproductoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_calidad_producto());
					this.calidadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.calidadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.calidadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCalidadProducto();
				}

				JInternalFrameBase jinternalFrame =this.calidadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercalidadproducto=(TitledBorder)this.calidadproductoBeanSwingJInternalFrame.jScrollPanelDatosCalidadProducto.getBorder();

				titledBordercalidadproducto.setTitle(titledBorderBodega.getTitle() + " -> Calidad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_calidad_productoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_calidad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_calidad_producto = "+this.bodega.getid_calidad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.bodega.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.bodega.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsiglasBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getsiglas()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where siglas like '%"+this.bodega.getsiglas()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccionBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getdireccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion like '%"+this.bodega.getdireccion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefonoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.gettelefono()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono like '%"+this.bodega.gettelefono()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.bodega.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonresponsable_nombreBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getresponsable_nombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where responsable_nombre like '%"+this.bodega.getresponsable_nombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.bodega.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebBodega(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.bodega.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderBodega.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.bodega.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ciudadBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisociudad=true;

			idTienePermisociudad=this.tienePermisosUsuarioEnPaginaWebBodega(CiudadConstantesFunciones.CLASSNAME);

			if(idTienePermisociudad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.ciudadBeanSwingJInternalFrame=new CiudadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ciudadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ciudadBeanSwingJInternalFrame.getCiudadLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_ciudad()!=null) {
					this.ciudadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ciudadBeanSwingJInternalFrame.setIdActual(this.bodega.getid_ciudad());
					this.ciudadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCiudad();
				}

				JInternalFrameBase jinternalFrame =this.ciudadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBorderciudad=(TitledBorder)this.ciudadBeanSwingJInternalFrame.jScrollPanelDatosCiudad.getBorder();

				titledBorderciudad.setTitle(titledBorderBodega.getTitle() + " -> Ciudad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ciudadBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_ciudad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ciudad = "+this.bodega.getid_ciudad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderBodega.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebBodega(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderBodega.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.bodega.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderBodega.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebBodega(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderBodega.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.bodega.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_multi_empresaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getes_multi_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_multi_empresa = "+this.bodega.getes_multi_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_mostrar_stockBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getcon_mostrar_stock()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_mostrar_stock = "+this.bodega.getcon_mostrar_stock().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_bodega_transitoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getes_bodega_transito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_bodega_transito = "+this.bodega.getes_bodega_transito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_stock_negativoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getcon_stock_negativo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_stock_negativo = "+this.bodega.getcon_stock_negativo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventarioBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableInventario";

			if(!this.sFinalQueryGeneral_cuentacontableinventario.equals("")) {
				this.cuentacontableinventarioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableinventario);
				this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableInventario.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontableinventario=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_inventarioBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventario=true;

			idTienePermisocuentacontableinventario=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventarioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_inventario()!=null) {
					this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventarioBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_inventario());
					this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventarioBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario = "+this.bodega.getid_cuenta_contable_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCosto";

			if(!this.sFinalQueryGeneral_cuentacontablecosto.equals("")) {
				this.cuentacontablecostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecosto);
				this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontablecosto=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecosto=true;

			idTienePermisocuentacontablecosto=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_costo()!=null) {
					this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_costo());
					this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo = "+this.bodega.getid_cuenta_contable_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_ventaBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableVenta";

			if(!this.sFinalQueryGeneral_cuentacontableventa.equals("")) {
				this.cuentacontableventaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableventa);
				this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableVenta.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontableventa=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_ventaBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableventa=true;

			idTienePermisocuentacontableventa=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_venta()!=null) {
					this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableventaBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_venta());
					this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_ventaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_venta = "+this.bodega.getid_cuenta_contable_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_descuentoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledescuentoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledescuentoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledescuentoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDescuento";

			if(!this.sFinalQueryGeneral_cuentacontabledescuento.equals("")) {
				this.cuentacontabledescuentoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledescuento);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledescuentoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledescuentoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDescuento.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledescuentoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontabledescuento=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontabledescuento=(TitledBorder)this.cuentacontabledescuentoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledescuento.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_descuentoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledescuento=true;

			idTienePermisocuentacontabledescuento=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledescuento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontabledescuentoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledescuentoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_descuento()!=null) {
					this.cuentacontabledescuentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_descuento());
					this.cuentacontabledescuentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledescuentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontabledescuento=(TitledBorder)this.cuentacontabledescuentoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledescuento.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_descuentoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_descuento = "+this.bodega.getid_cuenta_contable_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_devolucionBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledevolucionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledevolucionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledevolucionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDevolucion";

			if(!this.sFinalQueryGeneral_cuentacontabledevolucion.equals("")) {
				this.cuentacontabledevolucionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledevolucion);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledevolucionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledevolucionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDevolucion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledevolucionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontabledevolucion=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontabledevolucion=(TitledBorder)this.cuentacontabledevolucionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledevolucion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_devolucionBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledevolucion=true;

			idTienePermisocuentacontabledevolucion=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledevolucion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontabledevolucionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledevolucionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_devolucion()!=null) {
					this.cuentacontabledevolucionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_devolucion());
					this.cuentacontabledevolucionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledevolucionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontabledevolucion=(TitledBorder)this.cuentacontabledevolucionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledevolucion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_devolucionBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_devolucion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_devolucion = "+this.bodega.getid_cuenta_contable_devolucion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_debitoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledebitoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDebito";

			if(!this.sFinalQueryGeneral_cuentacontabledebito.equals("")) {
				this.cuentacontabledebitoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledebito);
				this.cuentacontabledebitoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledebitoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledebitoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledebitoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDebito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledebitoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontabledebito=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontabledebito=(TitledBorder)this.cuentacontabledebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledebito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_debitoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledebito=true;

			idTienePermisocuentacontabledebito=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledebito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontabledebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledebitoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_debito()!=null) {
					this.cuentacontabledebitoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledebitoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_debito());
					this.cuentacontabledebitoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledebitoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontabledebito=(TitledBorder)this.cuentacontabledebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledebito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_debitoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_debito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_debito = "+this.bodega.getid_cuenta_contable_debito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_creditoBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCredito";

			if(!this.sFinalQueryGeneral_cuentacontablecredito.equals("")) {
				this.cuentacontablecreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecredito);
				this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontablecredito=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_creditoBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecredito=true;

			idTienePermisocuentacontablecredito=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_credito()!=null) {
					this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_credito());
					this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_creditoBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito = "+this.bodega.getid_cuenta_contable_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_bonificaBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablebonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablebonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablebonificaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableBonifica";

			if(!this.sFinalQueryGeneral_cuentacontablebonifica.equals("")) {
				this.cuentacontablebonificaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablebonifica);
				this.cuentacontablebonificaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablebonificaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablebonificaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablebonificaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableBonifica.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablebonificaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontablebonifica=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontablebonifica=(TitledBorder)this.cuentacontablebonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablebonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_bonificaBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablebonifica=true;

			idTienePermisocuentacontablebonifica=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablebonifica) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontablebonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablebonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablebonificaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_bonifica()!=null) {
					this.cuentacontablebonificaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablebonificaBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_bonifica());
					this.cuentacontablebonificaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablebonificaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablebonificaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablebonificaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontablebonifica=(TitledBorder)this.cuentacontablebonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablebonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_bonificaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_bonifica()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_bonifica = "+this.bodega.getid_cuenta_contable_bonifica().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_produccionBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableproduccionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableproduccionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableproduccionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableProduccion";

			if(!this.sFinalQueryGeneral_cuentacontableproduccion.equals("")) {
				this.cuentacontableproduccionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableproduccion);
				this.cuentacontableproduccionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableproduccionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableproduccionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableproduccionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableProduccion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableproduccionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontableproduccion=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontableproduccion=(TitledBorder)this.cuentacontableproduccionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableproduccion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_produccionBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableproduccion=true;

			idTienePermisocuentacontableproduccion=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableproduccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontableproduccionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableproduccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableproduccionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_produccion()!=null) {
					this.cuentacontableproduccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableproduccionBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_produccion());
					this.cuentacontableproduccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableproduccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableproduccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableproduccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontableproduccion=(TitledBorder)this.cuentacontableproduccionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableproduccion.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_produccionBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_produccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_produccion = "+this.bodega.getid_cuenta_contable_produccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostobonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostobonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostobonificaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCostoBonifica";

			if(!this.sFinalQueryGeneral_cuentacontablecostobonifica.equals("")) {
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecostobonifica);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostobonificaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostobonificaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCostoBonifica.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostobonificaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderBodega=null;
			TitledBorder titledBordercuentacontablecostobonifica=null;

			if(!this.jScrollPanelDatosBodega.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				titledBordercuentacontablecostobonifica=(TitledBorder)this.cuentacontablecostobonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostobonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costo_bonificaBodegaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecostobonifica=true;

			idTienePermisocuentacontablecostobonifica=this.tienePermisosUsuarioEnPaginaWebBodega(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecostobonifica) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosBodega.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosBodega.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);

				this.cuentacontablecostobonificaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostobonificaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostobonificaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.bodegaLogic.getConnexion());

				if(this.bodega.getid_cuenta_contable_costo_bonifica()!=null) {
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.setIdActual(this.bodega.getid_cuenta_contable_costo_bonifica());
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostobonificaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostobonificaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderBodega=(TitledBorder)this.jScrollPanelDatosBodega.getBorder();
				TitledBorder titledBordercuentacontablecostobonifica=(TitledBorder)this.cuentacontablecostobonificaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostobonifica.setTitle(titledBorderBodega.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costo_bonificaBodegaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosBodega.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualBodega(this.getbodega(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.bodega==null) {
						this.bodega = new Bodega();
					}

					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);
				}

				if(this.bodega.getid_cuenta_contable_costo_bonifica()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo_bonifica = "+this.bodega.getid_cuenta_contable_costo_bonifica().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingBodega(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorCodigo();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNombreBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorNombre();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorResponsableNombreBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorResponsableNombre();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorRucBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorRuc();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorSiglasBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorSiglas();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorTelefonoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasBusquedaPorTelefono();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCalidadProductoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCalidadProducto();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCentroCosto();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCiudadBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCiudad();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableBonificaBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableBonifica();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableCosto();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoBonificaBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableCostoBonifica();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDebitoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableDebito();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDescuentoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableDescuento();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDevolucionBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableDevolucion();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableInventario();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableProduccionBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableProduccion();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableVentaBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdCuentaContableVenta();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdEmpleado();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdEmpresa();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdGrupoBodegaBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdGrupoBodega();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisBodegaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingBodega(false,false);

			this.getBodegasFK_IdPais();

			this.inicializarActualizarBindingBodega(false);

			//if(BodegaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingBodega(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.bodegaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameBodega() {
		if(this.jInternalFrameDetalleFormBodega!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
			this.jInternalFrameDetalleFormBodega.setVisible(false);	    			
			this.jInternalFrameDetalleFormBodega.dispose();
			this.jInternalFrameDetalleFormBodega=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoBodega!=null) {
			this.jInternalFrameReporteDinamicoBodega.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoBodega.dispose();
			this.jInternalFrameReporteDinamicoBodega=null;
		}
		
		if(this.jInternalFrameImportacionBodega!=null) {
			this.jInternalFrameImportacionBodega.setVisible(false);	    			
			this.jInternalFrameImportacionBodega.dispose();
			this.jInternalFrameImportacionBodega=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessBodega();
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			
			if(sTipo.equals("NuevoBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarBodega")) {
				jButtonDuplicarBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarBodega")) {
				jButtonCopiarBodegaActionPerformed(evt);
			} else if(sTipo.equals("VerFormBodega")) {
				jButtonVerFormBodegaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarBodega")) {
				jButtonDuplicarBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarBodega")) {
				jButtonDuplicarBodegaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarBodega")) {
				jButtonModificarBodegaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarBodega")) {
				jButtonModificarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarBodega")) {
				jButtonModificarBodegaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarBodega")) {
				jButtonActualizarBodegaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarBodega")) {
				jButtonActualizarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarBodega")) {
				jButtonActualizarBodegaActionPerformed(evt);
			} else if(sTipo.equals("EliminarBodega")) {
				jButtonEliminarBodegaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarBodega")) {
				jButtonEliminarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarBodega")) {
				jButtonEliminarBodegaActionPerformed(evt);
			} else if(sTipo.equals("CancelarBodega")) {
				jButtonCancelarBodegaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarBodega")) {
				jButtonCancelarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarBodega")) {
				jButtonCancelarBodegaActionPerformed(evt);
			} else if(sTipo.equals("CerrarBodega")) {
				jButtonCerrarBodegaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarBodega")) {
				jButtonCerrarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarBodega")) {
				jButtonCerrarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarBodega")) {
				jButtonMostrarOcultarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarBodega")) {
				jButtonCancelarBodegaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarBodega")) {
				jButtonCopiarBodegaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarBodega")) {
				jButtonVerFormBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarBodega")) {
				jButtonCopiarBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormBodega")) {
				jButtonVerFormBodegaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionBodega")) {
				jButtonRecargarInformacionBodegaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarBodega")) {
				jButtonRecargarInformacionBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionBodega")) {
				jButtonRecargarInformacionBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresBodega")) {
				jButtonAnterioresBodegaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarBodega")) {
				jButtonAnterioresBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreBodega")) {
				jButtonAnterioresBodegaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesBodega")) {
				jButtonSiguientesBodegaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarBodega")) {
				jButtonSiguientesBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesBodega")) {
				jButtonSiguientesBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByBodega") || sTipo.equals("MenuItemDetalleAbrirOrderByBodega")) {
				jButtonAbrirOrderByBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarBodega") || sTipo.equals("MenuItemDetalleMostrarOcultarBodega")) {
				jButtonMostrarOcultarBodegaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosBodega")) {
				jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarBodega")) {
				jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosBodega")) {
				jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoBodega")) {
				jButtonCerrarReporteDinamicoBodegaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoBodega")) {
				jButtonGenerarReporteDinamicoBodegaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoBodega")) {
				
				jButtonGenerarExcelReporteDinamicoBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionBodega")) {
				jButtonCerrarImportacionBodegaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionBodega")) {
				
				jButtonGenerarImportacionBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionBodega")) {
				
				jButtonAbrirImportacionBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesBodega")) {
				jComboBoxTiposAccionesBodegaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesBodega")) {
				jComboBoxTiposRelacionesBodegaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioBodega")) {
				jComboBoxTiposAccionesBodegaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarBodega")) {
				
				jComboBoxTiposSeleccionarBodegaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralBodega")) {
				jTextFieldValorCampoGeneralBodegaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByBodega")) {
				jButtonAbrirOrderByBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarBodega")) {
				jButtonAbrirOrderByBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByBodega")) {
				jButtonCerrarOrderByBodegaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idBodegaBusqueda")) {
				this.jButtonidBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaBodegaUpdate")) {
				this.jButtonid_empresaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaBodegaBusqueda")) {
				this.jButtonid_empresaBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_grupo_bodegaBodegaUpdate")) {
				this.jButtonid_grupo_bodegaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_grupo_bodegaBodegaBusqueda")) {
				this.jButtonid_grupo_bodegaBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_calidad_productoBodegaUpdate")) {
				this.jButtonid_calidad_productoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_calidad_productoBodegaBusqueda")) {
				this.jButtonid_calidad_productoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoBodegaBusqueda")) {
				this.jButtoncodigoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreBodegaBusqueda")) {
				this.jButtonnombreBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("siglasBodegaBusqueda")) {
				this.jButtonsiglasBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionBodegaBusqueda")) {
				this.jButtondireccionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoBodegaBusqueda")) {
				this.jButtontelefonoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucBodegaBusqueda")) {
				this.jButtonrucBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("responsable_nombreBodegaBusqueda")) {
				this.jButtonresponsable_nombreBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionBodegaBusqueda")) {
				this.jButtondescripcionBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisBodegaUpdate")) {
				this.jButtonid_paisBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisBodegaBusqueda")) {
				this.jButtonid_paisBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadBodegaUpdate")) {
				this.jButtonid_ciudadBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadBodegaBusqueda")) {
				this.jButtonid_ciudadBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoBodega")) {
				this.jButtonid_centro_costoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoBodegaArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoBodegaUpdate")) {
				this.jButtonid_centro_costoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoBodegaBusqueda")) {
				this.jButtonid_centro_costoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoBodega")) {
				this.jButtonid_empleadoBodegaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoBodegaUpdate")) {
				this.jButtonid_empleadoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoBodegaBusqueda")) {
				this.jButtonid_empleadoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_multi_empresaBodegaBusqueda")) {
				this.jButtones_multi_empresaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_mostrar_stockBodegaBusqueda")) {
				this.jButtoncon_mostrar_stockBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bodega_transitoBodegaBusqueda")) {
				this.jButtones_bodega_transitoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_stock_negativoBodegaBusqueda")) {
				this.jButtoncon_stock_negativoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodega")) {
				this.jButtonid_cuenta_contable_inventarioBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaUpdate")) {
				this.jButtonid_cuenta_contable_inventarioBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodega")) {
				this.jButtonid_cuenta_contable_costoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_costoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_costoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodega")) {
				this.jButtonid_cuenta_contable_ventaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_ventaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_ventaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodega")) {
				this.jButtonid_cuenta_contable_descuentoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_descuentoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodega")) {
				this.jButtonid_cuenta_contable_devolucionBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaUpdate")) {
				this.jButtonid_cuenta_contable_devolucionBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodega")) {
				this.jButtonid_cuenta_contable_debitoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_debitoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_debitoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodega")) {
				this.jButtonid_cuenta_contable_creditoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_creditoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_creditoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodega")) {
				this.jButtonid_cuenta_contable_bonificaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_bonificaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_bonificaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodega")) {
				this.jButtonid_cuenta_contable_produccionBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaArbol")) {
				this.abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaUpdate")) {
				this.jButtonid_cuenta_contable_produccionBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_produccionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodega")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoBodega")) {
				this.jButtonid_centro_costoBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoBodega")) {
				this.jButtonid_empleadoBodegaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorCodigoBodega")) {
				this.jButtonBusquedaPorCodigoBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNombreBodega")) {
				this.jButtonBusquedaPorNombreBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorResponsableNombreBodega")) {
				this.jButtonBusquedaPorResponsableNombreBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCalidadProductoBodega")) {
				this.jButtonFK_IdCalidadProductoBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoBodega")) {
				this.jButtonFK_IdCentroCostoBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoBodega")) {
				this.jButtonFK_IdEmpleadoBodegaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdGrupoBodegaBodega")) {
				this.jButtonFK_IdGrupoBodegaBodegaActionPerformed(evt);
			}
			
			;
			
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessBodega();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Bodega bodegaLocal=null;
			
			if(!this.getEsControlTabla()) {
				bodegaLocal=this.bodega;
			} else {
				bodegaLocal=this.bodegaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
							
				
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
								
						
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
								
				
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
			
			this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
							
				
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
			
			this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
								
				
				


				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
			
			this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosBodega")) {
					jCheckBoxSeleccionarTodosBodegaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosBodega")) {
					jCheckBoxSeleccionadosBodegaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarBodega")) {
					
				}
				
				


				
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
												
				
				


				
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_paisBodega")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega;
				}

				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					//classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormBodega(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaBodegaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_paisBodega")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega;
				}

				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					//classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormBodega(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.bodega);
				
				this.actualizarInformacion("INFO_PADRE",false,this.bodega);
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_paisBodega")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega;
				}

				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					//classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyPais(jComboBoxGenerico,"Formulario");

				this.recargarFormBodega(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Bodega.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Bodega.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaBodegaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.bodegaAnterior =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.bodegaAnterior =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarBodega")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosBodegaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosBodega.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.bodega =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.bodega =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.bodega);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarBodega")) {
				
				}
				
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarBodega")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosBodega.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarBodega")) {
			
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessBodega();
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			if(sTipo.equals("NuevoBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarBodega")) {
				jButtonDuplicarBodegaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarBodega")) {
				jButtonCopiarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormBodega")) {
				jButtonVerFormBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesBodega")) {
				jButtonNuevoBodegaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarBodega")) {
				jButtonModificarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarBodega")) {
				jButtonActualizarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarBodega")) {
				jButtonEliminarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarBodega")) {
				jButtonCancelarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarBodega")) {
				jButtonCerrarBodegaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosBodega")) {
				jButtonGuardarCambiosBodegaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosBodega")) {
				jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByBodega")) {
				jButtonAbrirOrderByBodegaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionBodega")) {
				jButtonRecargarInformacionBodegaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresBodega")) {
				jButtonAnterioresBodegaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesBodega")) {
				jButtonSiguientesBodegaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idBodegaBusqueda")) {
				this.jButtonidBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaBodegaUpdate")) {
				this.jButtonid_empresaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaBodegaBusqueda")) {
				this.jButtonid_empresaBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_grupo_bodegaBodegaUpdate")) {
				this.jButtonid_grupo_bodegaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_grupo_bodegaBodegaBusqueda")) {
				this.jButtonid_grupo_bodegaBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_calidad_productoBodegaUpdate")) {
				this.jButtonid_calidad_productoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_calidad_productoBodegaBusqueda")) {
				this.jButtonid_calidad_productoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoBodegaBusqueda")) {
				this.jButtoncodigoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreBodegaBusqueda")) {
				this.jButtonnombreBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("siglasBodegaBusqueda")) {
				this.jButtonsiglasBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccionBodegaBusqueda")) {
				this.jButtondireccionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefonoBodegaBusqueda")) {
				this.jButtontelefonoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucBodegaBusqueda")) {
				this.jButtonrucBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("responsable_nombreBodegaBusqueda")) {
				this.jButtonresponsable_nombreBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionBodegaBusqueda")) {
				this.jButtondescripcionBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisBodegaUpdate")) {
				this.jButtonid_paisBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisBodegaBusqueda")) {
				this.jButtonid_paisBodegaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadBodegaUpdate")) {
				this.jButtonid_ciudadBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadBodegaBusqueda")) {
				this.jButtonid_ciudadBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoBodega")) {
				this.jButtonid_centro_costoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoBodegaArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoBodegaUpdate")) {
				this.jButtonid_centro_costoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoBodegaBusqueda")) {
				this.jButtonid_centro_costoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoBodega")) {
				this.jButtonid_empleadoBodegaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoBodegaUpdate")) {
				this.jButtonid_empleadoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoBodegaBusqueda")) {
				this.jButtonid_empleadoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_multi_empresaBodegaBusqueda")) {
				this.jButtones_multi_empresaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_mostrar_stockBodegaBusqueda")) {
				this.jButtoncon_mostrar_stockBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bodega_transitoBodegaBusqueda")) {
				this.jButtones_bodega_transitoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_stock_negativoBodegaBusqueda")) {
				this.jButtoncon_stock_negativoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodega")) {
				this.jButtonid_cuenta_contable_inventarioBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaUpdate")) {
				this.jButtonid_cuenta_contable_inventarioBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodega")) {
				this.jButtonid_cuenta_contable_costoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_costoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_costoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodega")) {
				this.jButtonid_cuenta_contable_ventaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_ventaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_ventaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodega")) {
				this.jButtonid_cuenta_contable_descuentoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_descuentoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodega")) {
				this.jButtonid_cuenta_contable_devolucionBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaUpdate")) {
				this.jButtonid_cuenta_contable_devolucionBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodega")) {
				this.jButtonid_cuenta_contable_debitoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_debitoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_debitoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodega")) {
				this.jButtonid_cuenta_contable_creditoBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaUpdate")) {
				this.jButtonid_cuenta_contable_creditoBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_creditoBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodega")) {
				this.jButtonid_cuenta_contable_bonificaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_bonificaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_bonificaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_bonificaBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodega")) {
				this.jButtonid_cuenta_contable_produccionBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaArbol")) {
				this.abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaUpdate")) {
				this.jButtonid_cuenta_contable_produccionBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_produccionBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_produccionBodegaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodega")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaArbol")) {
				this.abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaUpdate")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_bonificaBodegaBusqueda")) {
				this.jButtonid_cuenta_contable_costo_bonificaBodegaBusquedaActionPerformed(evt);
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessBodega();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameBodega")) {
				closingInternalFrameBodega();
				
			} else if(sTipo.equals("jButtonCancelarBodega")) {
				JInternalFrameBase jInternalFrameDetalleFormBodega = (JInternalFrameBase)evt.getSource();
	            	
	            BodegaBeanSwingJInternalFrame jInternalFrameParent=(BodegaBeanSwingJInternalFrame)jInternalFrameDetalleFormBodega.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarBodegaActionPerformed(null);
			}
			
			BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.bodega,new Object(),this.bodegaParameterGeneral,this.bodegaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormBodega(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormBodega(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormBodega(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.bodega)) {
			if(!esControlTabla) {
				if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);			
				}
				
				if(this.bodegaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualBodega(this.bodega,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.bodegaReturnGeneral=bodegaLogic.procesarEventosBodegasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.bodegaLogic.getBodegas(),this.bodega,this.bodegaParameterGeneral,this.isEsNuevoBodega,classes);//this.bodegaLogic.getBodega()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanBodega(this.bodegaReturnGeneral,this.bodegaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.bodegaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanBodega(classes,this.bodegaReturnGeneral,this.bodegaBean,false);
					}
						
					if(this.bodegaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyBodega(this.bodegaReturnGeneral.getBodega());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioBodega(this.bodegaReturnGeneral.getBodega());	
					}
						
					if(this.bodegaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioBodega(this.bodegaReturnGeneral.getBodega(),classes);//this.bodegaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioBodega(this.bodega,classes);//this.bodegaBean);									
				}
			
				if(BodegaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualBodega(this.bodega,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysBodega(this.bodega);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.bodegaAnterior!=null) {
						this.bodega=this.bodegaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.bodegaReturnGeneral=bodegaLogic.procesarEventosBodegasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.bodegaLogic.getBodegas(),this.bodega,this.bodegaParameterGeneral,this.isEsNuevoBodega,classes);//this.bodegaLogic.getBodega()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.bodegaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.bodegaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.bodegaReturnGeneral.getBodega(),bodegaLogic.getBodegas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.bodegaReturnGeneral.getBodega(),this.bodegas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosBodega.repaint();
				
				//((AbstractTableModel) this.jTableDatosBodega.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosBodega();
			}
		}
	}
	
	public void actualizarVisualTableDatosBodega() throws Exception {
		
		BodegaModel bodegaModel=(BodegaModel)this.jTableDatosBodega.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			bodegaModel.bodegas=this.bodegaLogic.getBodegas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			bodegaModel.bodegas=this.bodegas;
		}
		
		
		((BodegaModel) this.jTableDatosBodega.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaBodega() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getbodegaAnterior(),this.bodegaLogic.getBodegas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getbodegaAnterior(),this.bodegas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosBodega();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioBodega(Bodega bodega,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.bodega,new Object(),generalEntityParameterGeneral,this.bodegaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.bodegaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=BodegaConstantesFunciones.getClassesRelationshipsOfBodega(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=BodegaConstantesFunciones.getClassesRelationshipsFromStringsOfBodega(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormBodega(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				BodegaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.bodega,new Object(),generalEntityParameterGeneral,this.bodegaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioBodega(BodegaBean bodegaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanBodega(ArrayList<Classe> classes,BodegaReturnGeneral bodegaReturnGeneral,BodegaBean bodegaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualBodega(Bodega bodega,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.bodega)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormBodega = new BodegaDetalleFormJInternalFrame(jDesktopPane,this.bodegaSessionBean.getConGuardarRelaciones(),this.bodegaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormBodega);
		this.jInternalFrameDetalleFormBodega.setVisible(false);
		this.jInternalFrameDetalleFormBodega.setSelected(false);						
		
		this.jInternalFrameDetalleFormBodega.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormBodega.bodegaLogic=this.bodegaLogic;
		
		this.cargarCombosFrameForeignKeyBodega("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleBodega();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleBodega();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyBodega("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyBodega();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormBodega.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarBodega"));
		
		this.jInternalFrameDetalleFormBodega.jButtonModificarBodega.addActionListener(new ButtonActionListener(this,"ModificarBodega"));

		
		this.jInternalFrameDetalleFormBodega.jButtonModificarToolBarBodega.addActionListener(new ButtonActionListener(this,"ModificarToolBarBodega"));
					
		this.jInternalFrameDetalleFormBodega.jMenuItemModificarBodega.addActionListener(new ButtonActionListener(this,"MenuItemModificarBodega"));		
		
		
		
		this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.addActionListener (new ButtonActionListener(this,"ActualizarBodega"));
		
		
		this.jInternalFrameDetalleFormBodega.jButtonActualizarToolBarBodega.addActionListener(new ButtonActionListener(this,"ActualizarToolBarBodega"));
						
		this.jInternalFrameDetalleFormBodega.jMenuItemActualizarBodega.addActionListener (new ButtonActionListener(this,"MenuItemActualizarBodega"));		
		
		
		
		this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.addActionListener (new ButtonActionListener(this,"EliminarBodega"));
		
		
		this.jInternalFrameDetalleFormBodega.jButtonEliminarToolBarBodega.addActionListener (new ButtonActionListener(this,"EliminarToolBarBodega"));
								
		this.jInternalFrameDetalleFormBodega.jMenuItemEliminarBodega.addActionListener (new ButtonActionListener(this,"MenuItemEliminarBodega"));		
		
		
		
		this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.addActionListener (new ButtonActionListener(this,"CancelarBodega"));
		
		
		this.jInternalFrameDetalleFormBodega.jButtonCancelarToolBarBodega.addActionListener (new ButtonActionListener(this,"CancelarToolBarBodega"));
					
		this.jInternalFrameDetalleFormBodega.jMenuItemCancelarBodega.addActionListener (new ButtonActionListener(this,"MenuItemCancelarBodega"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormBodega.jMenuItemDetalleCerrarBodega.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarBodega"));		
		
		
		
		this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosToolBarBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBodega"));
		
		
		
		this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosToolBarBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBodega"));
		
		
		
		this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioBodega"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonidBodegaBusqueda.addActionListener(new ButtonActionListener(this,"idBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncodigoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"codigoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonnombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonsiglasBodegaBusqueda.addActionListener(new ButtonActionListener(this,"siglasBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondireccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"direccionBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtontelefonoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonrucBodegaBusqueda.addActionListener(new ButtonActionListener(this,"rucBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonresponsable_nombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"responsable_nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondescripcionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_paisBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaBusqueda"));
		//jButtonid_centro_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodega.addActionListener(new ButtonActionListener(this,"id_centro_costoBodega"));
		//jButtonid_centro_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaBusqueda"));
		//jButtonid_empleadoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodega.addActionListener(new ButtonActionListener(this,"id_empleadoBodega"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_multi_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_multi_empresaBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_mostrar_stockBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_stockBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_bodega_transitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_bodega_transitoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_stock_negativoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_stock_negativoBodegaBusqueda"));
		//jButtonid_cuenta_contable_inventarioBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodega"));
		//jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaBusqueda"));
		//jButtonid_cuenta_contable_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodega"));
		//jButtonid_cuenta_contable_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaBusqueda"));
		//jButtonid_cuenta_contable_ventaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodega"));
		//jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaBusqueda"));
		//jButtonid_cuenta_contable_descuentoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodega"));
		//jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaBusqueda"));
		//jButtonid_cuenta_contable_devolucionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodega"));
		//jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaBusqueda"));
		//jButtonid_cuenta_contable_debitoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodega"));
		//jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaBusqueda"));
		//jButtonid_cuenta_contable_creditoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodega"));
		//jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaBusqueda"));
		//jButtonid_cuenta_contable_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodega"));
		//jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaBusqueda"));
		//jButtonid_cuenta_contable_produccionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodega"));
		//jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodega"));
		//jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesBodega"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameBodega"));
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarBodega"));
		}
		
		this.jTableDatosBodega.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarBodega"));
		
		this.jTableDatosBodega.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarBodega"));
		
		this.jButtonNuevoBodega.addActionListener(new ButtonActionListener(this,"NuevoBodega"));
		
		this.jButtonDuplicarBodega.addActionListener(new ButtonActionListener(this,"DuplicarBodega"));
		
		this.jButtonCopiarBodega.addActionListener(new ButtonActionListener(this,"CopiarBodega"));
		
		this.jButtonVerFormBodega.addActionListener(new ButtonActionListener(this,"VerFormBodega"));
		
		
		this.jButtonNuevoToolBarBodega.addActionListener(new ButtonActionListener(this,"NuevoToolBarBodega"));
			
		this.jButtonDuplicarToolBarBodega.addActionListener(new ButtonActionListener(this,"DuplicarToolBarBodega"));
			
		this.jMenuItemNuevoBodega.addActionListener (new ButtonActionListener(this,"MenuItemNuevoBodega"));
			
		this.jMenuItemDuplicarBodega.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarBodega"));		
		
		
		this.jButtonNuevoRelacionesBodega.addActionListener (new ButtonActionListener(this,"NuevoRelacionesBodega"));
		
		
		this.jButtonNuevoRelacionesToolBarBodega.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarBodega"));
			
		this.jMenuItemNuevoRelacionesBodega.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesBodega"));		
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonModificarBodega.addActionListener(new ButtonActionListener(this,"ModificarBodega"));
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonModificarToolBarBodega.addActionListener(new ButtonActionListener(this,"ModificarToolBarBodega"));
			
			this.jInternalFrameDetalleFormBodega.jMenuItemModificarBodega.addActionListener(new ButtonActionListener(this,"MenuItemModificarBodega"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormBodega.jButtonActualizarBodega.addActionListener (new ButtonActionListener(this,"ActualizarBodega"));
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonActualizarToolBarBodega.addActionListener(new ButtonActionListener(this,"ActualizarToolBarBodega"));
				
			this.jInternalFrameDetalleFormBodega.jMenuItemActualizarBodega.addActionListener (new ButtonActionListener(this,"MenuItemActualizarBodega"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonEliminarBodega.addActionListener (new ButtonActionListener(this,"EliminarBodega"));
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonEliminarToolBarBodega.addActionListener (new ButtonActionListener(this,"EliminarToolBarBodega"));
						
			this.jInternalFrameDetalleFormBodega.jMenuItemEliminarBodega.addActionListener (new ButtonActionListener(this,"MenuItemEliminarBodega"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonCancelarBodega.addActionListener (new ButtonActionListener(this,"CancelarBodega"));
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonCancelarToolBarBodega.addActionListener (new ButtonActionListener(this,"CancelarToolBarBodega"));
			
			this.jInternalFrameDetalleFormBodega.jMenuItemCancelarBodega.addActionListener (new ButtonActionListener(this,"MenuItemCancelarBodega"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarBodega.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarBodega"));		
		
		
		this.jButtonCerrarBodega.addActionListener (new ButtonActionListener(this,"CerrarBodega"));
		
		
		this.jButtonCerrarToolBarBodega.addActionListener (new ButtonActionListener(this,"CerrarToolBarBodega"));
			
		this.jMenuItemCerrarBodega.addActionListener (new ButtonActionListener(this,"MenuItemCerrarBodega"));
			
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jMenuItemDetalleCerrarBodega.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarBodega"));		
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosBodega"));
		}
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosToolBarBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarBodega"));
		}
		
		this.jButtonCopiarToolBarBodega.addActionListener (new ButtonActionListener(this,"CopiarToolBarBodega"));
			
		this.jButtonVerFormToolBarBodega.addActionListener (new ButtonActionListener(this,"VerFormToolBarBodega"));
		
		this.jMenuItemGuardarCambiosBodega.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosBodega"));
			
		this.jMenuItemCopiarBodega.addActionListener (new ButtonActionListener(this,"MenuItemCopiarBodega"));		
		
		this.jMenuItemVerFormBodega.addActionListener (new ButtonActionListener(this,"MenuItemVerFormBodega"));		
		
		
		this.jButtonGuardarCambiosTablaBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaBodega"));
		
		
		this.jButtonGuardarCambiosTablaToolBarBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarBodega"));
			
		this.jMenuItemGuardarCambiosTablaBodega.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaBodega"));		
		
		
		
		this.jButtonRecargarInformacionBodega.addActionListener (new ButtonActionListener(this,"RecargarInformacionBodega"));
					
		this.jButtonRecargarInformacionToolBarBodega.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarBodega"));
		
		this.jMenuItemRecargarInformacionBodega.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionBodega"));		
		
		
		
		this.jButtonAnterioresBodega.addActionListener (new ButtonActionListener(this,"AnterioresBodega"));
		
		
		this.jButtonAnterioresToolBarBodega.addActionListener (new ButtonActionListener(this,"AnterioresToolBarBodega"));
		
		this.jMenuItemAnterioresBodega.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresBodega"));		
		
		
		this.jButtonSiguientesBodega.addActionListener (new ButtonActionListener(this,"SiguientesBodega"));
		
		
		this.jButtonSiguientesToolBarBodega.addActionListener (new ButtonActionListener(this,"SiguientesToolBarBodega"));
			
		this.jMenuItemSiguientesBodega.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesBodega"));
			
		this.jMenuItemAbrirOrderByBodega.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByBodega"));
			
		this.jMenuItemMostrarOcultarBodega.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarBodega"));
			
		this.jMenuItemDetalleAbrirOrderByBodega.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByBodega"));
			
		this.jMenuItemDetalleMostarOcultarBodega.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarBodega"));		
		
		
		this.jButtonNuevoGuardarCambiosBodega.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosBodega"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarBodega.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarBodega"));
			
		this.jMenuItemNuevoGuardarCambiosBodega.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosBodega"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosBodega.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosBodega"));

		this.jCheckBoxSeleccionadosBodega.addItemListener(new CheckBoxItemListener(this,"SeleccionadosBodega"));
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioBodega"));
		}
		
		
		this.jComboBoxTiposRelacionesBodega.addActionListener (new ButtonActionListener(this,"TiposRelacionesBodega"));
			
		this.jComboBoxTiposAccionesBodega.addActionListener (new ButtonActionListener(this,"TiposAccionesBodega"));
					
		this.jComboBoxTiposSeleccionarBodega.addActionListener (new ButtonActionListener(this,"TiposSeleccionarBodega"));
			
		this.jTextFieldValorCampoGeneralBodega.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralBodega"));		
		
		
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonidBodegaBusqueda.addActionListener(new ButtonActionListener(this,"idBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncodigoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"codigoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonnombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonsiglasBodegaBusqueda.addActionListener(new ButtonActionListener(this,"siglasBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondireccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"direccionBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtontelefonoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonrucBodegaBusqueda.addActionListener(new ButtonActionListener(this,"rucBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonresponsable_nombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"responsable_nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondescripcionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_paisBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaBusqueda"));
		//jButtonid_centro_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodega.addActionListener(new ButtonActionListener(this,"id_centro_costoBodega"));
		//jButtonid_centro_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaBusqueda"));
		//jButtonid_empleadoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodega.addActionListener(new ButtonActionListener(this,"id_empleadoBodega"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_multi_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_multi_empresaBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_mostrar_stockBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_stockBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_bodega_transitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_bodega_transitoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_stock_negativoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_stock_negativoBodegaBusqueda"));
		//jButtonid_cuenta_contable_inventarioBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodega"));
		//jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaBusqueda"));
		//jButtonid_cuenta_contable_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodega"));
		//jButtonid_cuenta_contable_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaBusqueda"));
		//jButtonid_cuenta_contable_ventaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodega"));
		//jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaBusqueda"));
		//jButtonid_cuenta_contable_descuentoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodega"));
		//jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaBusqueda"));
		//jButtonid_cuenta_contable_devolucionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodega"));
		//jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaBusqueda"));
		//jButtonid_cuenta_contable_debitoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodega"));
		//jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaBusqueda"));
		//jButtonid_cuenta_contable_creditoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodega"));
		//jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaBusqueda"));
		//jButtonid_cuenta_contable_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodega"));
		//jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaBusqueda"));
		//jButtonid_cuenta_contable_produccionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodega"));
		//jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodega"));
		//jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoBodega"));

			this.jButtonBusquedaPorNombreBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreBodega"));

			this.jButtonBusquedaPorResponsableNombreBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorResponsableNombreBodega"));

			this.jButtonFK_IdCalidadProductoBodega.addActionListener(new ButtonActionListener(this,"FK_IdCalidadProductoBodega"));

			this.jButtonFK_IdCentroCostoBodega.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoBodega"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoBodega.addActionListener(new ButtonActionListener(this,"id_centro_costoBodega"));

			this.jButtonFK_IdEmpleadoBodega.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoBodega"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoBodega.addActionListener(new ButtonActionListener(this,"id_empleadoBodega"));

			this.jButtonFK_IdGrupoBodegaBodega.addActionListener(new ButtonActionListener(this,"FK_IdGrupoBodegaBodega"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoBodega!=null) {
				this.jInternalFrameReporteDinamicoBodega.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBodega"));
				this.jInternalFrameReporteDinamicoBodega.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBodega"));
				this.jInternalFrameReporteDinamicoBodega.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBodega"));
			}
			
			//this.jButtonCerrarReporteDinamicoBodega.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoBodega"));				
			//this.jButtonGenerarReporteDinamicoBodega.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoBodega"));
			//this.jButtonGenerarExcelReporteDinamicoBodega.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoBodega"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionBodega!=null) {
				this.jInternalFrameImportacionBodega.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionBodega"));
				this.jInternalFrameImportacionBodega.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionBodega"));
				this.jInternalFrameImportacionBodega.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionBodega"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByBodega.addActionListener (new ButtonActionListener(this,"AbrirOrderByBodega"));
			
			this.jButtonAbrirOrderByToolBarBodega.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarBodega"));			
			
			if(this.jInternalFrameOrderByBodega!=null) {
				this.jInternalFrameOrderByBodega.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByBodega"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormBodega!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormBodega.jTabbedPaneRelacionesBodega.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesBodega"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameBodega();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormBodega.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormBodega = (JInternalFrameBase)event.getSource();
	            	
	            BodegaBeanSwingJInternalFrame jInternalFrameParent=(BodegaBeanSwingJInternalFrame)jInternalFrameDetalleFormBodega.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarBodegaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosBodega.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosBodegaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosBodega.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosBodega.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoBodega";
		inputMap = this.jButtonNuevoBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoBodegaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoBodegaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesBodega";
		inputMap = this.jButtonNuevoRelacionesBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoBodegaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarBodega";
		inputMap = this.jButtonModificarBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarBodega";
		inputMap = this.jButtonActualizarBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarBodega";
		inputMap = this.jButtonEliminarBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarBodega";
		inputMap = this.jButtonCancelarBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarBodega";
		inputMap = this.jButtonCerrarBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosBodega";
		inputMap = this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormBodega.jButtonGuardarCambiosBodega.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosBodegaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosBodega.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosBodegaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesBodega.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesBodegaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarBodega.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarBodegaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralBodega.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralBodegaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonidBodegaBusqueda.addActionListener(new ButtonActionListener(this,"idBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_grupo_bodegaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_grupo_bodegaBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_calidad_productoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_calidad_productoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncodigoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"codigoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonnombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonsiglasBodegaBusqueda.addActionListener(new ButtonActionListener(this,"siglasBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondireccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"direccionBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtontelefonoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"telefonoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonrucBodegaBusqueda.addActionListener(new ButtonActionListener(this,"rucBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonresponsable_nombreBodegaBusqueda.addActionListener(new ButtonActionListener(this,"responsable_nombreBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtondescripcionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_paisBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_paisBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisBodegaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_ciudadBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadBodegaBusqueda"));
		//jButtonid_centro_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodega.addActionListener(new ButtonActionListener(this,"id_centro_costoBodega"));
		//jButtonid_centro_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoBodegaBusqueda"));
		//jButtonid_empleadoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodega.addActionListener(new ButtonActionListener(this,"id_empleadoBodega"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_multi_empresaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_multi_empresaBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_mostrar_stockBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_stockBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtones_bodega_transitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"es_bodega_transitoBodegaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtoncon_stock_negativoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"con_stock_negativoBodegaBusqueda"));
		//jButtonid_cuenta_contable_inventarioBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodega"));
		//jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioBodegaBusqueda"));
		//jButtonid_cuenta_contable_costoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodega"));
		//jButtonid_cuenta_contable_costoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoBodegaBusqueda"));
		//jButtonid_cuenta_contable_ventaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodega"));
		//jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaBodegaBusqueda"));
		//jButtonid_cuenta_contable_descuentoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_descuentoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodega"));
		//jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDescuento("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoBodegaBusqueda"));
		//jButtonid_cuenta_contable_devolucionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_devolucionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodega"));
		//jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDevolucion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionBodegaBusqueda"));
		//jButtonid_cuenta_contable_debitoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_debitoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodega"));
		//jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDebito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoBodegaBusqueda"));
		//jButtonid_cuenta_contable_creditoBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodega"));
		//jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoBodegaBusqueda"));
		//jButtonid_cuenta_contable_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodega"));
		//jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_bonificaBodegaBusqueda"));
		//jButtonid_cuenta_contable_produccionBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_produccionBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodega"));
		//jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableProduccion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_produccionBodegaBusqueda"));
		//jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_bonificaBodegaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodega.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodega"));
		//jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoBonifica("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodegaBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_bonificaBodegaBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoBodega"));

		this.jButtonBusquedaPorNombreBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreBodega"));

		this.jButtonBusquedaPorResponsableNombreBodega.addActionListener(new ButtonActionListener(this,"BusquedaPorResponsableNombreBodega"));

		this.jButtonFK_IdCalidadProductoBodega.addActionListener(new ButtonActionListener(this,"FK_IdCalidadProductoBodega"));

		this.jButtonFK_IdCentroCostoBodega.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoBodega"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoBodega.addActionListener(new ButtonActionListener(this,"id_centro_costoBodega"));

		this.jButtonFK_IdEmpleadoBodega.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoBodega"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoBodega.addActionListener(new ButtonActionListener(this,"id_empleadoBodega"));

		this.jButtonFK_IdGrupoBodegaBodega.addActionListener(new ButtonActionListener(this,"FK_IdGrupoBodegaBodega"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionBodega.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionBodegaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarBodegaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarBodega.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosBodega(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
					bodegaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Bodega bodegaAux:bodegas) {
					bodegaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosBodegaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingBodega(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
						bodegaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Bodega bodegaAux:bodegas) {
						bodegaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
					
						if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA)) {
							existe=true;
							bodegaAux.setes_multi_empresa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK)) {
							existe=true;
							bodegaAux.setcon_mostrar_stock(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO)) {
							existe=true;
							bodegaAux.setes_bodega_transito(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO)) {
							existe=true;
							bodegaAux.setcon_stock_negativo(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Bodega bodegaAux:bodegas) {
						
						if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA)) {
							existe=true;
							bodegaAux.setes_multi_empresa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK)) {
							existe=true;
							bodegaAux.setcon_mostrar_stock(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO)) {
							existe=true;
							bodegaAux.setes_bodega_transito(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO)) {
							existe=true;
							bodegaAux.setcon_stock_negativo(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaBodega(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosBodega.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosBodega.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosBodega,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosBodegaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingBodega(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosBodega.getSelectedRows();
			
			Bodega bodegaLocal=new Bodega();
			
			//this.seleccionarTodosBodega(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLocal =(Bodega) this.bodegaLogic.getBodegas().toArray()[this.jTableDatosBodega.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					bodegaLocal =(Bodega) this.bodegas.toArray()[this.jTableDatosBodega.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				bodegaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
						bodegaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Bodega bodegaAux:bodegas) {
						bodegaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaBodega(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosBodega.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosBodega.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosBodega,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualBodegaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarBodegaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralBodegaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingBodega(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralBodega.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Bodega bodegaAux:this.bodegaLogic.getBodegas()) {
				
						if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							bodegaAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							bodegaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_SIGLAS)) {
							existe=true;
							bodegaAux.setsiglas(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							bodegaAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							bodegaAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RUC)) {
							existe=true;
							bodegaAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE)) {
							existe=true;
							bodegaAux.setresponsable_nombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							bodegaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Bodega bodegaAux:bodegas) {
					
						if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							bodegaAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							bodegaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_SIGLAS)) {
							existe=true;
							bodegaAux.setsiglas(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DIRECCION)) {
							existe=true;
							bodegaAux.setdireccion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_TELEFONO)) {
							existe=true;
							bodegaAux.settelefono(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RUC)) {
							existe=true;
							bodegaAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE)) {
							existe=true;
							bodegaAux.setresponsable_nombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							bodegaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaBodega(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesBodegaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingBodega(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioBodega=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesBodega.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteBodega) {				
					conSplash=true;//false;										
					
					//this.startProcessBodega(conSplash);
				
					this.generarReporteBodegasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoBodegasSeleccionados();
				//this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoBodegasSeleccionados(false);
				//this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoBodegasSeleccionados(true);
				//this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessBodega();
				
				this.exportarBodegasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionBodegas();
				//this.importarBodegas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessBodega();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelBodegasSeleccionados();
				//this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Bodega", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessBodega();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoBodega)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyBodega(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
				}	
			} 			
			else if(BodegaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteBodega) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessBodega(conSplash);
					
						//this.actualizarParametrosGeneralBodega();
						
						this.generarReporteProcesoAccionBodegasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(BodegaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO BodegaS SELECCIONADOS?", "MANTENIMIENTO DE Bodega", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessBodega();
				
						this.actualizarParametrosGeneralBodega();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.bodegaReturnGeneral=bodegaLogic.procesarAccionBodegasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.bodegaLogic.getBodegas(),this.bodegaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarBodegaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralBodega();
					
					BodegaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarBodegaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesBodega.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormBodega.jComboBoxTiposAccionesFormularioBodega.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessBodega(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesBodegaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessBodega();
			
			if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
			Bodega bodega=new Bodega();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingBodega(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesBodega.getSelectedItem();
			
			
			
			
			bodegasSeleccionados=this.getBodegasSeleccionados(true);
			//this.sTipoAccion;
			
			if(bodegasSeleccionados.size()==1) {
				for(Bodega bodegaAux:bodegasSeleccionados) {
					bodega=bodegaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessBodega();
			
      		//this.finishProcessBodega(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarBodegaReturnGeneral() throws Exception {
		if(this.bodegaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.bodegaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.bodegaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.bodegaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.bodegaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.bodegaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingBodega(false);
		}
		
		if(this.bodegaReturnGeneral.getConRetornoLista() || this.bodegaReturnGeneral.getConRetornoObjeto()) {
			if(this.bodegaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.bodegaLogic.setBodegas(this.bodegaReturnGeneral.getBodegas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.bodegaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.bodegaLogic.setBodega(this.bodegaReturnGeneral.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingBodega(false);
		}
	}
	
	public void actualizarParametrosGeneralBodega() throws Exception {
		
		
	}
	
	public ArrayList<Bodega> getBodegasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioBodega) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Bodega bodegaAux:bodegaLogic.getBodegas()) {
					if(bodegaAux.getIsSelected()) {
						bodegasSeleccionados.add(bodegaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Bodega bodegaAux:this.bodegas) {
					if(bodegaAux.getIsSelected()) {
						bodegasSeleccionados.add(bodegaAux);				
					}
				}
			}
			
			if(bodegasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						bodegasSeleccionados.addAll(this.bodegaLogic.getBodegas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						bodegasSeleccionados.addAll(this.bodegas);				
					}
				}
			}
		} else {
			bodegasSeleccionados.add(this.bodega);
		}
		
		return bodegasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteBodegasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalBodegasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoBodegasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoBodegasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoBodegasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Bodega",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteBodegas("Todos",bodegasSeleccionados);
		
	}	
	
	public void generarReporteNormalBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteBodegas("Todos",bodegasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionBodegasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteBodegas("Todos",bodegasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		
		this.abrirInicializarFrameReporteDinamicoBodega();
		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoBodega();
		
		
		//this.generarReporteBodegas("Todos",bodegasSeleccionados ,bodegaImplementable,bodegaImplementableHome);
	}
	
	public void mostrarImportacionBodegas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionBodega();
		
		this.abrirFrameImportacionBodega();		
		
			
		//this.generarReporteBodegas("Todos",bodegasSeleccionados ,bodegaImplementable,bodegaImplementableHome);
	}
	
	public void importarBodegas() throws Exception {		
	
	}
	
	public void exportarBodegasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelBodegasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoBodegasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlBodegasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Bodega",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarBodega(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Bodega bodegaAux:bodegasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarBodega(bodegaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//bodegaAux.setsDetalleGeneralEntityReporte(bodegaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarBodega(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_SIGLAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_DIRECCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_TELEFONO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCIUDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarBodega(Bodega bodega,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=bodega.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getgrupobodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcalidadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getsiglas();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getdireccion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.gettelefono();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getresponsable_nombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getciudad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getes_multi_empresa().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcon_mostrar_stock().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getes_bodega_transito().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcon_stock_negativo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontableinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontablecosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontableventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontabledescuento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontabledevolucion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontabledebito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontablecredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontablebonifica_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontableproduccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=bodega.getcuentacontablecostobonifica_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Bodegas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelBodega(row);				
				iRow++;
			}				
			
			for(Bodega bodegaAux:bodegasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelBodega(bodegaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlBodegasSeleccionados() throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();		
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"bodega.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("bodegas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("bodega");
			//elementRoot.appendChild(element);
		
			for(Bodega bodegaAux:bodegasSeleccionados) {
				element = document.createElement("bodega");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlBodega(bodegaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.bodegaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Bodega",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelBodega(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_SIGLAS);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_DIRECCION);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_TELEFONO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCIUDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION);
		cell = row.createCell(iColumn++);cell.setCellValue(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelBodega(Bodega bodega,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getgrupobodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcalidadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getsiglas());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getdireccion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.gettelefono());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getresponsable_nombre());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getciudad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getes_multi_empresa());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcon_mostrar_stock());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getes_bodega_transito());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcon_stock_negativo());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontableinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontablecosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontableventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontabledescuento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontabledevolucion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontabledebito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontablecredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontablebonifica_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontableproduccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(bodega.getcuentacontablecostobonifica_descripcion());				
	}
	
	public void setFilaDatosExportarXmlBodega(Bodega bodega,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(BodegaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(bodega.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(BodegaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(bodega.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(BodegaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(bodega.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementgrupobodega_descripcion = document.createElement(BodegaConstantesFunciones.IDGRUPOBODEGA);
		elementgrupobodega_descripcion.appendChild(document.createTextNode(bodega.getgrupobodega_descripcion()));
		element.appendChild(elementgrupobodega_descripcion);

		Element elementcalidadproducto_descripcion = document.createElement(BodegaConstantesFunciones.IDCALIDADPRODUCTO);
		elementcalidadproducto_descripcion.appendChild(document.createTextNode(bodega.getcalidadproducto_descripcion()));
		element.appendChild(elementcalidadproducto_descripcion);

		Element elementcodigo = document.createElement(BodegaConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(bodega.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(BodegaConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(bodega.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementsiglas = document.createElement(BodegaConstantesFunciones.SIGLAS);
		elementsiglas.appendChild(document.createTextNode(bodega.getsiglas().trim()));
		element.appendChild(elementsiglas);

		Element elementdireccion = document.createElement(BodegaConstantesFunciones.DIRECCION);
		elementdireccion.appendChild(document.createTextNode(bodega.getdireccion().trim()));
		element.appendChild(elementdireccion);

		Element elementtelefono = document.createElement(BodegaConstantesFunciones.TELEFONO);
		elementtelefono.appendChild(document.createTextNode(bodega.gettelefono().trim()));
		element.appendChild(elementtelefono);

		Element elementruc = document.createElement(BodegaConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(bodega.getruc().trim()));
		element.appendChild(elementruc);

		Element elementresponsable_nombre = document.createElement(BodegaConstantesFunciones.RESPONSABLENOMBRE);
		elementresponsable_nombre.appendChild(document.createTextNode(bodega.getresponsable_nombre().trim()));
		element.appendChild(elementresponsable_nombre);

		Element elementdescripcion = document.createElement(BodegaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(bodega.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementpais_descripcion = document.createElement(BodegaConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(bodega.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementciudad_descripcion = document.createElement(BodegaConstantesFunciones.IDCIUDAD);
		elementciudad_descripcion.appendChild(document.createTextNode(bodega.getciudad_descripcion()));
		element.appendChild(elementciudad_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(BodegaConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(bodega.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementempleado_descripcion = document.createElement(BodegaConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(bodega.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementes_multi_empresa = document.createElement(BodegaConstantesFunciones.ESMULTIEMPRESA);
		elementes_multi_empresa.appendChild(document.createTextNode(bodega.getes_multi_empresa().toString().trim()));
		element.appendChild(elementes_multi_empresa);

		Element elementcon_mostrar_stock = document.createElement(BodegaConstantesFunciones.CONMOSTRARSTOCK);
		elementcon_mostrar_stock.appendChild(document.createTextNode(bodega.getcon_mostrar_stock().toString().trim()));
		element.appendChild(elementcon_mostrar_stock);

		Element elementes_bodega_transito = document.createElement(BodegaConstantesFunciones.ESBODEGATRANSITO);
		elementes_bodega_transito.appendChild(document.createTextNode(bodega.getes_bodega_transito().toString().trim()));
		element.appendChild(elementes_bodega_transito);

		Element elementcon_stock_negativo = document.createElement(BodegaConstantesFunciones.CONSTOCKNEGATIVO);
		elementcon_stock_negativo.appendChild(document.createTextNode(bodega.getcon_stock_negativo().toString().trim()));
		element.appendChild(elementcon_stock_negativo);

		Element elementcuentacontableinventario_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEINVENTARIO);
		elementcuentacontableinventario_descripcion.appendChild(document.createTextNode(bodega.getcuentacontableinventario_descripcion()));
		element.appendChild(elementcuentacontableinventario_descripcion);

		Element elementcuentacontablecosto_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLECOSTO);
		elementcuentacontablecosto_descripcion.appendChild(document.createTextNode(bodega.getcuentacontablecosto_descripcion()));
		element.appendChild(elementcuentacontablecosto_descripcion);

		Element elementcuentacontableventa_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEVENTA);
		elementcuentacontableventa_descripcion.appendChild(document.createTextNode(bodega.getcuentacontableventa_descripcion()));
		element.appendChild(elementcuentacontableventa_descripcion);

		Element elementcuentacontabledescuento_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEDESCUENTO);
		elementcuentacontabledescuento_descripcion.appendChild(document.createTextNode(bodega.getcuentacontabledescuento_descripcion()));
		element.appendChild(elementcuentacontabledescuento_descripcion);

		Element elementcuentacontabledevolucion_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEDEVOLUCION);
		elementcuentacontabledevolucion_descripcion.appendChild(document.createTextNode(bodega.getcuentacontabledevolucion_descripcion()));
		element.appendChild(elementcuentacontabledevolucion_descripcion);

		Element elementcuentacontabledebito_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEDEBITO);
		elementcuentacontabledebito_descripcion.appendChild(document.createTextNode(bodega.getcuentacontabledebito_descripcion()));
		element.appendChild(elementcuentacontabledebito_descripcion);

		Element elementcuentacontablecredito_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLECREDITO);
		elementcuentacontablecredito_descripcion.appendChild(document.createTextNode(bodega.getcuentacontablecredito_descripcion()));
		element.appendChild(elementcuentacontablecredito_descripcion);

		Element elementcuentacontablebonifica_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEBONIFICA);
		elementcuentacontablebonifica_descripcion.appendChild(document.createTextNode(bodega.getcuentacontablebonifica_descripcion()));
		element.appendChild(elementcuentacontablebonifica_descripcion);

		Element elementcuentacontableproduccion_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLEPRODUCCION);
		elementcuentacontableproduccion_descripcion.appendChild(document.createTextNode(bodega.getcuentacontableproduccion_descripcion()));
		element.appendChild(elementcuentacontableproduccion_descripcion);

		Element elementcuentacontablecostobonifica_descripcion = document.createElement(BodegaConstantesFunciones.IDCUENTACONTABLECOSTOBONIFICA);
		elementcuentacontablecostobonifica_descripcion.appendChild(document.createTextNode(bodega.getcuentacontablecostobonifica_descripcion()));
		element.appendChild(elementcuentacontablecostobonifica_descripcion);
	}
	
	public void generarReporteGroupGenericoBodegasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Bodega> bodegasSeleccionados=new ArrayList<Bodega>();
		
		bodegasSeleccionados=this.getBodegasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoBodega(bodegasSeleccionados);
		
		this.generarReporteBodegas("Todos",bodegasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoBodega(ArrayList<Bodega> bodegasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Bodega bodegaAux:bodegasSeleccionados) {
				bodegaAux.setsDetalleGeneralEntityReporte(bodegaAux.toString());
			
				if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDGRUPOBODEGA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getgrupobodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCALIDADPRODUCTO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcalidadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_SIGLAS)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getsiglas());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DIRECCION)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getdireccion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_TELEFONO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.gettelefono());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RUC)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_RESPONSABLENOMBRE)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getresponsable_nombre());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCIUDAD)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getciudad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESMULTIEMPRESA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(bodegaAux.getes_multi_empresa()));
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONMOSTRARSTOCK)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(bodegaAux.getcon_mostrar_stock()));
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_ESBODEGATRANSITO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(bodegaAux.getes_bodega_transito()));
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_CONSTOCKNEGATIVO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(bodegaAux.getcon_stock_negativo()));
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontableinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontablecosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontableventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontabledescuento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontabledevolucion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontabledebito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontablecredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEBONIFICA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontablebonifica_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLEPRODUCCION)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontableproduccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(BodegaConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOBONIFICA)) {
					existe=true;
					bodegaAux.setsDescripcionGeneralEntityReporte1(bodegaAux.getcuentacontablecostobonifica_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,BodegaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesBodega(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoBodega=true;
				this.isVisibilidadCeldaNuevoRelacionesBodega=true;
				this.isVisibilidadCeldaGuardarCambiosBodega=true;
			}
			
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=true;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=true;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=true;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=true;
			this.isVisibilidadCeldaEliminarBodega=true;
			this.isVisibilidadCeldaCancelarBodega=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=true;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=true;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=false;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoBodega=true;
			this.isVisibilidadCeldaNuevoRelacionesBodega=true;
			this.isVisibilidadCeldaGuardarCambiosBodega=true;
			this.isVisibilidadCeldaModificarBodega=false;
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=true;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=false;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
			this.isVisibilidadCeldaModificarBodega=true;
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
			this.isVisibilidadCeldaCancelarBodega=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarBodega=false;
				} else {
					this.isVisibilidadCeldaGuardarBodega=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(BodegaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoBodega=true;
			this.isVisibilidadCeldaNuevoRelacionesBodega=true;
			this.isVisibilidadCeldaGuardarCambiosBodega=true;
		} else {
			this.actualizarEstadoPanelsBodega(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarBodega=false;
			//this.isVisibilidadCeldaVerFormBodega=false;
			this.isVisibilidadCeldaDuplicarBodega=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!bodegaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
		} else {
			this.isVisibilidadCeldaNuevoBodega=false;
			this.isVisibilidadCeldaGuardarCambiosBodega=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(bodegaSessionBean.getEsGuardarRelacionado()) {
			if(!bodegaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesBodega=false;												
			}
			
			this.jButtonCerrarBodega.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesBodega=false;
		}
		
		if(!this.permiteMantenimiento(this.bodega)) {
			this.isVisibilidadCeldaActualizarBodega=false;
			this.isVisibilidadCeldaEliminarBodega=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesBodega() {
	}
	
	public void actualizarEstadoPanelsBodega(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(true);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(false);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(false);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(false);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(true);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(true);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionBodega!=null) {
				this.jScrollPanelDatosEdicionBodega.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosBodega!=null) {
				this.jScrollPanelDatosBodega.setVisible(true);
			}
			
			if(this.jPanelPaginacionBodega!=null) {
				this.jPanelPaginacionBodega.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.bodegaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasBodega!=null) {
					this.jTabbedPaneBusquedasBodega.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.bodegaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasBodega!=null) {
				this.jTabbedPaneBusquedasBodega.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesBodega!=null) {
				this.jPanelParametrosReportesBodega.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaGrupoBodega(Boolean isParaGrupoBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaGrupoBodegaNegation=!isParaGrupoBodega;

			this.isVisibilidadBusquedaPorCodigo=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaGrupoBodegaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaGrupoBodega;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCalidadProducto(Boolean isParaCalidadProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCalidadProductoNegation=!isParaCalidadProducto;

			this.isVisibilidadBusquedaPorCodigo=isParaCalidadProductoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCalidadProductoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCalidadProductoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCalidadProducto;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCalidadProductoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadBusquedaPorCodigo=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaPaisNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCiudad(Boolean isParaCiudad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCiudadNegation=!isParaCiudad;

			this.isVisibilidadBusquedaPorCodigo=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCiudadNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadBusquedaPorCodigo=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCentroCostoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaEmpleadoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventario(Boolean isParaCuentaContableInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioNegation=!isParaCuentaContableInventario;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCosto(Boolean isParaCuentaContableCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoNegation=!isParaCuentaContableCosto;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableVenta(Boolean isParaCuentaContableVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableVentaNegation=!isParaCuentaContableVenta;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDescuento(Boolean isParaCuentaContableDescuento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDescuentoNegation=!isParaCuentaContableDescuento;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDevolucion(Boolean isParaCuentaContableDevolucion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDevolucionNegation=!isParaCuentaContableDevolucion;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDebito(Boolean isParaCuentaContableDebito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDebitoNegation=!isParaCuentaContableDebito;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCredito(Boolean isParaCuentaContableCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoNegation=!isParaCuentaContableCredito;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableBonifica(Boolean isParaCuentaContableBonifica){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableBonificaNegation=!isParaCuentaContableBonifica;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableBonificaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableProduccion(Boolean isParaCuentaContableProduccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableProduccionNegation=!isParaCuentaContableProduccion;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableProduccionNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCostoBonifica(Boolean isParaCuentaContableCostoBonifica){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoBonificaNegation=!isParaCuentaContableCostoBonifica;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorCodigoBodega);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorNombreBodega);}

			this.isVisibilidadBusquedaPorResponsableNombre=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadBusquedaPorResponsableNombre) {this.jTabbedPaneBusquedasBodega.remove(jPanelBusquedaPorResponsableNombreBodega);}

			this.isVisibilidadFK_IdCalidadProducto=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdCalidadProducto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCalidadProductoBodega);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdCentroCostoBodega);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdEmpleadoBodega);}

			this.isVisibilidadFK_IdGrupoBodega=isParaCuentaContableCostoBonificaNegation;
			if(!this.isVisibilidadFK_IdGrupoBodega) {this.jTabbedPaneBusquedasBodega.remove(jPanelFK_IdGrupoBodegaBodega);}
		}
		
	}
	
	
	
	

	public String registrarSesionBodegaParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(BodegaConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//centrocostoSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(BodegaConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//empleadoSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableInventarios() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontableinventarioSessionBean==null) {
				cuentacontableinventarioSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableinventarioSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableinventarioSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableinventarioSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableinventarioSessionBean.getisPaginaPopup();
			cuentacontableinventarioSessionBean.setisPaginaPopup(false);
			cuentacontableinventarioSessionBean.setEstaModoBusqueda(true);
			cuentacontableinventarioSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario(TO_REPLACE);");
			cuentacontableinventarioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableinventarioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableCostos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontablecostoSessionBean==null) {
				cuentacontablecostoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostoSessionBean.getisPaginaPopup();
			cuentacontablecostoSessionBean.setisPaginaPopup(false);
			cuentacontablecostoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo(TO_REPLACE);");
			cuentacontablecostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableVentas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontableventaSessionBean==null) {
				cuentacontableventaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableventaSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableventaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableventaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableventaSessionBean.getisPaginaPopup();
			cuentacontableventaSessionBean.setisPaginaPopup(false);
			cuentacontableventaSessionBean.setEstaModoBusqueda(true);
			cuentacontableventaSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta(TO_REPLACE);");
			cuentacontableventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableDescuentos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontabledescuentoSessionBean==null) {
				cuentacontabledescuentoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledescuentoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledescuentoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledescuentoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledescuentoSessionBean.getisPaginaPopup();
			cuentacontabledescuentoSessionBean.setisPaginaPopup(false);
			cuentacontabledescuentoSessionBean.setEstaModoBusqueda(true);
			cuentacontabledescuentoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_descuento(TO_REPLACE);");
			cuentacontabledescuentoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledescuentoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableDevolucions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontabledevolucionSessionBean==null) {
				cuentacontabledevolucionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledevolucionSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledevolucionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledevolucionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledevolucionSessionBean.getisPaginaPopup();
			cuentacontabledevolucionSessionBean.setisPaginaPopup(false);
			cuentacontabledevolucionSessionBean.setEstaModoBusqueda(true);
			cuentacontabledevolucionSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_devolucion(TO_REPLACE);");
			cuentacontabledevolucionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledevolucionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableDebitos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontabledebitoSessionBean==null) {
				cuentacontabledebitoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledebitoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledebitoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledebitoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledebitoSessionBean.getisPaginaPopup();
			cuentacontabledebitoSessionBean.setisPaginaPopup(false);
			cuentacontabledebitoSessionBean.setEstaModoBusqueda(true);
			cuentacontabledebitoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_debito(TO_REPLACE);");
			cuentacontabledebitoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledebitoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontablecreditoSessionBean==null) {
				cuentacontablecreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditoSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditoSessionBean.getisPaginaPopup();
			cuentacontablecreditoSessionBean.setisPaginaPopup(false);
			cuentacontablecreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditoSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito(TO_REPLACE);");
			cuentacontablecreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableBonificas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontablebonificaSessionBean==null) {
				cuentacontablebonificaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablebonificaSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablebonificaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablebonificaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablebonificaSessionBean.getisPaginaPopup();
			cuentacontablebonificaSessionBean.setisPaginaPopup(false);
			cuentacontablebonificaSessionBean.setEstaModoBusqueda(true);
			cuentacontablebonificaSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_bonifica(TO_REPLACE);");
			cuentacontablebonificaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablebonificaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableProduccions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontableproduccionSessionBean==null) {
				cuentacontableproduccionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableproduccionSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableproduccionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableproduccionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableproduccionSessionBean.getisPaginaPopup();
			cuentacontableproduccionSessionBean.setisPaginaPopup(false);
			cuentacontableproduccionSessionBean.setEstaModoBusqueda(true);
			cuentacontableproduccionSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_produccion(TO_REPLACE);");
			cuentacontableproduccionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableproduccionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionBodegaParaBusquedaCuentaContableCostoBonificas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(bodegaSessionBean==null) {
				bodegaSessionBean=new BodegaSessionBean();
			}

			if(cuentacontablecostobonificaSessionBean==null) {
				cuentacontablecostobonificaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostobonificaSessionBean.setsPathNavegacionActual(bodegaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostobonificaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostobonificaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostobonificaSessionBean.getisPaginaPopup();
			cuentacontablecostobonificaSessionBean.setisPaginaPopup(false);
			cuentacontablecostobonificaSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostobonificaSessionBean.setsFuncionBusquedaRapida("window.opener.bodegaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_bonifica(TO_REPLACE);");
			cuentacontablecostobonificaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostobonificaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(BodegaConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionBodega(true);
			//cuentacontableSessionBean.setlidBodegaActual(this.idBodegaActual);

			bodegaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyBodega(true);
			bodegaSessionBean.setlIdBodegaActualForeignKey(this.idBodegaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//BodegaSessionBean bodegaSessionBean=new BodegaSessionBean();
		
		if(this.bodegaSessionBean==null) {
			this.bodegaSessionBean=new BodegaSessionBean();
		}
		
		this.bodegaSessionBean.setsUltimaBusquedaBodega(this.getsAccionBusqueda());
		this.bodegaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.bodegaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			bodegaSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
			bodegaSessionBean.setnombre(this.getnombreBusquedaPorNombre());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorResponsableNombre")) {
			bodegaSessionBean.setresponsable_nombre(this.getresponsable_nombreBusquedaPorResponsableNombre());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCalidadProducto")) {
			bodegaSessionBean.setid_calidad_producto(this.getid_calidad_productoFK_IdCalidadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			bodegaSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			bodegaSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			bodegaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdGrupoBodega")) {
			bodegaSessionBean.setid_grupo_bodega(this.getid_grupo_bodegaFK_IdGrupoBodega());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//BodegaSessionBean bodegaSessionBean=new BodegaSessionBean();
		
		if(this.bodegaSessionBean==null) {
			this.bodegaSessionBean=new BodegaSessionBean();
		}
		
		if(this.bodegaSessionBean.getsUltimaBusquedaBodega()!=null&&!this.bodegaSessionBean.getsUltimaBusquedaBodega().equals("")) {
			this.setsAccionBusqueda(bodegaSessionBean.getsUltimaBusquedaBodega());
			this.setiNumeroPaginacion(bodegaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(bodegaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(bodegaSessionBean.getcodigo());
				bodegaSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
				this.setnombreBusquedaPorNombre(bodegaSessionBean.getnombre());
				bodegaSessionBean.setnombre("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorResponsableNombre")) {
				this.setresponsable_nombreBusquedaPorResponsableNombre(bodegaSessionBean.getresponsable_nombre());
				bodegaSessionBean.setresponsable_nombre("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCalidadProducto")) {
				this.setid_calidad_productoFK_IdCalidadProducto(bodegaSessionBean.getid_calidad_producto());
				bodegaSessionBean.setid_calidad_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(bodegaSessionBean.getid_centro_costo());
				bodegaSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(bodegaSessionBean.getid_empleado());
				bodegaSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(bodegaSessionBean.getid_empresa());
				bodegaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdGrupoBodega")) {
				this.setid_grupo_bodegaFK_IdGrupoBodega(bodegaSessionBean.getid_grupo_bodega());
				bodegaSessionBean.setid_grupo_bodega(-1L);
			}
		}
		
		this.bodegaSessionBean.setsUltimaBusquedaBodega("");
		this.bodegaSessionBean.setiNumeroPaginacion(BodegaConstantesFunciones.INUMEROPAGINACION);
		this.bodegaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaBodega(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioBodega() {
		this.updateBorderResaltarBusquedasFormularioBodega();
		this.updateVisibilidadBusquedasFormularioBodega();
		this.updateHabilitarBusquedasFormularioBodega();
	}
	
	public void updateBorderResaltarBusquedasFormularioBodega() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasBodega.getComponents().length>0) {
	

		if(this.bodegaConstantesFunciones.resaltarBusquedaPorCodigoBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorCodigoBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorCodigoBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarBusquedaPorNombreBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorNombreBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorNombreBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarBusquedaPorResponsableNombreBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorResponsableNombreBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorResponsableNombreBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarFK_IdCalidadProductoBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCalidadProductoBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdCalidadProductoBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarFK_IdCentroCostoBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCentroCostoBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdCentroCostoBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarFK_IdEmpleadoBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdEmpleadoBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdEmpleadoBodega);
			}
		}

		if(this.bodegaConstantesFunciones.resaltarFK_IdGrupoBodegaBodega!=null) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdGrupoBodegaBodega);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdGrupoBodegaBodega);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioBodega() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasBodega.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorCodigoBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarBusquedaPorCodigoBodega);
			if(!this.bodegaConstantesFunciones.mostrarBusquedaPorCodigoBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorNombreBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarBusquedaPorNombreBodega);
			if(!this.bodegaConstantesFunciones.mostrarBusquedaPorNombreBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorResponsableNombreBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarBusquedaPorResponsableNombreBodega);
			if(!this.bodegaConstantesFunciones.mostrarBusquedaPorResponsableNombreBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCalidadProductoBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarFK_IdCalidadProductoBodega);
			if(!this.bodegaConstantesFunciones.mostrarFK_IdCalidadProductoBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCentroCostoBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarFK_IdCentroCostoBodega);
			if(!this.bodegaConstantesFunciones.mostrarFK_IdCentroCostoBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdEmpleadoBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarFK_IdEmpleadoBodega);
			if(!this.bodegaConstantesFunciones.mostrarFK_IdEmpleadoBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdGrupoBodegaBodega);
			jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.bodegaConstantesFunciones.mostrarFK_IdGrupoBodegaBodega);
			if(!this.bodegaConstantesFunciones.mostrarFK_IdGrupoBodegaBodega && index>-1) {
				this.jTabbedPaneBusquedasBodega.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioBodega() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasBodega.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorCodigoBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarBusquedaPorCodigoBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarBusquedaPorCodigoBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorNombreBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarBusquedaPorNombreBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarBusquedaPorNombreBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorResponsableNombreBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarBusquedaPorResponsableNombreBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarBusquedaPorResponsableNombreBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCalidadProductoBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarFK_IdCalidadProductoBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarFK_IdCalidadProductoBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCentroCostoBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarFK_IdCentroCostoBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarFK_IdCentroCostoBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdEmpleadoBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarFK_IdEmpleadoBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarFK_IdEmpleadoBodega);
			}

			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdGrupoBodegaBodega);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.bodegaConstantesFunciones.activarFK_IdGrupoBodegaBodega);
				this.jTabbedPaneBusquedasBodega.setEnabledAt(index,this.bodegaConstantesFunciones.activarFK_IdGrupoBodegaBodega);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaBodega(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorCodigoBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarBusquedaPorCodigoBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorCodigoBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNombre")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorNombreBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarBusquedaPorNombreBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorNombreBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorResponsableNombre")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelBusquedaPorResponsableNombreBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarBusquedaPorResponsableNombreBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarBusquedaPorResponsableNombreBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCalidadProducto")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCalidadProductoBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarFK_IdCalidadProductoBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdCalidadProductoBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdCentroCostoBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarFK_IdCentroCostoBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdCentroCostoBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdEmpleadoBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarFK_IdEmpleadoBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdEmpleadoBodega);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdGrupoBodega")) {
			index= this.jTabbedPaneBusquedasBodega.indexOfComponent(this.jPanelFK_IdGrupoBodegaBodega);

			this.jTabbedPaneBusquedasBodega.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasBodega.getComponent(index);

			this.bodegaConstantesFunciones.setResaltarFK_IdGrupoBodegaBodega(resaltar);

			jPanel.setBorder(this.bodegaConstantesFunciones.resaltarFK_IdGrupoBodegaBodega);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarBodega.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioBodega() throws Exception {

		if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioBodega();
		this.updateVisibilidadResaltarControlesFormularioBodega();
		this.updateHabilitarResaltarControlesFormularioBodega();
		
	}
	
	public void updateBorderResaltarControlesFormularioBodega() throws Exception {
		if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.bodegaConstantesFunciones.resaltaridBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jLabelidBodega.setBorder(this.bodegaConstantesFunciones.resaltaridBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_empresaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_empresaBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_grupo_bodegaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_grupo_bodegaBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_calidad_productoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_calidad_productoBodega);}
		if(this.bodegaConstantesFunciones.resaltarcodigoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setBorder(this.bodegaConstantesFunciones.resaltarcodigoBodega);}
		if(this.bodegaConstantesFunciones.resaltarnombreBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setBorder(this.bodegaConstantesFunciones.resaltarnombreBodega);}
		if(this.bodegaConstantesFunciones.resaltarsiglasBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setBorder(this.bodegaConstantesFunciones.resaltarsiglasBodega);}
		if(this.bodegaConstantesFunciones.resaltardireccionBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setBorder(this.bodegaConstantesFunciones.resaltardireccionBodega);}
		if(this.bodegaConstantesFunciones.resaltartelefonoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setBorder(this.bodegaConstantesFunciones.resaltartelefonoBodega);}
		if(this.bodegaConstantesFunciones.resaltarrucBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setBorder(this.bodegaConstantesFunciones.resaltarrucBodega);}
		if(this.bodegaConstantesFunciones.resaltarresponsable_nombreBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setBorder(this.bodegaConstantesFunciones.resaltarresponsable_nombreBodega);}
		if(this.bodegaConstantesFunciones.resaltardescripcionBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setBorder(this.bodegaConstantesFunciones.resaltardescripcionBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_paisBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_paisBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_ciudadBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_ciudadBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_centro_costoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_centro_costoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_empleadoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_empleadoBodega);}
		if(this.bodegaConstantesFunciones.resaltares_multi_empresaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setBorderPainted(true);this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setBorder(this.bodegaConstantesFunciones.resaltares_multi_empresaBodega);}
		if(this.bodegaConstantesFunciones.resaltarcon_mostrar_stockBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setBorderPainted(true);this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setBorder(this.bodegaConstantesFunciones.resaltarcon_mostrar_stockBodega);}
		if(this.bodegaConstantesFunciones.resaltares_bodega_transitoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setBorderPainted(true);this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setBorder(this.bodegaConstantesFunciones.resaltares_bodega_transitoBodega);}
		if(this.bodegaConstantesFunciones.resaltarcon_stock_negativoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setBorderPainted(true);this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setBorder(this.bodegaConstantesFunciones.resaltarcon_stock_negativoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_inventarioBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_inventarioBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_ventaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_ventaBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_descuentoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_descuentoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_devolucionBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_devolucionBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_debitoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_debitoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_creditoBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_creditoBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_bonificaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_bonificaBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_produccionBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_produccionBodega);}
		if(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaBodega!=null && this.jInternalFrameDetalleFormBodega!=null) {this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setBorder(this.bodegaConstantesFunciones.resaltarid_cuenta_contable_costo_bonificaBodega);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioBodega() throws Exception {		
		if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
	
		//this.jInternalFrameDetalleFormBodega.jLabelidBodega.setVisible(this.bodegaConstantesFunciones.mostraridBodega);
		this.jInternalFrameDetalleFormBodega.jPanelidBodega.setVisible(this.bodegaConstantesFunciones.mostraridBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_empresaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_empresaBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_grupo_bodegaBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_grupo_bodegaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_grupo_bodegaBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_calidad_productoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_calidad_productoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_calidad_productoBodega);
		//this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setVisible(this.bodegaConstantesFunciones.mostrarcodigoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelcodigoBodega.setVisible(this.bodegaConstantesFunciones.mostrarcodigoBodega);
		//this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setVisible(this.bodegaConstantesFunciones.mostrarnombreBodega);
		this.jInternalFrameDetalleFormBodega.jPanelnombreBodega.setVisible(this.bodegaConstantesFunciones.mostrarnombreBodega);
		//this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setVisible(this.bodegaConstantesFunciones.mostrarsiglasBodega);
		this.jInternalFrameDetalleFormBodega.jPanelsiglasBodega.setVisible(this.bodegaConstantesFunciones.mostrarsiglasBodega);
		//this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setVisible(this.bodegaConstantesFunciones.mostrardireccionBodega);
		this.jInternalFrameDetalleFormBodega.jPaneldireccionBodega.setVisible(this.bodegaConstantesFunciones.mostrardireccionBodega);
		//this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setVisible(this.bodegaConstantesFunciones.mostrartelefonoBodega);
		this.jInternalFrameDetalleFormBodega.jPaneltelefonoBodega.setVisible(this.bodegaConstantesFunciones.mostrartelefonoBodega);
		//this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setVisible(this.bodegaConstantesFunciones.mostrarrucBodega);
		this.jInternalFrameDetalleFormBodega.jPanelrucBodega.setVisible(this.bodegaConstantesFunciones.mostrarrucBodega);
		//this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setVisible(this.bodegaConstantesFunciones.mostrarresponsable_nombreBodega);
		this.jInternalFrameDetalleFormBodega.jPanelresponsable_nombreBodega.setVisible(this.bodegaConstantesFunciones.mostrarresponsable_nombreBodega);
		//this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setVisible(this.bodegaConstantesFunciones.mostrardescripcionBodega);
		this.jInternalFrameDetalleFormBodega.jPaneldescripcionBodega.setVisible(this.bodegaConstantesFunciones.mostrardescripcionBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_paisBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_paisBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_paisBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_ciudadBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_ciudadBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_ciudadBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_centro_costoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_centro_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_centro_costoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_centro_costoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_empleadoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_empleadoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_empleadoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_empleadoBodega);
		//this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setVisible(this.bodegaConstantesFunciones.mostrares_multi_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jPaneles_multi_empresaBodega.setVisible(this.bodegaConstantesFunciones.mostrares_multi_empresaBodega);
		//this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setVisible(this.bodegaConstantesFunciones.mostrarcon_mostrar_stockBodega);
		this.jInternalFrameDetalleFormBodega.jPanelcon_mostrar_stockBodega.setVisible(this.bodegaConstantesFunciones.mostrarcon_mostrar_stockBodega);
		//this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setVisible(this.bodegaConstantesFunciones.mostrares_bodega_transitoBodega);
		this.jInternalFrameDetalleFormBodega.jPaneles_bodega_transitoBodega.setVisible(this.bodegaConstantesFunciones.mostrares_bodega_transitoBodega);
		//this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setVisible(this.bodegaConstantesFunciones.mostrarcon_stock_negativoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelcon_stock_negativoBodega.setVisible(this.bodegaConstantesFunciones.mostrarcon_stock_negativoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_inventarioBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_inventarioBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_inventarioBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_inventarioBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_ventaBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_ventaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_ventaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_ventaBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_descuentoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_descuentoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_descuentoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_descuentoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_devolucionBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_devolucionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_devolucionBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_devolucionBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_debitoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_debitoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_debitoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_debitoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_creditoBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_creditoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_creditoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_creditoBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_bonificaBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_bonificaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_bonificaBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_produccionBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_produccionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_produccionBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_produccionBodega);
		//this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaBodega);
		this.jInternalFrameDetalleFormBodega.jPanelid_cuenta_contable_costo_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodega.setVisible(this.bodegaConstantesFunciones.mostrarid_cuenta_contable_costo_bonificaBodega);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioBodega() throws Exception {
		if(this.jInternalFrameDetalleFormBodega==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormBodega!=null) {
	
		this.jInternalFrameDetalleFormBodega.jLabelidBodega.setEnabled(this.bodegaConstantesFunciones.activaridBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_empresaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_grupo_bodegaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_grupo_bodegaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_calidad_productoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_calidad_productoBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreacodigoBodega.setEnabled(this.bodegaConstantesFunciones.activarcodigoBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreanombreBodega.setEnabled(this.bodegaConstantesFunciones.activarnombreBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldsiglasBodega.setEnabled(this.bodegaConstantesFunciones.activarsiglasBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreadireccionBodega.setEnabled(this.bodegaConstantesFunciones.activardireccionBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldtelefonoBodega.setEnabled(this.bodegaConstantesFunciones.activartelefonoBodega);
		this.jInternalFrameDetalleFormBodega.jTextFieldrucBodega.setEnabled(this.bodegaConstantesFunciones.activarrucBodega);
		this.jInternalFrameDetalleFormBodega.jTextArearesponsable_nombreBodega.setEnabled(this.bodegaConstantesFunciones.activarresponsable_nombreBodega);
		this.jInternalFrameDetalleFormBodega.jTextAreadescripcionBodega.setEnabled(this.bodegaConstantesFunciones.activardescripcionBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_paisBodega.setEnabled(this.bodegaConstantesFunciones.activarid_paisBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_ciudadBodega.setEnabled(this.bodegaConstantesFunciones.activarid_ciudadBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_centro_costoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_centro_costoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_centro_costoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_centro_costoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_empleadoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_empleadoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_empleadoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_empleadoBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxes_multi_empresaBodega.setEnabled(this.bodegaConstantesFunciones.activares_multi_empresaBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxcon_mostrar_stockBodega.setEnabled(this.bodegaConstantesFunciones.activarcon_mostrar_stockBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxes_bodega_transitoBodega.setEnabled(this.bodegaConstantesFunciones.activares_bodega_transitoBodega);
		this.jInternalFrameDetalleFormBodega.jCheckBoxcon_stock_negativoBodega.setEnabled(this.bodegaConstantesFunciones.activarcon_stock_negativoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_inventarioBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_inventarioBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_inventarioBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_inventarioBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_costoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_costoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_ventaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_ventaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_ventaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_ventaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_descuentoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_descuentoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_descuentoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_descuentoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_devolucionBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_devolucionBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_devolucionBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_devolucionBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_debitoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_debitoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_debitoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_debitoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_creditoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_creditoBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_creditoBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_creditoBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_bonificaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_bonificaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_bonificaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_bonificaBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_produccionBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_produccionBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_produccionBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_produccionBodega);
		this.jInternalFrameDetalleFormBodega.jComboBoxid_cuenta_contable_costo_bonificaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_costo_bonificaBodega);
			this.jInternalFrameDetalleFormBodega.jButtonid_cuenta_contable_costo_bonificaBodega.setEnabled(this.bodegaConstantesFunciones.activarid_cuenta_contable_costo_bonificaBodega);
		}
	}
	
		
}