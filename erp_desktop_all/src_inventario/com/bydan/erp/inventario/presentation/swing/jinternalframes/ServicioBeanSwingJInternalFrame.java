/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.ServicioConstantesFunciones;
import com.bydan.erp.inventario.util.ServicioParameterReturnGeneral;
//import com.bydan.erp.inventario.util.ServicioParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.ServicioBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ServicioBeanSwingJInternalFrame extends ServicioJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ServicioBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Servicio> servicioValidator = new ClassValidator<Servicio>(Servicio.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Servicio servicio;	
	public Servicio servicioAux;
	public Servicio servicioAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Servicio servicioTotales;
	public Long idServicioActual;
	public Long iIdNuevoServicio=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboTipoServicio="";

	public List<TipoServicio> tiposerviciosForeignKey;

	public List<TipoServicio> gettiposerviciosForeignKey() {
		return tiposerviciosForeignKey;
	}

	public void settiposerviciosForeignKey(List<TipoServicio> tiposerviciosForeignKey) {
		this.tiposerviciosForeignKey = tiposerviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoServicio tiposervicioForeignKey;

	public TipoServicio gettiposervicioForeignKey() {
		return tiposervicioForeignKey;
	}

	public void settiposervicioForeignKey(TipoServicio tiposervicioForeignKey) {
		this.tiposervicioForeignKey = tiposervicioForeignKey;
	}

	public String sFinalQueryComboEstadoServicio="";

	public List<EstadoServicio> estadoserviciosForeignKey;

	public List<EstadoServicio> getestadoserviciosForeignKey() {
		return estadoserviciosForeignKey;
	}

	public void setestadoserviciosForeignKey(List<EstadoServicio> estadoserviciosForeignKey) {
		this.estadoserviciosForeignKey = estadoserviciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoServicio estadoservicioForeignKey;

	public EstadoServicio getestadoservicioForeignKey() {
		return estadoservicioForeignKey;
	}

	public void setestadoservicioForeignKey(EstadoServicio estadoservicioForeignKey) {
		this.estadoservicioForeignKey = estadoservicioForeignKey;
	}

	public String sFinalQueryComboCuentaContableGasto="";

	public List<CuentaContable> cuentacontablegastosForeignKey;

	public List<CuentaContable> getcuentacontablegastosForeignKey() {
		return cuentacontablegastosForeignKey;
	}

	public void setcuentacontablegastosForeignKey(List<CuentaContable> cuentacontablegastosForeignKey) {
		this.cuentacontablegastosForeignKey = cuentacontablegastosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablegastoForeignKey;

	public CuentaContable getcuentacontablegastoForeignKey() {
		return cuentacontablegastoForeignKey;
	}

	public void setcuentacontablegastoForeignKey(CuentaContable cuentacontablegastoForeignKey) {
		this.cuentacontablegastoForeignKey = cuentacontablegastoForeignKey;
	}

	public String sFinalQueryComboCuentaContableFiscal="";

	public List<CuentaContable> cuentacontablefiscalsForeignKey;

	public List<CuentaContable> getcuentacontablefiscalsForeignKey() {
		return cuentacontablefiscalsForeignKey;
	}

	public void setcuentacontablefiscalsForeignKey(List<CuentaContable> cuentacontablefiscalsForeignKey) {
		this.cuentacontablefiscalsForeignKey = cuentacontablefiscalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablefiscalForeignKey;

	public CuentaContable getcuentacontablefiscalForeignKey() {
		return cuentacontablefiscalForeignKey;
	}

	public void setcuentacontablefiscalForeignKey(CuentaContable cuentacontablefiscalForeignKey) {
		this.cuentacontablefiscalForeignKey = cuentacontablefiscalForeignKey;
	}

	public String sFinalQueryComboCuentaContableFiscal2="";

	public List<CuentaContable> cuentacontablefiscal2sForeignKey;

	public List<CuentaContable> getcuentacontablefiscal2sForeignKey() {
		return cuentacontablefiscal2sForeignKey;
	}

	public void setcuentacontablefiscal2sForeignKey(List<CuentaContable> cuentacontablefiscal2sForeignKey) {
		this.cuentacontablefiscal2sForeignKey = cuentacontablefiscal2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablefiscal2ForeignKey;

	public CuentaContable getcuentacontablefiscal2ForeignKey() {
		return cuentacontablefiscal2ForeignKey;
	}

	public void setcuentacontablefiscal2ForeignKey(CuentaContable cuentacontablefiscal2ForeignKey) {
		this.cuentacontablefiscal2ForeignKey = cuentacontablefiscal2ForeignKey;
	}

	public String sFinalQueryComboCuentaContableRetencion="";

	public List<CuentaContable> cuentacontableretencionsForeignKey;

	public List<CuentaContable> getcuentacontableretencionsForeignKey() {
		return cuentacontableretencionsForeignKey;
	}

	public void setcuentacontableretencionsForeignKey(List<CuentaContable> cuentacontableretencionsForeignKey) {
		this.cuentacontableretencionsForeignKey = cuentacontableretencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableretencionForeignKey;

	public CuentaContable getcuentacontableretencionForeignKey() {
		return cuentacontableretencionForeignKey;
	}

	public void setcuentacontableretencionForeignKey(CuentaContable cuentacontableretencionForeignKey) {
		this.cuentacontableretencionForeignKey = cuentacontableretencionForeignKey;
	}

	public String sFinalQueryComboCuentaContableRetencion2="";

	public List<CuentaContable> cuentacontableretencion2sForeignKey;

	public List<CuentaContable> getcuentacontableretencion2sForeignKey() {
		return cuentacontableretencion2sForeignKey;
	}

	public void setcuentacontableretencion2sForeignKey(List<CuentaContable> cuentacontableretencion2sForeignKey) {
		this.cuentacontableretencion2sForeignKey = cuentacontableretencion2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableretencion2ForeignKey;

	public CuentaContable getcuentacontableretencion2ForeignKey() {
		return cuentacontableretencion2ForeignKey;
	}

	public void setcuentacontableretencion2ForeignKey(CuentaContable cuentacontableretencion2ForeignKey) {
		this.cuentacontableretencion2ForeignKey = cuentacontableretencion2ForeignKey;
	}

	public String sFinalQueryComboCuentaContableIva="";

	public List<CuentaContable> cuentacontableivasForeignKey;

	public List<CuentaContable> getcuentacontableivasForeignKey() {
		return cuentacontableivasForeignKey;
	}

	public void setcuentacontableivasForeignKey(List<CuentaContable> cuentacontableivasForeignKey) {
		this.cuentacontableivasForeignKey = cuentacontableivasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableivaForeignKey;

	public CuentaContable getcuentacontableivaForeignKey() {
		return cuentacontableivaForeignKey;
	}

	public void setcuentacontableivaForeignKey(CuentaContable cuentacontableivaForeignKey) {
		this.cuentacontableivaForeignKey = cuentacontableivaForeignKey;
	}

	public String sFinalQueryComboCuentaContableIva2="";

	public List<CuentaContable> cuentacontableiva2sForeignKey;

	public List<CuentaContable> getcuentacontableiva2sForeignKey() {
		return cuentacontableiva2sForeignKey;
	}

	public void setcuentacontableiva2sForeignKey(List<CuentaContable> cuentacontableiva2sForeignKey) {
		this.cuentacontableiva2sForeignKey = cuentacontableiva2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableiva2ForeignKey;

	public CuentaContable getcuentacontableiva2ForeignKey() {
		return cuentacontableiva2ForeignKey;
	}

	public void setcuentacontableiva2ForeignKey(CuentaContable cuentacontableiva2ForeignKey) {
		this.cuentacontableiva2ForeignKey = cuentacontableiva2ForeignKey;
	}

	public String sFinalQueryComboCuentaContableCredito="";

	public List<CuentaContable> cuentacontablecreditosForeignKey;

	public List<CuentaContable> getcuentacontablecreditosForeignKey() {
		return cuentacontablecreditosForeignKey;
	}

	public void setcuentacontablecreditosForeignKey(List<CuentaContable> cuentacontablecreditosForeignKey) {
		this.cuentacontablecreditosForeignKey = cuentacontablecreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoForeignKey;

	public CuentaContable getcuentacontablecreditoForeignKey() {
		return cuentacontablecreditoForeignKey;
	}

	public void setcuentacontablecreditoForeignKey(CuentaContable cuentacontablecreditoForeignKey) {
		this.cuentacontablecreditoForeignKey = cuentacontablecreditoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCuentaContableGastoActual=0L;

	public Long getidCuentaContableGastoActual() {
		return idCuentaContableGastoActual;
	}

	public void setidCuentaContableGastoActual(Long idCuentaContableGastoActual) {
		this.idCuentaContableGastoActual= idCuentaContableGastoActual;
	}
	public Long idCuentaContableFiscalActual=0L;

	public Long getidCuentaContableFiscalActual() {
		return idCuentaContableFiscalActual;
	}

	public void setidCuentaContableFiscalActual(Long idCuentaContableFiscalActual) {
		this.idCuentaContableFiscalActual= idCuentaContableFiscalActual;
	}
	public Long idCuentaContableFiscal2Actual=0L;

	public Long getidCuentaContableFiscal2Actual() {
		return idCuentaContableFiscal2Actual;
	}

	public void setidCuentaContableFiscal2Actual(Long idCuentaContableFiscal2Actual) {
		this.idCuentaContableFiscal2Actual= idCuentaContableFiscal2Actual;
	}
	public Long idCuentaContableRetencionActual=0L;

	public Long getidCuentaContableRetencionActual() {
		return idCuentaContableRetencionActual;
	}

	public void setidCuentaContableRetencionActual(Long idCuentaContableRetencionActual) {
		this.idCuentaContableRetencionActual= idCuentaContableRetencionActual;
	}
	public Long idCuentaContableRetencion2Actual=0L;

	public Long getidCuentaContableRetencion2Actual() {
		return idCuentaContableRetencion2Actual;
	}

	public void setidCuentaContableRetencion2Actual(Long idCuentaContableRetencion2Actual) {
		this.idCuentaContableRetencion2Actual= idCuentaContableRetencion2Actual;
	}
	public Long idCuentaContableIvaActual=0L;

	public Long getidCuentaContableIvaActual() {
		return idCuentaContableIvaActual;
	}

	public void setidCuentaContableIvaActual(Long idCuentaContableIvaActual) {
		this.idCuentaContableIvaActual= idCuentaContableIvaActual;
	}
	public Long idCuentaContableIva2Actual=0L;

	public Long getidCuentaContableIva2Actual() {
		return idCuentaContableIva2Actual;
	}

	public void setidCuentaContableIva2Actual(Long idCuentaContableIva2Actual) {
		this.idCuentaContableIva2Actual= idCuentaContableIva2Actual;
	}
	public Long idCuentaContableCreditoActual=0L;

	public Long getidCuentaContableCreditoActual() {
		return idCuentaContableCreditoActual;
	}

	public void setidCuentaContableCreditoActual(Long idCuentaContableCreditoActual) {
		this.idCuentaContableCreditoActual= idCuentaContableCreditoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoServicio;
	public Boolean isPermisoNuevoServicio;
	public Boolean isPermisoActualizarServicio;
	public Boolean isPermisoActualizarOriginalServicio;
	public Boolean isPermisoEliminarServicio;
	public Boolean isPermisoGuardarCambiosServicio;
	public Boolean isPermisoConsultaServicio;
	public Boolean isPermisoBusquedaServicio;
	public Boolean isPermisoReporteServicio;
	public Boolean isPermisoPaginacionMedioServicio;
	public Boolean isPermisoPaginacionAltoServicio;
	public Boolean isPermisoPaginacionTodoServicio;
	public Boolean isPermisoCopiarServicio;
	public Boolean isPermisoVerFormServicio;
	public Boolean isPermisoDuplicarServicio;
	public Boolean isPermisoOrdenServicio;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ServicioParameterReturnGeneral servicioReturnGeneral;
	public ServicioParameterReturnGeneral servicioParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoServicio=false;
	public Boolean esParaAccionDesdeFormularioServicio=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ServicioSessionBeanAdditional servicioSessionBeanAdditional=null;
	
	public ServicioSessionBeanAdditional getServicioSessionBeanAdditional() {
		return this.servicioSessionBeanAdditional;
	}
	
	public void setServicioSessionBeanAdditional(ServicioSessionBeanAdditional servicioSessionBeanAdditional) {
		try {
			this.servicioSessionBeanAdditional=servicioSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ServicioBeanSwingJInternalFrameAdditional servicioBeanSwingJInternalFrameAdditional=null;
	//public class ServicioBeanSwingJInternalFrame
	
	public ServicioBeanSwingJInternalFrameAdditional getServicioBeanSwingJInternalFrameAdditional() {
		return this.servicioBeanSwingJInternalFrameAdditional;
	}
	
	public void setServicioBeanSwingJInternalFrameAdditional(ServicioBeanSwingJInternalFrameAdditional servicioBeanSwingJInternalFrameAdditional) {
		try {
			this.servicioBeanSwingJInternalFrameAdditional=servicioBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ServicioLogic servicioLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Servicio servicioBean;
	public ServicioConstantesFunciones servicioConstantesFunciones;
	//public ServicioParameterReturnGeneral servicioReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public TipoServicioLogic tiposervicioLogic;
	public EstadoServicioLogic estadoservicioLogic;
	public CuentaContableLogic cuentacontablegastoLogic;
	public CuentaContableLogic cuentacontablefiscalLogic;
	public CuentaContableLogic cuentacontablefiscal2Logic;
	public CuentaContableLogic cuentacontableretencionLogic;
	public CuentaContableLogic cuentacontableretencion2Logic;
	public CuentaContableLogic cuentacontableivaLogic;
	public CuentaContableLogic cuentacontableiva2Logic;
	public CuentaContableLogic cuentacontablecreditoLogic;
	
	//PARAMETROS
	
	
	//public List<Servicio> servicios;	
	//public List<Servicio> serviciosEliminados;
	//public List<Servicio> serviciosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoServicio=false;
	public Boolean isVisibilidadCeldaDuplicarServicio=true;
	public Boolean isVisibilidadCeldaCopiarServicio=true;
	public Boolean isVisibilidadCeldaVerFormServicio=true;
	public Boolean isVisibilidadCeldaOrdenServicio=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesServicio=false;
	public Boolean isVisibilidadCeldaModificarServicio=false;
	public Boolean isVisibilidadCeldaActualizarServicio=false;
	public Boolean isVisibilidadCeldaEliminarServicio=false;
	public Boolean isVisibilidadCeldaCancelarServicio=false;
	public Boolean isVisibilidadCeldaGuardarServicio=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosServicio=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNombre=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableFiscal=false;
	public Boolean isVisibilidadFK_IdCuentaContableFiscal2=false;
	public Boolean isVisibilidadFK_IdCuentaContableGasto=false;
	public Boolean isVisibilidadFK_IdCuentaContableIva=false;
	public Boolean isVisibilidadFK_IdCuentaContableIva2=false;
	public Boolean isVisibilidadFK_IdCuentaContableRetencion=false;
	public Boolean isVisibilidadFK_IdCuentaContableRetencion2=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoServicio=false;
	public Boolean isVisibilidadFK_IdTipoServicio=false;
	
	public Long getiIdNuevoServicio() {
		return this.iIdNuevoServicio;
	}

	public void setiIdNuevoServicio(Long iIdNuevoServicio) {
		this.iIdNuevoServicio = iIdNuevoServicio;
	}
	
	public Long getidServicioActual() {
		return this.idServicioActual;
	}

	public void setidServicioActual(Long idServicioActual) {
		this.idServicioActual = idServicioActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Servicio getservicio() {
		return this.servicio;
	}

	public void setservicio(Servicio servicio) {
		this.servicio = servicio;
	}
	
	public Servicio getservicioAux() {
		return this.servicioAux;
	}

	public void setservicioAux(Servicio servicioAux) {
		this.servicioAux = servicioAux;
	}				
	
	public Servicio getservicioAnterior() {
		return this.servicioAnterior;
	}

	public void setservicioAnterior(Servicio servicioAnterior) {
		this.servicioAnterior = servicioAnterior;
	}	
	
	public Servicio getservicioTotales() {
		return this.servicioTotales;
	}

	public void setservicioTotales(Servicio servicioTotales) {
		this.servicioTotales = servicioTotales;
	}	
	
	public Servicio getservicioBean() {
		return this.servicioBean;
	}

	public void setservicioBean(Servicio servicioBean) {
		this.servicioBean = servicioBean;
	}	
	
	public ServicioParameterReturnGeneral getservicioReturnGeneral() {
		return this.servicioReturnGeneral;
	}

	public void setservicioReturnGeneral(ServicioParameterReturnGeneral servicioReturnGeneral) {
		this.servicioReturnGeneral = servicioReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String nombreBusquedaPorNombre="";

	public String getnombreBusquedaPorNombre() {
		return this.nombreBusquedaPorNombre;
	}

	public void setnombreBusquedaPorNombre(String nombreBusquedaPorNombre) {
		this.nombreBusquedaPorNombre = nombreBusquedaPorNombre;
	}

	public Long id_cuenta_contable_creditoFK_IdCuentaContableCredito=null;

	public Long getid_cuenta_contable_creditoFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_creditoFK_IdCuentaContableCredito(Long id_cuenta_contable_creditoFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_creditoFK_IdCuentaContableCredito = id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_fiscalFK_IdCuentaContableFiscal=-1L;

	public Long getid_cuenta_contable_fiscalFK_IdCuentaContableFiscal() {
		return this.id_cuenta_contable_fiscalFK_IdCuentaContableFiscal;
	}

	public void setid_cuenta_contable_fiscalFK_IdCuentaContableFiscal(Long id_cuenta_contable_fiscalFK_IdCuentaContableFiscal) {
		this.id_cuenta_contable_fiscalFK_IdCuentaContableFiscal = id_cuenta_contable_fiscalFK_IdCuentaContableFiscal;
	}

	public Long id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2=null;

	public Long getid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2() {
		return this.id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2;
	}

	public void setid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2(Long id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2) {
		this.id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2 = id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2;
	}

	public Long id_cuenta_contable_gastoFK_IdCuentaContableGasto=-1L;

	public Long getid_cuenta_contable_gastoFK_IdCuentaContableGasto() {
		return this.id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public void setid_cuenta_contable_gastoFK_IdCuentaContableGasto(Long id_cuenta_contable_gastoFK_IdCuentaContableGasto) {
		this.id_cuenta_contable_gastoFK_IdCuentaContableGasto = id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public Long id_cuenta_contable_ivaFK_IdCuentaContableIva=-1L;

	public Long getid_cuenta_contable_ivaFK_IdCuentaContableIva() {
		return this.id_cuenta_contable_ivaFK_IdCuentaContableIva;
	}

	public void setid_cuenta_contable_ivaFK_IdCuentaContableIva(Long id_cuenta_contable_ivaFK_IdCuentaContableIva) {
		this.id_cuenta_contable_ivaFK_IdCuentaContableIva = id_cuenta_contable_ivaFK_IdCuentaContableIva;
	}

	public Long id_cuenta_contable_iva2FK_IdCuentaContableIva2=null;

	public Long getid_cuenta_contable_iva2FK_IdCuentaContableIva2() {
		return this.id_cuenta_contable_iva2FK_IdCuentaContableIva2;
	}

	public void setid_cuenta_contable_iva2FK_IdCuentaContableIva2(Long id_cuenta_contable_iva2FK_IdCuentaContableIva2) {
		this.id_cuenta_contable_iva2FK_IdCuentaContableIva2 = id_cuenta_contable_iva2FK_IdCuentaContableIva2;
	}

	public Long id_cuenta_contable_retencionFK_IdCuentaContableRetencion=-1L;

	public Long getid_cuenta_contable_retencionFK_IdCuentaContableRetencion() {
		return this.id_cuenta_contable_retencionFK_IdCuentaContableRetencion;
	}

	public void setid_cuenta_contable_retencionFK_IdCuentaContableRetencion(Long id_cuenta_contable_retencionFK_IdCuentaContableRetencion) {
		this.id_cuenta_contable_retencionFK_IdCuentaContableRetencion = id_cuenta_contable_retencionFK_IdCuentaContableRetencion;
	}

	public Long id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2=null;

	public Long getid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2() {
		return this.id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2;
	}

	public void setid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2(Long id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2) {
		this.id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2 = id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_servicioFK_IdEstadoServicio=-1L;

	public Long getid_estado_servicioFK_IdEstadoServicio() {
		return this.id_estado_servicioFK_IdEstadoServicio;
	}

	public void setid_estado_servicioFK_IdEstadoServicio(Long id_estado_servicioFK_IdEstadoServicio) {
		this.id_estado_servicioFK_IdEstadoServicio = id_estado_servicioFK_IdEstadoServicio;
	}

	public Long id_tipo_servicioFK_IdTipoServicio=-1L;

	public Long getid_tipo_servicioFK_IdTipoServicio() {
		return this.id_tipo_servicioFK_IdTipoServicio;
	}

	public void setid_tipo_servicioFK_IdTipoServicio(Long id_tipo_servicioFK_IdTipoServicio) {
		this.id_tipo_servicioFK_IdTipoServicio = id_tipo_servicioFK_IdTipoServicio;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ServicioLogic getServicioLogic()	{		
		return servicioLogic;
	}

	public void setServicioLogic(ServicioLogic servicioLogic) {
		this.servicioLogic = servicioLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoServicio() {
		return isEsNuevoServicio;
	}

	public void setIsEsNuevoServicio(Boolean isEsNuevoServicio) {
		this.isEsNuevoServicio = isEsNuevoServicio;
	}

	public Boolean getEsParaAccionDesdeFormularioServicio() {
		return esParaAccionDesdeFormularioServicio;
	}
	
	public void setEsParaAccionDesdeFormularioServicio(Boolean esParaAccionDesdeFormularioServicio) {
		this.esParaAccionDesdeFormularioServicio = esParaAccionDesdeFormularioServicio;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(servicioSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiposerviciosForeignKey=new ArrayList<TipoServicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoServicioLogic tiposervicioLogic=new TipoServicioLogic();

			//tiposervicioLogic.getTipoServicioDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiposervicioLogic.getTipoServicioDataAccess().setIsForForeingKeyData(true);

					tiposervicioLogic.getTodosTipoServiciosWithConnection(sFinalQuery,new Pagination());

					this.tiposerviciosForeignKey=tiposervicioLogic.getTipoServicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiposervicioLogic.getEntityWithConnection(servicioSessionBean.getlidTipoServicioActual());
					this.tiposerviciosForeignKey.add(tiposervicioLogic.getTipoServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoServiciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadoserviciosForeignKey=new ArrayList<EstadoServicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoServicioLogic estadoservicioLogic=new EstadoServicioLogic();

			//estadoservicioLogic.getEstadoServicioDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoServicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadoservicioLogic.getEstadoServicioDataAccess().setIsForForeingKeyData(true);

					estadoservicioLogic.getTodosEstadoServiciosWithConnection(sFinalQuery,new Pagination());

					this.estadoserviciosForeignKey=estadoservicioLogic.getEstadoServicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoServicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadoservicioLogic.getEntityWithConnection(servicioSessionBean.getlidEstadoServicioActual());
					this.estadoserviciosForeignKey.add(estadoservicioLogic.getEstadoServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableGastosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablegastoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablegastosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableGasto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableGastoActual());
					this.cuentacontablegastosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableFiscalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablefiscalsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablefiscalLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablefiscalsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableFiscal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableFiscalActual());
					this.cuentacontablefiscalsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableFiscal2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablefiscal2sForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablefiscal2Nulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablefiscal2Logic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablefiscal2sForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablefiscal2sForeignKey.add(0, cuentacontablefiscal2Nulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableFiscal2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableFiscal2Actual());
					this.cuentacontablefiscal2sForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableretencionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableretencionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableRetencionActual());
					this.cuentacontableretencionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableRetencion2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableretencion2sForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontableretencion2Nulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableretencion2Logic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableretencion2sForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontableretencion2sForeignKey.add(0, cuentacontableretencion2Nulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableRetencion2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableRetencion2Actual());
					this.cuentacontableretencion2sForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableIvasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableivasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableivaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableivasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableIva(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableIvaActual());
					this.cuentacontableivasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableIva2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableiva2sForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontableiva2Nulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableiva2Logic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableiva2sForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontableiva2sForeignKey.add(0, cuentacontableiva2Nulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableIva2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableIva2Actual());
					this.cuentacontableiva2sForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(servicioSessionBean.getlidCuentaContableCreditoActual());
					this.cuentacontablecreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaServicio.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaServicioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaServicioGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaServicioGenerico!=null && jComboBoxid_empresaServicioGenerico.getItemCount()>0) {
					jComboBoxid_empresaServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoServicioForeignKey(Long idTipoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiposervicioTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setTipoServicio(tiposervicioTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setSelectedItem(tiposervicioTemp);
					}
				} else {
					//jComboBoxid_tipo_servicioServicio.setSelectedItem(tiposervicioTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiposervicioTemp!=null && jComboBoxid_tipo_servicioFK_IdTipoServicioServicio!=null) {
						jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.setSelectedItem(tiposervicioTemp);
					} else {
						if(jComboBoxid_tipo_servicioFK_IdTipoServicioServicio!=null) {
							//jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.setSelectedItem(tiposervicioTemp);
							if(jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.getItemCount()>0) {
								jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoServicioForeignKeyDescripcion(Long idTipoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}


			sDescripcion=TipoServicioConstantesFunciones.getTipoServicioDescripcion(tiposervicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoServicioForeignKeyGenerico(Long idTipoServicioSeleccionado,JComboBox jComboBoxid_tipo_servicioServicioGenerico)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioTemp=null;

			for(TipoServicio tiposervicioAux:tiposerviciosForeignKey) {
				if(tiposervicioAux.getId()!=null && tiposervicioAux.getId().equals(idTipoServicioSeleccionado)) {
					tiposervicioTemp=tiposervicioAux;
					break;
				}
			}

			if(tiposervicioTemp!=null) {
				jComboBoxid_tipo_servicioServicioGenerico.setSelectedItem(tiposervicioTemp);
			} else {
				if(jComboBoxid_tipo_servicioServicioGenerico!=null && jComboBoxid_tipo_servicioServicioGenerico.getItemCount()>0) {
					jComboBoxid_tipo_servicioServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoServicioForeignKey(Long idEstadoServicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoServicio  estadoservicioTemp=null;

			for(EstadoServicio estadoservicioAux:estadoserviciosForeignKey) {
				if(estadoservicioAux.getId()!=null && estadoservicioAux.getId().equals(idEstadoServicioSeleccionado)) {
					estadoservicioTemp=estadoservicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadoservicioTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setEstadoServicio(estadoservicioTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setSelectedItem(estadoservicioTemp);
					}
				} else {
					//jComboBoxid_estado_servicioServicio.setSelectedItem(estadoservicioTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoServicio") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadoservicioTemp!=null && jComboBoxid_estado_servicioFK_IdEstadoServicioServicio!=null) {
						jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.setSelectedItem(estadoservicioTemp);
					} else {
						if(jComboBoxid_estado_servicioFK_IdEstadoServicioServicio!=null) {
							//jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.setSelectedItem(estadoservicioTemp);
							if(jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.getItemCount()>0) {
								jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoServicioForeignKeyDescripcion(Long idEstadoServicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoServicio  estadoservicioTemp=null;

			for(EstadoServicio estadoservicioAux:estadoserviciosForeignKey) {
				if(estadoservicioAux.getId()!=null && estadoservicioAux.getId().equals(idEstadoServicioSeleccionado)) {
					estadoservicioTemp=estadoservicioAux;
					break;
				}
			}


			sDescripcion=EstadoServicioConstantesFunciones.getEstadoServicioDescripcion(estadoservicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoServicioForeignKeyGenerico(Long idEstadoServicioSeleccionado,JComboBox jComboBoxid_estado_servicioServicioGenerico)throws Exception
	{
		try
		{
			EstadoServicio  estadoservicioTemp=null;

			for(EstadoServicio estadoservicioAux:estadoserviciosForeignKey) {
				if(estadoservicioAux.getId()!=null && estadoservicioAux.getId().equals(idEstadoServicioSeleccionado)) {
					estadoservicioTemp=estadoservicioAux;
					break;
				}
			}

			if(estadoservicioTemp!=null) {
				jComboBoxid_estado_servicioServicioGenerico.setSelectedItem(estadoservicioTemp);
			} else {
				if(jComboBoxid_estado_servicioServicioGenerico!=null && jComboBoxid_estado_servicioServicioGenerico.getItemCount()>0) {
					jComboBoxid_estado_servicioServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableGastoForeignKey(Long idCuentaContableGastoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablegastoTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableGasto(cuentacontablegastoTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setSelectedItem(cuentacontablegastoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_gastoServicio.setSelectedItem(cuentacontablegastoTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableGastoForeignKeyDescripcion(Long idCuentaContableGastoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablegastoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableGastoForeignKeyGenerico(Long idCuentaContableGastoSeleccionado,JComboBox jComboBoxid_cuenta_contable_gastoServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(cuentacontablegastoTemp!=null) {
				jComboBoxid_cuenta_contable_gastoServicioGenerico.setSelectedItem(cuentacontablegastoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_gastoServicioGenerico!=null && jComboBoxid_cuenta_contable_gastoServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_gastoServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableFiscalForeignKey(Long idCuentaContableFiscalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefiscalTemp=null;

			for(CuentaContable cuentacontablefiscalAux:cuentacontablefiscalsForeignKey) {
				if(cuentacontablefiscalAux.getId()!=null && cuentacontablefiscalAux.getId().equals(idCuentaContableFiscalSeleccionado)) {
					cuentacontablefiscalTemp=cuentacontablefiscalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablefiscalTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableFiscal(cuentacontablefiscalTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setSelectedItem(cuentacontablefiscalTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_fiscalServicio.setSelectedItem(cuentacontablefiscalTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableFiscalForeignKeyDescripcion(Long idCuentaContableFiscalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablefiscalTemp=null;

			for(CuentaContable cuentacontablefiscalAux:cuentacontablefiscalsForeignKey) {
				if(cuentacontablefiscalAux.getId()!=null && cuentacontablefiscalAux.getId().equals(idCuentaContableFiscalSeleccionado)) {
					cuentacontablefiscalTemp=cuentacontablefiscalAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablefiscalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableFiscalForeignKeyGenerico(Long idCuentaContableFiscalSeleccionado,JComboBox jComboBoxid_cuenta_contable_fiscalServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefiscalTemp=null;

			for(CuentaContable cuentacontablefiscalAux:cuentacontablefiscalsForeignKey) {
				if(cuentacontablefiscalAux.getId()!=null && cuentacontablefiscalAux.getId().equals(idCuentaContableFiscalSeleccionado)) {
					cuentacontablefiscalTemp=cuentacontablefiscalAux;
					break;
				}
			}

			if(cuentacontablefiscalTemp!=null) {
				jComboBoxid_cuenta_contable_fiscalServicioGenerico.setSelectedItem(cuentacontablefiscalTemp);
			} else {
				if(jComboBoxid_cuenta_contable_fiscalServicioGenerico!=null && jComboBoxid_cuenta_contable_fiscalServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_fiscalServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableFiscal2ForeignKey(Long idCuentaContableFiscal2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefiscal2Temp=null;

			for(CuentaContable cuentacontablefiscal2Aux:cuentacontablefiscal2sForeignKey) {
				if(cuentacontablefiscal2Aux.getId()!=null && cuentacontablefiscal2Aux.getId().equals(idCuentaContableFiscal2Seleccionado)) {
					cuentacontablefiscal2Temp=cuentacontablefiscal2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablefiscal2Temp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableFiscal2(cuentacontablefiscal2Temp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedItem(cuentacontablefiscal2Temp);
					}
				} else {
					//jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedItem(cuentacontablefiscal2Temp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFiscal2") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablefiscal2Temp!=null && jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio!=null) {
						jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.setSelectedItem(cuentacontablefiscal2Temp);
					} else {
						if(jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio!=null) {
							//jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.setSelectedItem(cuentacontablefiscal2Temp);
							if(jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.getItemCount()>0) {
								jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableFiscal2ForeignKeyDescripcion(Long idCuentaContableFiscal2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablefiscal2Temp=null;

			for(CuentaContable cuentacontablefiscal2Aux:cuentacontablefiscal2sForeignKey) {
				if(cuentacontablefiscal2Aux.getId()!=null && cuentacontablefiscal2Aux.getId().equals(idCuentaContableFiscal2Seleccionado)) {
					cuentacontablefiscal2Temp=cuentacontablefiscal2Aux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablefiscal2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableFiscal2ForeignKeyGenerico(Long idCuentaContableFiscal2Seleccionado,JComboBox jComboBoxid_cuenta_contable_fiscal2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablefiscal2Temp=null;

			for(CuentaContable cuentacontablefiscal2Aux:cuentacontablefiscal2sForeignKey) {
				if(cuentacontablefiscal2Aux.getId()!=null && cuentacontablefiscal2Aux.getId().equals(idCuentaContableFiscal2Seleccionado)) {
					cuentacontablefiscal2Temp=cuentacontablefiscal2Aux;
					break;
				}
			}

			if(cuentacontablefiscal2Temp!=null) {
				jComboBoxid_cuenta_contable_fiscal2ServicioGenerico.setSelectedItem(cuentacontablefiscal2Temp);
			} else {
				if(jComboBoxid_cuenta_contable_fiscal2ServicioGenerico!=null && jComboBoxid_cuenta_contable_fiscal2ServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_fiscal2ServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableRetencionForeignKey(Long idCuentaContableRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableretencionTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableRetencion(cuentacontableretencionTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setSelectedItem(cuentacontableretencionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_retencionServicio.setSelectedItem(cuentacontableretencionTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableRetencionForeignKeyDescripcion(Long idCuentaContableRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableretencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableRetencionForeignKeyGenerico(Long idCuentaContableRetencionSeleccionado,JComboBox jComboBoxid_cuenta_contable_retencionServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencionTemp=null;

			for(CuentaContable cuentacontableretencionAux:cuentacontableretencionsForeignKey) {
				if(cuentacontableretencionAux.getId()!=null && cuentacontableretencionAux.getId().equals(idCuentaContableRetencionSeleccionado)) {
					cuentacontableretencionTemp=cuentacontableretencionAux;
					break;
				}
			}

			if(cuentacontableretencionTemp!=null) {
				jComboBoxid_cuenta_contable_retencionServicioGenerico.setSelectedItem(cuentacontableretencionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_retencionServicioGenerico!=null && jComboBoxid_cuenta_contable_retencionServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_retencionServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableRetencion2ForeignKey(Long idCuentaContableRetencion2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencion2Temp=null;

			for(CuentaContable cuentacontableretencion2Aux:cuentacontableretencion2sForeignKey) {
				if(cuentacontableretencion2Aux.getId()!=null && cuentacontableretencion2Aux.getId().equals(idCuentaContableRetencion2Seleccionado)) {
					cuentacontableretencion2Temp=cuentacontableretencion2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableretencion2Temp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableRetencion2(cuentacontableretencion2Temp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedItem(cuentacontableretencion2Temp);
					}
				} else {
					//jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedItem(cuentacontableretencion2Temp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableRetencion2") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableretencion2Temp!=null && jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio!=null) {
						jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.setSelectedItem(cuentacontableretencion2Temp);
					} else {
						if(jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio!=null) {
							//jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.setSelectedItem(cuentacontableretencion2Temp);
							if(jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.getItemCount()>0) {
								jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableRetencion2ForeignKeyDescripcion(Long idCuentaContableRetencion2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableretencion2Temp=null;

			for(CuentaContable cuentacontableretencion2Aux:cuentacontableretencion2sForeignKey) {
				if(cuentacontableretencion2Aux.getId()!=null && cuentacontableretencion2Aux.getId().equals(idCuentaContableRetencion2Seleccionado)) {
					cuentacontableretencion2Temp=cuentacontableretencion2Aux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableretencion2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableRetencion2ForeignKeyGenerico(Long idCuentaContableRetencion2Seleccionado,JComboBox jComboBoxid_cuenta_contable_retencion2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableretencion2Temp=null;

			for(CuentaContable cuentacontableretencion2Aux:cuentacontableretencion2sForeignKey) {
				if(cuentacontableretencion2Aux.getId()!=null && cuentacontableretencion2Aux.getId().equals(idCuentaContableRetencion2Seleccionado)) {
					cuentacontableretencion2Temp=cuentacontableretencion2Aux;
					break;
				}
			}

			if(cuentacontableretencion2Temp!=null) {
				jComboBoxid_cuenta_contable_retencion2ServicioGenerico.setSelectedItem(cuentacontableretencion2Temp);
			} else {
				if(jComboBoxid_cuenta_contable_retencion2ServicioGenerico!=null && jComboBoxid_cuenta_contable_retencion2ServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_retencion2ServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableIvaForeignKey(Long idCuentaContableIvaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivaTemp=null;

			for(CuentaContable cuentacontableivaAux:cuentacontableivasForeignKey) {
				if(cuentacontableivaAux.getId()!=null && cuentacontableivaAux.getId().equals(idCuentaContableIvaSeleccionado)) {
					cuentacontableivaTemp=cuentacontableivaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableivaTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableIva(cuentacontableivaTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setSelectedItem(cuentacontableivaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_ivaServicio.setSelectedItem(cuentacontableivaTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableIvaForeignKeyDescripcion(Long idCuentaContableIvaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableivaTemp=null;

			for(CuentaContable cuentacontableivaAux:cuentacontableivasForeignKey) {
				if(cuentacontableivaAux.getId()!=null && cuentacontableivaAux.getId().equals(idCuentaContableIvaSeleccionado)) {
					cuentacontableivaTemp=cuentacontableivaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableivaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableIvaForeignKeyGenerico(Long idCuentaContableIvaSeleccionado,JComboBox jComboBoxid_cuenta_contable_ivaServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableivaTemp=null;

			for(CuentaContable cuentacontableivaAux:cuentacontableivasForeignKey) {
				if(cuentacontableivaAux.getId()!=null && cuentacontableivaAux.getId().equals(idCuentaContableIvaSeleccionado)) {
					cuentacontableivaTemp=cuentacontableivaAux;
					break;
				}
			}

			if(cuentacontableivaTemp!=null) {
				jComboBoxid_cuenta_contable_ivaServicioGenerico.setSelectedItem(cuentacontableivaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_ivaServicioGenerico!=null && jComboBoxid_cuenta_contable_ivaServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_ivaServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableIva2ForeignKey(Long idCuentaContableIva2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableiva2Temp=null;

			for(CuentaContable cuentacontableiva2Aux:cuentacontableiva2sForeignKey) {
				if(cuentacontableiva2Aux.getId()!=null && cuentacontableiva2Aux.getId().equals(idCuentaContableIva2Seleccionado)) {
					cuentacontableiva2Temp=cuentacontableiva2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableiva2Temp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableIva2(cuentacontableiva2Temp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setSelectedItem(cuentacontableiva2Temp);
					}
				} else {
					//jComboBoxid_cuenta_contable_iva2Servicio.setSelectedItem(cuentacontableiva2Temp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableIva2") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableiva2Temp!=null && jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio!=null) {
						jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.setSelectedItem(cuentacontableiva2Temp);
					} else {
						if(jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio!=null) {
							//jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.setSelectedItem(cuentacontableiva2Temp);
							if(jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.getItemCount()>0) {
								jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableIva2ForeignKeyDescripcion(Long idCuentaContableIva2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableiva2Temp=null;

			for(CuentaContable cuentacontableiva2Aux:cuentacontableiva2sForeignKey) {
				if(cuentacontableiva2Aux.getId()!=null && cuentacontableiva2Aux.getId().equals(idCuentaContableIva2Seleccionado)) {
					cuentacontableiva2Temp=cuentacontableiva2Aux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableiva2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableIva2ForeignKeyGenerico(Long idCuentaContableIva2Seleccionado,JComboBox jComboBoxid_cuenta_contable_iva2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableiva2Temp=null;

			for(CuentaContable cuentacontableiva2Aux:cuentacontableiva2sForeignKey) {
				if(cuentacontableiva2Aux.getId()!=null && cuentacontableiva2Aux.getId().equals(idCuentaContableIva2Seleccionado)) {
					cuentacontableiva2Temp=cuentacontableiva2Aux;
					break;
				}
			}

			if(cuentacontableiva2Temp!=null) {
				jComboBoxid_cuenta_contable_iva2ServicioGenerico.setSelectedItem(cuentacontableiva2Temp);
			} else {
				if(jComboBoxid_cuenta_contable_iva2ServicioGenerico!=null && jComboBoxid_cuenta_contable_iva2ServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_iva2ServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoForeignKey(Long idCuentaContableCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoTemp!=null) {

					if(this.servicio!=null) {
						this.servicio.setCuentaContableCredito(cuentacontablecreditoTemp);
					}

					if(this.jInternalFrameDetalleFormServicio!=null) {
						this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setSelectedItem(cuentacontablecreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_creditoServicio.setSelectedItem(cuentacontablecreditoTemp);
					if(this.jInternalFrameDetalleFormServicio!=null) {
						if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.getItemCount()>0) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoForeignKeyDescripcion(Long idCuentaContableCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoForeignKeyGenerico(Long idCuentaContableCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_creditoServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(cuentacontablecreditoTemp!=null) {
				jComboBoxid_cuenta_contable_creditoServicioGenerico.setSelectedItem(cuentacontablecreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_creditoServicioGenerico!=null && jComboBoxid_cuenta_contable_creditoServicioGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_creditoServicioGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Servicio servicio,JComboBox jComboBoxid_empresaServicioGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaServicioGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaServicioGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				servicio.setid_empresa(empresaAux.getId());
				servicio.setempresa_descripcion(ServicioConstantesFunciones.getEmpresaDescripcion(empresaAux));
				servicio.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoServicioForeignKey(Servicio servicio,JComboBox jComboBoxid_tipo_servicioServicioGenerico)throws Exception
	{
		try
		{
			TipoServicio  tiposervicioAux=new TipoServicio();

			if(jComboBoxid_tipo_servicioServicioGenerico==null) {
				tiposervicioAux=(TipoServicio)this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.getSelectedItem();
			} else {
				tiposervicioAux=(TipoServicio)jComboBoxid_tipo_servicioServicioGenerico.getSelectedItem();
			}

			if(tiposervicioAux!=null && tiposervicioAux.getId()!=null) {
				servicio.setid_tipo_servicio(tiposervicioAux.getId());
				servicio.settiposervicio_descripcion(ServicioConstantesFunciones.getTipoServicioDescripcion(tiposervicioAux));
				servicio.setTipoServicio(tiposervicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoServicioForeignKey(Servicio servicio,JComboBox jComboBoxid_estado_servicioServicioGenerico)throws Exception
	{
		try
		{
			EstadoServicio  estadoservicioAux=new EstadoServicio();

			if(jComboBoxid_estado_servicioServicioGenerico==null) {
				estadoservicioAux=(EstadoServicio)this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.getSelectedItem();
			} else {
				estadoservicioAux=(EstadoServicio)jComboBoxid_estado_servicioServicioGenerico.getSelectedItem();
			}

			if(estadoservicioAux!=null && estadoservicioAux.getId()!=null) {
				servicio.setid_estado_servicio(estadoservicioAux.getId());
				servicio.setestadoservicio_descripcion(ServicioConstantesFunciones.getEstadoServicioDescripcion(estadoservicioAux));
				servicio.setEstadoServicio(estadoservicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableGastoForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_gastoServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_gastoServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_gastoServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				servicio.setid_cuenta_contable_gasto(cuentacontableAux.getId());
				servicio.setcuentacontablegasto_descripcion(ServicioConstantesFunciones.getCuentaContableGastoDescripcion(cuentacontableAux));
				servicio.setCuentaContableGasto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableFiscalForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_fiscalServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_fiscalServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_fiscalServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				servicio.setid_cuenta_contable_fiscal(cuentacontableAux.getId());
				servicio.setcuentacontablefiscal_descripcion(ServicioConstantesFunciones.getCuentaContableFiscalDescripcion(cuentacontableAux));
				servicio.setCuentaContableFiscal(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableFiscal2ForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_fiscal2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_fiscal2ServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_fiscal2ServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				servicio.setid_cuenta_contable_fiscal2(cuentacontableAux.getId());
				servicio.setcuentacontablefiscal2_descripcion(ServicioConstantesFunciones.getCuentaContableFiscal2Descripcion(cuentacontableAux));
				servicio.setCuentaContableFiscal2(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableRetencionForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_retencionServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_retencionServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_retencionServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				servicio.setid_cuenta_contable_retencion(cuentacontableAux.getId());
				servicio.setcuentacontableretencion_descripcion(ServicioConstantesFunciones.getCuentaContableRetencionDescripcion(cuentacontableAux));
				servicio.setCuentaContableRetencion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableRetencion2ForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_retencion2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_retencion2ServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_retencion2ServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				servicio.setid_cuenta_contable_retencion2(cuentacontableAux.getId());
				servicio.setcuentacontableretencion2_descripcion(ServicioConstantesFunciones.getCuentaContableRetencion2Descripcion(cuentacontableAux));
				servicio.setCuentaContableRetencion2(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableIvaForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_ivaServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_ivaServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_ivaServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				servicio.setid_cuenta_contable_iva(cuentacontableAux.getId());
				servicio.setcuentacontableiva_descripcion(ServicioConstantesFunciones.getCuentaContableIvaDescripcion(cuentacontableAux));
				servicio.setCuentaContableIva(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableIva2ForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_iva2ServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_iva2ServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_iva2ServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				servicio.setid_cuenta_contable_iva2(cuentacontableAux.getId());
				servicio.setcuentacontableiva2_descripcion(ServicioConstantesFunciones.getCuentaContableIva2Descripcion(cuentacontableAux));
				servicio.setCuentaContableIva2(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoForeignKey(Servicio servicio,JComboBox jComboBoxid_cuenta_contable_creditoServicioGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_creditoServicioGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_creditoServicioGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				servicio.setid_cuenta_contable_credito(cuentacontableAux.getId());
				servicio.setcuentacontablecredito_descripcion(ServicioConstantesFunciones.getCuentaContableCreditoDescripcion(cuentacontableAux));
				servicio.setCuentaContableCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoServicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.removeAllItems();

							for(TipoServicio tiposervicio:this.tiposerviciosForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.addItem(tiposervicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.removeAllItems();

							for(TipoServicio tiposervicio:this.tiposerviciosForeignKey) {
								this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.addItem(tiposervicio);
							}
						}

						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoServiciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoServicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.removeAllItems();

							for(EstadoServicio estadoservicio:this.estadoserviciosForeignKey) {
								if(estadoservicio.getes_defecto()) {
									this.servicioBean.setid_estado_servicio(estadoservicio.getId());
								}

								this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.addItem(estadoservicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoServicio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.removeAllItems();

							for(EstadoServicio estadoservicio:this.estadoserviciosForeignKey) {
								this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.addItem(estadoservicio);
							}
						}

						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableGastosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.removeAllItems();

							for(CuentaContable cuentacontablegasto:this.cuentacontablegastosForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.addItem(cuentacontablegasto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableFiscalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.removeAllItems();

							for(CuentaContable cuentacontablefiscal:this.cuentacontablefiscalsForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.addItem(cuentacontablefiscal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableFiscal2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.removeAllItems();

							for(CuentaContable cuentacontablefiscal2:this.cuentacontablefiscal2sForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.addItem(cuentacontablefiscal2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableFiscal2") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.removeAllItems();

							for(CuentaContable cuentacontablefiscal2:this.cuentacontablefiscal2sForeignKey) {
								this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.addItem(cuentacontablefiscal2);
							}
						}

						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.removeAllItems();

							for(CuentaContable cuentacontableretencion:this.cuentacontableretencionsForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.addItem(cuentacontableretencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableRetencion2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.removeAllItems();

							for(CuentaContable cuentacontableretencion2:this.cuentacontableretencion2sForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.addItem(cuentacontableretencion2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableRetencion2") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.removeAllItems();

							for(CuentaContable cuentacontableretencion2:this.cuentacontableretencion2sForeignKey) {
								this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.addItem(cuentacontableretencion2);
							}
						}

						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableIvasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.removeAllItems();

							for(CuentaContable cuentacontableiva:this.cuentacontableivasForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.addItem(cuentacontableiva);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableIva2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.removeAllItems();

							for(CuentaContable cuentacontableiva2:this.cuentacontableiva2sForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.addItem(cuentacontableiva2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableIva2") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.removeAllItems();

							for(CuentaContable cuentacontableiva2:this.cuentacontableiva2sForeignKey) {
								this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.addItem(cuentacontableiva2);
							}
						}

						if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) { 
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.addItem(cuentacontablecredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormServicio!=null) { 
					}

					if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoServicioForeignKey(TipoServicio tiposervicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setSelectedItem(tiposervicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.setSelectedItem(tiposervicio);
						} else {
							this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoServicioForeignKey(EstadoServicio estadoservicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setSelectedItem(estadoservicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.setSelectedItem(estadoservicio);
						} else {
							this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableGastoForeignKey(CuentaContable cuentacontablegasto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setSelectedItem(cuentacontablegasto);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableFiscalForeignKey(CuentaContable cuentacontablefiscal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setSelectedItem(cuentacontablefiscal);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableFiscal2ForeignKey(CuentaContable cuentacontablefiscal2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedItem(cuentacontablefiscal2);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.setSelectedItem(cuentacontablefiscal2);
						} else {
							this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableRetencionForeignKey(CuentaContable cuentacontableretencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setSelectedItem(cuentacontableretencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableRetencion2ForeignKey(CuentaContable cuentacontableretencion2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedItem(cuentacontableretencion2);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.setSelectedItem(cuentacontableretencion2);
						} else {
							this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableIvaForeignKey(CuentaContable cuentacontableiva,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setSelectedItem(cuentacontableiva);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableIva2ForeignKey(CuentaContable cuentacontableiva2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setSelectedItem(cuentacontableiva2);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.setSelectedItem(cuentacontableiva2);
						} else {
							this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoForeignKey(CuentaContable cuentacontablecredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setSelectedItem(cuentacontablecredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormServicio!=null) {
							this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesServicio() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ServicioConstantesFunciones.refrescarForeignKeysDescripcionesServicio(this.servicioLogic.getServicios());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ServicioConstantesFunciones.refrescarForeignKeysDescripcionesServicio(this.servicios);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(TipoServicio.class));
		classes.add(new Classe(EstadoServicio.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//servicioLogic.setServicios(this.servicios);
			servicioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ServicioParameterReturnGeneral getServicioParameterGeneral() {
		return this.servicioParameterGeneral;
	}
	
	public void setServicioParameterGeneral(ServicioParameterReturnGeneral servicioParameterGeneral) {
		this.servicioParameterGeneral = servicioParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoServicio() {
		return isPermisoTodoServicio;
	}

	public void setIsPermisoTodoServicio(Boolean isPermisoTodoServicio) {
		this.isPermisoTodoServicio = isPermisoTodoServicio;
	}

	public Boolean getIsPermisoNuevoServicio() {
		return isPermisoNuevoServicio;
	}

	public void setIsPermisoNuevoServicio(Boolean isPermisoNuevoServicio) {
		this.isPermisoNuevoServicio = isPermisoNuevoServicio;
	}

	public Boolean getIsPermisoActualizarServicio() {
		return isPermisoActualizarServicio;
	}

	public void setIsPermisoActualizarServicio(Boolean isPermisoActualizarServicio) {
		this.isPermisoActualizarServicio = isPermisoActualizarServicio;
	}

	public Boolean getIsPermisoEliminarServicio() {
		return isPermisoEliminarServicio;
	}

	public void setIsPermisoEliminarServicio(Boolean isPermisoEliminarServicio) {
		this.isPermisoEliminarServicio = isPermisoEliminarServicio;
	}

	public Boolean getIsPermisoGuardarCambiosServicio() {
		return isPermisoGuardarCambiosServicio;
	}

	public void setIsPermisoGuardarCambiosServicio(Boolean isPermisoGuardarCambiosServicio) {
		this.isPermisoGuardarCambiosServicio = isPermisoGuardarCambiosServicio;
	}
	
	public Boolean getIsPermisoConsultaServicio() {
		return isPermisoConsultaServicio;
	}

	public void setIsPermisoConsultaServicio(Boolean isPermisoConsultaServicio) {
		this.isPermisoConsultaServicio = isPermisoConsultaServicio;
	}

	public Boolean getIsPermisoBusquedaServicio() {
		return isPermisoBusquedaServicio;
	}

	public void setIsPermisoBusquedaServicio(Boolean isPermisoBusquedaServicio) {
		this.isPermisoBusquedaServicio = isPermisoBusquedaServicio;
	}

	public Boolean getIsPermisoReporteServicio() {
		return isPermisoReporteServicio;
	}

	public void setIsPermisoReporteServicio(Boolean isPermisoReporteServicio) {
		this.isPermisoReporteServicio = isPermisoReporteServicio;
	}
	
	public Boolean getIsPermisoPaginacionMedioServicio() {
		return isPermisoPaginacionMedioServicio;
	}

	public void setIsPermisoPaginacionMedioServicio(Boolean isPermisoPaginacionMedioServicio) {
		this.isPermisoPaginacionMedioServicio = isPermisoPaginacionMedioServicio;
	}
	
	public Boolean getIsPermisoPaginacionTodoServicio() {
		return isPermisoPaginacionTodoServicio;
	}

	public void setIsPermisoPaginacionTodoServicio(Boolean isPermisoPaginacionTodoServicio) {
		this.isPermisoPaginacionTodoServicio = isPermisoPaginacionTodoServicio;
	}
	
	public Boolean getIsPermisoPaginacionAltoServicio() {
		return isPermisoPaginacionAltoServicio;
	}

	public void setIsPermisoPaginacionAltoServicio(Boolean isPermisoPaginacionAltoServicio) {
		this.isPermisoPaginacionAltoServicio = isPermisoPaginacionAltoServicio;
	}
	
	public Boolean getIsPermisoCopiarServicio() {
		return isPermisoCopiarServicio;
	}

	public void setIsPermisoCopiarServicio(Boolean isPermisoCopiarServicio) {
		this.isPermisoCopiarServicio = isPermisoCopiarServicio;
	}
	
	public Boolean getIsPermisoVerFormServicio() {
		return isPermisoVerFormServicio;
	}

	public void setIsPermisoVerFormServicio(Boolean isPermisoVerFormServicio) {
		this.isPermisoVerFormServicio = isPermisoVerFormServicio;
	}
	
	public Boolean getIsPermisoDuplicarServicio() {
		return isPermisoDuplicarServicio;
	}

	public void setIsPermisoDuplicarServicio(Boolean isPermisoDuplicarServicio) {
		this.isPermisoDuplicarServicio = isPermisoDuplicarServicio;
	}
	
	public Boolean getIsPermisoOrdenServicio() {
		return isPermisoOrdenServicio;
	}

	public void setIsPermisoOrdenServicio(Boolean isPermisoOrdenServicio) {
		this.isPermisoOrdenServicio = isPermisoOrdenServicio;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoServicio() {
		return isVisibilidadCeldaNuevoServicio;
	}

	public void setIsVisibilidadCeldaNuevoServicio(Boolean isVisibilidadCeldaNuevoServicio) {
		this.isVisibilidadCeldaNuevoServicio = isVisibilidadCeldaNuevoServicio;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarServicio() {
		return isVisibilidadCeldaDuplicarServicio;
	}

	public void setIsVisibilidadCeldaDuplicarServicio(Boolean isVisibilidadCeldaDuplicarServicio) {
		this.isVisibilidadCeldaDuplicarServicio = isVisibilidadCeldaDuplicarServicio;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarServicio() {
		return isVisibilidadCeldaCopiarServicio;
	}

	public void setIsVisibilidadCeldaCopiarServicio(Boolean isVisibilidadCeldaCopiarServicio) {
		this.isVisibilidadCeldaCopiarServicio = isVisibilidadCeldaCopiarServicio;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormServicio() {
		return isVisibilidadCeldaVerFormServicio;
	}

	public void setIsVisibilidadCeldaVerFormServicio(Boolean isVisibilidadCeldaVerFormServicio) {
		this.isVisibilidadCeldaVerFormServicio = isVisibilidadCeldaVerFormServicio;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenServicio() {
		return isVisibilidadCeldaOrdenServicio;
	}

	public void setIsVisibilidadCeldaOrdenServicio(Boolean isVisibilidadCeldaOrdenServicio) {
		this.isVisibilidadCeldaOrdenServicio = isVisibilidadCeldaOrdenServicio;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesServicio() {
		return isVisibilidadCeldaNuevoRelacionesServicio;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesServicio(Boolean isVisibilidadCeldaNuevoRelacionesServicio) {
		this.isVisibilidadCeldaNuevoRelacionesServicio = isVisibilidadCeldaNuevoRelacionesServicio;
	}
	
	public Boolean getIsVisibilidadCeldaModificarServicio() {
		return isVisibilidadCeldaModificarServicio;
	}

	public void setIsVisibilidadCeldaModificarServicio(Boolean isVisibilidadCeldaModificarServicio) {
		this.isVisibilidadCeldaModificarServicio = isVisibilidadCeldaModificarServicio;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarServicio() {
		return isVisibilidadCeldaActualizarServicio;
	}

	public void setIsVisibilidadCeldaActualizarServicio(Boolean isVisibilidadCeldaActualizarServicio) {
		this.isVisibilidadCeldaActualizarServicio = isVisibilidadCeldaActualizarServicio;
	}

	public Boolean getIsVisibilidadCeldaEliminarServicio() {
		return isVisibilidadCeldaEliminarServicio;
	}

	public void setIsVisibilidadCeldaEliminarServicio(Boolean isVisibilidadCeldaEliminarServicio) {
		this.isVisibilidadCeldaEliminarServicio = isVisibilidadCeldaEliminarServicio;
	}

	public Boolean getIsVisibilidadCeldaCancelarServicio() {
		return isVisibilidadCeldaCancelarServicio;
	}

	public void setIsVisibilidadCeldaCancelarServicio(Boolean isVisibilidadCeldaCancelarServicio) {
		this.isVisibilidadCeldaCancelarServicio = isVisibilidadCeldaCancelarServicio;
	}

	public Boolean getIsVisibilidadCeldaGuardarServicio() {
		return isVisibilidadCeldaGuardarServicio;
	}

	public void setIsVisibilidadCeldaGuardarServicio(Boolean isVisibilidadCeldaGuardarServicio) {
		this.isVisibilidadCeldaGuardarServicio = isVisibilidadCeldaGuardarServicio;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosServicio() {
		return isVisibilidadCeldaGuardarCambiosServicio;
	}

	public void setIsVisibilidadCeldaGuardarCambiosServicio(Boolean isVisibilidadCeldaGuardarCambiosServicio) {
		this.isVisibilidadCeldaGuardarCambiosServicio = isVisibilidadCeldaGuardarCambiosServicio;
	}
		
	public ServicioSessionBean getservicioSessionBean() {
		return this.servicioSessionBean;
	}
	
	public void setservicioSessionBean(ServicioSessionBean servicioSessionBean) {
		this.servicioSessionBean=servicioSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNombre() {
		return this.isVisibilidadBusquedaPorNombre;
	}

	public void setisVisibilidadBusquedaPorNombre(Boolean isVisibilidadBusquedaPorNombre) {
		this.isVisibilidadBusquedaPorNombre=isVisibilidadBusquedaPorNombre;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableFiscal() {
		return this.isVisibilidadFK_IdCuentaContableFiscal;
	}

	public void setisVisibilidadFK_IdCuentaContableFiscal(Boolean isVisibilidadFK_IdCuentaContableFiscal) {
		this.isVisibilidadFK_IdCuentaContableFiscal=isVisibilidadFK_IdCuentaContableFiscal;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableFiscal2() {
		return this.isVisibilidadFK_IdCuentaContableFiscal2;
	}

	public void setisVisibilidadFK_IdCuentaContableFiscal2(Boolean isVisibilidadFK_IdCuentaContableFiscal2) {
		this.isVisibilidadFK_IdCuentaContableFiscal2=isVisibilidadFK_IdCuentaContableFiscal2;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableGasto() {
		return this.isVisibilidadFK_IdCuentaContableGasto;
	}

	public void setisVisibilidadFK_IdCuentaContableGasto(Boolean isVisibilidadFK_IdCuentaContableGasto) {
		this.isVisibilidadFK_IdCuentaContableGasto=isVisibilidadFK_IdCuentaContableGasto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableIva() {
		return this.isVisibilidadFK_IdCuentaContableIva;
	}

	public void setisVisibilidadFK_IdCuentaContableIva(Boolean isVisibilidadFK_IdCuentaContableIva) {
		this.isVisibilidadFK_IdCuentaContableIva=isVisibilidadFK_IdCuentaContableIva;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableIva2() {
		return this.isVisibilidadFK_IdCuentaContableIva2;
	}

	public void setisVisibilidadFK_IdCuentaContableIva2(Boolean isVisibilidadFK_IdCuentaContableIva2) {
		this.isVisibilidadFK_IdCuentaContableIva2=isVisibilidadFK_IdCuentaContableIva2;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableRetencion() {
		return this.isVisibilidadFK_IdCuentaContableRetencion;
	}

	public void setisVisibilidadFK_IdCuentaContableRetencion(Boolean isVisibilidadFK_IdCuentaContableRetencion) {
		this.isVisibilidadFK_IdCuentaContableRetencion=isVisibilidadFK_IdCuentaContableRetencion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableRetencion2() {
		return this.isVisibilidadFK_IdCuentaContableRetencion2;
	}

	public void setisVisibilidadFK_IdCuentaContableRetencion2(Boolean isVisibilidadFK_IdCuentaContableRetencion2) {
		this.isVisibilidadFK_IdCuentaContableRetencion2=isVisibilidadFK_IdCuentaContableRetencion2;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoServicio() {
		return this.isVisibilidadFK_IdEstadoServicio;
	}

	public void setisVisibilidadFK_IdEstadoServicio(Boolean isVisibilidadFK_IdEstadoServicio) {
		this.isVisibilidadFK_IdEstadoServicio=isVisibilidadFK_IdEstadoServicio;
	}

	public Boolean getisVisibilidadFK_IdTipoServicio() {
		return this.isVisibilidadFK_IdTipoServicio;
	}

	public void setisVisibilidadFK_IdTipoServicio(Boolean isVisibilidadFK_IdTipoServicio) {
		this.isVisibilidadFK_IdTipoServicio=isVisibilidadFK_IdTipoServicio;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysServicio(Servicio servicio)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(servicio,null);
				this.setActualParaGuardarTipoServicioForeignKey(servicio,null);
				this.setActualParaGuardarEstadoServicioForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableGastoForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableFiscalForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableFiscal2ForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableRetencionForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableRetencion2ForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableIvaForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableIva2ForeignKey(servicio,null);
				this.setActualParaGuardarCuentaContableCreditoForeignKey(servicio,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Servicio servicio,Servicio servicioAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalServicio(servicio);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		servicioAux.setId(servicio.getId());
		servicioAux.setVersionRow(servicio.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessServicio();
		
			int intSelectedRow = this.jTableDatosServicio.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = servicioValidator.getInvalidValues(this.servicio);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			servicioLogic.setDatosCliente(datosCliente);
			servicioLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				servicioAux=new  Servicio();
				
				servicioAux.setIsNew(true);
				servicioAux.setIsChanged(true);
				
				servicioAux.setServicioOriginal(this.servicio);
				
				servicioAux.setId(this.servicio.getId());	
				servicioAux.setVersionRow(this.servicio.getVersionRow());	
				servicioAux.setid_empresa(this.servicio.getid_empresa());	
				servicioAux.setid_tipo_servicio(this.servicio.getid_tipo_servicio());	
				servicioAux.setcodigo(this.servicio.getcodigo());	
				servicioAux.setnombre(this.servicio.getnombre());	
				servicioAux.setiva(this.servicio.getiva());	
				servicioAux.setice(this.servicio.getice());	
				servicioAux.setes_bien(this.servicio.getes_bien());	
				servicioAux.setid_estado_servicio(this.servicio.getid_estado_servicio());	
				servicioAux.setdescripcion(this.servicio.getdescripcion());	
				servicioAux.setid_cuenta_contable_gasto(this.servicio.getid_cuenta_contable_gasto());	
				servicioAux.setid_cuenta_contable_fiscal(this.servicio.getid_cuenta_contable_fiscal());	
				
				if(this.servicio.getid_cuenta_contable_fiscal2()!=null && this.servicio.getid_cuenta_contable_fiscal2()>0L) {
					servicioAux.setid_cuenta_contable_fiscal2(this.servicio.getid_cuenta_contable_fiscal2());
				} else {
					servicioAux.setid_cuenta_contable_fiscal2(null);
				}	
				servicioAux.setid_cuenta_contable_retencion(this.servicio.getid_cuenta_contable_retencion());	
				
				if(this.servicio.getid_cuenta_contable_retencion2()!=null && this.servicio.getid_cuenta_contable_retencion2()>0L) {
					servicioAux.setid_cuenta_contable_retencion2(this.servicio.getid_cuenta_contable_retencion2());
				} else {
					servicioAux.setid_cuenta_contable_retencion2(null);
				}	
				servicioAux.setid_cuenta_contable_iva(this.servicio.getid_cuenta_contable_iva());	
				
				if(this.servicio.getid_cuenta_contable_iva2()!=null && this.servicio.getid_cuenta_contable_iva2()>0L) {
					servicioAux.setid_cuenta_contable_iva2(this.servicio.getid_cuenta_contable_iva2());
				} else {
					servicioAux.setid_cuenta_contable_iva2(null);
				}	
				servicioAux.setid_cuenta_contable_credito(this.servicio.getid_cuenta_contable_credito());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.servicioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.servicioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(servicioAux,servicioLogic.getServicios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(servicioAux,servicios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.servicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.servicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.saveServicios();//WithConnection
						//servicioLogic.getSetVersionRowServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.servicio,servicioAux);
					
					this.refrescarForeignKeysDescripcionesServicio();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.servicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								servicioLogic.saveServicioRelaciones(servicioAux);//WithConnection
								//servicioLogic.getSetVersionRowServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.servicio,servicioAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.servicioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.servicioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(servicioAux,servicioLogic.getServicios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(servicioAux,servicios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.servicio,servicioAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				servicioAux=new  Servicio();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.servicioSessionBean.getEsGuardarRelacionado() 
					|| (this.servicioSessionBean.getEsGuardarRelacionado() && this.servicio.getId()>=0)) {
						
					servicioAux.setIsNew(false);
				}
				
				servicioAux.setIsDeleted(false);
			
				servicioAux.setId(this.servicio.getId());	
				servicioAux.setVersionRow(this.servicio.getVersionRow());	
				servicioAux.setid_empresa(this.servicio.getid_empresa());	
				servicioAux.setid_tipo_servicio(this.servicio.getid_tipo_servicio());	
				servicioAux.setcodigo(this.servicio.getcodigo());	
				servicioAux.setnombre(this.servicio.getnombre());	
				servicioAux.setiva(this.servicio.getiva());	
				servicioAux.setice(this.servicio.getice());	
				servicioAux.setes_bien(this.servicio.getes_bien());	
				servicioAux.setid_estado_servicio(this.servicio.getid_estado_servicio());	
				servicioAux.setdescripcion(this.servicio.getdescripcion());	
				servicioAux.setid_cuenta_contable_gasto(this.servicio.getid_cuenta_contable_gasto());	
				servicioAux.setid_cuenta_contable_fiscal(this.servicio.getid_cuenta_contable_fiscal());	
				
				if(this.servicio.getid_cuenta_contable_fiscal2()!=null && this.servicio.getid_cuenta_contable_fiscal2()>0L) {
					servicioAux.setid_cuenta_contable_fiscal2(this.servicio.getid_cuenta_contable_fiscal2());
				} else {
					servicioAux.setid_cuenta_contable_fiscal2(null);
				}	
				servicioAux.setid_cuenta_contable_retencion(this.servicio.getid_cuenta_contable_retencion());	
				
				if(this.servicio.getid_cuenta_contable_retencion2()!=null && this.servicio.getid_cuenta_contable_retencion2()>0L) {
					servicioAux.setid_cuenta_contable_retencion2(this.servicio.getid_cuenta_contable_retencion2());
				} else {
					servicioAux.setid_cuenta_contable_retencion2(null);
				}	
				servicioAux.setid_cuenta_contable_iva(this.servicio.getid_cuenta_contable_iva());	
				
				if(this.servicio.getid_cuenta_contable_iva2()!=null && this.servicio.getid_cuenta_contable_iva2()>0L) {
					servicioAux.setid_cuenta_contable_iva2(this.servicio.getid_cuenta_contable_iva2());
				} else {
					servicioAux.setid_cuenta_contable_iva2(null);
				}	
				servicioAux.setid_cuenta_contable_credito(this.servicio.getid_cuenta_contable_credito());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(servicioAux,servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(servicioAux,servicios);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.servicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.servicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.saveServicios();//WithConnection
						//servicioLogic.getSetVersionRowServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.servicio,servicioAux);
					
					this.refrescarForeignKeysDescripcionesServicio();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.servicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								servicioLogic.saveServicioRelaciones(servicioAux);//WithConnection
								//servicioLogic.getSetVersionRowServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.servicio,servicioAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.servicioSessionBean.getEstaModoGuardarRelaciones() 
									|| this.servicioSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(servicioAux,servicioLogic.getServicios());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(servicioAux,servicios);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.servicio,servicioAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				servicioAux=new  Servicio();
				
				servicioAux.setIsNew(false);
				servicioAux.setIsChanged(false);
				
				servicioAux.setIsDeleted(true);
				
				servicioAux.setId(this.servicio.getId());	
				servicioAux.setVersionRow(this.servicio.getVersionRow());	
				servicioAux.setid_empresa(this.servicio.getid_empresa());	
				servicioAux.setid_tipo_servicio(this.servicio.getid_tipo_servicio());	
				servicioAux.setcodigo(this.servicio.getcodigo());	
				servicioAux.setnombre(this.servicio.getnombre());	
				servicioAux.setiva(this.servicio.getiva());	
				servicioAux.setice(this.servicio.getice());	
				servicioAux.setes_bien(this.servicio.getes_bien());	
				servicioAux.setid_estado_servicio(this.servicio.getid_estado_servicio());	
				servicioAux.setdescripcion(this.servicio.getdescripcion());	
				servicioAux.setid_cuenta_contable_gasto(this.servicio.getid_cuenta_contable_gasto());	
				servicioAux.setid_cuenta_contable_fiscal(this.servicio.getid_cuenta_contable_fiscal());	
				
				if(this.servicio.getid_cuenta_contable_fiscal2()!=null && this.servicio.getid_cuenta_contable_fiscal2()>0L) {
					servicioAux.setid_cuenta_contable_fiscal2(this.servicio.getid_cuenta_contable_fiscal2());
				} else {
					servicioAux.setid_cuenta_contable_fiscal2(null);
				}	
				servicioAux.setid_cuenta_contable_retencion(this.servicio.getid_cuenta_contable_retencion());	
				
				if(this.servicio.getid_cuenta_contable_retencion2()!=null && this.servicio.getid_cuenta_contable_retencion2()>0L) {
					servicioAux.setid_cuenta_contable_retencion2(this.servicio.getid_cuenta_contable_retencion2());
				} else {
					servicioAux.setid_cuenta_contable_retencion2(null);
				}	
				servicioAux.setid_cuenta_contable_iva(this.servicio.getid_cuenta_contable_iva());	
				
				if(this.servicio.getid_cuenta_contable_iva2()!=null && this.servicio.getid_cuenta_contable_iva2()>0L) {
					servicioAux.setid_cuenta_contable_iva2(this.servicio.getid_cuenta_contable_iva2());
				} else {
					servicioAux.setid_cuenta_contable_iva2(null);
				}	
				servicioAux.setid_cuenta_contable_credito(this.servicio.getid_cuenta_contable_credito());	
				
				if(this.servicioSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.servicioAux.getId()>=0) {	
						this.serviciosEliminados.add(servicioAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(servicioAux,servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(servicioAux,servicios);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.servicioSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.servicioSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.saveServicios();//WithConnection
						//servicioLogic.getSetVersionRowServicios();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.servicioSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								servicioLogic.saveServicioRelaciones(servicioAux);//WithConnection
								//servicioLogic.getSetVersionRowServicios();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.servicioSessionBean.getEstaModoGuardarRelaciones() 
								|| this.servicioSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(servicioAux,servicioLogic.getServicios());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(servicioAux,servicios);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getServicios().addAll(this.serviciosEliminados);
					
					servicioLogic.saveServicios();//WithConnection
					//servicioLogic.getSetVersionRowServicios();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesServicio();
				
				this.serviciosEliminados= new ArrayList<Servicio>();		
			}
			
			if(this.servicioSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Servicio GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.servicio=servicioAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessServicio();
      	}
		
	}	
	
	public void actualizarRelaciones(Servicio servicioLocal) throws Exception {
		
		if(this.servicioSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Servicio servicioLocal) throws Exception {	
		if(this.servicioSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				servicioLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoServicioDetalleFormJInternalFrame.class)) {
				TipoServicioBeanSwingJInternalFrame tiposervicioBeanSwingJInternalFrameLocal=(TipoServicioBeanSwingJInternalFrame) ((TipoServicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiposervicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoServicio(tiposervicioBeanSwingJInternalFrameLocal.gettiposervicio(),true);
				tiposervicioBeanSwingJInternalFrameLocal.actualizarLista(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio,this.tiposerviciosForeignKey);

				tiposervicioBeanSwingJInternalFrameLocal.actualizarRelaciones(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio);

				servicioLocal.setTipoServicio(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio);

				this.addItemDefectoCombosForeignKeyTipoServicio();
				this.cargarCombosFrameTipoServiciosForeignKey("Formulario");
				this.setActualTipoServicioForeignKey(tiposervicioBeanSwingJInternalFrameLocal.tiposervicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoServicioDetalleFormJInternalFrame.class)) {
				EstadoServicioBeanSwingJInternalFrame estadoservicioBeanSwingJInternalFrameLocal=(EstadoServicioBeanSwingJInternalFrame) ((EstadoServicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadoservicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoServicio(estadoservicioBeanSwingJInternalFrameLocal.getestadoservicio(),true);
				estadoservicioBeanSwingJInternalFrameLocal.actualizarLista(estadoservicioBeanSwingJInternalFrameLocal.estadoservicio,this.estadoserviciosForeignKey);

				estadoservicioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadoservicioBeanSwingJInternalFrameLocal.estadoservicio);

				servicioLocal.setEstadoServicio(estadoservicioBeanSwingJInternalFrameLocal.estadoservicio);

				this.addItemDefectoCombosForeignKeyEstadoServicio();
				this.cargarCombosFrameEstadoServiciosForeignKey("Formulario");
				this.setActualEstadoServicioForeignKey(estadoservicioBeanSwingJInternalFrameLocal.estadoservicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablegastoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablegastoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablegastoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablegastosForeignKey);

				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableGasto(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey("Formulario");
				this.setActualCuentaContableGastoForeignKey(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablefiscalBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablefiscalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablefiscalBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablefiscalBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablefiscalBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablefiscalsForeignKey);

				cuentacontablefiscalBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablefiscalBeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableFiscal(cuentacontablefiscalBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableFiscal();
				this.cargarCombosFrameCuentaContableFiscalsForeignKey("Formulario");
				this.setActualCuentaContableFiscalForeignKey(cuentacontablefiscalBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablefiscal2BeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablefiscal2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablefiscal2BeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablefiscal2BeanSwingJInternalFrameLocal.actualizarLista(cuentacontablefiscal2BeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablefiscal2sForeignKey);

				cuentacontablefiscal2BeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablefiscal2BeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableFiscal2(cuentacontablefiscal2BeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableFiscal2();
				this.cargarCombosFrameCuentaContableFiscal2sForeignKey("Formulario");
				this.setActualCuentaContableFiscal2ForeignKey(cuentacontablefiscal2BeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableretencionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableretencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableretencionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableretencionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableretencionsForeignKey);

				cuentacontableretencionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableRetencion(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
				this.cargarCombosFrameCuentaContableRetencionsForeignKey("Formulario");
				this.setActualCuentaContableRetencionForeignKey(cuentacontableretencionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableretencion2BeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableretencion2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableretencion2BeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableretencion2BeanSwingJInternalFrameLocal.actualizarLista(cuentacontableretencion2BeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableretencion2sForeignKey);

				cuentacontableretencion2BeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableretencion2BeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableRetencion2(cuentacontableretencion2BeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableRetencion2();
				this.cargarCombosFrameCuentaContableRetencion2sForeignKey("Formulario");
				this.setActualCuentaContableRetencion2ForeignKey(cuentacontableretencion2BeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableivaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableivaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableivaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableivaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableivaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableivasForeignKey);

				cuentacontableivaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableivaBeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableIva(cuentacontableivaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableIva();
				this.cargarCombosFrameCuentaContableIvasForeignKey("Formulario");
				this.setActualCuentaContableIvaForeignKey(cuentacontableivaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableiva2BeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableiva2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableiva2BeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableiva2BeanSwingJInternalFrameLocal.actualizarLista(cuentacontableiva2BeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableiva2sForeignKey);

				cuentacontableiva2BeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableiva2BeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableIva2(cuentacontableiva2BeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableIva2();
				this.cargarCombosFrameCuentaContableIva2sForeignKey("Formulario");
				this.setActualCuentaContableIva2ForeignKey(cuentacontableiva2BeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditosForeignKey);

				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				servicioLocal.setCuentaContableCredito(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey("Formulario");
				this.setActualCuentaContableCreditoForeignKey(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarServicioActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosServicio.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = servicioValidator.getInvalidValues(this.servicio);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Servicio servicio,List<Servicio> servicios) throws Exception {
		try	{		
			ServicioConstantesFunciones.actualizarLista(servicio,servicios,this.servicioSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Servicio servicio,List<Servicio> servicios) throws Exception {
		try	{			
			ServicioConstantesFunciones.actualizarSelectedLista(servicio,servicios);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Servicio> serviciosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				serviciosLocal=this.servicioLogic.getServicios();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				serviciosLocal=this.servicios;
			}
			//ARCHITECTURE
		
			for(Servicio servicioLocal:serviciosLocal) {
				if(this.permiteMantenimiento(servicioLocal) && servicioLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ServicioConstantesFunciones.getServicioLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_empresaServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDTIPOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_tipo_servicioServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelcodigoServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelnombreServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelivaServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeliceServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.ESBIEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeles_bienServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDESTADOSERVICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_estado_servicioServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeldescripcionServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLEGASTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_gastoServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLEFISCAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_fiscalServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLEFISCAL2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_fiscal2Servicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLERETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_retencionServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLERETENCION2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_retencion2Servicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLEIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_ivaServicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLEIVA2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_iva2Servicio,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ServicioConstantesFunciones.IDCUENTACONTABLECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_creditoServicio,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_empresaServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_tipo_servicioServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelcodigoServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelnombreServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelivaServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabeliceServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabeles_bienServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_estado_servicioServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabeldescripcionServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_gastoServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_fiscalServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_fiscal2Servicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_retencionServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_retencion2Servicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_ivaServicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_iva2Servicio,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormServicio.jLabelid_cuenta_contable_creditoServicio,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoServicio--;	
		
		
		this.servicioAux=new Servicio();
		
		this.servicioAux.setId(this.iIdNuevoServicio);
		this.servicioAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.servicioLogic.getServicios().add(this.servicioAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.servicios.add(this.servicioAux);
		}
		//ARCHITECTURE
		
		this.servicio=this.servicioAux;
		
		if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioServicio(this.servicio);
			this.setVariablesObjetoActualToFormularioForeignKeyServicio(this.servicio);
		}
				
		//this.setDefaultControlesServicio();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyServicio();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyServicio();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyServicio();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualServicio(this.servicioBean,this.servicio,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ServicioConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.servicioSessionBean.getConGuardarRelaciones()) {
			classes=ServicioConstantesFunciones.getClassesRelationshipsOfServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.servicioReturnGeneral=servicioLogic.procesarEventosServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.servicioLogic.getServicios(),this.servicio,this.servicioParameterGeneral,this.isEsNuevoServicio,classes);//this.servicioLogic.getServicio()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanServicio(this.servicioReturnGeneral,this.servicioBean,false);
		
		if(this.servicioReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyServicio(this.servicioReturnGeneral.getServicio());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioServicio(this.servicioReturnGeneral.getServicio());
		}
		
		if(this.servicioReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioServicio(this.servicioReturnGeneral.getServicio(),classes);//this.servicioBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualServicio(this.servicio,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyServicio();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyServicio();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ServicioBeanSwingJInternalFrameAdditional.RecargarFormServicio(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingServicio(false);
						
			if(servicioSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicio();
			}
			
			this.actualizarVisualTableDatosServicio();
			
			this.jTableDatosServicio.setRowSelectionInterval(this.getIndiceNuevoServicio(), this.getIndiceNuevoServicio());
			
			this.seleccionarFilaTablaServicioActual();
						
			this.actualizarEstadoCeldasBotonesServicio("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesServicio(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarcodigoServicio);
		this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarnombreServicio);
		this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarivaServicio);
		this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activariceServicio);
		this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activares_bienServicio);
		this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activardescripcionServicio);	
		//
		this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_empresaServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_tipo_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_estado_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_gastoServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_fiscalServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_fiscal2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_retencionServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_retencion2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_ivaServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_iva2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setEnabled(isHabilitar && this.servicioConstantesFunciones.activarid_cuenta_contable_creditoServicio);
	};
	
	public void setDefaultControlesServicio() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoServicio(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.servicioSessionBean.setConGuardarRelaciones(true);			
			this.servicioSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.setVisible(true);
			
					
		} else {
			//this.servicioSessionBean.setConGuardarRelaciones(false);			
			this.servicioSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoServicio() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Servicio servicioAux:this.servicioLogic.getServicios()) {
				if(servicioAux.getId().equals(this.iIdNuevoServicio)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Servicio servicioAux:this.servicios) {
				if(servicioAux.getId().equals(this.iIdNuevoServicio)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualServicio(Servicio servicio,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Servicio servicioAux:this.servicioLogic.getServicios()) {
				if(servicioAux.getId().equals(servicio.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Servicio servicioAux:this.servicios) {
				if(servicioAux.getId().equals(servicio.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalServicio(Servicio servicioOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Servicio servicioAux:this.servicioLogic.getServicios()) {
				if(servicioAux.getServicioOriginal().getId().equals(servicioOriginal.getId())) {
					existe=true;
					servicioOriginal.setId(servicioAux.getId());
					servicioOriginal.setVersionRow(servicioAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Servicio servicioAux:this.servicios) {
				if(servicioAux.getServicioOriginal().getId().equals(servicioOriginal.getId())) {
					existe=true;
					servicioOriginal.setId(servicioAux.getId());
					servicioOriginal.setVersionRow(servicioAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosServicio(Boolean esParaCancelar) throws Exception {
		serviciosAux=new ArrayList<Servicio>();
		servicioAux=new Servicio();
		
		if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Servicio servicioAux:this.servicioLogic.getServicios()) {
					if(servicioAux.getId()<0) {
						serviciosAux.add(servicioAux);
					}		
				}
				this.iIdNuevoServicio=0L;
				this.servicioLogic.getServicios().removeAll(serviciosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Servicio servicioAux:this.servicios) {
					if(servicioAux.getId()<0) {
						serviciosAux.add(servicioAux);
					}		
				}
				this.iIdNuevoServicio=0L;
				this.servicios.removeAll(serviciosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoServicio 
					&& this.servicioLogic.getServicios().size()>0
					) {
					servicioAux=this.servicioLogic.getServicios().get(this.servicioLogic.getServicios().size() - 1);
				
					if(servicioAux.getId()<0) {
						this.servicioLogic.getServicios().remove(servicioAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoServicio && this.servicios.size()>0) {
					servicioAux=this.servicios.get(this.servicios.size() - 1);
				
					if(servicioAux.getId()<0) {
						this.servicios.remove(servicioAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoServicio(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(servicio.getId()<0) {
				this.servicioLogic.getServicios().remove(this.servicio);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(servicio.getId()<0) {
				this.servicios.remove(this.servicio);
			}
		}			
	}
	
	public void setEstadosInicialesServicio(List<Servicio> serviciosAux) throws Exception {
		ServicioConstantesFunciones.setEstadosInicialesServicio(serviciosAux);
	}
	
	public void setEstadosInicialesServicio(Servicio servicioAux) throws Exception {
		ServicioConstantesFunciones.setEstadosInicialesServicio(servicioAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarServicioActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarServicioActual()) {
				if(!this.isEsNuevoServicio) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoServicio=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarServicioActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Servicio ?", "MANTENIMIENTO DE Servicio", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Servicio servicio) throws Exception {
		ServicioConstantesFunciones.seleccionarAsignar(this.servicio,servicio);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarServicio=this.isPermisoActualizarOriginalServicio;
			
			
			this.seleccionarAsignar(servicio);
			
			

			idCuentaContableGastoActual=servicio.getid_cuenta_contable_gasto();
			this.seleccionarCuentaContableGastoActual();

			idCuentaContableFiscalActual=servicio.getid_cuenta_contable_fiscal();
			this.seleccionarCuentaContableFiscalActual();

			idCuentaContableFiscal2Actual=servicio.getid_cuenta_contable_fiscal2();
			this.seleccionarCuentaContableFiscal2Actual();

			idCuentaContableRetencionActual=servicio.getid_cuenta_contable_retencion();
			this.seleccionarCuentaContableRetencionActual();

			idCuentaContableRetencion2Actual=servicio.getid_cuenta_contable_retencion2();
			this.seleccionarCuentaContableRetencion2Actual();

			idCuentaContableIvaActual=servicio.getid_cuenta_contable_iva();
			this.seleccionarCuentaContableIvaActual();

			idCuentaContableIva2Actual=servicio.getid_cuenta_contable_iva2();
			this.seleccionarCuentaContableIva2Actual();

			idCuentaContableCreditoActual=servicio.getid_cuenta_contable_credito();
			this.seleccionarCuentaContableCreditoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ServicioConstantesFunciones.quitarEspaciosServicio(this.servicio,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.servicioSessionBean.setsFuncionBusquedaRapida(this.servicioSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableGastoActual() throws Exception {
		try	{
			CuentaContable cuentacontablegastoAux=new CuentaContable();

			if(this.idCuentaContableGastoActual != null && this.idCuentaContableGastoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablegastoLogic.getEntityWithConnection(this.idCuentaContableGastoActual);
					cuentacontablegastoAux= cuentacontablegastoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablegastosForeignKey.add(cuentacontablegastoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableFiscalActual() throws Exception {
		try	{
			CuentaContable cuentacontablefiscalAux=new CuentaContable();

			if(this.idCuentaContableFiscalActual != null && this.idCuentaContableFiscalActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablefiscalLogic.getEntityWithConnection(this.idCuentaContableFiscalActual);
					cuentacontablefiscalAux= cuentacontablefiscalLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablefiscalsForeignKey=new ArrayList<CuentaContable>();
				cuentacontablefiscalsForeignKey.add(cuentacontablefiscalAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableFiscal2Actual() throws Exception {
		try	{
			CuentaContable cuentacontablefiscal2Aux=new CuentaContable();

			if(this.idCuentaContableFiscal2Actual != null && this.idCuentaContableFiscal2Actual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablefiscal2Logic.getEntityWithConnection(this.idCuentaContableFiscal2Actual);
					cuentacontablefiscal2Aux= cuentacontablefiscal2Logic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablefiscal2sForeignKey=new ArrayList<CuentaContable>();
				cuentacontablefiscal2sForeignKey.add(cuentacontablefiscal2Aux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableRetencionActual() throws Exception {
		try	{
			CuentaContable cuentacontableretencionAux=new CuentaContable();

			if(this.idCuentaContableRetencionActual != null && this.idCuentaContableRetencionActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableretencionLogic.getEntityWithConnection(this.idCuentaContableRetencionActual);
					cuentacontableretencionAux= cuentacontableretencionLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableretencionsForeignKey.add(cuentacontableretencionAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableRetencion2Actual() throws Exception {
		try	{
			CuentaContable cuentacontableretencion2Aux=new CuentaContable();

			if(this.idCuentaContableRetencion2Actual != null && this.idCuentaContableRetencion2Actual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableretencion2Logic.getEntityWithConnection(this.idCuentaContableRetencion2Actual);
					cuentacontableretencion2Aux= cuentacontableretencion2Logic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableretencion2sForeignKey=new ArrayList<CuentaContable>();
				cuentacontableretencion2sForeignKey.add(cuentacontableretencion2Aux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableIvaActual() throws Exception {
		try	{
			CuentaContable cuentacontableivaAux=new CuentaContable();

			if(this.idCuentaContableIvaActual != null && this.idCuentaContableIvaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableivaLogic.getEntityWithConnection(this.idCuentaContableIvaActual);
					cuentacontableivaAux= cuentacontableivaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableivasForeignKey=new ArrayList<CuentaContable>();
				cuentacontableivasForeignKey.add(cuentacontableivaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableIva2Actual() throws Exception {
		try	{
			CuentaContable cuentacontableiva2Aux=new CuentaContable();

			if(this.idCuentaContableIva2Actual != null && this.idCuentaContableIva2Actual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableiva2Logic.getEntityWithConnection(this.idCuentaContableIva2Actual);
					cuentacontableiva2Aux= cuentacontableiva2Logic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableiva2sForeignKey=new ArrayList<CuentaContable>();
				cuentacontableiva2sForeignKey.add(cuentacontableiva2Aux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditoAux=new CuentaContable();

			if(this.idCuentaContableCreditoActual != null && this.idCuentaContableCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditoLogic.getEntityWithConnection(this.idCuentaContableCreditoActual);
					cuentacontablecreditoAux= cuentacontablecreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditosForeignKey.add(cuentacontablecreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoServicio) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosServicio(esParaCancelar);				
				this.cancelarNuevoServicio(esParaCancelar);								
			}
			
			this.servicio=new Servicio();
			
			this.inicializarServicio();
			
			this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarServicio() throws Exception {
		try {
			ServicioConstantesFunciones.inicializarServicio(this.servicio);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.servicioLogic.getServicios().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteServicios(String sAccionBusqueda,List<Servicio> serviciosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Servicio"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ServicioMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ServicioMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Servicio"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Servicioes");		
		parameters.put("busquedapor", ServicioConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceServicio=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ServicioConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ServicioConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceServicio=new JRBeanArrayDataSource(ServicioJInternalFrame.TraerServicioBeans(serviciosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceServicio);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ServicioConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ServicioConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ServicioBean.TraerServicioBeans(serviciosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoServicioActionPerformed(null);
					//this.generarExcelReporteServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesServicios(sAccionBusqueda,sTipoArchivoReporte,serviciosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<Servicio> serviciosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Servicios");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderServicio("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Servicio servicio : serviciosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ServicioConstantesFunciones.generarExcelReporteDataServicio("NORMAL",row,workbook,servicio,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderServicio(String sTipo,Row row,Workbook workbook) {
		
		ServicioConstantesFunciones.generarExcelReporteHeaderServicio(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<Servicio> serviciosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Servicios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Servicio servicio : serviciosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ServicioConstantesFunciones.getServicioDescripcion(servicio));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.gettiposervicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_ESBIEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_ESBIEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(servicio.getes_bien()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getestadoservicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontablegasto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontablefiscal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontablefiscal2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontableretencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontableretencion2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontableiva_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontableiva2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(servicio.getcuentacontablecredito_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesServicios(String sAccionBusqueda,String sTipoArchivoReporte,List<Servicio> serviciosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Servicio> serviciosRespaldo=null;
		
		classes=ServicioConstantesFunciones.getClassesRelationshipsOfServicio(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.servicioLogic.setDatosCliente(this.datosCliente);
		this.servicioLogic.setDatosDeep(this.datosDeep);
		this.servicioLogic.setIsConDeep(true);
		
		serviciosRespaldo=this.servicioLogic.getServicios();
		
		this.servicioLogic.setServicios(serviciosParaReportes);	
		this.servicioLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		serviciosParaReportes=this.servicioLogic.getServicios();
		this.servicioLogic.setServicios(serviciosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Servicios");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderServicio("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Servicio servicio : serviciosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderServicio("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ServicioConstantesFunciones.generarExcelReporteDataServicio("NORMAL",row,workbook,servicio,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ServicioConstantesFunciones.getServicioDescripcion(servicio));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoServicio.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicio.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessServicio() throws Exception {		
		this.startProcessServicio(true);
	}
	
	public void startProcessServicio(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasServicio ,this.jPanelParametrosReportesServicio, this.jScrollPanelDatosServicio,this.jPanelPaginacionServicio, this.jScrollPanelDatosEdicionServicio, this.jPanelAccionesServicio,this.jPanelAccionesFormularioServicio,this.jmenuBarServicio,this.jmenuBarDetalleServicio,this.jTtoolBarServicio,this.jTtoolBarDetalleServicio);		
		
		final JTabbedPane jTabbedPaneBusquedasServicio=this.jTabbedPaneBusquedasServicio; 
		
		final JPanel jPanelParametrosReportesServicio=this.jPanelParametrosReportesServicio;
		//final JScrollPane jScrollPanelDatosServicio=this.jScrollPanelDatosServicio;
		final JTable jTableDatosServicio=this.jTableDatosServicio;		
		final JPanel jPanelPaginacionServicio=this.jPanelPaginacionServicio;
		//final JScrollPane jScrollPanelDatosEdicionServicio=this.jScrollPanelDatosEdicionServicio;
		final JPanel jPanelAccionesServicio=this.jPanelAccionesServicio;
		
		JPanel jPanelCamposAuxiliarServicio=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarServicio=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
			jPanelCamposAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jPanelCamposServicio;
			jPanelAccionesFormularioAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jPanelAccionesFormularioServicio;
		}
		
		final JPanel jPanelCamposServicio=jPanelCamposAuxiliarServicio;
		final JPanel jPanelAccionesFormularioServicio=jPanelAccionesFormularioAuxiliarServicio;
		
		
		final JMenuBar jmenuBarServicio=this.jmenuBarServicio;
		final JToolBar jTtoolBarServicio=this.jTtoolBarServicio;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarServicio=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarServicio=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
			jmenuBarDetalleAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jmenuBarDetalleServicio;
			jTtoolBarDetalleAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jTtoolBarDetalleServicio;
		}
		
		final JMenuBar jmenuBarDetalleServicio=jmenuBarDetalleAuxiliarServicio;
		final JToolBar jTtoolBarDetalleServicio=jTtoolBarDetalleAuxiliarServicio;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasServicio;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesServicio;
			processRunnable.jTableDatos=jTableDatosServicio;
			processRunnable.jPanelCampos=jPanelCamposServicio;
			processRunnable.jPanelPaginacion=jPanelPaginacionServicio;
			processRunnable.jPanelAcciones=jPanelAccionesServicio;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioServicio;
			
			
			processRunnable.jmenuBar=jmenuBarServicio;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleServicio;
			processRunnable.jTtoolBar=jTtoolBarServicio;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleServicio;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasServicio ,jPanelParametrosReportesServicio,jTableDatosServicio, /*jScrollPanelDatosServicio,*/jPanelCamposServicio,jPanelPaginacionServicio, /*jScrollPanelDatosEdicionServicio,*/ jPanelAccionesServicio,jPanelAccionesFormularioServicio,jmenuBarServicio,jmenuBarDetalleServicio,jTtoolBarServicio,jTtoolBarDetalleServicio);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasServicio ,jPanelParametrosReportesServicio, jScrollPanelDatosServicio,jPanelPaginacionServicio, jScrollPanelDatosEdicionServicio, jPanelAccionesServicio,jPanelAccionesFormularioServicio,jmenuBarServicio,jmenuBarDetalleServicio,jTtoolBarServicio,jTtoolBarDetalleServicio);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessServicio() {// throws Exception 
		this.finishProcessServicio(true);
	}
	
	public void finishProcessServicio(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasServicio ,this.jPanelParametrosReportesServicio, this.jScrollPanelDatosServicio,this.jPanelPaginacionServicio, this.jScrollPanelDatosEdicionServicio, this.jPanelAccionesServicio,this.jPanelAccionesFormularioServicio,this.jmenuBarServicio,this.jmenuBarDetalleServicio,this.jTtoolBarServicio,this.jTtoolBarDetalleServicio);		
		
		final JTabbedPane jTabbedPaneBusquedasServicio=this.jTabbedPaneBusquedasServicio; 
		
		final JPanel jPanelParametrosReportesServicio=this.jPanelParametrosReportesServicio;
		//final JScrollPane jScrollPanelDatosServicio=this.jScrollPanelDatosServicio;
		final JTable jTableDatosServicio=this.jTableDatosServicio;		
		final JPanel jPanelPaginacionServicio=this.jPanelPaginacionServicio;
		//final JScrollPane jScrollPanelDatosEdicionServicio=this.jScrollPanelDatosEdicionServicio;
		final JPanel jPanelAccionesServicio=this.jPanelAccionesServicio;
		
		JPanel jPanelCamposAuxiliarServicio=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarServicio=new JPanel();
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
			jPanelCamposAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jPanelCamposServicio;
			jPanelAccionesFormularioAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jPanelAccionesFormularioServicio;
		}
		
		final JPanel jPanelCamposServicio=jPanelCamposAuxiliarServicio;
		final JPanel jPanelAccionesFormularioServicio=jPanelAccionesFormularioAuxiliarServicio;
		
		
		final JMenuBar jmenuBarServicio=this.jmenuBarServicio;		
		final JToolBar jTtoolBarServicio=this.jTtoolBarServicio;
				
		JMenuBar jmenuBarDetalleAuxiliarServicio=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarServicio=new JToolBar();
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
			jmenuBarDetalleAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jmenuBarDetalleServicio;
			jTtoolBarDetalleAuxiliarServicio=this.jInternalFrameDetalleFormServicio.jTtoolBarDetalleServicio;		
		}
		
		final JMenuBar jmenuBarDetalleServicio=jmenuBarDetalleAuxiliarServicio;
		final JToolBar jTtoolBarDetalleServicio=jTtoolBarDetalleAuxiliarServicio;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasServicio;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesServicio;
			processRunnable.jTableDatos=jTableDatosServicio;
			processRunnable.jPanelCampos=jPanelCamposServicio;
			processRunnable.jPanelPaginacion=jPanelPaginacionServicio;
			processRunnable.jPanelAcciones=jPanelAccionesServicio;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioServicio;
			
			
			processRunnable.jmenuBar=jmenuBarServicio;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleServicio;
			processRunnable.jTtoolBar=jTtoolBarServicio;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleServicio;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasServicio ,jPanelParametrosReportesServicio, jTableDatosServicio,/*jScrollPanelDatosServicio,*/jPanelCamposServicio,jPanelPaginacionServicio, /*jScrollPanelDatosEdicionServicio,*/ jPanelAccionesServicio,jPanelAccionesFormularioServicio,jmenuBarServicio,jmenuBarDetalleServicio,jTtoolBarServicio,jTtoolBarDetalleServicio));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesServicio(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarServicio(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuServicio(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarServicio(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarServicio,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleServicio,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuServicio(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarServicio,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleServicio,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.servicioConstantesFunciones.getsFinalQueryServicio();
		String  finalQueryPaginacionTodos=this.servicioConstantesFunciones.getsFinalQueryServicio();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ServicioConstantesFunciones.getArrayColumnasGlobalesNoServicio(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ServicioConstantesFunciones.getArrayColumnasGlobalesServicio(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ServicioConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.serviciosEliminados= new ArrayList<Servicio>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessServicio();
		
				///*ServicioSessionBean*/this.servicioSessionBean=new ServicioSessionBean();
			
			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ServicioConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ServicioConstantesFunciones.getClassesForeignKeysOfServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/servicio."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			serviciosAux= new ArrayList<Servicio>();
			
				
			servicioLogic.setDatosCliente(this.datosCliente);
			servicioLogic.setDatosDeep(this.datosDeep);
			servicioLogic.setIsConDeep(true);
			
			
			servicioLogic.getServicioDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					servicioLogic.getTodosServicios(finalQueryGlobal,pagination);
					
					//servicioLogic.getTodosServiciosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(servicioLogic.getServicios()==null|| servicioLogic.getServicios().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							serviciosAux= new ArrayList<Servicio>();
							serviciosAux.addAll(servicioLogic.getServicios());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux= new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							servicioLogic.getTodosServicios(finalQueryGlobal+"",this.pagination);												
							
							//servicioLogic.getTodosServiciosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteServicios("Todos",servicioLogic.getServicios() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							servicioLogic.setServicios(new ArrayList<Servicio>());					
							servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idServicio=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idServicio=this.idActual;
				
				} else if(this.idServicioActual!=null && this.idServicioActual!=0L) {
					idServicio=idServicioActual;
				}
				
					
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndicePorId(idServicio);
				
				this.servicios=new ArrayList<Servicio>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					servicioLogic.getEntity(idServicio);
					
					//servicioLogic.getEntityWithConnection(idServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.setServicios(new ArrayList<Servicio>());
					servicioLogic.getServicios().add(servicioLogic.getServicio());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicios=new ArrayList<Servicio>();
					this.servicios.add(servicio);
				}
				
				if(servicioLogic.getServicio()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("BusquedaPorCodigo",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("BusquedaPorCodigo",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNombre")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosBusquedaPorNombre(finalQueryGlobal,pagination,nombreBusquedaPorNombre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceBusquedaPorNombre(nombreBusquedaPorNombre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("BusquedaPorNombre",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("BusquedaPorNombre",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableFiscal2")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFiscal2(id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdCuentaContableFiscal2(finalQueryGlobal,pagination,id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFiscal2(id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFiscal2(id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdCuentaContableFiscal2(finalQueryGlobal,pagination,id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFiscal2(id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableFiscal2(id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdCuentaContableFiscal2",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdCuentaContableFiscal2",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableIva2")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableIva2(id_cuenta_contable_iva2FK_IdCuentaContableIva2);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdCuentaContableIva2(finalQueryGlobal,pagination,id_cuenta_contable_iva2FK_IdCuentaContableIva2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableIva2(id_cuenta_contable_iva2FK_IdCuentaContableIva2);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableIva2(id_cuenta_contable_iva2FK_IdCuentaContableIva2);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdCuentaContableIva2(finalQueryGlobal,pagination,id_cuenta_contable_iva2FK_IdCuentaContableIva2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableIva2(id_cuenta_contable_iva2FK_IdCuentaContableIva2);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableIva2(id_cuenta_contable_iva2FK_IdCuentaContableIva2);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdCuentaContableIva2",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdCuentaContableIva2",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableRetencion2")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion2(id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdCuentaContableRetencion2(finalQueryGlobal,pagination,id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion2(id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion2(id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdCuentaContableRetencion2(finalQueryGlobal,pagination,id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion2(id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdCuentaContableRetencion2(id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdCuentaContableRetencion2",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdCuentaContableRetencion2",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdEmpresa",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdEmpresa",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoServicio")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEstadoServicio(id_estado_servicioFK_IdEstadoServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdEstadoServicio(finalQueryGlobal,pagination,id_estado_servicioFK_IdEstadoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEstadoServicio(id_estado_servicioFK_IdEstadoServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEstadoServicio(id_estado_servicioFK_IdEstadoServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdEstadoServicio(finalQueryGlobal,pagination,id_estado_servicioFK_IdEstadoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEstadoServicio(id_estado_servicioFK_IdEstadoServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdEstadoServicio(id_estado_servicioFK_IdEstadoServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdEstadoServicio",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdEstadoServicio",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoServicio")) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					servicioLogic.getServiciosFK_IdTipoServicio(finalQueryGlobal,pagination,id_tipo_servicioFK_IdTipoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=servicioLogic.getServicios()==null||servicioLogic.getServicios().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=servicios==null|| servicios.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						serviciosAux=new ArrayList<Servicio>();
						serviciosAux.addAll(servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							serviciosAux=new ArrayList<Servicio>();
							serviciosAux.addAll(servicios);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							servicioLogic.getServiciosFK_IdTipoServicio(finalQueryGlobal,pagination,id_tipo_servicioFK_IdTipoServicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ServicioConstantesFunciones.getDetalleIndiceFK_IdTipoServicio(id_tipo_servicioFK_IdTipoServicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteServicios("FK_IdTipoServicio",servicioLogic.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteServicios("FK_IdTipoServicio",servicios);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioLogic.setServicios(new ArrayList<Servicio>());
						servicioLogic.getServicios().addAll(serviciosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicios=new ArrayList<Servicio>();
							servicios.addAll(serviciosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesServicio();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessServicio();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=servicioLogic.getServicios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=servicios.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=servicioLogic.getServicios().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=servicios.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Servicio servicio) {
		Boolean permite=true;
		
		if(this.servicio.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ServicioConstantesFunciones.getOrderByListaServicio();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ServicioConstantesFunciones.getOrderByListaServicio();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Servicio servicio:servicioLogic.getServicios()) {
				if(servicio.getsType().equals(Constantes2.S_TOTALES)) {
					servicioTotales=servicio;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Servicio servicio:this.servicios) {
				if(servicio.getsType().equals(Constantes2.S_TOTALES)) {
					servicioTotales=servicio;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.servicioAux=new Servicio();
			this.servicioAux.setsType(Constantes2.S_TOTALES);
			this.servicioAux.setIsNew(false);
			this.servicioAux.setIsChanged(false);
			this.servicioAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ServicioConstantesFunciones.TotalizarValoresFilaServicio(this.servicioLogic.getServicios(),this.servicioAux);
				
				this.servicioLogic.getServicios().add(this.servicioAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ServicioConstantesFunciones.TotalizarValoresFilaServicio(this.servicios,this.servicioAux);
				
				this.servicios.add(this.servicioAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		servicioTotales=new Servicio();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.servicioLogic.getServicios().remove(servicioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.servicios.remove(servicioTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		servicioTotales=new Servicio();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Servicio servicio:servicioLogic.getServicios()) {
				if(servicio.getsType().equals(Constantes2.S_TOTALES)) {
					servicioTotales=servicio;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ServicioConstantesFunciones.TotalizarValoresFilaServicio(this.servicioLogic.getServicios(),servicioTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Servicio servicio:this.servicios) {
				if(servicio.getsType().equals(Constantes2.S_TOTALES)) {
					servicioTotales=servicio;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ServicioConstantesFunciones.TotalizarValoresFilaServicio(this.servicios,servicioTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getServiciosBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosBusquedaPorNombre()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNombre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableFiscal()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableFiscal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableFiscal2()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableFiscal2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableGasto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableGasto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableIva()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableIva";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableIva2()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableIva2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableRetencion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdCuentaContableRetencion2()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableRetencion2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdEstadoServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getServiciosFK_IdTipoServicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoServicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getServiciosBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosBusquedaPorNombre(String sFinalQuery,String nombre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosBusquedaPorNombre(sFinalQuery,this.pagination,nombre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableFiscal(String sFinalQuery,Long id_cuenta_contable_fiscal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableFiscal(sFinalQuery,this.pagination,id_cuenta_contable_fiscal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableFiscal2(String sFinalQuery,Long id_cuenta_contable_fiscal2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableFiscal2(sFinalQuery,this.pagination,id_cuenta_contable_fiscal2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableGasto(String sFinalQuery,Long id_cuenta_contable_gasto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableGasto(sFinalQuery,this.pagination,id_cuenta_contable_gasto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableIva(String sFinalQuery,Long id_cuenta_contable_iva)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableIva(sFinalQuery,this.pagination,id_cuenta_contable_iva);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableIva2(String sFinalQuery,Long id_cuenta_contable_iva2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableIva2(sFinalQuery,this.pagination,id_cuenta_contable_iva2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableRetencion(String sFinalQuery,Long id_cuenta_contable_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableRetencion(sFinalQuery,this.pagination,id_cuenta_contable_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdCuentaContableRetencion2(String sFinalQuery,Long id_cuenta_contable_retencion2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdCuentaContableRetencion2(sFinalQuery,this.pagination,id_cuenta_contable_retencion2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdEstadoServicio(String sFinalQuery,Long id_estado_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdEstadoServicio(sFinalQuery,this.pagination,id_estado_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getServiciosFK_IdTipoServicio(String sFinalQuery,Long id_tipo_servicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLogic.getServiciosFK_IdTipoServicio(sFinalQuery,this.pagination,id_tipo_servicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosServicio() {
		this.isPermisoTodoServicio=false;
		this.isPermisoNuevoServicio=false;
		this.isPermisoActualizarServicio=false;
		this.isPermisoActualizarOriginalServicio=false;
		this.isPermisoEliminarServicio=false;
		this.isPermisoGuardarCambiosServicio=false;
		this.isPermisoConsultaServicio=false;
		this.isPermisoBusquedaServicio=false;
		this.isPermisoReporteServicio=false;		
		this.isPermisoOrdenServicio=false;		
		this.isPermisoPaginacionMedioServicio=false;		
		this.isPermisoPaginacionAltoServicio=false;
		this.isPermisoPaginacionTodoServicio=false;
		this.isPermisoCopiarServicio=false;		
		this.isPermisoVerFormServicio=false;		
		this.isPermisoDuplicarServicio=false;		
		this.isPermisoOrdenServicio=false;		
	}
	
	public void setPermisosUsuarioServicio(Boolean isPermiso) {
		this.isPermisoTodoServicio=isPermiso;
		this.isPermisoNuevoServicio=isPermiso;
		this.isPermisoActualizarServicio=isPermiso;
		this.isPermisoActualizarOriginalServicio=isPermiso;
		this.isPermisoEliminarServicio=isPermiso;
		this.isPermisoGuardarCambiosServicio=isPermiso;
		this.isPermisoConsultaServicio=isPermiso;
		this.isPermisoBusquedaServicio=isPermiso;
		this.isPermisoReporteServicio=isPermiso;
		this.isPermisoOrdenServicio=isPermiso;		
		this.isPermisoPaginacionMedioServicio=isPermiso;		
		this.isPermisoPaginacionAltoServicio=isPermiso;		
		this.isPermisoPaginacionTodoServicio=isPermiso;		
		this.isPermisoCopiarServicio=isPermiso;		
		this.isPermisoVerFormServicio=isPermiso;		
		this.isPermisoDuplicarServicio=isPermiso;
		this.isPermisoOrdenServicio=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioServicio(Boolean isPermiso) {
		//this.isPermisoTodoServicio=isPermiso;
		this.isPermisoNuevoServicio=isPermiso;
		this.isPermisoActualizarServicio=isPermiso;
		this.isPermisoActualizarOriginalServicio=isPermiso;
		this.isPermisoEliminarServicio=isPermiso;
		this.isPermisoGuardarCambiosServicio=isPermiso;
		//this.isPermisoConsultaServicio=isPermiso;
		//this.isPermisoBusquedaServicio=isPermiso;
		//this.isPermisoReporteServicio=isPermiso;
		//this.isPermisoOrdenServicio=isPermiso;		
		//this.isPermisoPaginacionMedioServicio=isPermiso;		
		//this.isPermisoPaginacionAltoServicio=isPermiso;		
		//this.isPermisoPaginacionTodoServicio=isPermiso;		
		//this.isPermisoCopiarServicio=isPermiso;		
		//this.isPermisoDuplicarServicio=isPermiso;
		//this.isPermisoOrdenServicio=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioServicioClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebServicio(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioServicioClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioServicioClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionServicioClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioServicioClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioServicio() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.servicioSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ServicioConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoServicio=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarServicio=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalServicio=this.isPermisoActualizarServicio;
			this.isPermisoEliminarServicio=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosServicio=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaServicio=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaServicio=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoServicio=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteServicio=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenServicio=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioServicio=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoServicio=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoServicio=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarServicio=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormServicio=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarServicio=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenServicio=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.servicioSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosServicio.setToolTipText(this.jTableDatosServicio.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioServicio(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioServicio(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioServicio() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyServicioListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.tiposerviciosForeignKey=new ArrayList();
				this.estadoserviciosForeignKey=new ArrayList();
				this.cuentacontablegastosForeignKey=new ArrayList();
				this.cuentacontablefiscalsForeignKey=new ArrayList();
				this.cuentacontablefiscal2sForeignKey=new ArrayList();
				this.cuentacontableretencionsForeignKey=new ArrayList();
				this.cuentacontableretencion2sForeignKey=new ArrayList();
				this.cuentacontableivasForeignKey=new ArrayList();
				this.cuentacontableiva2sForeignKey=new ArrayList();
				this.cuentacontablecreditosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyServicioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ServicioJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyServicioListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableFiscalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableFiscal2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableRetencion2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableIva2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiposerviciosForeignKey==null||this.tiposerviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoServicioConstantesFunciones.getArrayColumnasGlobalesTipoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoServicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoServicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoServicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadoserviciosForeignKey==null||this.estadoserviciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoServicioConstantesFunciones.getArrayColumnasGlobalesEstadoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoServicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoServicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoServiciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGastoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFiscalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablefiscalsForeignKey==null||this.cuentacontablefiscalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableFiscalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFiscal2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablefiscal2sForeignKey==null||this.cuentacontablefiscal2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableFiscal2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableretencionsForeignKey==null||this.cuentacontableretencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencion2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableretencion2sForeignKey==null||this.cuentacontableretencion2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableRetencion2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIvaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableivasForeignKey==null||this.cuentacontableivasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableIvasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIva2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableiva2sForeignKey==null||this.cuentacontableiva2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableIva2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyServicioListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ServicioParameterReturnGeneral servicioReturnGeneral=new ServicioParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_empresaServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_empresaServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalTipoServicio="";

				if(((this.tiposerviciosForeignKey==null||this.tiposerviciosForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_tipo_servicioServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_tipo_servicioServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoServicioConstantesFunciones.getArrayColumnasGlobalesTipoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoServicioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoServicio, "");
						finalQueryGlobalTipoServicio+=TipoServicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoServicio=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidTipoServicioActual();
					}
				} else {
					finalQueryGlobalTipoServicio="NONE";
				}


				String finalQueryGlobalEstadoServicio="";

				if(((this.estadoserviciosForeignKey==null||this.estadoserviciosForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_estado_servicioServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_estado_servicioServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoServicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoServicioConstantesFunciones.getArrayColumnasGlobalesEstadoServicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoServicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoServicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoServicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoServicio, "");
						finalQueryGlobalEstadoServicio+=EstadoServicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoServiciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoServicio=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidEstadoServicioActual();
					}
				} else {
					finalQueryGlobalEstadoServicio="NONE";
				}


				String finalQueryGlobalCuentaContableGasto="";

				if(((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_gastoServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_gastoServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableGasto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableGasto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableGasto, "");
						finalQueryGlobalCuentaContableGasto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableGasto=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableGastoActual();
					}
				} else {
					finalQueryGlobalCuentaContableGasto="NONE";
				}


				String finalQueryGlobalCuentaContableFiscal="";

				if(((this.cuentacontablefiscalsForeignKey==null||this.cuentacontablefiscalsForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscalServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscalServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableFiscal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableFiscal=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableFiscal, "");
						finalQueryGlobalCuentaContableFiscal+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableFiscalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableFiscal=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableFiscalActual();
					}
				} else {
					finalQueryGlobalCuentaContableFiscal="NONE";
				}


				String finalQueryGlobalCuentaContableFiscal2="";

				if(((this.cuentacontablefiscal2sForeignKey==null||this.cuentacontablefiscal2sForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscal2Servicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscal2Servicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableFiscal2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableFiscal2=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableFiscal2, "");
						finalQueryGlobalCuentaContableFiscal2+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableFiscal2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableFiscal2=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableFiscal2Actual();
					}
				} else {
					finalQueryGlobalCuentaContableFiscal2="NONE";
				}


				String finalQueryGlobalCuentaContableRetencion="";

				if(((this.cuentacontableretencionsForeignKey==null||this.cuentacontableretencionsForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_retencionServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_retencionServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableRetencion, "");
						finalQueryGlobalCuentaContableRetencion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableRetencion=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableRetencionActual();
					}
				} else {
					finalQueryGlobalCuentaContableRetencion="NONE";
				}


				String finalQueryGlobalCuentaContableRetencion2="";

				if(((this.cuentacontableretencion2sForeignKey==null||this.cuentacontableretencion2sForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_retencion2Servicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_retencion2Servicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableRetencion2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableRetencion2=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableRetencion2, "");
						finalQueryGlobalCuentaContableRetencion2+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableRetencion2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableRetencion2=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableRetencion2Actual();
					}
				} else {
					finalQueryGlobalCuentaContableRetencion2="NONE";
				}


				String finalQueryGlobalCuentaContableIva="";

				if(((this.cuentacontableivasForeignKey==null||this.cuentacontableivasForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_ivaServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_ivaServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableIva=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableIva=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableIva, "");
						finalQueryGlobalCuentaContableIva+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableIvasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableIva=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableIvaActual();
					}
				} else {
					finalQueryGlobalCuentaContableIva="NONE";
				}


				String finalQueryGlobalCuentaContableIva2="";

				if(((this.cuentacontableiva2sForeignKey==null||this.cuentacontableiva2sForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_iva2Servicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_iva2Servicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableIva2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableIva2=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableIva2, "");
						finalQueryGlobalCuentaContableIva2+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableIva2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableIva2=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableIva2Actual();
					}
				} else {
					finalQueryGlobalCuentaContableIva2="NONE";
				}


				String finalQueryGlobalCuentaContableCredito="";

				if(((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0) && this.servicioConstantesFunciones.cargarid_cuenta_contable_creditoServicio)
					 || (this.esRecargarFks && this.servicioConstantesFunciones.cargarid_cuenta_contable_creditoServicio)) {

					if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCredito, "");
						finalQueryGlobalCuentaContableCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCredito=" WHERE " + ConstantesSql.ID + "="+servicioSessionBean.getlidCuentaContableCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCredito="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				servicioReturnGeneral=servicioLogic.cargarCombosLoteForeignKeyServicio(finalQueryGlobalEmpresa,finalQueryGlobalTipoServicio,finalQueryGlobalEstadoServicio,finalQueryGlobalCuentaContableGasto,finalQueryGlobalCuentaContableFiscal,finalQueryGlobalCuentaContableFiscal2,finalQueryGlobalCuentaContableRetencion,finalQueryGlobalCuentaContableRetencion2,finalQueryGlobalCuentaContableIva,finalQueryGlobalCuentaContableIva2,finalQueryGlobalCuentaContableCredito);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=servicioReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalTipoServicio.equals("NONE")) {
				this.tiposerviciosForeignKey=servicioReturnGeneral.gettiposerviciosForeignKey();
			}

			if(!finalQueryGlobalEstadoServicio.equals("NONE")) {
				this.estadoserviciosForeignKey=servicioReturnGeneral.getestadoserviciosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableGasto.equals("NONE")) {
				this.cuentacontablegastosForeignKey=servicioReturnGeneral.getcuentacontablegastosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableFiscal.equals("NONE")) {
				this.cuentacontablefiscalsForeignKey=servicioReturnGeneral.getcuentacontablefiscalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableFiscal2.equals("NONE")) {
				this.cuentacontablefiscal2sForeignKey=servicioReturnGeneral.getcuentacontablefiscal2sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableRetencion.equals("NONE")) {
				this.cuentacontableretencionsForeignKey=servicioReturnGeneral.getcuentacontableretencionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableRetencion2.equals("NONE")) {
				this.cuentacontableretencion2sForeignKey=servicioReturnGeneral.getcuentacontableretencion2sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableIva.equals("NONE")) {
				this.cuentacontableivasForeignKey=servicioReturnGeneral.getcuentacontableivasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableIva2.equals("NONE")) {
				this.cuentacontableiva2sForeignKey=servicioReturnGeneral.getcuentacontableiva2sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCredito.equals("NONE")) {
				this.cuentacontablecreditosForeignKey=servicioReturnGeneral.getcuentacontablecreditosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyServicio()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyTipoServicio();
			this.addItemDefectoCombosForeignKeyEstadoServicio();
			this.addItemDefectoCombosForeignKeyCuentaContableGasto();
			this.addItemDefectoCombosForeignKeyCuentaContableFiscal();
			this.addItemDefectoCombosForeignKeyCuentaContableFiscal2();
			this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
			this.addItemDefectoCombosForeignKeyCuentaContableRetencion2();
			this.addItemDefectoCombosForeignKeyCuentaContableIva();
			this.addItemDefectoCombosForeignKeyCuentaContableIva2();
			this.addItemDefectoCombosForeignKeyCuentaContableCredito();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.servicioSessionBean==null) {
				this.servicioSessionBean=new ServicioSessionBean();
			}

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoServicio()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionTipoServicio()) {
				TipoServicio tiposervicio=new TipoServicio();
				TipoServicioConstantesFunciones.setTipoServicioDescripcion(tiposervicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiposervicio.setId(null);

				if(!TipoServicioConstantesFunciones.ExisteEnLista(this.tiposerviciosForeignKey,tiposervicio,true)) {

					this.tiposerviciosForeignKey.add(0,tiposervicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoServicio()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionEstadoServicio()) {
				EstadoServicio estadoservicio=new EstadoServicio();
				EstadoServicioConstantesFunciones.setEstadoServicioDescripcion(estadoservicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadoservicio.setId(null);

				if(!EstadoServicioConstantesFunciones.ExisteEnLista(this.estadoserviciosForeignKey,estadoservicio,true)) {

					this.estadoserviciosForeignKey.add(0,estadoservicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableGasto()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				CuentaContable cuentacontablegasto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablegasto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablegasto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablegastosForeignKey,cuentacontablegasto,true)) {

					this.cuentacontablegastosForeignKey.add(0,cuentacontablegasto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableFiscal()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal()) {
				CuentaContable cuentacontablefiscal=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablefiscal,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablefiscal.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablefiscalsForeignKey,cuentacontablefiscal,true)) {

					this.cuentacontablefiscalsForeignKey.add(0,cuentacontablefiscal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableFiscal2()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableFiscal2()) {
				CuentaContable cuentacontablefiscal2=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablefiscal2,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablefiscal2.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablefiscal2sForeignKey,cuentacontablefiscal2,true)) {

					this.cuentacontablefiscal2sForeignKey.add(0,cuentacontablefiscal2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableRetencion()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion()) {
				CuentaContable cuentacontableretencion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableretencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableretencion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableretencionsForeignKey,cuentacontableretencion,true)) {

					this.cuentacontableretencionsForeignKey.add(0,cuentacontableretencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableRetencion2()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableRetencion2()) {
				CuentaContable cuentacontableretencion2=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableretencion2,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableretencion2.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableretencion2sForeignKey,cuentacontableretencion2,true)) {

					this.cuentacontableretencion2sForeignKey.add(0,cuentacontableretencion2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableIva()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva()) {
				CuentaContable cuentacontableiva=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableiva,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableiva.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableivasForeignKey,cuentacontableiva,true)) {

					this.cuentacontableivasForeignKey.add(0,cuentacontableiva);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableIva2()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableIva2()) {
				CuentaContable cuentacontableiva2=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableiva2,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableiva2.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableiva2sForeignKey,cuentacontableiva2,true)) {

					this.cuentacontableiva2sForeignKey.add(0,cuentacontableiva2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCredito()throws Exception {
		try {

			if(!this.servicioSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				CuentaContable cuentacontablecredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditosForeignKey,cuentacontablecredito,true)) {

					this.cuentacontablecreditosForeignKey.add(0,cuentacontablecredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyServicio()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyServicio(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyServicio()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyServicio();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyServicio(Servicio servicio)throws Exception {	
		try {
			
			this.setActualTipoServicioForeignKey(servicio.getid_tipo_servicio(),false,"Formulario");
			this.setActualEstadoServicioForeignKey(servicio.getid_estado_servicio(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(servicio.getid_cuenta_contable_gasto(),false,"Formulario");
			this.setActualCuentaContableFiscalForeignKey(servicio.getid_cuenta_contable_fiscal(),false,"Formulario");
			this.setActualCuentaContableFiscal2ForeignKey(servicio.getid_cuenta_contable_fiscal2(),false,"Formulario");
			this.setActualCuentaContableRetencionForeignKey(servicio.getid_cuenta_contable_retencion(),false,"Formulario");
			this.setActualCuentaContableRetencion2ForeignKey(servicio.getid_cuenta_contable_retencion2(),false,"Formulario");
			this.setActualCuentaContableIvaForeignKey(servicio.getid_cuenta_contable_iva(),false,"Formulario");
			this.setActualCuentaContableIva2ForeignKey(servicio.getid_cuenta_contable_iva2(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(servicio.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyServicio(Servicio servicio,String sTipoEvento)throws Exception {	
		try {
			
			

				if(servicio.getCuentaContableGasto()!=null && !sTipoEvento.equals("id_cuenta_contable_gastoServicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablegastosForeignKey.add(servicio.getCuentaContableGasto());

					this.addItemDefectoCombosForeignKeyCuentaContableGasto();
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}

				if(servicio.getCuentaContableFiscal()!=null && !sTipoEvento.equals("id_cuenta_contable_fiscalServicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablefiscalsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablefiscalsForeignKey.add(servicio.getCuentaContableFiscal());

					this.addItemDefectoCombosForeignKeyCuentaContableFiscal();
					this.cargarCombosFrameCuentaContableFiscalsForeignKey("Todos");
				}

				if(servicio.getCuentaContableFiscal2()!=null && !sTipoEvento.equals("id_cuenta_contable_fiscal2Servicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablefiscal2sForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablefiscal2sForeignKey.add(servicio.getCuentaContableFiscal2());

					this.addItemDefectoCombosForeignKeyCuentaContableFiscal2();
					this.cargarCombosFrameCuentaContableFiscal2sForeignKey("Todos");
				}

				if(servicio.getCuentaContableRetencion()!=null && !sTipoEvento.equals("id_cuenta_contable_retencionServicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableretencionsForeignKey.add(servicio.getCuentaContableRetencion());

					this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
					this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
				}

				if(servicio.getCuentaContableRetencion2()!=null && !sTipoEvento.equals("id_cuenta_contable_retencion2Servicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableretencion2sForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableretencion2sForeignKey.add(servicio.getCuentaContableRetencion2());

					this.addItemDefectoCombosForeignKeyCuentaContableRetencion2();
					this.cargarCombosFrameCuentaContableRetencion2sForeignKey("Todos");
				}

				if(servicio.getCuentaContableIva()!=null && !sTipoEvento.equals("id_cuenta_contable_ivaServicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableivasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableivasForeignKey.add(servicio.getCuentaContableIva());

					this.addItemDefectoCombosForeignKeyCuentaContableIva();
					this.cargarCombosFrameCuentaContableIvasForeignKey("Todos");
				}

				if(servicio.getCuentaContableIva2()!=null && !sTipoEvento.equals("id_cuenta_contable_iva2Servicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableiva2sForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableiva2sForeignKey.add(servicio.getCuentaContableIva2());

					this.addItemDefectoCombosForeignKeyCuentaContableIva2();
					this.cargarCombosFrameCuentaContableIva2sForeignKey("Todos");
				}

				if(servicio.getCuentaContableCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_creditoServicio")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditosForeignKey.add(servicio.getCuentaContableCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableCredito();
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyServicio()throws Exception {	
		try {
			
			this.setActualTipoServicioForeignKey(this.servicioConstantesFunciones.getid_tipo_servicio(),false,"Formulario");
			this.setActualEstadoServicioForeignKey(this.servicioConstantesFunciones.getid_estado_servicio(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_gasto(),false,"Formulario");
			this.setActualCuentaContableFiscalForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_fiscal(),false,"Formulario");
			this.setActualCuentaContableFiscal2ForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_fiscal2(),false,"Formulario");
			this.setActualCuentaContableRetencionForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_retencion(),false,"Formulario");
			this.setActualCuentaContableRetencion2ForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_retencion2(),false,"Formulario");
			this.setActualCuentaContableIvaForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_iva(),false,"Formulario");
			this.setActualCuentaContableIva2ForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_iva2(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(this.servicioConstantesFunciones.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyServicio()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyServicio()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyServicio()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroServicio()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyServicio()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameTipoServiciosForeignKey("Todos");
			this.cargarCombosFrameEstadoServiciosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableFiscalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableFiscal2sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableRetencion2sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableIvasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableIva2sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyServicio(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoServiciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableFiscalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableFiscal2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableRetencion2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableIvasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableIva2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyServicio()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio!=null && this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.getItemCount()>0) {
				this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	






















	
	

	public ServicioBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ServicioBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ServicioBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.servicioSessionBean=new ServicioSessionBean(); 
		this.servicioConstantesFunciones=new ServicioConstantesFunciones(); 
		this.servicioBean=new Servicio();//(this.servicioConstantesFunciones); 		
		this.servicioReturnGeneral=new ServicioParameterReturnGeneral(); 
		
		this.servicioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.servicioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ServicioBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessServicio(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.servicioConstantesFunciones=new ServicioConstantesFunciones(); 
			this.servicioBean=new Servicio();//this.servicioConstantesFunciones); 			
			this.servicioReturnGeneral=new ServicioParameterReturnGeneral(); 
		
			ServicioBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Servicio Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.servicio=new Servicio();
			this.servicios = new ArrayList<Servicio>();
			this.serviciosAux = new ArrayList<Servicio>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic=new ServicioLogic();
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			//this.servicioSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.servicioSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormServicio);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoServicio);	
					}
					
					if(this.jInternalFrameImportacionServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionServicio);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByServicio!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByServicio);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormServicio!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormServicio);
				this.jInternalFrameDetalleFormServicio.setVisible(false);
				this.jInternalFrameDetalleFormServicio.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoServicio);
					this.jInternalFrameReporteDinamicoServicio.setVisible(false);
					this.jInternalFrameReporteDinamicoServicio.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionServicio);
					this.jInternalFrameImportacionServicio.setVisible(false);
					this.jInternalFrameImportacionServicio.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByServicio!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByServicio);
					this.jInternalFrameOrderByServicio.setVisible(false);
					this.jInternalFrameOrderByServicio.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idServicioActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ServicioConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.servicioReturnGeneral=new ServicioParameterReturnGeneral();
			
			this.servicioParameterGeneral=new ServicioParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.servicioLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ServicioJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.servicioSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ServicioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.servicioSessionBean.getEsGuardarRelacionado(),this.servicioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ServicioConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.servicioSessionBean.getEsGuardarRelacionado(),this.servicioSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaDuplicarServicio=true;
			this.isVisibilidadCeldaCopiarServicio=true;
			this.isVisibilidadCeldaVerFormServicio=true;
			this.isVisibilidadCeldaOrdenServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=false;
			this.isVisibilidadCeldaGuardarServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNombre=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableFiscal=true;
			this.isVisibilidadFK_IdCuentaContableFiscal2=true;
			this.isVisibilidadFK_IdCuentaContableGasto=true;
			this.isVisibilidadFK_IdCuentaContableIva=true;
			this.isVisibilidadFK_IdCuentaContableIva2=true;
			this.isVisibilidadFK_IdCuentaContableRetencion=true;
			this.isVisibilidadFK_IdCuentaContableRetencion2=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoServicio=true;
			this.isVisibilidadFK_IdTipoServicio=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosServicio();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioServicio(false);
			
			this.setPermisosUsuarioServicio();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.servicioSessionBean.getEsGuardarRelacionado() 
				|| (this.servicioSessionBean.getEsGuardarRelacionado() && this.servicioSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioServicioClasesRelacionadas();
			}
			
			if(this.servicioSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioServicioClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ServicioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosServicio();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualServicio();
			}
			
			if(!this.isPermisoBusquedaServicio) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasServicio.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.servicioSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioServicio,this.isPermisoPaginacionMedioServicio,this.isPermisoPaginacionTodoServicio);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ServicioConstantesFunciones.getTiposSeleccionarServicio());
				
				this.tiposColumnasSelect=ServicioConstantesFunciones.getTiposSeleccionarServicio(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioServicio();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioServicio(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioServicio(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesServicio() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.tiposervicioLogic=new TipoServicioLogic();
			this.estadoservicioLogic=new EstadoServicioLogic();
			this.cuentacontablegastoLogic=new CuentaContableLogic();
			this.cuentacontablefiscalLogic=new CuentaContableLogic();
			this.cuentacontablefiscal2Logic=new CuentaContableLogic();
			this.cuentacontableretencionLogic=new CuentaContableLogic();
			this.cuentacontableretencion2Logic=new CuentaContableLogic();
			this.cuentacontableivaLogic=new CuentaContableLogic();
			this.cuentacontableiva2Logic=new CuentaContableLogic();
			this.cuentacontablecreditoLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				servicioImplementable= (ServicioImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ServicioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				servicioImplementableHome= (ServicioImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ServicioConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.servicios= new ArrayList<Servicio>();
			this.serviciosEliminados= new ArrayList<Servicio>();
						
			this.isEsNuevoServicio=false;
			this.esParaAccionDesdeFormularioServicio=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableGastoActual=0L;
			this.idCuentaContableFiscalActual=0L;
			this.idCuentaContableFiscal2Actual=0L;
			this.idCuentaContableRetencionActual=0L;
			this.idCuentaContableRetencion2Actual=0L;
			this.idCuentaContableIvaActual=0L;
			this.idCuentaContableIva2Actual=0L;
			this.idCuentaContableCreditoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.tiposerviciosForeignKey=new ArrayList<TipoServicio>() ;
			this.estadoserviciosForeignKey=new ArrayList<EstadoServicio>() ;
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablefiscalsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablefiscal2sForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableretencion2sForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableivasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableiva2sForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyServicio(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroServicio();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ServicioBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ServicioConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesServicio("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingServicio(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormServicio!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioServicio();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioServicio();
			}
			
			ServicioBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasServicio.getTabCount(); i++) {
					this.jTabbedPaneBusquedasServicio.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasServicio.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessServicio(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Servicio: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectServicio() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesServicio")) {
				iIndex=this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosServicio.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessServicio();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyServicio(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyServicio(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyServicioListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyServicio();
		
		this.cargarCombosFrameForeignKeyServicio();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyServicio();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyServicio();
		}
	}
	
	

	public void cargarCombosForeignKeyTipoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoServicio();
				this.cargarCombosFrameTipoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoServicio(this.tiposerviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoServicio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoServicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoServicio();
				this.cargarCombosFrameEstadoServiciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoServicio(this.estadoserviciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGasto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFiscal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableFiscalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableFiscal();
				this.cargarCombosFrameCuentaContableFiscalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableFiscal(this.cuentacontablefiscalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableFiscal2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableFiscal2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableFiscal2();
				this.cargarCombosFrameCuentaContableFiscal2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableFiscal2(this.cuentacontablefiscal2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
				this.cargarCombosFrameCuentaContableRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableRetencion(this.cuentacontableretencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableRetencion2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableRetencion2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableRetencion2();
				this.cargarCombosFrameCuentaContableRetencion2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableRetencion2(this.cuentacontableretencion2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIva(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableIva();
				this.cargarCombosFrameCuentaContableIvasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableIva(this.cuentacontableivasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableIva2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableIva2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableIva2();
				this.cargarCombosFrameCuentaContableIva2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableIva2(this.cuentacontableiva2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoServicioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.servicioSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			
			if(jTableDatosServicio.getRowCount()>=1) {
				jTableDatosServicio.removeRowSelectionInterval(0, jTableDatosServicio.getRowCount()-1);						
			}
			
			this.isEsNuevoServicio=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoServicio(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesServicio(true);			
			//this.servicio=new Servicio();
			//this.servicio.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicio(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicio() ;
			
			if(ServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicio(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.servicio);	
			this.actualizarInformacion("INFO_PADRE",false,this.servicio);				
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			if(this.servicioSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Servicio: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarServicioActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosServicio.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosServicio.getSelectedRows().length;			
			}
			
			serviciosSeleccionados=this.getServiciosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoServicio--;			
				//Servicio servicioAux= new Servicio();			
				//servicioAux.setId(this.iIdNuevoServicio);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Servicio servicioOrigen=new Servicio();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Servicio servicioOrigen : serviciosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosServicio.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							servicioOrigen =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							servicioOrigen =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaServicio();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.servicio.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosServicio(servicioOrigen,this.servicio,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.servicioLogic.getServicios().add(this.servicioAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.servicios.add(this.servicioAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaServicio(false);
				
				this.jTableDatosServicio.setRowSelectionInterval(this.getIndiceNuevoServicio(), this.getIndiceNuevoServicio());
				
				int iLastRow =  this.jTableDatosServicio.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosServicio.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosServicio.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaServicio(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();									
		
			Servicio servicioOrigen=new Servicio();
			Servicio servicioDestino=new Servicio();
				
			serviciosSeleccionados=this.getServiciosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosServicio.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || serviciosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosServicio.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioOrigen =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						servicioOrigen =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						servicioDestino =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						servicioDestino =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				servicioOrigen =serviciosSeleccionados.get(0);
				servicioDestino =serviciosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosServicio(servicioOrigen,servicioDestino,true,false);
				
				servicioDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(servicioDestino,servicioLogic.getServicios());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(servicioDestino,servicios);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaServicio(false);
				
				//this.jTableDatosServicio.setRowSelectionInterval(this.getIndiceNuevoServicio(), this.getIndiceNuevoServicio());
				
				int iLastRow =  this.jTableDatosServicio.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosServicio.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosServicio.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaServicio(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormServicio.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesServicio.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasServicio.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesServicio.setVisible(!isVisible);
			this.jPanelPaginacionServicio.setVisible(!isVisible);
			this.jPanelAccionesServicio.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameServicio();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByServicio();
			
			this.abrirFrameOrderByServicio();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByServicio();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleServicio(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormServicio);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormServicio.isMaximum()) {
					this.jInternalFrameDetalleFormServicio.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormServicio.setSize(this.jInternalFrameDetalleFormServicio.iWidthFormulario,this.jInternalFrameDetalleFormServicio.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormServicio.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormServicio.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormServicio.isMaximum()) {
						this.jInternalFrameDetalleFormServicio.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormServicio.jContentPaneDetalleServicio.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormServicio.jContentPaneDetalleServicio.getWidth(),ServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormServicio.jContentPaneDetalleServicio.getWidth(),ServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormServicio.jContentPaneDetalleServicio.getWidth(),ServicioConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormServicio.setVisible(true);
	        this.jInternalFrameDetalleFormServicio.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByServicio() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByServicio==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByServicio=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByServicio,false,this);
				} else {
					this.jInternalFrameOrderByServicio=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByServicio,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByServicio);
				this.jInternalFrameOrderByServicio.setVisible(false);
				this.jInternalFrameOrderByServicio.setSelected(false);
				
				this.jInternalFrameOrderByServicio.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByServicio"));
				
				this.inicializarActualizarBindingTablaOrderByServicio();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionServicio() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionServicio==null) {
				
				this.jInternalFrameImportacionServicio=new ImportacionJInternalFrame(ServicioConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionServicio);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionServicio);
				this.jInternalFrameImportacionServicio.setVisible(false);
				this.jInternalFrameImportacionServicio.setSelected(false);


				this.jInternalFrameImportacionServicio.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionServicio"));
				this.jInternalFrameImportacionServicio.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionServicio"));
				this.jInternalFrameImportacionServicio.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionServicio"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoServicio() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoServicio==null) {
				this.jInternalFrameReporteDinamicoServicio=new ReporteDinamicoJInternalFrame(ServicioConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoServicio);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoServicio);
				this.jInternalFrameReporteDinamicoServicio.setVisible(false);
				this.jInternalFrameReporteDinamicoServicio.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoServicio.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicio"));
				this.jInternalFrameReporteDinamicoServicio.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicio"));
				this.jInternalFrameReporteDinamicoServicio.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicio"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicio();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleServicio() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormServicio);
			
	       	this.jInternalFrameDetalleFormServicio.setVisible(false);
	        this.jInternalFrameDetalleFormServicio.setSelected(false);
			
			//this.jInternalFrameDetalleFormServicio.dispose();
			//this.jInternalFrameDetalleFormServicio=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoServicio() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoServicio.setVisible(true);
	        this.jInternalFrameReporteDinamicoServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionServicio() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionServicio.setVisible(true);
	        this.jInternalFrameImportacionServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByServicio() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByServicio.setVisible(true);
	        this.jInternalFrameOrderByServicio.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByServicio() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByServicio.setVisible(false);
	        this.jInternalFrameOrderByServicio.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoServicio() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoServicio.setVisible(false);
	        this.jInternalFrameReporteDinamicoServicio.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionServicio() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionServicio.setVisible(false);
	        this.jInternalFrameImportacionServicio.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableGasto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableGasto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableGasto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableGasto.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableGasto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableFiscal(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableFiscal";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableFiscal=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableFiscal.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableFiscal(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableFiscal2(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableFiscal2";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableFiscal2=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableFiscal2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableFiscal2(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableRetencion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableRetencion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableRetencion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableRetencion.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableRetencion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableRetencion2(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableRetencion2";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableRetencion2=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableRetencion2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableRetencion2(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableIva(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableIva";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableIva=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableIva.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableIva(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableIva2(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableIva2";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableIva2=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableIva2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableIva2(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
						TitledBorder titledBorderCuentaContableCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCredito.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarServicio(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarServicio(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosServicio.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesServicio(true);
			//this.isEsNuevoServicio=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicio(false) ;
			
			if(servicioSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicio(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicio(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaServicioActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarServicio(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosServicio.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesServicio(true);
			//this.isEsNuevoServicio=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.servicio.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesServicio("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesServicio(false) ;
			
			if(ServicioJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleServicio(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicio(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContableGasto")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_gastoServicio) {
					this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (id);

				this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

			}
			
			if(sType.equals("CuentaContableFiscal")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscalServicio) {
					this.cargarCombosCuentaContableFiscalsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableFiscalsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal (id);

				this.recargarComboTablaCuentaContableFiscal(this.cuentacontablefiscalsForeignKey);

			}
			
			if(sType.equals("CuentaContableFiscal2")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscal2Servicio) {
					this.cargarCombosCuentaContableFiscal2sForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableFiscal2sForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal2 (id);

				this.recargarComboTablaCuentaContableFiscal2(this.cuentacontablefiscal2sForeignKey);

			}
			
			if(sType.equals("CuentaContableRetencion")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_retencionServicio) {
					this.cargarCombosCuentaContableRetencionsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion (id);

				this.recargarComboTablaCuentaContableRetencion(this.cuentacontableretencionsForeignKey);

			}
			
			if(sType.equals("CuentaContableRetencion2")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_retencion2Servicio) {
					this.cargarCombosCuentaContableRetencion2sForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableRetencion2sForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion2 (id);

				this.recargarComboTablaCuentaContableRetencion2(this.cuentacontableretencion2sForeignKey);

			}
			
			if(sType.equals("CuentaContableIva")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_ivaServicio) {
					this.cargarCombosCuentaContableIvasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableIvasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva (id);

				this.recargarComboTablaCuentaContableIva(this.cuentacontableivasForeignKey);

			}
			
			if(sType.equals("CuentaContableIva2")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_iva2Servicio) {
					this.cargarCombosCuentaContableIva2sForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableIva2sForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva2 (id);

				this.recargarComboTablaCuentaContableIva2(this.cuentacontableiva2sForeignKey);

			}
			
			if(sType.equals("CuentaContableCredito")) {
				if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_creditoServicio) {
					this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingServicio(false,false);
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (id);

				this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaTipoServicio(List<TipoServicio> tiposerviciosForeignKey)throws Exception{
		TableColumn tableColumnTipoServicio=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO));
		TableCellEditor tableCellEditorTipoServicio =tableColumnTipoServicio.getCellEditor();

		TipoServicioTableCell tiposervicioTableCellFk=(TipoServicioTableCell)tableCellEditorTipoServicio;

		if(tiposervicioTableCellFk!=null) {
			tiposervicioTableCellFk.settiposerviciosForeignKey(tiposerviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiposervicioTableCellFk.setRowActual(intSelectedRow);
			//tiposervicioTableCellFk.settiposerviciosForeignKeyActual(tiposerviciosForeignKey);
		//}


		if(tiposervicioTableCellFk!=null) {
			tiposervicioTableCellFk.RecargarTipoServiciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoServicio(List<EstadoServicio> estadoserviciosForeignKey)throws Exception{
		TableColumn tableColumnEstadoServicio=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO));
		TableCellEditor tableCellEditorEstadoServicio =tableColumnEstadoServicio.getCellEditor();

		EstadoServicioTableCell estadoservicioTableCellFk=(EstadoServicioTableCell)tableCellEditorEstadoServicio;

		if(estadoservicioTableCellFk!=null) {
			estadoservicioTableCellFk.setestadoserviciosForeignKey(estadoserviciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadoservicioTableCellFk.setRowActual(intSelectedRow);
			//estadoservicioTableCellFk.setestadoserviciosForeignKeyActual(estadoserviciosForeignKey);
		//}


		if(estadoservicioTableCellFk!=null) {
			estadoservicioTableCellFk.RecargarEstadoServiciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableGasto(List<CuentaContable> cuentacontablegastosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableGasto=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO));
		TableCellEditor tableCellEditorCuentaContableGasto =tableColumnCuentaContableGasto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableGasto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablegastosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablegastosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableFiscal(List<CuentaContable> cuentacontablefiscalsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableFiscal=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL));
		TableCellEditor tableCellEditorCuentaContableFiscal =tableColumnCuentaContableFiscal.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableFiscal;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablefiscalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablefiscalsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableFiscal2(List<CuentaContable> cuentacontablefiscal2sForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableFiscal2=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2));
		TableCellEditor tableCellEditorCuentaContableFiscal2 =tableColumnCuentaContableFiscal2.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableFiscal2;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablefiscal2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablefiscal2sForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableRetencion(List<CuentaContable> cuentacontableretencionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableRetencion=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION));
		TableCellEditor tableCellEditorCuentaContableRetencion =tableColumnCuentaContableRetencion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableRetencion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableretencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableretencionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableRetencion2(List<CuentaContable> cuentacontableretencion2sForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableRetencion2=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2));
		TableCellEditor tableCellEditorCuentaContableRetencion2 =tableColumnCuentaContableRetencion2.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableRetencion2;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableretencion2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableretencion2sForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableIva(List<CuentaContable> cuentacontableivasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableIva=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA));
		TableCellEditor tableCellEditorCuentaContableIva =tableColumnCuentaContableIva.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableIva;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableivasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableivasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableIva2(List<CuentaContable> cuentacontableiva2sForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableIva2=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2));
		TableCellEditor tableCellEditorCuentaContableIva2 =tableColumnCuentaContableIva2.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableIva2;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableiva2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableiva2sForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCredito(List<CuentaContable> cuentacontablecreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCredito=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));
		TableCellEditor tableCellEditorCuentaContableCredito =tableColumnCuentaContableCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosServicio.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (Long id) throws Exception {
		this.setActualCuentaContableGastoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal (Long id) throws Exception {
		this.setActualCuentaContableFiscalForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal2 (Long id) throws Exception {
		this.setActualCuentaContableFiscal2ForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion (Long id) throws Exception {
		this.setActualCuentaContableRetencionForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion2 (Long id) throws Exception {
		this.setActualCuentaContableRetencion2ForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_iva (Long id) throws Exception {
		this.setActualCuentaContableIvaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_iva2 (Long id) throws Exception {
		this.setActualCuentaContableIva2ForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (Long id) throws Exception {
		this.setActualCuentaContableCreditoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesServicio(false);
			
			//if(!this.isEsNuevoServicio) {								
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				
			}
			
			if(this.permiteMantenimiento(this.servicio)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.servicioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoServicio=true;
					this.inicializarActualizarBindingTablaServicio(false);
					this.isEsNuevoServicio=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoServicio=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoServicio=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesServicio(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicio(false);
				
				this.habilitarDeshabilitarControlesServicio(false);
			
												
				
				if(ServicioJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleServicio();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoServicioActionPerformed(evt,servicioSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualServicio(this.servicio,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosServicio.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,servicioSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.servicio.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarServicioActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosServicio.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				this.servicio.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				this.servicio.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.servicio)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.servicioSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ServicioModel) this.jTableDatosServicio.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoServicio=true;
				this.inicializarActualizarBindingTablaServicio(false);
				this.isEsNuevoServicio=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesServicio(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicio(false);
				
				this.habilitarDeshabilitarControlesServicio(false);
				
				
				
				if(ServicioJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleServicio();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarServicioActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosServicio.getRowCount()>=1) {
				jTableDatosServicio.removeRowSelectionInterval(0, jTableDatosServicio.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesServicio(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaServicio(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesServicio(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualServicio(false) ;
			
			this.isEsNuevoServicio=false;
			
			if(ServicioJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleServicio();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingServicio(false);
				
				//SI ES MANUAL
				if(ServicioJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualServicio();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoServicio--;			
			//Servicio servicioAux= new Servicio();			
			//servicioAux.setId(this.iIdNuevoServicio);
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaServicio();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
			
			this.servicio.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.servicioLogic.getServicios().add(this.servicioAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.servicios.add(this.servicioAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaServicio(false);
			
			this.jTableDatosServicio.setRowSelectionInterval(this.getIndiceNuevoServicio(), this.getIndiceNuevoServicio());
			
			int iLastRow =  this.jTableDatosServicio.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosServicio.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosServicio.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaServicio(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingServicio(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicio(false);
			
			//SI ES MANUAL
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicio();
			}
			
			//this.abrirFrameTreeServicio();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionServicioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE ServicioES ?", "MANTENIMIENTO DE Servicio", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionServicio.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralServicio();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.servicioReturnGeneral=servicioLogic.procesarImportacionServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.servicioParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarServicioReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionServicioActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionServicio.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionServicio.setFileImportacion(this.jInternalFrameImportacionServicio.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionServicio.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionServicio.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionServicio.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionServicio.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoServicioActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		

		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ServicioBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ServicioBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteServicios("Todos",serviciosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ServicioConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_ESBIEN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bien_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bien_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bien_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bien_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoServicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoServicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoServicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoServicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableGasto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableGasto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableGasto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableGasto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableFiscal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableFiscal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableFiscal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableFiscal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableFiscal2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableFiscal2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableFiscal2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableFiscal2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableRetencion2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableRetencion2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableRetencion2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableRetencion2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableIva2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableIva2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableIva2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableIva2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoServicio.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ServicioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO:
					sNombreCampoCategoria="id_tipo_servicio";
					break;

				case ServicioConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case ServicioConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case ServicioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case ServicioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case ServicioConstantesFunciones.LABEL_ESBIEN:
					sNombreCampoCategoria="es_bien";
					break;

				case ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO:
					sNombreCampoCategoria="id_estado_servicio";
					break;

				case ServicioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoria="id_cuenta_contable_gasto";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL:
					sNombreCampoCategoria="id_cuenta_contable_fiscal";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2:
					sNombreCampoCategoria="id_cuenta_contable_fiscal2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					sNombreCampoCategoria="id_cuenta_contable_retencion";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2:
					sNombreCampoCategoria="id_cuenta_contable_retencion2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA:
					sNombreCampoCategoria="id_cuenta_contable_iva";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2:
					sNombreCampoCategoria="id_cuenta_contable_iva2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoria="id_cuenta_contable_credito";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ServicioConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO:
					sNombreCampoCategoriaValor="id_tipo_servicio";
					break;

				case ServicioConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case ServicioConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case ServicioConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case ServicioConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case ServicioConstantesFunciones.LABEL_ESBIEN:
					sNombreCampoCategoriaValor="es_bien";
					break;

				case ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO:
					sNombreCampoCategoriaValor="id_estado_servicio";
					break;

				case ServicioConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_gasto";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL:
					sNombreCampoCategoriaValor="id_cuenta_contable_fiscal";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2:
					sNombreCampoCategoriaValor="id_cuenta_contable_fiscal2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_retencion";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2:
					sNombreCampoCategoriaValor="id_cuenta_contable_retencion2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA:
					sNombreCampoCategoriaValor="id_cuenta_contable_iva";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2:
					sNombreCampoCategoriaValor="id_cuenta_contable_iva2";
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoServicio.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoServicio.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ServicioConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_servicio");
					break;

				case ServicioConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case ServicioConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case ServicioConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case ServicioConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case ServicioConstantesFunciones.LABEL_ESBIEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Bien",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_bien");
					break;

				case ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Servicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_servicio");
					break;

				case ServicioConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Gasto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_gasto");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Fiscal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_fiscal");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Fiscal 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_fiscal2");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_retencion");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Retencion 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_retencion2");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_iva");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Iva 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_iva2");
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoServicioActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Servicios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ServicioConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.gettiposervicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IVA);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_ICE);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_ESBIEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_ESBIEN);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getes_bien());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getestadoservicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontablegasto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontablefiscal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontablefiscal2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontableretencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontableretencion2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontableiva_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontableiva2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
					iRow++;

					for(Servicio servicio:serviciosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(servicio.getcuentacontablecredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelServicio(row);				
			//	iRow++;
			//}				
			
			//for(Servicio servicioAux:serviciosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelServicio(servicioAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicio(false);
			
			//SI ES MANUAL
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualServicio();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicio(false);
			
			//SI ES MANUAL
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualServicio();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesServicioActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingServicio(false);
			
			//SI ES MANUAL
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualServicio();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaServicio() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosServicio.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosServicio.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosServicio.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosServicio.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosServicio.setMinimumSize(dimensionMinimum);
		this.jTableDatosServicio.setMaximumSize(dimensionMaximum);
		this.jTableDatosServicio.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingServicio(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingServicio(esInicializar,true);
	}
	
	public void inicializarActualizarBindingServicio(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaServicio(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesServicio(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasServicio(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesServicio(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesServicio(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ServicioJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ServicioJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualServicio() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaServicio();
		
		this.inicializarActualizarBindingBotonesManualServicio(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualServicio();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesServicio() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualServicio(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualServicio(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosServicio.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosServicio.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteServicio.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormServicio!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionNuevoServicio.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionSinCerrarServicio.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionSinMensajeServicio.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosServicio.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosServicio.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteServicio.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormServicio!=null) {
				this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionNuevoServicio.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionSinCerrarServicio.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormServicio.jCheckBoxPostAccionSinMensajeServicio.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionServicio.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionServicio.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesServicio.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoServicio!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesServicio.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesServicio.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarServicio.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesServicio.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoServicio!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesServicio.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralServicio.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesServicio(Boolean esInicializar) throws Exception {
		try	{	
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualServicio(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesServicio() throws Exception {
		try	{
			if(ServicioJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualServicio();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleServicio() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualServicio() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesServicio.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesServicio.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesServicio.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionServicio.addItem(reporte);
			}
			
			
			if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionServicio.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionServicio.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesServicio.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesServicio.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarServicio.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarServicio.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarServicio.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicio();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualServicio() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoServicio!=null) {
				this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoServicio!=null) {
				this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoServicio!=null) {
				
				if(this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicio.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoServicio.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicio.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ServicioConstantesFunciones.getTiposSeleccionarServicio(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ServicioConstantesFunciones.getTiposSeleccionarServicio(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoServicio.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoServicio.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ServicioConstantesFunciones.getTiposSeleccionarServicio(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoServicio.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoServicio.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualServicio()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextAreacodigoBusquedaPorCodigoServicio.getText();
		this.nombreBusquedaPorNombre=this.jTextAreanombreBusquedaPorNombreServicio.getText();
		if(this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.getSelectedItem()!=null){this.id_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2=((CuentaContable)this.jComboBoxid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2Servicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.getSelectedItem()!=null){this.id_cuenta_contable_iva2FK_IdCuentaContableIva2=((CuentaContable)this.jComboBoxid_cuenta_contable_iva2FK_IdCuentaContableIva2Servicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.getSelectedItem()!=null){this.id_cuenta_contable_retencion2FK_IdCuentaContableRetencion2=((CuentaContable)this.jComboBoxid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2Servicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.getSelectedItem()!=null){this.id_estado_servicioFK_IdEstadoServicio=((EstadoServicio)this.jComboBoxid_estado_servicioFK_IdEstadoServicioServicio.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.getSelectedItem()!=null){this.id_tipo_servicioFK_IdTipoServicio=((TipoServicio)this.jComboBoxid_tipo_servicioFK_IdTipoServicioServicio.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasServicio(Boolean esInicializar) throws Exception {				
		if(ServicioJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualServicio();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaServicio() throws Exception {
		this.inicializarActualizarBindingTablaServicio(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByServicio() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByServicio.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicio.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicio.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosServicioOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicioOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByServicio.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByServicio.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByServicio.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaServicio(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=servicioLogic.getServicios().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=servicios.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosServicio.setModel(new ServicioModel(this.servicioLogic.getServicios(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosServicio.setModel(new ServicioModel(this.servicios,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByServicio!=null && this.jInternalFrameOrderByServicio.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByServicio();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ServicioConstantesFunciones.SCLASSWEBTITULO,servicioConstantesFunciones.resaltarSeleccionarServicio,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ServicioConstantesFunciones.SCLASSWEBTITULO,servicioConstantesFunciones.resaltarSeleccionarServicio,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_ID));

		if(this.servicioConstantesFunciones.mostraridServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.servicioConstantesFunciones.resaltaridServicio,this.servicioConstantesFunciones.activaridServicio,iSizeTabla,this,true,"idServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltaridServicio,this.servicioConstantesFunciones.activaridServicio,this,true,"idServicio","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDEMPRESA));

		if(this.servicioConstantesFunciones.mostrarid_empresaServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.servicioConstantesFunciones.resaltarid_empresaServicio,this,this.servicioConstantesFunciones.activarid_empresaServicio,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.servicioConstantesFunciones.resaltarid_empresaServicio,this,this.servicioConstantesFunciones.activarid_empresaServicio,false,"id_empresaServicio","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO));

		if(this.servicioConstantesFunciones.mostrarid_tipo_servicioServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoServicioTableCell(this.tiposerviciosForeignKey,this.servicioConstantesFunciones.resaltarid_tipo_servicioServicio,this,this.servicioConstantesFunciones.activarid_tipo_servicioServicio,iSizeTabla));
			tableColumn.setCellEditor(new TipoServicioTableCell(this.tiposerviciosForeignKey,this.servicioConstantesFunciones.resaltarid_tipo_servicioServicio,this,this.servicioConstantesFunciones.activarid_tipo_servicioServicio,true,"id_tipo_servicioServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_CODIGO));

		if(this.servicioConstantesFunciones.mostrarcodigoServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.servicioConstantesFunciones.resaltarcodigoServicio,this.servicioConstantesFunciones.activarcodigoServicio,iSizeTabla,this,true,"codigoServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltarcodigoServicio,this.servicioConstantesFunciones.activarcodigoServicio,this,true,"codigoServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_NOMBRE));

		if(this.servicioConstantesFunciones.mostrarnombreServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.servicioConstantesFunciones.resaltarnombreServicio,this.servicioConstantesFunciones.activarnombreServicio,iSizeTabla,this,true,"nombreServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltarnombreServicio,this.servicioConstantesFunciones.activarnombreServicio,this,true,"nombreServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IVA));

		if(this.servicioConstantesFunciones.mostrarivaServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.servicioConstantesFunciones.resaltarivaServicio,this.servicioConstantesFunciones.activarivaServicio,iSizeTabla,this,true,"ivaServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltarivaServicio,this.servicioConstantesFunciones.activarivaServicio,this,true,"ivaServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_ICE));

		if(this.servicioConstantesFunciones.mostrariceServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.servicioConstantesFunciones.resaltariceServicio,this.servicioConstantesFunciones.activariceServicio,iSizeTabla,this,true,"iceServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltariceServicio,this.servicioConstantesFunciones.activariceServicio,this,true,"iceServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_ESBIEN));

		if(this.servicioConstantesFunciones.mostrares_bienServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_ESBIEN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.servicioConstantesFunciones.resaltares_bienServicio,this.servicioConstantesFunciones.activares_bienServicio,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.servicioConstantesFunciones.resaltares_bienServicio,this.servicioConstantesFunciones.activares_bienServicio,this,true,"es_bienServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO));

		if(this.servicioConstantesFunciones.mostrarid_estado_servicioServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoServicioTableCell(this.estadoserviciosForeignKey,this.servicioConstantesFunciones.resaltarid_estado_servicioServicio,this,this.servicioConstantesFunciones.activarid_estado_servicioServicio,iSizeTabla));
			tableColumn.setCellEditor(new EstadoServicioTableCell(this.estadoserviciosForeignKey,this.servicioConstantesFunciones.resaltarid_estado_servicioServicio,this,this.servicioConstantesFunciones.activarid_estado_servicioServicio,true,"id_estado_servicioServicio","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_DESCRIPCION));

		if(this.servicioConstantesFunciones.mostrardescripcionServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.servicioConstantesFunciones.resaltardescripcionServicio,this.servicioConstantesFunciones.activardescripcionServicio,iSizeTabla,this,true,"descripcionServicio","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.servicioConstantesFunciones.resaltardescripcionServicio,this.servicioConstantesFunciones.activardescripcionServicio,this,true,"descripcionServicio","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_gastoServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablegastosForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_gastoServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_gastoServicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablegastosForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_gastoServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_gastoServicio,true,"id_cuenta_contable_gastoServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscalServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablefiscalsForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscalServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_fiscalServicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablefiscalsForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscalServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_fiscalServicio,true,"id_cuenta_contable_fiscalServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscal2Servicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablefiscal2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscal2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_fiscal2Servicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablefiscal2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscal2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_fiscal2Servicio,true,"id_cuenta_contable_fiscal2Servicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencionServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableretencionsForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencionServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_retencionServicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableretencionsForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencionServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_retencionServicio,true,"id_cuenta_contable_retencionServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencion2Servicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableretencion2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencion2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_retencion2Servicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableretencion2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencion2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_retencion2Servicio,true,"id_cuenta_contable_retencion2Servicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_ivaServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableivasForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_ivaServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_ivaServicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableivasForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_ivaServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_ivaServicio,true,"id_cuenta_contable_ivaServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_iva2Servicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableiva2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_iva2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_iva2Servicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableiva2sForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_iva2Servicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_iva2Servicio,true,"id_cuenta_contable_iva2Servicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosServicio,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));

		if(this.servicioConstantesFunciones.mostrarid_cuenta_contable_creditoServicio && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_creditoServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_creditoServicio,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.servicioConstantesFunciones.resaltarid_cuenta_contable_creditoServicio,this,this.servicioConstantesFunciones.activarid_cuenta_contable_creditoServicio,true,"id_cuenta_contable_creditoServicio","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ServicioPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.servicioSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosServicio.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosServicio.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarServicio && this.isPermisoGuardarCambiosServicio) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.servicioSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosServicio.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosServicio.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarServicio && this.isPermisoGuardarCambiosServicio) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarServicio && this.isPermisoGuardarCambiosServicio) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosServicio.moveColumn(this.jTableDatosServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosServicio.moveColumn(this.jTableDatosServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosServicio.moveColumn(this.jTableDatosServicio.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosServicio.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosServicio.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosServicio,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosServicio.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosServicio.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosServicio.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosServicio.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosServicio.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=servicioLogic.getServicios().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=servicios.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosServicio.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosServicio.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosServicio();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoServicio=false;
					
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
				if(this.servicioSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormServicio==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosServicio.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosServicio.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.servicio.getsType().equals("DUPLICADO")
				   || this.servicio.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoServicio=true;
				
				} else {
					this.isEsNuevoServicio=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.servicioSessionBean.getEsGuardarRelacionado()) {
					if(this.servicio.getId()>=0 && !this.servicio.getIsNew()) {						
						this.isEsNuevoServicio=false;
						
					} else {
						this.isEsNuevoServicio=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoServicio(esRelaciones);						
				
				this.seleccionarServicio(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.servicio.getId()<0) {
					this.isEsNuevoServicio=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarServicio(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarServicio(evt,rowIndex);
				}	
				
				if(this.servicioSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Servicio: " + this.dDif); 
					}
				}								
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarServicio(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.servicio)) {
					if(this.servicio.getId()>0) {
						this.servicio.setIsDeleted(true);
						
						this.serviciosEliminados.add(this.servicio);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.servicioLogic.getServicios().remove(this.servicio);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.servicios.remove(this.servicio);				
					}
					
					
					((ServicioModel) this.jTableDatosServicio.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaServicio(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarServicio(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoServicio) {
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosServicio.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosServicio.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioServicio(this.servicio);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.servicioConstantesFunciones.cargarid_empresaServicio || this.servicioConstantesFunciones.event_dependid_empresaServicio) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.servicio.getid_empresa());
									//this.inicializarActualizarBindingServicio(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(servicio.getEmpresa()!=null) {
							this.empresasForeignKey.add(servicio.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.servicio.getid_empresa(),false,"Formulario");

					//TipoServicio
					if(!this.servicioConstantesFunciones.cargarid_tipo_servicioServicio || this.servicioConstantesFunciones.event_dependid_tipo_servicioServicio) {
						//this.cargarCombosTipoServiciosForeignKeyLista(" where id="+this.servicio.getid_tipo_servicio());
									//this.inicializarActualizarBindingServicio(false,false);
						this.tiposerviciosForeignKey=new ArrayList<TipoServicio>();

						if(servicio.getTipoServicio()!=null) {
							this.tiposerviciosForeignKey.add(servicio.getTipoServicio());
						}

						this.addItemDefectoCombosForeignKeyTipoServicio();
						this.cargarCombosFrameTipoServiciosForeignKey("Todos");
					}
					this.setActualTipoServicioForeignKey(this.servicio.getid_tipo_servicio(),false,"Formulario");

					//EstadoServicio
					if(!this.servicioConstantesFunciones.cargarid_estado_servicioServicio || this.servicioConstantesFunciones.event_dependid_estado_servicioServicio) {
						//this.cargarCombosEstadoServiciosForeignKeyLista(" where id="+this.servicio.getid_estado_servicio());
									//this.inicializarActualizarBindingServicio(false,false);
						this.estadoserviciosForeignKey=new ArrayList<EstadoServicio>();

						if(servicio.getEstadoServicio()!=null) {
							this.estadoserviciosForeignKey.add(servicio.getEstadoServicio());
						}

						this.addItemDefectoCombosForeignKeyEstadoServicio();
						this.cargarCombosFrameEstadoServiciosForeignKey("Todos");
					}
					this.setActualEstadoServicioForeignKey(this.servicio.getid_estado_servicio(),false,"Formulario");

					//CuentaContableGasto
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_gastoServicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_gastoServicio) {
						//this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_gasto());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableGasto()!=null) {
							this.cuentacontablegastosForeignKey.add(servicio.getCuentaContableGasto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableGasto();
						this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
					}
					this.setActualCuentaContableGastoForeignKey(this.servicio.getid_cuenta_contable_gasto(),false,"Formulario");

					//CuentaContableFiscal
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscalServicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_fiscalServicio) {
						//this.cargarCombosCuentaContableFiscalsForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_fiscal());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontablefiscalsForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableFiscal()!=null) {
							this.cuentacontablefiscalsForeignKey.add(servicio.getCuentaContableFiscal());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableFiscal();
						this.cargarCombosFrameCuentaContableFiscalsForeignKey("Todos");
					}
					this.setActualCuentaContableFiscalForeignKey(this.servicio.getid_cuenta_contable_fiscal(),false,"Formulario");

					//CuentaContableFiscal2
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_fiscal2Servicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_fiscal2Servicio) {
						//this.cargarCombosCuentaContableFiscal2sForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_fiscal2());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontablefiscal2sForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableFiscal2()!=null) {
							this.cuentacontablefiscal2sForeignKey.add(servicio.getCuentaContableFiscal2());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableFiscal2();
						this.cargarCombosFrameCuentaContableFiscal2sForeignKey("Todos");
					}
					this.setActualCuentaContableFiscal2ForeignKey(this.servicio.getid_cuenta_contable_fiscal2(),false,"Formulario");

					//CuentaContableRetencion
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_retencionServicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_retencionServicio) {
						//this.cargarCombosCuentaContableRetencionsForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_retencion());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontableretencionsForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableRetencion()!=null) {
							this.cuentacontableretencionsForeignKey.add(servicio.getCuentaContableRetencion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableRetencion();
						this.cargarCombosFrameCuentaContableRetencionsForeignKey("Todos");
					}
					this.setActualCuentaContableRetencionForeignKey(this.servicio.getid_cuenta_contable_retencion(),false,"Formulario");

					//CuentaContableRetencion2
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_retencion2Servicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_retencion2Servicio) {
						//this.cargarCombosCuentaContableRetencion2sForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_retencion2());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontableretencion2sForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableRetencion2()!=null) {
							this.cuentacontableretencion2sForeignKey.add(servicio.getCuentaContableRetencion2());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableRetencion2();
						this.cargarCombosFrameCuentaContableRetencion2sForeignKey("Todos");
					}
					this.setActualCuentaContableRetencion2ForeignKey(this.servicio.getid_cuenta_contable_retencion2(),false,"Formulario");

					//CuentaContableIva
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_ivaServicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_ivaServicio) {
						//this.cargarCombosCuentaContableIvasForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_iva());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontableivasForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableIva()!=null) {
							this.cuentacontableivasForeignKey.add(servicio.getCuentaContableIva());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableIva();
						this.cargarCombosFrameCuentaContableIvasForeignKey("Todos");
					}
					this.setActualCuentaContableIvaForeignKey(this.servicio.getid_cuenta_contable_iva(),false,"Formulario");

					//CuentaContableIva2
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_iva2Servicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_iva2Servicio) {
						//this.cargarCombosCuentaContableIva2sForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_iva2());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontableiva2sForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableIva2()!=null) {
							this.cuentacontableiva2sForeignKey.add(servicio.getCuentaContableIva2());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableIva2();
						this.cargarCombosFrameCuentaContableIva2sForeignKey("Todos");
					}
					this.setActualCuentaContableIva2ForeignKey(this.servicio.getid_cuenta_contable_iva2(),false,"Formulario");

					//CuentaContableCredito
					if(!this.servicioConstantesFunciones.cargarid_cuenta_contable_creditoServicio || this.servicioConstantesFunciones.event_dependid_cuenta_contable_creditoServicio) {
						//this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+this.servicio.getid_cuenta_contable_credito());
									//this.inicializarActualizarBindingServicio(false,false);
						this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

						if(servicio.getCuentaContableCredito()!=null) {
							this.cuentacontablecreditosForeignKey.add(servicio.getCuentaContableCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCredito();
						this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoForeignKey(this.servicio.getid_cuenta_contable_credito(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesServicio("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesServicio(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualServicio() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoServicio(Servicio servicio) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoServicio(servicio,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoServicio(Servicio servicio,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioServicio(servicio);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyServicio(servicio,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyServicio(servicio);
	}
	
	public void setVariablesObjetoActualToFormularioServicio(Servicio servicio) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormServicio.jLabelidServicio.setText(servicio.getId().toString());
			this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setText(servicio.getcodigo());
			this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setText(servicio.getnombre());
			this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setText(servicio.getiva().toString());
			this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setText(servicio.getice().toString());
			this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setSelected(servicio.getes_bien());
			this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setText(servicio.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Servicio servicioLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,servicioLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Servicio servicioLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				servicioLocal=this.servicio;
			} else {
				servicioLocal=this.servicioAnterior;
			}
		}
		
		if(this.permiteMantenimiento(servicioLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoServicio(servicioLocal,true);
					
					if(servicioSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(servicioLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.servicioSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(servicioLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoServicio(Servicio servicio,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualServicio(servicio,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysServicio(servicio);
	}
	
	public void setVariablesFormularioToObjetoActualServicio(Servicio servicio,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualServicio(servicio,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualServicio(Servicio servicio,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormServicio.jLabelidServicio.getText()==null || this.jInternalFrameDetalleFormServicio.jLabelidServicio.getText()=="" || this.jInternalFrameDetalleFormServicio.jLabelidServicio.getText()=="Id") {
				this.jInternalFrameDetalleFormServicio.jLabelidServicio.setText("0");
			}

			if(conColumnasBase) {servicio.setId(Long.parseLong(this.jInternalFrameDetalleFormServicio.jLabelidServicio.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelIdServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setcodigo(this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelcodigoServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setnombre(this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelnombreServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setiva(Double.parseDouble(this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabelivaServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setice(Double.parseDouble(this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeliceServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setes_bien(this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_ESBIEN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeles_bienServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			servicio.setdescripcion(this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ServicioConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormServicio.jLabeldescripcionServicio,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualServicio(Servicio servicioBean,Servicio servicio,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && servicioBean.getid_tipo_servicio()!=null && !servicioBean.getid_tipo_servicio().equals(-1L))) {servicio.setid_tipo_servicio(servicioBean.getid_tipo_servicio());}
			if(conDefault || (!conDefault && servicioBean.getid_estado_servicio()!=null && !servicioBean.getid_estado_servicio().equals(-1L))) {servicio.setid_estado_servicio(servicioBean.getid_estado_servicio());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_gasto()!=null && !servicioBean.getid_cuenta_contable_gasto().equals(-1L))) {servicio.setid_cuenta_contable_gasto(servicioBean.getid_cuenta_contable_gasto());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_fiscal()!=null && !servicioBean.getid_cuenta_contable_fiscal().equals(-1L))) {servicio.setid_cuenta_contable_fiscal(servicioBean.getid_cuenta_contable_fiscal());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_fiscal2()!=null && !servicioBean.getid_cuenta_contable_fiscal2().equals(null))) {servicio.setid_cuenta_contable_fiscal2(servicioBean.getid_cuenta_contable_fiscal2());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_retencion()!=null && !servicioBean.getid_cuenta_contable_retencion().equals(-1L))) {servicio.setid_cuenta_contable_retencion(servicioBean.getid_cuenta_contable_retencion());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_retencion2()!=null && !servicioBean.getid_cuenta_contable_retencion2().equals(null))) {servicio.setid_cuenta_contable_retencion2(servicioBean.getid_cuenta_contable_retencion2());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_iva()!=null && !servicioBean.getid_cuenta_contable_iva().equals(-1L))) {servicio.setid_cuenta_contable_iva(servicioBean.getid_cuenta_contable_iva());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_iva2()!=null && !servicioBean.getid_cuenta_contable_iva2().equals(null))) {servicio.setid_cuenta_contable_iva2(servicioBean.getid_cuenta_contable_iva2());}
			if(conDefault || (!conDefault && servicioBean.getid_cuenta_contable_credito()!=null && !servicioBean.getid_cuenta_contable_credito().equals(null))) {servicio.setid_cuenta_contable_credito(servicioBean.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosServicio(Servicio servicioOrigen,Servicio servicio,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && servicioOrigen.getId()!=null && !servicioOrigen.getId().equals(0L))) {servicio.setId(servicioOrigen.getId());}}
			if(conDefault || (!conDefault && servicioOrigen.getid_tipo_servicio()!=null && !servicioOrigen.getid_tipo_servicio().equals(-1L))) {servicio.setid_tipo_servicio(servicioOrigen.getid_tipo_servicio());}
			if(conDefault || (!conDefault && servicioOrigen.getcodigo()!=null && !servicioOrigen.getcodigo().equals(""))) {servicio.setcodigo(servicioOrigen.getcodigo());}
			if(conDefault || (!conDefault && servicioOrigen.getnombre()!=null && !servicioOrigen.getnombre().equals(""))) {servicio.setnombre(servicioOrigen.getnombre());}
			if(conDefault || (!conDefault && servicioOrigen.getiva()!=null && !servicioOrigen.getiva().equals(0.0))) {servicio.setiva(servicioOrigen.getiva());}
			if(conDefault || (!conDefault && servicioOrigen.getice()!=null && !servicioOrigen.getice().equals(0.0))) {servicio.setice(servicioOrigen.getice());}
			if(conDefault || (!conDefault && servicioOrigen.getes_bien()!=null && !servicioOrigen.getes_bien().equals(false))) {servicio.setes_bien(servicioOrigen.getes_bien());}
			if(conDefault || (!conDefault && servicioOrigen.getid_estado_servicio()!=null && !servicioOrigen.getid_estado_servicio().equals(-1L))) {servicio.setid_estado_servicio(servicioOrigen.getid_estado_servicio());}
			if(conDefault || (!conDefault && servicioOrigen.getdescripcion()!=null && !servicioOrigen.getdescripcion().equals(""))) {servicio.setdescripcion(servicioOrigen.getdescripcion());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_gasto()!=null && !servicioOrigen.getid_cuenta_contable_gasto().equals(-1L))) {servicio.setid_cuenta_contable_gasto(servicioOrigen.getid_cuenta_contable_gasto());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_fiscal()!=null && !servicioOrigen.getid_cuenta_contable_fiscal().equals(-1L))) {servicio.setid_cuenta_contable_fiscal(servicioOrigen.getid_cuenta_contable_fiscal());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_fiscal2()!=null && !servicioOrigen.getid_cuenta_contable_fiscal2().equals(null))) {servicio.setid_cuenta_contable_fiscal2(servicioOrigen.getid_cuenta_contable_fiscal2());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_retencion()!=null && !servicioOrigen.getid_cuenta_contable_retencion().equals(-1L))) {servicio.setid_cuenta_contable_retencion(servicioOrigen.getid_cuenta_contable_retencion());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_retencion2()!=null && !servicioOrigen.getid_cuenta_contable_retencion2().equals(null))) {servicio.setid_cuenta_contable_retencion2(servicioOrigen.getid_cuenta_contable_retencion2());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_iva()!=null && !servicioOrigen.getid_cuenta_contable_iva().equals(-1L))) {servicio.setid_cuenta_contable_iva(servicioOrigen.getid_cuenta_contable_iva());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_iva2()!=null && !servicioOrigen.getid_cuenta_contable_iva2().equals(null))) {servicio.setid_cuenta_contable_iva2(servicioOrigen.getid_cuenta_contable_iva2());}
			if(conDefault || (!conDefault && servicioOrigen.getid_cuenta_contable_credito()!=null && !servicioOrigen.getid_cuenta_contable_credito().equals(null))) {servicio.setid_cuenta_contable_credito(servicioOrigen.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioServicio(Servicio servicio) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormServicio.jLabelidServicio.setText(servicio.getId().toString());
			this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setText(servicio.getcodigo());
			this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setText(servicio.getnombre());
			this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setText(servicio.getiva().toString());
			this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setText(servicio.getice().toString());
			this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setSelected(servicio.getes_bien());
			this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setText(servicio.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioServicio(ServicioBean servicioBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormServicio.jLabelidServicio.setText(servicioBean.getId().toString());
			this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setText(servicioBean.getcodigo());
			this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setText(servicioBean.getnombre());
			this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setText(servicioBean.getiva().toString());
			this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setText(servicioBean.getice().toString());
			this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setSelected(servicioBean.getes_bien());
			this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setText(servicioBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanServicio(ServicioParameterReturnGeneral servicioReturnGeneral,ServicioBean servicioBean,Boolean conDefault) throws Exception { 
		try {
			Servicio servicioLocal=new Servicio();
			
			servicioLocal=servicioReturnGeneral.getServicio();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && servicioLocal.getId()!=null && !servicioLocal.getId().equals(0L))) {servicioBean.setId(servicioLocal.getId());}}
			if(conDefault || (!conDefault && servicioLocal.getid_tipo_servicio()!=null && !servicioLocal.getid_tipo_servicio().equals(-1L))) {servicioBean.setid_tipo_servicio(servicioLocal.getid_tipo_servicio());}
			if(conDefault || (!conDefault && servicioLocal.getcodigo()!=null && !servicioLocal.getcodigo().equals(""))) {servicioBean.setcodigo(servicioLocal.getcodigo());}
			if(conDefault || (!conDefault && servicioLocal.getnombre()!=null && !servicioLocal.getnombre().equals(""))) {servicioBean.setnombre(servicioLocal.getnombre());}
			if(conDefault || (!conDefault && servicioLocal.getiva()!=null && !servicioLocal.getiva().equals(0.0))) {servicioBean.setiva(servicioLocal.getiva());}
			if(conDefault || (!conDefault && servicioLocal.getice()!=null && !servicioLocal.getice().equals(0.0))) {servicioBean.setice(servicioLocal.getice());}
			if(conDefault || (!conDefault && servicioLocal.getes_bien()!=null && !servicioLocal.getes_bien().equals(false))) {servicioBean.setes_bien(servicioLocal.getes_bien());}
			if(conDefault || (!conDefault && servicioLocal.getid_estado_servicio()!=null && !servicioLocal.getid_estado_servicio().equals(-1L))) {servicioBean.setid_estado_servicio(servicioLocal.getid_estado_servicio());}
			if(conDefault || (!conDefault && servicioLocal.getdescripcion()!=null && !servicioLocal.getdescripcion().equals(""))) {servicioBean.setdescripcion(servicioLocal.getdescripcion());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_gasto()!=null && !servicioLocal.getid_cuenta_contable_gasto().equals(-1L))) {servicioBean.setid_cuenta_contable_gasto(servicioLocal.getid_cuenta_contable_gasto());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_fiscal()!=null && !servicioLocal.getid_cuenta_contable_fiscal().equals(-1L))) {servicioBean.setid_cuenta_contable_fiscal(servicioLocal.getid_cuenta_contable_fiscal());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_fiscal2()!=null && !servicioLocal.getid_cuenta_contable_fiscal2().equals(null))) {servicioBean.setid_cuenta_contable_fiscal2(servicioLocal.getid_cuenta_contable_fiscal2());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_retencion()!=null && !servicioLocal.getid_cuenta_contable_retencion().equals(-1L))) {servicioBean.setid_cuenta_contable_retencion(servicioLocal.getid_cuenta_contable_retencion());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_retencion2()!=null && !servicioLocal.getid_cuenta_contable_retencion2().equals(null))) {servicioBean.setid_cuenta_contable_retencion2(servicioLocal.getid_cuenta_contable_retencion2());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_iva()!=null && !servicioLocal.getid_cuenta_contable_iva().equals(-1L))) {servicioBean.setid_cuenta_contable_iva(servicioLocal.getid_cuenta_contable_iva());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_iva2()!=null && !servicioLocal.getid_cuenta_contable_iva2().equals(null))) {servicioBean.setid_cuenta_contable_iva2(servicioLocal.getid_cuenta_contable_iva2());}
			if(conDefault || (!conDefault && servicioLocal.getid_cuenta_contable_credito()!=null && !servicioLocal.getid_cuenta_contable_credito().equals(null))) {servicioBean.setid_cuenta_contable_credito(servicioLocal.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxServicioGenerico(Long idServicioSeleccionado,JComboBox jComboBoxServicio,List<Servicio> serviciosLocal)throws Exception {
		try {
			Servicio  servicioTemp=null;

			for(Servicio servicioAux:serviciosLocal) {
				if(servicioAux.getId()!=null && servicioAux.getId().equals(idServicioSeleccionado)) {
					servicioTemp=servicioAux;
					break;
				}
			}

			jComboBoxServicio.setSelectedItem(servicioTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxServicioGenerico(JComboBox jComboBoxServicio,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxServicio.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxServicio.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxServicio.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxServicio.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxServicio.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxServicio.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			servicio=(Servicio) servicioLogic.getServicios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			servicio =(Servicio) servicios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getempresa_descripcion();
			}
		}

		if(sTipo.equals("TipoServicio")) {
			//sDescripcion=this.getActualTipoServicioForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.gettiposervicio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.gettiposervicio_descripcion();
			}
		}

		if(sTipo.equals("EstadoServicio")) {
			//sDescripcion=this.getActualEstadoServicioForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getestadoservicio_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoServicioForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getestadoservicio_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableGasto")) {
			//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontablegasto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontablegasto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableFiscal")) {
			//sDescripcion=this.getActualCuentaContableFiscalForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontablefiscal_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableFiscalForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontablefiscal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableFiscal2")) {
			//sDescripcion=this.getActualCuentaContableFiscal2ForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontablefiscal2_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableFiscal2ForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontablefiscal2_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableRetencion")) {
			//sDescripcion=this.getActualCuentaContableRetencionForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontableretencion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontableretencion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableRetencion2")) {
			//sDescripcion=this.getActualCuentaContableRetencion2ForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontableretencion2_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableRetencion2ForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontableretencion2_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableIva")) {
			//sDescripcion=this.getActualCuentaContableIvaForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontableiva_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableIvaForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontableiva_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableIva2")) {
			//sDescripcion=this.getActualCuentaContableIva2ForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontableiva2_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableIva2ForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontableiva2_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCredito")) {
			//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
			if(!servicio.getIsNew() && !servicio.getIsChanged() && !servicio.getIsDeleted()) {
				sDescripcion=servicio.getcuentacontablecredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=servicio.getcuentacontablecredito_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Servicio servicioRow=new Servicio();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			servicioRow=(Servicio) servicioLogic.getServicios().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			servicioRow=(Servicio) servicios.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualServicio(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio));			
			this.jButtonDuplicarServicio.setVisible((this.isVisibilidadCeldaDuplicarServicio && this.isPermisoDuplicarServicio));			
			this.jButtonCopiarServicio.setVisible((this.isVisibilidadCeldaCopiarServicio && this.isPermisoCopiarServicio));
			this.jButtonVerFormServicio.setVisible((this.isVisibilidadCeldaVerFormServicio && this.isPermisoVerFormServicio));
			
			this.jButtonAbrirOrderByServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));			
			
			this.jButtonNuevoRelacionesServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicio && this.isPermisoNuevoServicio));			
			this.jButtonNuevoGuardarCambiosServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio && this.isPermisoGuardarCambiosServicio));
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.jInternalFrameDetalleFormServicio.jButtonModificarServicio.setVisible((this.isVisibilidadCeldaModificarServicio && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.setVisible((this.isVisibilidadCeldaActualizarServicio && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.setVisible((this.isVisibilidadCeldaEliminarServicio && this.isPermisoEliminarServicio));
			this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.setVisible(this.isVisibilidadCeldaCancelarServicio);							
			this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.setVisible((this.isVisibilidadCeldaGuardarServicio && this.isPermisoGuardarCambiosServicio));			
			
			}
						
			this.jButtonGuardarCambiosTablaServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosServicio && this.isPermisoGuardarCambiosServicio));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio));						
			this.jButtonDuplicarToolBarServicio.setVisible((this.isVisibilidadCeldaDuplicarServicio && this.isPermisoDuplicarServicio));						
			this.jButtonCopiarToolBarServicio.setVisible((this.isVisibilidadCeldaCopiarServicio && this.isPermisoCopiarServicio));			
			this.jButtonVerFormToolBarServicio.setVisible((this.isVisibilidadCeldaVerFormServicio && this.isPermisoVerFormServicio));			
			this.jButtonAbrirOrderByToolBarServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));
			this.jButtonNuevoRelacionesToolBarServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicio && this.isPermisoNuevoServicio));			
			this.jButtonNuevoGuardarCambiosToolBarServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio && this.isPermisoGuardarCambiosServicio));			
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.jInternalFrameDetalleFormServicio.jButtonModificarToolBarServicio.setVisible((this.isVisibilidadCeldaModificarServicio && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jButtonActualizarToolBarServicio.setVisible((this.isVisibilidadCeldaActualizarServicio  && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jButtonEliminarToolBarServicio.setVisible((this.isVisibilidadCeldaEliminarServicio && this.isPermisoEliminarServicio));
			this.jInternalFrameDetalleFormServicio.jButtonCancelarToolBarServicio.setVisible(this.isVisibilidadCeldaCancelarServicio);				
			this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosToolBarServicio.setVisible((this.isVisibilidadCeldaGuardarServicio && this.isPermisoGuardarCambiosServicio));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosServicio && this.isPermisoGuardarCambiosServicio));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio));			
			this.jMenuItemDuplicarServicio.setVisible((this.isVisibilidadCeldaDuplicarServicio && this.isPermisoDuplicarServicio));			
			this.jMenuItemCopiarServicio.setVisible((this.isVisibilidadCeldaCopiarServicio && this.isPermisoCopiarServicio));			
			this.jMenuItemVerFormServicio.setVisible((this.isVisibilidadCeldaVerFormServicio && this.isPermisoVerFormServicio));			
			this.jMenuItemAbrirOrderByServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));			
			//this.jMenuItemMostrarOcultarServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));
			this.jMenuItemDetalleAbrirOrderByServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));			
			//this.jMenuItemDetalleMostrarOcultarServicio.setVisible((this.isVisibilidadCeldaOrdenServicio && this.isPermisoOrdenServicio));			
			this.jMenuItemNuevoRelacionesServicio.setVisible((this.isVisibilidadCeldaNuevoRelacionesServicio && this.isPermisoNuevoServicio));			
			this.jMenuItemNuevoGuardarCambiosServicio.setVisible((this.isVisibilidadCeldaNuevoServicio && this.isPermisoNuevoServicio && this.isPermisoGuardarCambiosServicio));									
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.jInternalFrameDetalleFormServicio.jMenuItemModificarServicio.setVisible((this.isVisibilidadCeldaModificarServicio && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jMenuItemActualizarServicio.setVisible((this.isVisibilidadCeldaActualizarServicio && this.isPermisoActualizarServicio));	
			this.jInternalFrameDetalleFormServicio.jMenuItemEliminarServicio.setVisible((this.isVisibilidadCeldaEliminarServicio && this.isPermisoEliminarServicio));
			this.jInternalFrameDetalleFormServicio.jMenuItemCancelarServicio.setVisible(this.isVisibilidadCeldaCancelarServicio);				
			}
			
			this.jMenuItemGuardarCambiosServicio.setVisible((this.isVisibilidadCeldaGuardarServicio && this.isPermisoGuardarCambiosServicio));						
			this.jMenuItemGuardarCambiosTablaServicio.setVisible((this.isVisibilidadCeldaGuardarCambiosServicio && this.isPermisoGuardarCambiosServicio));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoServicio=this.jButtonNuevoServicio.isVisible();
			this.isVisibilidadCeldaDuplicarServicio=this.jButtonDuplicarServicio.isVisible();
			this.isVisibilidadCeldaCopiarServicio=this.jButtonCopiarServicio.isVisible();
			this.isVisibilidadCeldaVerFormServicio=this.jButtonVerFormServicio.isVisible();
			
			this.isVisibilidadCeldaOrdenServicio=this.jButtonAbrirOrderByServicio.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesServicio=this.jButtonNuevoRelacionesServicio.isVisible();
			this.isVisibilidadCeldaModificarServicio=this.jButtonModificarServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.isVisibilidadCeldaActualizarServicio=this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.isVisible();
			this.isVisibilidadCeldaEliminarServicio=this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.isVisible();
			this.isVisibilidadCeldaCancelarServicio=this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.isVisible();
			this.isVisibilidadCeldaGuardarServicio=this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosServicio=this.jButtonGuardarCambiosTablaServicio.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoServicio=this.jButtonNuevoToolBarServicio.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesServicio=this.jButtonNuevoRelacionesToolBarServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.isVisibilidadCeldaModificarServicio=this.jInternalFrameDetalleFormServicio.jButtonModificarToolBarServicio.isVisible();
			this.isVisibilidadCeldaActualizarServicio=this.jInternalFrameDetalleFormServicio.jButtonActualizarToolBarServicio.isVisible();
			this.isVisibilidadCeldaEliminarServicio=this.jInternalFrameDetalleFormServicio.jButtonEliminarToolBarServicio.isVisible();
			this.isVisibilidadCeldaCancelarServicio=this.jInternalFrameDetalleFormServicio.jButtonCancelarToolBarServicio.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarServicio=this.jButtonGuardarCambiosToolBarServicio.isVisible();
			this.isVisibilidadCeldaGuardarCambiosServicio=this.jButtonGuardarCambiosTablaToolBarServicio.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoServicio=this.jMenuItemNuevoServicio.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesServicio=this.jMenuItemNuevoRelacionesServicio.isVisible();
			
			if(this.jInternalFrameDetalleFormServicio!=null) {
			this.isVisibilidadCeldaModificarServicio=this.jInternalFrameDetalleFormServicio.jMenuItemModificarServicio.isVisible();
			this.isVisibilidadCeldaActualizarServicio=this.jInternalFrameDetalleFormServicio.jMenuItemActualizarServicio.isVisible();
			this.isVisibilidadCeldaEliminarServicio=this.jInternalFrameDetalleFormServicio.jMenuItemEliminarServicio.isVisible();
			this.isVisibilidadCeldaCancelarServicio=this.jInternalFrameDetalleFormServicio.jMenuItemCancelarServicio.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarServicio=this.jMenuItemGuardarCambiosServicio.isVisible();
			this.isVisibilidadCeldaGuardarCambiosServicio=this.jMenuItemGuardarCambiosTablaServicio.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesServicio(Boolean esInicializar) {
		if(ServicioJInternalFrame.ISBINDING_MANUAL) {			
			if(this.servicioSessionBean.getConGuardarRelaciones()) {
				//if(this.servicioSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesServicio();
			}
			
			this.inicializarActualizarBindingBotonesManualServicio(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualServicio() {
		this.jButtonNuevoServicio.setVisible(this.isPermisoNuevoServicio);			
		this.jButtonDuplicarServicio.setVisible(this.isPermisoDuplicarServicio);			
		this.jButtonCopiarServicio.setVisible(this.isPermisoCopiarServicio);			
		this.jButtonVerFormServicio.setVisible(this.isPermisoVerFormServicio);			
		
		this.jButtonAbrirOrderByServicio.setVisible(this.isPermisoOrdenServicio);					
		
		this.jButtonNuevoRelacionesServicio.setVisible(this.isPermisoNuevoServicio);			
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonModificarServicio.setVisible(this.isPermisoActualizarServicio);	
			this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.setVisible(this.isPermisoActualizarServicio);	
			this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.setVisible(this.isPermisoEliminarServicio);
			this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.setVisible(this.isVisibilidadCeldaCancelarServicio);						
			this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.setVisible(this.isPermisoGuardarCambiosServicio);							
		}
		
		this.jButtonGuardarCambiosTablaServicio.setVisible(this.isPermisoActualizarServicio);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleServicio() {
		this.jInternalFrameDetalleFormServicio.jButtonModificarServicio.setVisible(this.isPermisoActualizarServicio);	
		this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.setVisible(this.isPermisoActualizarServicio);	
		this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.setVisible(this.isPermisoEliminarServicio);
		this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.setVisible(this.isVisibilidadCeldaCancelarServicio);							
		this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.setVisible((this.isVisibilidadCeldaGuardarServicio && this.isPermisoGuardarCambiosServicio));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosServicio() {
		if(ServicioJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualServicio();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesServicio() {
	}
	
	public void jTableDatosServicioListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarServicio(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.servicio.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebServicio(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.servicio.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderServicio.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.servicio.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_servicioServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiposervicio=true;

			idTienePermisotiposervicio=this.tienePermisosUsuarioEnPaginaWebServicio(TipoServicioConstantesFunciones.CLASSNAME);

			if(idTienePermisotiposervicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.tiposervicioBeanSwingJInternalFrame=new TipoServicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiposervicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiposervicioBeanSwingJInternalFrame.getTipoServicioLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_tipo_servicio()!=null) {
					this.tiposervicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiposervicioBeanSwingJInternalFrame.setIdActual(this.servicio.getid_tipo_servicio());
					this.tiposervicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiposervicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiposervicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoServicio();
				}

				JInternalFrameBase jinternalFrame =this.tiposervicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordertiposervicio=(TitledBorder)this.tiposervicioBeanSwingJInternalFrame.jScrollPanelDatosTipoServicio.getBorder();

				titledBordertiposervicio.setTitle(titledBorderServicio.getTitle() + " -> Tipo Servicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_servicioServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_tipo_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_servicio = "+this.servicio.getid_tipo_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.servicio.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.servicio.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.servicio.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.servicio.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_bienServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getes_bien()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_bien = "+this.servicio.getes_bien().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_servicioServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadoservicio=true;

			idTienePermisoestadoservicio=this.tienePermisosUsuarioEnPaginaWebServicio(EstadoServicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadoservicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.estadoservicioBeanSwingJInternalFrame=new EstadoServicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadoservicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadoservicioBeanSwingJInternalFrame.getEstadoServicioLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_estado_servicio()!=null) {
					this.estadoservicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadoservicioBeanSwingJInternalFrame.setIdActual(this.servicio.getid_estado_servicio());
					this.estadoservicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadoservicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadoservicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoServicio();
				}

				JInternalFrameBase jinternalFrame =this.estadoservicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBorderestadoservicio=(TitledBorder)this.estadoservicioBeanSwingJInternalFrame.jScrollPanelDatosEstadoServicio.getBorder();

				titledBorderestadoservicio.setTitle(titledBorderServicio.getTitle() + " -> Estado Servicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_servicioServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_estado_servicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_servicio = "+this.servicio.getid_estado_servicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.servicio.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_gastoServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableGasto";

			if(!this.sFinalQueryGeneral_cuentacontablegasto.equals("")) {
				this.cuentacontablegastoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablegasto);
				this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableGasto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontablegasto=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_gastoServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablegasto=true;

			idTienePermisocuentacontablegasto=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablegasto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablegastoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_gasto()!=null) {
					this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablegastoBeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_gasto());
					this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_gastoServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_gasto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_gasto = "+this.servicio.getid_cuenta_contable_gasto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_fiscalServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablefiscalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablefiscalBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablefiscalBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableFiscal";

			if(!this.sFinalQueryGeneral_cuentacontablefiscal.equals("")) {
				this.cuentacontablefiscalBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablefiscal);
				this.cuentacontablefiscalBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablefiscalBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablefiscalBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablefiscalBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableFiscal.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablefiscalBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontablefiscal=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontablefiscal=(TitledBorder)this.cuentacontablefiscalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefiscal.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_fiscalServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablefiscal=true;

			idTienePermisocuentacontablefiscal=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablefiscal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontablefiscalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablefiscalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablefiscalBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_fiscal()!=null) {
					this.cuentacontablefiscalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablefiscalBeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_fiscal());
					this.cuentacontablefiscalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablefiscalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablefiscalBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablefiscalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontablefiscal=(TitledBorder)this.cuentacontablefiscalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefiscal.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_fiscalServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_fiscal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_fiscal = "+this.servicio.getid_cuenta_contable_fiscal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablefiscal2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablefiscal2BeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablefiscal2BeanSwingJInternalFrame.sTipoBusqueda="CuentaContableFiscal2";

			if(!this.sFinalQueryGeneral_cuentacontablefiscal2.equals("")) {
				this.cuentacontablefiscal2BeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablefiscal2);
				this.cuentacontablefiscal2BeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablefiscal2BeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablefiscal2BeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablefiscal2BeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableFiscal2.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablefiscal2BeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontablefiscal2=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontablefiscal2=(TitledBorder)this.cuentacontablefiscal2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefiscal2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_fiscal2ServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablefiscal2=true;

			idTienePermisocuentacontablefiscal2=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablefiscal2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontablefiscal2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablefiscal2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablefiscal2BeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_fiscal2()!=null) {
					this.cuentacontablefiscal2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablefiscal2BeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_fiscal2());
					this.cuentacontablefiscal2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablefiscal2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablefiscal2BeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablefiscal2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontablefiscal2=(TitledBorder)this.cuentacontablefiscal2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablefiscal2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_fiscal2ServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_fiscal2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_fiscal2 = "+this.servicio.getid_cuenta_contable_fiscal2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_retencionServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableretencionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableretencionBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableRetencion";

			if(!this.sFinalQueryGeneral_cuentacontableretencion.equals("")) {
				this.cuentacontableretencionBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableretencion);
				this.cuentacontableretencionBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableretencionBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableretencionBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableretencionBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableRetencion.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableretencionBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontableretencion=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontableretencion=(TitledBorder)this.cuentacontableretencionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_retencionServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableretencion=true;

			idTienePermisocuentacontableretencion=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableretencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontableretencionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableretencionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_retencion()!=null) {
					this.cuentacontableretencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableretencionBeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_retencion());
					this.cuentacontableretencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableretencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableretencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableretencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontableretencion=(TitledBorder)this.cuentacontableretencionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_retencionServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_retencion = "+this.servicio.getid_cuenta_contable_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_retencion2ServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableretencion2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableretencion2BeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableretencion2BeanSwingJInternalFrame.sTipoBusqueda="CuentaContableRetencion2";

			if(!this.sFinalQueryGeneral_cuentacontableretencion2.equals("")) {
				this.cuentacontableretencion2BeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableretencion2);
				this.cuentacontableretencion2BeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableretencion2BeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableretencion2BeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableretencion2BeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableRetencion2.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableretencion2BeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontableretencion2=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontableretencion2=(TitledBorder)this.cuentacontableretencion2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_retencion2ServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableretencion2=true;

			idTienePermisocuentacontableretencion2=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableretencion2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontableretencion2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableretencion2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableretencion2BeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_retencion2()!=null) {
					this.cuentacontableretencion2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableretencion2BeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_retencion2());
					this.cuentacontableretencion2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableretencion2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableretencion2BeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableretencion2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontableretencion2=(TitledBorder)this.cuentacontableretencion2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableretencion2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_retencion2ServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_retencion2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_retencion2 = "+this.servicio.getid_cuenta_contable_retencion2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_ivaServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableivaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableivaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableivaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableIva";

			if(!this.sFinalQueryGeneral_cuentacontableiva.equals("")) {
				this.cuentacontableivaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableiva);
				this.cuentacontableivaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableivaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableivaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableivaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableIva.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableivaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontableiva=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontableiva=(TitledBorder)this.cuentacontableivaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableiva.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_ivaServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableiva=true;

			idTienePermisocuentacontableiva=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableiva) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontableivaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableivaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableivaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_iva()!=null) {
					this.cuentacontableivaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableivaBeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_iva());
					this.cuentacontableivaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableivaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableivaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableivaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontableiva=(TitledBorder)this.cuentacontableivaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableiva.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_ivaServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_iva = "+this.servicio.getid_cuenta_contable_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_iva2ServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableiva2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableiva2BeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableiva2BeanSwingJInternalFrame.sTipoBusqueda="CuentaContableIva2";

			if(!this.sFinalQueryGeneral_cuentacontableiva2.equals("")) {
				this.cuentacontableiva2BeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableiva2);
				this.cuentacontableiva2BeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableiva2BeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableiva2BeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableiva2BeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableIva2.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableiva2BeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontableiva2=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontableiva2=(TitledBorder)this.cuentacontableiva2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableiva2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_iva2ServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableiva2=true;

			idTienePermisocuentacontableiva2=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableiva2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontableiva2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableiva2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableiva2BeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_iva2()!=null) {
					this.cuentacontableiva2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableiva2BeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_iva2());
					this.cuentacontableiva2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableiva2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableiva2BeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableiva2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontableiva2=(TitledBorder)this.cuentacontableiva2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableiva2.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_iva2ServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_iva2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_iva2 = "+this.servicio.getid_cuenta_contable_iva2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_creditoServicioActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCredito";

			if(!this.sFinalQueryGeneral_cuentacontablecredito.equals("")) {
				this.cuentacontablecreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecredito);
				this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderServicio=null;
			TitledBorder titledBordercuentacontablecredito=null;

			if(!this.jScrollPanelDatosServicio.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_creditoServicioUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecredito=true;

			idTienePermisocuentacontablecredito=this.tienePermisosUsuarioEnPaginaWebServicio(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosServicio.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosServicio.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);

				this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.servicioLogic.getConnexion());

				if(this.servicio.getid_cuenta_contable_credito()!=null) {
					this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoBeanSwingJInternalFrame.setIdActual(this.servicio.getid_cuenta_contable_credito());
					this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderServicio=(TitledBorder)this.jScrollPanelDatosServicio.getBorder();
				TitledBorder titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderServicio.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_creditoServicioBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosServicio.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualServicio(this.getservicio(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.servicio==null) {
						this.servicio = new Servicio();
					}

					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);
				}

				if(this.servicio.getid_cuenta_contable_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito = "+this.servicio.getid_cuenta_contable_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingServicio(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosBusquedaPorCodigo();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNombreServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosBusquedaPorNombre();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableFiscalServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableFiscal();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableFiscal2ServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableFiscal2();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableGastoServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableGasto();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableIvaServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableIva();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableIva2ServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableIva2();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableRetencionServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableRetencion();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableRetencion2ServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdCuentaContableRetencion2();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdEmpresa();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoServicioServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdEstadoServicio();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoServicioServicioActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingServicio(false,false);

			this.getServiciosFK_IdTipoServicio();

			this.inicializarActualizarBindingServicio(false);

			//if(ServicioBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingServicio(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.servicioLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameServicio() {
		if(this.jInternalFrameDetalleFormServicio!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
			this.jInternalFrameDetalleFormServicio.setVisible(false);	    			
			this.jInternalFrameDetalleFormServicio.dispose();
			this.jInternalFrameDetalleFormServicio=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoServicio!=null) {
			this.jInternalFrameReporteDinamicoServicio.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoServicio.dispose();
			this.jInternalFrameReporteDinamicoServicio=null;
		}
		
		if(this.jInternalFrameImportacionServicio!=null) {
			this.jInternalFrameImportacionServicio.setVisible(false);	    			
			this.jInternalFrameImportacionServicio.dispose();
			this.jInternalFrameImportacionServicio=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessServicio();
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			
			if(sTipo.equals("NuevoServicio")) {
				jButtonNuevoServicioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarServicio")) {
				jButtonDuplicarServicioActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarServicio")) {
				jButtonCopiarServicioActionPerformed(evt);
			} else if(sTipo.equals("VerFormServicio")) {
				jButtonVerFormServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarServicio")) {
				jButtonNuevoServicioActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarServicio")) {
				jButtonDuplicarServicioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoServicio")) {
				jButtonNuevoServicioActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarServicio")) {
				jButtonDuplicarServicioActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesServicio")) {
				jButtonNuevoServicioActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarServicio")) {
				jButtonNuevoServicioActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesServicio")) {
				jButtonNuevoServicioActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarServicio")) {
				jButtonModificarServicioActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarServicio")) {
				jButtonModificarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarServicio")) {
				jButtonModificarServicioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarServicio")) {
				jButtonActualizarServicioActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarServicio")) {
				jButtonActualizarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarServicio")) {
				jButtonActualizarServicioActionPerformed(evt);
			} else if(sTipo.equals("EliminarServicio")) {
				jButtonEliminarServicioActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarServicio")) {
				jButtonEliminarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarServicio")) {
				jButtonEliminarServicioActionPerformed(evt);
			} else if(sTipo.equals("CancelarServicio")) {
				jButtonCancelarServicioActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarServicio")) {
				jButtonCancelarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarServicio")) {
				jButtonCancelarServicioActionPerformed(evt);
			} else if(sTipo.equals("CerrarServicio")) {
				jButtonCerrarServicioActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarServicio")) {
				jButtonCerrarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarServicio")) {
				jButtonCerrarServicioActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarServicio")) {
				jButtonMostrarOcultarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarServicio")) {
				jButtonCancelarServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarServicio")) {
				jButtonCopiarServicioActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarServicio")) {
				jButtonVerFormServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarServicio")) {
				jButtonCopiarServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormServicio")) {
				jButtonVerFormServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionServicio")) {
				jButtonRecargarInformacionServicioActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarServicio")) {
				jButtonRecargarInformacionServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionServicio")) {
				jButtonRecargarInformacionServicioActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresServicio")) {
				jButtonAnterioresServicioActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarServicio")) {
				jButtonAnterioresServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreServicio")) {
				jButtonAnterioresServicioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesServicio")) {
				jButtonSiguientesServicioActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarServicio")) {
				jButtonSiguientesServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesServicio")) {
				jButtonSiguientesServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByServicio") || sTipo.equals("MenuItemDetalleAbrirOrderByServicio")) {
				jButtonAbrirOrderByServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarServicio") || sTipo.equals("MenuItemDetalleMostrarOcultarServicio")) {
				jButtonMostrarOcultarServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosServicio")) {
				jButtonNuevoGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarServicio")) {
				jButtonNuevoGuardarCambiosServicioActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosServicio")) {
				jButtonNuevoGuardarCambiosServicioActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoServicio")) {
				jButtonCerrarReporteDinamicoServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoServicio")) {
				jButtonGenerarReporteDinamicoServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoServicio")) {
				
				jButtonGenerarExcelReporteDinamicoServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionServicio")) {
				jButtonCerrarImportacionServicioActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionServicio")) {
				
				jButtonGenerarImportacionServicioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionServicio")) {
				
				jButtonAbrirImportacionServicioActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesServicio")) {
				jComboBoxTiposAccionesServicioActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesServicio")) {
				jComboBoxTiposRelacionesServicioActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioServicio")) {
				jComboBoxTiposAccionesServicioActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarServicio")) {
				
				jComboBoxTiposSeleccionarServicioActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralServicio")) {
				jTextFieldValorCampoGeneralServicioActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByServicio")) {
				jButtonAbrirOrderByServicioActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarServicio")) {
				jButtonAbrirOrderByServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByServicio")) {
				jButtonCerrarOrderByServicioActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idServicioBusqueda")) {
				this.jButtonidServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaServicioUpdate")) {
				this.jButtonid_empresaServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaServicioBusqueda")) {
				this.jButtonid_empresaServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_servicioServicioUpdate")) {
				this.jButtonid_tipo_servicioServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_servicioServicioBusqueda")) {
				this.jButtonid_tipo_servicioServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoServicioBusqueda")) {
				this.jButtoncodigoServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreServicioBusqueda")) {
				this.jButtonnombreServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaServicioBusqueda")) {
				this.jButtonivaServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceServicioBusqueda")) {
				this.jButtoniceServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bienServicioBusqueda")) {
				this.jButtones_bienServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_servicioServicioUpdate")) {
				this.jButtonid_estado_servicioServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_servicioServicioBusqueda")) {
				this.jButtonid_estado_servicioServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionServicioBusqueda")) {
				this.jButtondescripcionServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicio")) {
				this.jButtonid_cuenta_contable_gastoServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioUpdate")) {
				this.jButtonid_cuenta_contable_gastoServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioBusqueda")) {
				this.jButtonid_cuenta_contable_gastoServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicio")) {
				this.jButtonid_cuenta_contable_fiscalServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioArbol")) {
				this.abrirFrameTreeCuentaContableFiscal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioUpdate")) {
				this.jButtonid_cuenta_contable_fiscalServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioBusqueda")) {
				this.jButtonid_cuenta_contable_fiscalServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2Servicio")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableFiscal2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicio")) {
				this.jButtonid_cuenta_contable_retencionServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioArbol")) {
				this.abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioUpdate")) {
				this.jButtonid_cuenta_contable_retencionServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioBusqueda")) {
				this.jButtonid_cuenta_contable_retencionServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2Servicio")) {
				this.jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableRetencion2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_retencion2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_retencion2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicio")) {
				this.jButtonid_cuenta_contable_ivaServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioArbol")) {
				this.abrirFrameTreeCuentaContableIva("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioUpdate")) {
				this.jButtonid_cuenta_contable_ivaServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioBusqueda")) {
				this.jButtonid_cuenta_contable_ivaServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2Servicio")) {
				this.jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableIva2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_iva2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_iva2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicio")) {
				this.jButtonid_cuenta_contable_creditoServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioUpdate")) {
				this.jButtonid_cuenta_contable_creditoServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioBusqueda")) {
				this.jButtonid_cuenta_contable_creditoServicioBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_cuenta_contable_fiscal2Servicio")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_iva2Servicio")) {
				this.jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_retencion2Servicio")) {
				this.jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("BusquedaPorCodigoServicio")) {
				this.jButtonBusquedaPorCodigoServicioActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNombreServicio")) {
				this.jButtonBusquedaPorNombreServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableFiscal2Servicio")) {
				this.jButtonFK_IdCuentaContableFiscal2ServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableIva2Servicio")) {
				this.jButtonFK_IdCuentaContableIva2ServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableRetencion2Servicio")) {
				this.jButtonFK_IdCuentaContableRetencion2ServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoServicioServicio")) {
				this.jButtonFK_IdEstadoServicioServicioActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoServicioServicio")) {
				this.jButtonFK_IdTipoServicioServicioActionPerformed(evt);
			}
			
			;
			
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessServicio();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Servicio servicioLocal=null;
			
			if(!this.getEsControlTabla()) {
				servicioLocal=this.servicio;
			} else {
				servicioLocal=this.servicioAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
							
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
								
						
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
								
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
							
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
								
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
			
			this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosServicio")) {
					jCheckBoxSeleccionarTodosServicioItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosServicio")) {
					jCheckBoxSeleccionadosServicioItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarServicio")) {
					
				}
				
				


				
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
												
				
				


				
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaServicioActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.servicio);
				
				this.actualizarInformacion("INFO_PADRE",false,this.servicio);
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Servicio.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Servicio.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaServicioActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.servicioAnterior =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.servicioAnterior =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarServicio")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosServicioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosServicio.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.servicio =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.servicio =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.servicio);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarServicio")) {
				
				}
				
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarServicio")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosServicio.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarServicio")) {
			
			}
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessServicio();
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			if(sTipo.equals("NuevoServicio")) {
				jButtonNuevoServicioActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarServicio")) {
				jButtonDuplicarServicioActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarServicio")) {
				jButtonCopiarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormServicio")) {
				jButtonVerFormServicioActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesServicio")) {
				jButtonNuevoServicioActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarServicio")) {
				jButtonModificarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarServicio")) {
				jButtonActualizarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarServicio")) {
				jButtonEliminarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarServicio")) {
				jButtonCancelarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarServicio")) {
				jButtonCerrarServicioActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosServicio")) {
				jButtonGuardarCambiosServicioActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosServicio")) {
				jButtonNuevoGuardarCambiosServicioActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByServicio")) {
				jButtonAbrirOrderByServicioActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionServicio")) {
				jButtonRecargarInformacionServicioActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresServicio")) {
				jButtonAnterioresServicioActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesServicio")) {
				jButtonSiguientesServicioActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idServicioBusqueda")) {
				this.jButtonidServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaServicioUpdate")) {
				this.jButtonid_empresaServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaServicioBusqueda")) {
				this.jButtonid_empresaServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_servicioServicioUpdate")) {
				this.jButtonid_tipo_servicioServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_servicioServicioBusqueda")) {
				this.jButtonid_tipo_servicioServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoServicioBusqueda")) {
				this.jButtoncodigoServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreServicioBusqueda")) {
				this.jButtonnombreServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaServicioBusqueda")) {
				this.jButtonivaServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceServicioBusqueda")) {
				this.jButtoniceServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bienServicioBusqueda")) {
				this.jButtones_bienServicioBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_servicioServicioUpdate")) {
				this.jButtonid_estado_servicioServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_servicioServicioBusqueda")) {
				this.jButtonid_estado_servicioServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionServicioBusqueda")) {
				this.jButtondescripcionServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicio")) {
				this.jButtonid_cuenta_contable_gastoServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioUpdate")) {
				this.jButtonid_cuenta_contable_gastoServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoServicioBusqueda")) {
				this.jButtonid_cuenta_contable_gastoServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicio")) {
				this.jButtonid_cuenta_contable_fiscalServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioArbol")) {
				this.abrirFrameTreeCuentaContableFiscal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioUpdate")) {
				this.jButtonid_cuenta_contable_fiscalServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscalServicioBusqueda")) {
				this.jButtonid_cuenta_contable_fiscalServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2Servicio")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableFiscal2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_fiscal2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_fiscal2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicio")) {
				this.jButtonid_cuenta_contable_retencionServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioArbol")) {
				this.abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioUpdate")) {
				this.jButtonid_cuenta_contable_retencionServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencionServicioBusqueda")) {
				this.jButtonid_cuenta_contable_retencionServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2Servicio")) {
				this.jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableRetencion2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_retencion2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_retencion2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_retencion2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicio")) {
				this.jButtonid_cuenta_contable_ivaServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioArbol")) {
				this.abrirFrameTreeCuentaContableIva("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioUpdate")) {
				this.jButtonid_cuenta_contable_ivaServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ivaServicioBusqueda")) {
				this.jButtonid_cuenta_contable_ivaServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2Servicio")) {
				this.jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioArbol")) {
				this.abrirFrameTreeCuentaContableIva2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioUpdate")) {
				this.jButtonid_cuenta_contable_iva2ServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_iva2ServicioBusqueda")) {
				this.jButtonid_cuenta_contable_iva2ServicioBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicio")) {
				this.jButtonid_cuenta_contable_creditoServicioActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioUpdate")) {
				this.jButtonid_cuenta_contable_creditoServicioUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoServicioBusqueda")) {
				this.jButtonid_cuenta_contable_creditoServicioBusquedaActionPerformed(evt);
			}
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessServicio();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameServicio")) {
				closingInternalFrameServicio();
				
			} else if(sTipo.equals("jButtonCancelarServicio")) {
				JInternalFrameBase jInternalFrameDetalleFormServicio = (JInternalFrameBase)evt.getSource();
	            	
	            ServicioBeanSwingJInternalFrame jInternalFrameParent=(ServicioBeanSwingJInternalFrame)jInternalFrameDetalleFormServicio.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarServicioActionPerformed(null);
			}
			
			ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.servicio,new Object(),this.servicioParameterGeneral,this.servicioReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormServicio(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormServicio(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormServicio(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.servicio)) {
			if(!esControlTabla) {
				if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);			
				}
				
				if(this.servicioSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualServicio(this.servicio,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.servicioReturnGeneral=servicioLogic.procesarEventosServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.servicioLogic.getServicios(),this.servicio,this.servicioParameterGeneral,this.isEsNuevoServicio,classes);//this.servicioLogic.getServicio()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanServicio(this.servicioReturnGeneral,this.servicioBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.servicioSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanServicio(classes,this.servicioReturnGeneral,this.servicioBean,false);
					}
						
					if(this.servicioReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyServicio(this.servicioReturnGeneral.getServicio());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioServicio(this.servicioReturnGeneral.getServicio());	
					}
						
					if(this.servicioReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioServicio(this.servicioReturnGeneral.getServicio(),classes);//this.servicioBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioServicio(this.servicio,classes);//this.servicioBean);									
				}
			
				if(ServicioJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualServicio(this.servicio,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysServicio(this.servicio);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.servicioAnterior!=null) {
						this.servicio=this.servicioAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.servicioReturnGeneral=servicioLogic.procesarEventosServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.servicioLogic.getServicios(),this.servicio,this.servicioParameterGeneral,this.isEsNuevoServicio,classes);//this.servicioLogic.getServicio()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.servicioSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.servicioSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.servicioReturnGeneral.getServicio(),servicioLogic.getServicios());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.servicioReturnGeneral.getServicio(),this.servicios);
				}
				//ARCHITECTURE
				
				//this.jTableDatosServicio.repaint();
				
				//((AbstractTableModel) this.jTableDatosServicio.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosServicio();
			}
		}
	}
	
	public void actualizarVisualTableDatosServicio() throws Exception {
		
		ServicioModel servicioModel=(ServicioModel)this.jTableDatosServicio.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			servicioModel.servicios=this.servicioLogic.getServicios();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			servicioModel.servicios=this.servicios;
		}
		
		
		((ServicioModel) this.jTableDatosServicio.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaServicio() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getservicioAnterior(),this.servicioLogic.getServicios());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getservicioAnterior(),this.servicios);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosServicio();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioServicio(Servicio servicio,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.servicio,new Object(),generalEntityParameterGeneral,this.servicioReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.servicioSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ServicioConstantesFunciones.getClassesRelationshipsOfServicio(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ServicioConstantesFunciones.getClassesRelationshipsFromStringsOfServicio(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormServicio(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ServicioBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.servicio,new Object(),generalEntityParameterGeneral,this.servicioReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioServicio(ServicioBean servicioBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanServicio(ArrayList<Classe> classes,ServicioReturnGeneral servicioReturnGeneral,ServicioBean servicioBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualServicio(Servicio servicio,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.servicio)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormServicio = new ServicioDetalleFormJInternalFrame(jDesktopPane,this.servicioSessionBean.getConGuardarRelaciones(),this.servicioSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormServicio);
		this.jInternalFrameDetalleFormServicio.setVisible(false);
		this.jInternalFrameDetalleFormServicio.setSelected(false);						
		
		this.jInternalFrameDetalleFormServicio.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormServicio.servicioLogic=this.servicioLogic;
		
		this.cargarCombosFrameForeignKeyServicio("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleServicio();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleServicio();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyServicio("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyServicio();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormServicio.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarServicio"));
		
		this.jInternalFrameDetalleFormServicio.jButtonModificarServicio.addActionListener(new ButtonActionListener(this,"ModificarServicio"));

		
		this.jInternalFrameDetalleFormServicio.jButtonModificarToolBarServicio.addActionListener(new ButtonActionListener(this,"ModificarToolBarServicio"));
					
		this.jInternalFrameDetalleFormServicio.jMenuItemModificarServicio.addActionListener(new ButtonActionListener(this,"MenuItemModificarServicio"));		
		
		
		
		this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.addActionListener (new ButtonActionListener(this,"ActualizarServicio"));
		
		
		this.jInternalFrameDetalleFormServicio.jButtonActualizarToolBarServicio.addActionListener(new ButtonActionListener(this,"ActualizarToolBarServicio"));
						
		this.jInternalFrameDetalleFormServicio.jMenuItemActualizarServicio.addActionListener (new ButtonActionListener(this,"MenuItemActualizarServicio"));		
		
		
		
		this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.addActionListener (new ButtonActionListener(this,"EliminarServicio"));
		
		
		this.jInternalFrameDetalleFormServicio.jButtonEliminarToolBarServicio.addActionListener (new ButtonActionListener(this,"EliminarToolBarServicio"));
								
		this.jInternalFrameDetalleFormServicio.jMenuItemEliminarServicio.addActionListener (new ButtonActionListener(this,"MenuItemEliminarServicio"));		
		
		
		
		this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.addActionListener (new ButtonActionListener(this,"CancelarServicio"));
		
		
		this.jInternalFrameDetalleFormServicio.jButtonCancelarToolBarServicio.addActionListener (new ButtonActionListener(this,"CancelarToolBarServicio"));
					
		this.jInternalFrameDetalleFormServicio.jMenuItemCancelarServicio.addActionListener (new ButtonActionListener(this,"MenuItemCancelarServicio"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormServicio.jMenuItemDetalleCerrarServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarServicio"));		
		
		
		
		this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosToolBarServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicio"));
		
		
		
		this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosToolBarServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicio"));
		
		
		
		this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioServicio"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonidServicioBusqueda.addActionListener(new ButtonActionListener(this,"idServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoncodigoServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigoServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonnombreServicioBusqueda.addActionListener(new ButtonActionListener(this,"nombreServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"ivaServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoniceServicioBusqueda.addActionListener(new ButtonActionListener(this,"iceServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtones_bienServicioBusqueda.addActionListener(new ButtonActionListener(this,"es_bienServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtondescripcionServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioBusqueda"));
		//jButtonid_cuenta_contable_gastoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicio"));
		//jButtonid_cuenta_contable_gastoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscalServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscalServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicio"));
		//jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscal2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2Servicio"));
		//jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioBusqueda"));
		//jButtonid_cuenta_contable_retencionServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicio"));
		//jButtonid_cuenta_contable_retencionServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioBusqueda"));
		//jButtonid_cuenta_contable_retencion2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2Servicio"));
		//jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioBusqueda"));
		//jButtonid_cuenta_contable_ivaServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ivaServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicio"));
		//jButtonid_cuenta_contable_ivaServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioBusqueda"));
		//jButtonid_cuenta_contable_iva2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2Servicio"));
		//jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioBusqueda"));
		//jButtonid_cuenta_contable_creditoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicio"));
		//jButtonid_cuenta_contable_creditoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesServicio"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameServicio"));
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarServicio"));
		}
		
		this.jTableDatosServicio.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarServicio"));
		
		this.jTableDatosServicio.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarServicio"));
		
		this.jButtonNuevoServicio.addActionListener(new ButtonActionListener(this,"NuevoServicio"));
		
		this.jButtonDuplicarServicio.addActionListener(new ButtonActionListener(this,"DuplicarServicio"));
		
		this.jButtonCopiarServicio.addActionListener(new ButtonActionListener(this,"CopiarServicio"));
		
		this.jButtonVerFormServicio.addActionListener(new ButtonActionListener(this,"VerFormServicio"));
		
		
		this.jButtonNuevoToolBarServicio.addActionListener(new ButtonActionListener(this,"NuevoToolBarServicio"));
			
		this.jButtonDuplicarToolBarServicio.addActionListener(new ButtonActionListener(this,"DuplicarToolBarServicio"));
			
		this.jMenuItemNuevoServicio.addActionListener (new ButtonActionListener(this,"MenuItemNuevoServicio"));
			
		this.jMenuItemDuplicarServicio.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarServicio"));		
		
		
		this.jButtonNuevoRelacionesServicio.addActionListener (new ButtonActionListener(this,"NuevoRelacionesServicio"));
		
		
		this.jButtonNuevoRelacionesToolBarServicio.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarServicio"));
			
		this.jMenuItemNuevoRelacionesServicio.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesServicio"));		
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonModificarServicio.addActionListener(new ButtonActionListener(this,"ModificarServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonModificarToolBarServicio.addActionListener(new ButtonActionListener(this,"ModificarToolBarServicio"));
			
			this.jInternalFrameDetalleFormServicio.jMenuItemModificarServicio.addActionListener(new ButtonActionListener(this,"MenuItemModificarServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormServicio.jButtonActualizarServicio.addActionListener (new ButtonActionListener(this,"ActualizarServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonActualizarToolBarServicio.addActionListener(new ButtonActionListener(this,"ActualizarToolBarServicio"));
				
			this.jInternalFrameDetalleFormServicio.jMenuItemActualizarServicio.addActionListener (new ButtonActionListener(this,"MenuItemActualizarServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonEliminarServicio.addActionListener (new ButtonActionListener(this,"EliminarServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonEliminarToolBarServicio.addActionListener (new ButtonActionListener(this,"EliminarToolBarServicio"));
						
			this.jInternalFrameDetalleFormServicio.jMenuItemEliminarServicio.addActionListener (new ButtonActionListener(this,"MenuItemEliminarServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonCancelarServicio.addActionListener (new ButtonActionListener(this,"CancelarServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonCancelarToolBarServicio.addActionListener (new ButtonActionListener(this,"CancelarToolBarServicio"));
			
			this.jInternalFrameDetalleFormServicio.jMenuItemCancelarServicio.addActionListener (new ButtonActionListener(this,"MenuItemCancelarServicio"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarServicio.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarServicio"));		
		
		
		this.jButtonCerrarServicio.addActionListener (new ButtonActionListener(this,"CerrarServicio"));
		
		
		this.jButtonCerrarToolBarServicio.addActionListener (new ButtonActionListener(this,"CerrarToolBarServicio"));
			
		this.jMenuItemCerrarServicio.addActionListener (new ButtonActionListener(this,"MenuItemCerrarServicio"));
			
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jMenuItemDetalleCerrarServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarServicio"));		
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosServicio"));
		}
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosToolBarServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarServicio"));
		}
		
		this.jButtonCopiarToolBarServicio.addActionListener (new ButtonActionListener(this,"CopiarToolBarServicio"));
			
		this.jButtonVerFormToolBarServicio.addActionListener (new ButtonActionListener(this,"VerFormToolBarServicio"));
		
		this.jMenuItemGuardarCambiosServicio.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosServicio"));
			
		this.jMenuItemCopiarServicio.addActionListener (new ButtonActionListener(this,"MenuItemCopiarServicio"));		
		
		this.jMenuItemVerFormServicio.addActionListener (new ButtonActionListener(this,"MenuItemVerFormServicio"));		
		
		
		this.jButtonGuardarCambiosTablaServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaServicio"));
		
		
		this.jButtonGuardarCambiosTablaToolBarServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarServicio"));
			
		this.jMenuItemGuardarCambiosTablaServicio.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaServicio"));		
		
		
		
		this.jButtonRecargarInformacionServicio.addActionListener (new ButtonActionListener(this,"RecargarInformacionServicio"));
					
		this.jButtonRecargarInformacionToolBarServicio.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarServicio"));
		
		this.jMenuItemRecargarInformacionServicio.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionServicio"));		
		
		
		
		this.jButtonAnterioresServicio.addActionListener (new ButtonActionListener(this,"AnterioresServicio"));
		
		
		this.jButtonAnterioresToolBarServicio.addActionListener (new ButtonActionListener(this,"AnterioresToolBarServicio"));
		
		this.jMenuItemAnterioresServicio.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresServicio"));		
		
		
		this.jButtonSiguientesServicio.addActionListener (new ButtonActionListener(this,"SiguientesServicio"));
		
		
		this.jButtonSiguientesToolBarServicio.addActionListener (new ButtonActionListener(this,"SiguientesToolBarServicio"));
			
		this.jMenuItemSiguientesServicio.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesServicio"));
			
		this.jMenuItemAbrirOrderByServicio.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByServicio"));
			
		this.jMenuItemMostrarOcultarServicio.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarServicio"));
			
		this.jMenuItemDetalleAbrirOrderByServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByServicio"));
			
		this.jMenuItemDetalleMostarOcultarServicio.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarServicio"));		
		
		
		this.jButtonNuevoGuardarCambiosServicio.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosServicio"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarServicio.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarServicio"));
			
		this.jMenuItemNuevoGuardarCambiosServicio.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosServicio"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosServicio.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosServicio"));

		this.jCheckBoxSeleccionadosServicio.addItemListener(new CheckBoxItemListener(this,"SeleccionadosServicio"));
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioServicio"));
		}
		
		
		this.jComboBoxTiposRelacionesServicio.addActionListener (new ButtonActionListener(this,"TiposRelacionesServicio"));
			
		this.jComboBoxTiposAccionesServicio.addActionListener (new ButtonActionListener(this,"TiposAccionesServicio"));
					
		this.jComboBoxTiposSeleccionarServicio.addActionListener (new ButtonActionListener(this,"TiposSeleccionarServicio"));
			
		this.jTextFieldValorCampoGeneralServicio.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralServicio"));		
		
		
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonidServicioBusqueda.addActionListener(new ButtonActionListener(this,"idServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoncodigoServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigoServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonnombreServicioBusqueda.addActionListener(new ButtonActionListener(this,"nombreServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"ivaServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoniceServicioBusqueda.addActionListener(new ButtonActionListener(this,"iceServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtones_bienServicioBusqueda.addActionListener(new ButtonActionListener(this,"es_bienServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtondescripcionServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioBusqueda"));
		//jButtonid_cuenta_contable_gastoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicio"));
		//jButtonid_cuenta_contable_gastoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscalServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscalServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicio"));
		//jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscal2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2Servicio"));
		//jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioBusqueda"));
		//jButtonid_cuenta_contable_retencionServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicio"));
		//jButtonid_cuenta_contable_retencionServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioBusqueda"));
		//jButtonid_cuenta_contable_retencion2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2Servicio"));
		//jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioBusqueda"));
		//jButtonid_cuenta_contable_ivaServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ivaServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicio"));
		//jButtonid_cuenta_contable_ivaServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioBusqueda"));
		//jButtonid_cuenta_contable_iva2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2Servicio"));
		//jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioBusqueda"));
		//jButtonid_cuenta_contable_creditoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicio"));
		//jButtonid_cuenta_contable_creditoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoServicio.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoServicio"));

			this.jButtonBusquedaPorNombreServicio.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreServicio"));

			this.jButtonFK_IdCuentaContableFiscal2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFiscal2Servicio"));

			this.jButtonBuscarFK_IdCuentaContableFiscal2id_cuenta_contable_fiscal2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2Servicio"));

			this.jButtonFK_IdCuentaContableIva2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableIva2Servicio"));

			this.jButtonBuscarFK_IdCuentaContableIva2id_cuenta_contable_iva2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2Servicio"));

			this.jButtonFK_IdCuentaContableRetencion2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableRetencion2Servicio"));

			this.jButtonBuscarFK_IdCuentaContableRetencion2id_cuenta_contable_retencion2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2Servicio"));

			this.jButtonFK_IdEstadoServicioServicio.addActionListener(new ButtonActionListener(this,"FK_IdEstadoServicioServicio"));

			this.jButtonFK_IdTipoServicioServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoServicioServicio"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoServicio!=null) {
				this.jInternalFrameReporteDinamicoServicio.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicio"));
				this.jInternalFrameReporteDinamicoServicio.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicio"));
				this.jInternalFrameReporteDinamicoServicio.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicio"));
			}
			
			//this.jButtonCerrarReporteDinamicoServicio.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoServicio"));				
			//this.jButtonGenerarReporteDinamicoServicio.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoServicio"));
			//this.jButtonGenerarExcelReporteDinamicoServicio.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoServicio"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionServicio!=null) {
				this.jInternalFrameImportacionServicio.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionServicio"));
				this.jInternalFrameImportacionServicio.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionServicio"));
				this.jInternalFrameImportacionServicio.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionServicio"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByServicio.addActionListener (new ButtonActionListener(this,"AbrirOrderByServicio"));
			
			this.jButtonAbrirOrderByToolBarServicio.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarServicio"));			
			
			if(this.jInternalFrameOrderByServicio!=null) {
				this.jInternalFrameOrderByServicio.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByServicio"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormServicio!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormServicio.jTabbedPaneRelacionesServicio.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesServicio"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameServicio();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormServicio.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormServicio = (JInternalFrameBase)event.getSource();
	            	
	            ServicioBeanSwingJInternalFrame jInternalFrameParent=(ServicioBeanSwingJInternalFrame)jInternalFrameDetalleFormServicio.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarServicioActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosServicio.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosServicioListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosServicio.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosServicio.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoServicio";
		inputMap = this.jButtonNuevoServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoServicioActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoServicioActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesServicio";
		inputMap = this.jButtonNuevoRelacionesServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoServicioActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarServicio";
		inputMap = this.jButtonModificarServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarServicio";
		inputMap = this.jButtonActualizarServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarServicio";
		inputMap = this.jButtonEliminarServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarServicio";
		inputMap = this.jButtonCancelarServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarServicio";
		inputMap = this.jButtonCerrarServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosServicio";
		inputMap = this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormServicio.jButtonGuardarCambiosServicio.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosServicioActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosServicio.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosServicioItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralServicio.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralServicioActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonidServicioBusqueda.addActionListener(new ButtonActionListener(this,"idServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_empresaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_empresaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_tipo_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoncodigoServicioBusqueda.addActionListener(new ButtonActionListener(this,"codigoServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonnombreServicioBusqueda.addActionListener(new ButtonActionListener(this,"nombreServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"ivaServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtoniceServicioBusqueda.addActionListener(new ButtonActionListener(this,"iceServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtones_bienServicioBusqueda.addActionListener(new ButtonActionListener(this,"es_bienServicioBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioUpdate.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_estado_servicioServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_servicioServicioBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtondescripcionServicioBusqueda.addActionListener(new ButtonActionListener(this,"descripcionServicioBusqueda"));
		//jButtonid_cuenta_contable_gastoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicio"));
		//jButtonid_cuenta_contable_gastoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscalServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscalServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicio"));
		//jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscalServicioBusqueda"));
		//jButtonid_cuenta_contable_fiscal2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_fiscal2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2Servicio"));
		//jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableFiscal2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2ServicioBusqueda"));
		//jButtonid_cuenta_contable_retencionServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencionServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicio"));
		//jButtonid_cuenta_contable_retencionServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencionServicioBusqueda"));
		//jButtonid_cuenta_contable_retencion2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_retencion2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2Servicio"));
		//jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableRetencion2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2ServicioBusqueda"));
		//jButtonid_cuenta_contable_ivaServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ivaServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicio"));
		//jButtonid_cuenta_contable_ivaServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ivaServicioBusqueda"));
		//jButtonid_cuenta_contable_iva2Servicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_iva2ServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2Servicio"));
		//jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableIva2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2ServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2ServicioBusqueda"));
		//jButtonid_cuenta_contable_creditoServicio.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoServicioActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicio"));
		//jButtonid_cuenta_contable_creditoServicioArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicioBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoServicioBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoServicio.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoServicio"));

		this.jButtonBusquedaPorNombreServicio.addActionListener(new ButtonActionListener(this,"BusquedaPorNombreServicio"));

		this.jButtonFK_IdCuentaContableFiscal2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableFiscal2Servicio"));

		this.jButtonBuscarFK_IdCuentaContableFiscal2id_cuenta_contable_fiscal2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_fiscal2Servicio"));

		this.jButtonFK_IdCuentaContableIva2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableIva2Servicio"));

		this.jButtonBuscarFK_IdCuentaContableIva2id_cuenta_contable_iva2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_iva2Servicio"));

		this.jButtonFK_IdCuentaContableRetencion2Servicio.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableRetencion2Servicio"));

		this.jButtonBuscarFK_IdCuentaContableRetencion2id_cuenta_contable_retencion2Servicio.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_retencion2Servicio"));

		this.jButtonFK_IdEstadoServicioServicio.addActionListener(new ButtonActionListener(this,"FK_IdEstadoServicioServicio"));

		this.jButtonFK_IdTipoServicioServicio.addActionListener(new ButtonActionListener(this,"FK_IdTipoServicioServicio"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionServicio.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionServicioActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarServicioActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarServicio.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosServicio(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Servicio servicioAux:this.servicioLogic.getServicios()) {
					servicioAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Servicio servicioAux:servicios) {
					servicioAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosServicioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingServicio(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Servicio servicioAux:this.servicioLogic.getServicios()) {
						servicioAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Servicio servicioAux:servicios) {
						servicioAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Servicio servicioAux:this.servicioLogic.getServicios()) {
					
						if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_ESBIEN)) {
							existe=true;
							servicioAux.setes_bien(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Servicio servicioAux:servicios) {
						
						if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_ESBIEN)) {
							existe=true;
							servicioAux.setes_bien(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaServicio(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosServicio.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosServicio.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosServicio,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosServicioItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingServicio(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosServicio.getSelectedRows();
			
			Servicio servicioLocal=new Servicio();
			
			//this.seleccionarTodosServicio(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					servicioLocal =(Servicio) this.servicioLogic.getServicios().toArray()[this.jTableDatosServicio.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					servicioLocal =(Servicio) this.servicios.toArray()[this.jTableDatosServicio.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				servicioLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Servicio servicioAux:this.servicioLogic.getServicios()) {
						servicioAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Servicio servicioAux:servicios) {
						servicioAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaServicio(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosServicio.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosServicio.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosServicio,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualServicioItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarServicioParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralServicioActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingServicio(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralServicio.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Servicio servicioAux:this.servicioLogic.getServicios()) {
				
						if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							servicioAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							servicioAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							servicioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							servicioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							servicioAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Servicio servicioAux:servicios) {
					
						if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							servicioAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							servicioAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IVA)) {
							existe=true;
							servicioAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_ICE)) {
							existe=true;
							servicioAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							servicioAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaServicio(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesServicioActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingServicio(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioServicio=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesServicio.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteServicio) {				
					conSplash=true;//false;										
					
					//this.startProcessServicio(conSplash);
				
					this.generarReporteServiciosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoServiciosSeleccionados();
				//this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoServiciosSeleccionados(false);
				//this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoServiciosSeleccionados(true);
				//this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessServicio();
				
				this.exportarServiciosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionServicios();
				//this.importarServicios();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessServicio();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelServiciosSeleccionados();
				//this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Servicio", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessServicio();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoServicio)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyServicio(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
				}	
			} 			
			else if(ServicioBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteServicio) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessServicio(conSplash);
					
						//this.actualizarParametrosGeneralServicio();
						
						this.generarReporteProcesoAccionServiciosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ServicioBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO ServicioES SELECCIONADOS?", "MANTENIMIENTO DE Servicio", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessServicio();
				
						this.actualizarParametrosGeneralServicio();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.servicioReturnGeneral=servicioLogic.procesarAccionServiciosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.servicioLogic.getServicios(),this.servicioParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarServicioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralServicio();
					
					ServicioBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarServicioReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesServicio.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormServicio.jComboBoxTiposAccionesFormularioServicio.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessServicio(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesServicioActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessServicio();
			
			if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
			Servicio servicio=new Servicio();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingServicio(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesServicio.getSelectedItem();
			
			
			
			
			serviciosSeleccionados=this.getServiciosSeleccionados(true);
			//this.sTipoAccion;
			
			if(serviciosSeleccionados.size()==1) {
				for(Servicio servicioAux:serviciosSeleccionados) {
					servicio=servicioAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessServicio();
			
      		//this.finishProcessServicio(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarServicioReturnGeneral() throws Exception {
		if(this.servicioReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.servicioReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.servicioReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.servicioReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.servicioReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.servicioReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingServicio(false);
		}
		
		if(this.servicioReturnGeneral.getConRetornoLista() || this.servicioReturnGeneral.getConRetornoObjeto()) {
			if(this.servicioReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.servicioLogic.setServicios(this.servicioReturnGeneral.getServicios());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.servicioReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.servicioLogic.setServicio(this.servicioReturnGeneral.getServicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingServicio(false);
		}
	}
	
	public void actualizarParametrosGeneralServicio() throws Exception {
		
		
	}
	
	public ArrayList<Servicio> getServiciosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioServicio) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Servicio servicioAux:servicioLogic.getServicios()) {
					if(servicioAux.getIsSelected()) {
						serviciosSeleccionados.add(servicioAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Servicio servicioAux:this.servicios) {
					if(servicioAux.getIsSelected()) {
						serviciosSeleccionados.add(servicioAux);				
					}
				}
			}
			
			if(serviciosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						serviciosSeleccionados.addAll(this.servicioLogic.getServicios());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						serviciosSeleccionados.addAll(this.servicios);				
					}
				}
			}
		} else {
			serviciosSeleccionados.add(this.servicio);
		}
		
		return serviciosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteServiciosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalServiciosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoServiciosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoServiciosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoServiciosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Servicio",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteServicios("Todos",serviciosSeleccionados);
		
	}	
	
	public void generarReporteNormalServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteServicios("Todos",serviciosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionServiciosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteServicios("Todos",serviciosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		
		this.abrirInicializarFrameReporteDinamicoServicio();
		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoServicio();
		
		
		//this.generarReporteServicios("Todos",serviciosSeleccionados ,servicioImplementable,servicioImplementableHome);
	}
	
	public void mostrarImportacionServicios() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionServicio();
		
		this.abrirFrameImportacionServicio();		
		
			
		//this.generarReporteServicios("Todos",serviciosSeleccionados ,servicioImplementable,servicioImplementableHome);
	}
	
	public void importarServicios() throws Exception {		
	
	}
	
	public void exportarServiciosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelServiciosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoServiciosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlServiciosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Servicio",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarServicio(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Servicio servicioAux:serviciosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarServicio(servicioAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//servicioAux.setsDetalleGeneralEntityReporte(servicioAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarServicio(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_ESBIEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarServicio(Servicio servicio,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=servicio.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.gettiposervicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getes_bien().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getestadoservicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontablegasto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontablefiscal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontablefiscal2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontableretencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontableretencion2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontableiva_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontableiva2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=servicio.getcuentacontablecredito_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Servicios");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelServicio(row);				
				iRow++;
			}				
			
			for(Servicio servicioAux:serviciosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelServicio(servicioAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlServiciosSeleccionados() throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();		
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"servicio.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("servicios");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("servicio");
			//elementRoot.appendChild(element);
		
			for(Servicio servicioAux:serviciosSeleccionados) {
				element = document.createElement("servicio");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlServicio(servicioAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.servicioSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Servicio",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelServicio(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_ESBIEN);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2);
		cell = row.createCell(iColumn++);cell.setCellValue(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelServicio(Servicio servicio,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.gettiposervicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getes_bien());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getestadoservicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontablegasto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontablefiscal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontablefiscal2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontableretencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontableretencion2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontableiva_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontableiva2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(servicio.getcuentacontablecredito_descripcion());				
	}
	
	public void setFilaDatosExportarXmlServicio(Servicio servicio,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ServicioConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(servicio.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ServicioConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(servicio.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ServicioConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(servicio.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementtiposervicio_descripcion = document.createElement(ServicioConstantesFunciones.IDTIPOSERVICIO);
		elementtiposervicio_descripcion.appendChild(document.createTextNode(servicio.gettiposervicio_descripcion()));
		element.appendChild(elementtiposervicio_descripcion);

		Element elementcodigo = document.createElement(ServicioConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(servicio.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(ServicioConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(servicio.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementiva = document.createElement(ServicioConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(servicio.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementice = document.createElement(ServicioConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(servicio.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementes_bien = document.createElement(ServicioConstantesFunciones.ESBIEN);
		elementes_bien.appendChild(document.createTextNode(servicio.getes_bien().toString().trim()));
		element.appendChild(elementes_bien);

		Element elementestadoservicio_descripcion = document.createElement(ServicioConstantesFunciones.IDESTADOSERVICIO);
		elementestadoservicio_descripcion.appendChild(document.createTextNode(servicio.getestadoservicio_descripcion()));
		element.appendChild(elementestadoservicio_descripcion);

		Element elementdescripcion = document.createElement(ServicioConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(servicio.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementcuentacontablegasto_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLEGASTO);
		elementcuentacontablegasto_descripcion.appendChild(document.createTextNode(servicio.getcuentacontablegasto_descripcion()));
		element.appendChild(elementcuentacontablegasto_descripcion);

		Element elementcuentacontablefiscal_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLEFISCAL);
		elementcuentacontablefiscal_descripcion.appendChild(document.createTextNode(servicio.getcuentacontablefiscal_descripcion()));
		element.appendChild(elementcuentacontablefiscal_descripcion);

		Element elementcuentacontablefiscal2_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLEFISCAL2);
		elementcuentacontablefiscal2_descripcion.appendChild(document.createTextNode(servicio.getcuentacontablefiscal2_descripcion()));
		element.appendChild(elementcuentacontablefiscal2_descripcion);

		Element elementcuentacontableretencion_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLERETENCION);
		elementcuentacontableretencion_descripcion.appendChild(document.createTextNode(servicio.getcuentacontableretencion_descripcion()));
		element.appendChild(elementcuentacontableretencion_descripcion);

		Element elementcuentacontableretencion2_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLERETENCION2);
		elementcuentacontableretencion2_descripcion.appendChild(document.createTextNode(servicio.getcuentacontableretencion2_descripcion()));
		element.appendChild(elementcuentacontableretencion2_descripcion);

		Element elementcuentacontableiva_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLEIVA);
		elementcuentacontableiva_descripcion.appendChild(document.createTextNode(servicio.getcuentacontableiva_descripcion()));
		element.appendChild(elementcuentacontableiva_descripcion);

		Element elementcuentacontableiva2_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLEIVA2);
		elementcuentacontableiva2_descripcion.appendChild(document.createTextNode(servicio.getcuentacontableiva2_descripcion()));
		element.appendChild(elementcuentacontableiva2_descripcion);

		Element elementcuentacontablecredito_descripcion = document.createElement(ServicioConstantesFunciones.IDCUENTACONTABLECREDITO);
		elementcuentacontablecredito_descripcion.appendChild(document.createTextNode(servicio.getcuentacontablecredito_descripcion()));
		element.appendChild(elementcuentacontablecredito_descripcion);
	}
	
	public void generarReporteGroupGenericoServiciosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Servicio> serviciosSeleccionados=new ArrayList<Servicio>();
		
		serviciosSeleccionados=this.getServiciosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoServicio(serviciosSeleccionados);
		
		this.generarReporteServicios("Todos",serviciosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoServicio(ArrayList<Servicio> serviciosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Servicio servicioAux:serviciosSeleccionados) {
				servicioAux.setsDetalleGeneralEntityReporte(servicioAux.toString());
			
				if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDTIPOSERVICIO)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.gettiposervicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_ESBIEN)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(servicioAux.getes_bien()));
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDESTADOSERVICIO)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getestadoservicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontablegasto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontablefiscal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEFISCAL2)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontablefiscal2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontableretencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLERETENCION2)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontableretencion2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontableiva_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLEIVA2)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontableiva2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ServicioConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO)) {
					existe=true;
					servicioAux.setsDescripcionGeneralEntityReporte1(servicioAux.getcuentacontablecredito_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ServicioConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesServicio(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoServicio=true;
				this.isVisibilidadCeldaNuevoRelacionesServicio=true;
				this.isVisibilidadCeldaGuardarCambiosServicio=true;
			}
			
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=true;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=true;
			this.isVisibilidadCeldaEliminarServicio=true;
			this.isVisibilidadCeldaCancelarServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=true;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesServicio=true;
			this.isVisibilidadCeldaGuardarCambiosServicio=true;
			this.isVisibilidadCeldaModificarServicio=false;
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=true;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
			this.isVisibilidadCeldaModificarServicio=true;
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
			this.isVisibilidadCeldaCancelarServicio=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarServicio=false;
				} else {
					this.isVisibilidadCeldaGuardarServicio=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ServicioJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoServicio=true;
			this.isVisibilidadCeldaNuevoRelacionesServicio=true;
			this.isVisibilidadCeldaGuardarCambiosServicio=true;
		} else {
			this.actualizarEstadoPanelsServicio(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarServicio=false;
			//this.isVisibilidadCeldaVerFormServicio=false;
			this.isVisibilidadCeldaDuplicarServicio=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!servicioSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
		} else {
			this.isVisibilidadCeldaNuevoServicio=false;
			this.isVisibilidadCeldaGuardarCambiosServicio=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(servicioSessionBean.getEsGuardarRelacionado()) {
			if(!servicioSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesServicio=false;												
			}
			
			this.jButtonCerrarServicio.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesServicio=false;
		}
		
		if(!this.permiteMantenimiento(this.servicio)) {
			this.isVisibilidadCeldaActualizarServicio=false;
			this.isVisibilidadCeldaEliminarServicio=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesServicio() {
	}
	
	public void actualizarEstadoPanelsServicio(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(false);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionServicio!=null) {
				this.jScrollPanelDatosEdicionServicio.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosServicio!=null) {
				this.jScrollPanelDatosServicio.setVisible(true);
			}
			
			if(this.jPanelPaginacionServicio!=null) {
				this.jPanelPaginacionServicio.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.servicioSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasServicio!=null) {
					this.jTabbedPaneBusquedasServicio.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.servicioSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasServicio!=null) {
				this.jTabbedPaneBusquedasServicio.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesServicio!=null) {
				this.jPanelParametrosReportesServicio.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoServicio(Boolean isParaTipoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoServicioNegation=!isParaTipoServicio;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoServicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaTipoServicioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaTipoServicioNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaTipoServicio;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoServicio(Boolean isParaEstadoServicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoServicioNegation=!isParaEstadoServicio;

			this.isVisibilidadBusquedaPorCodigo=isParaEstadoServicioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaEstadoServicioNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaEstadoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaEstadoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaEstadoServicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaEstadoServicio;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaEstadoServicioNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableGasto(Boolean isParaCuentaContableGasto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableGastoNegation=!isParaCuentaContableGasto;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableFiscal(Boolean isParaCuentaContableFiscal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableFiscalNegation=!isParaCuentaContableFiscal;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableFiscalNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableFiscal2(Boolean isParaCuentaContableFiscal2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableFiscal2Negation=!isParaCuentaContableFiscal2;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableFiscal2;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableFiscal2Negation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableRetencion(Boolean isParaCuentaContableRetencion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableRetencionNegation=!isParaCuentaContableRetencion;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableRetencion2(Boolean isParaCuentaContableRetencion2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableRetencion2Negation=!isParaCuentaContableRetencion2;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableRetencion2;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableRetencion2Negation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableIva(Boolean isParaCuentaContableIva){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableIvaNegation=!isParaCuentaContableIva;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableIvaNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableIva2(Boolean isParaCuentaContableIva2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableIva2Negation=!isParaCuentaContableIva2;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableIva2;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableIva2Negation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCredito(Boolean isParaCuentaContableCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoNegation=!isParaCuentaContableCredito;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorCodigoServicio);}

			this.isVisibilidadBusquedaPorNombre=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadBusquedaPorNombre) {this.jTabbedPaneBusquedasServicio.remove(jPanelBusquedaPorNombreServicio);}

			this.isVisibilidadFK_IdCuentaContableFiscal2=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableFiscal2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableFiscal2Servicio);}

			this.isVisibilidadFK_IdCuentaContableIva2=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableIva2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableIva2Servicio);}

			this.isVisibilidadFK_IdCuentaContableRetencion2=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableRetencion2) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdCuentaContableRetencion2Servicio);}

			this.isVisibilidadFK_IdEstadoServicio=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdEstadoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdEstadoServicioServicio);}

			this.isVisibilidadFK_IdTipoServicio=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoServicio) {this.jTabbedPaneBusquedasServicio.remove(jPanelFK_IdTipoServicioServicio);}
		}
		
	}
	
	
	
	

	public String registrarSesionServicioParaBusquedaCuentaContableGastos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontablegastoSessionBean==null) {
				cuentacontablegastoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablegastoSessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablegastoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablegastoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablegastoSessionBean.getisPaginaPopup();
			cuentacontablegastoSessionBean.setisPaginaPopup(false);
			cuentacontablegastoSessionBean.setEstaModoBusqueda(true);
			cuentacontablegastoSessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto(TO_REPLACE);");
			cuentacontablegastoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablegastoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableFiscals() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontablefiscalSessionBean==null) {
				cuentacontablefiscalSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablefiscalSessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablefiscalSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablefiscalSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablefiscalSessionBean.getisPaginaPopup();
			cuentacontablefiscalSessionBean.setisPaginaPopup(false);
			cuentacontablefiscalSessionBean.setEstaModoBusqueda(true);
			cuentacontablefiscalSessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal(TO_REPLACE);");
			cuentacontablefiscalSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablefiscalSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableFiscal2s() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontablefiscal2SessionBean==null) {
				cuentacontablefiscal2SessionBean=new CuentaContableSessionBean();
			}

			cuentacontablefiscal2SessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablefiscal2SessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablefiscal2SessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablefiscal2SessionBean.getisPaginaPopup();
			cuentacontablefiscal2SessionBean.setisPaginaPopup(false);
			cuentacontablefiscal2SessionBean.setEstaModoBusqueda(true);
			cuentacontablefiscal2SessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_fiscal2(TO_REPLACE);");
			cuentacontablefiscal2SessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablefiscal2SessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableRetencions() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontableretencionSessionBean==null) {
				cuentacontableretencionSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableretencionSessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableretencionSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableretencionSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableretencionSessionBean.getisPaginaPopup();
			cuentacontableretencionSessionBean.setisPaginaPopup(false);
			cuentacontableretencionSessionBean.setEstaModoBusqueda(true);
			cuentacontableretencionSessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion(TO_REPLACE);");
			cuentacontableretencionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableretencionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableRetencion2s() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontableretencion2SessionBean==null) {
				cuentacontableretencion2SessionBean=new CuentaContableSessionBean();
			}

			cuentacontableretencion2SessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableretencion2SessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableretencion2SessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableretencion2SessionBean.getisPaginaPopup();
			cuentacontableretencion2SessionBean.setisPaginaPopup(false);
			cuentacontableretencion2SessionBean.setEstaModoBusqueda(true);
			cuentacontableretencion2SessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_retencion2(TO_REPLACE);");
			cuentacontableretencion2SessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableretencion2SessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableIvas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontableivaSessionBean==null) {
				cuentacontableivaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableivaSessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableivaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableivaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableivaSessionBean.getisPaginaPopup();
			cuentacontableivaSessionBean.setisPaginaPopup(false);
			cuentacontableivaSessionBean.setEstaModoBusqueda(true);
			cuentacontableivaSessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva(TO_REPLACE);");
			cuentacontableivaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableivaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableIva2s() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontableiva2SessionBean==null) {
				cuentacontableiva2SessionBean=new CuentaContableSessionBean();
			}

			cuentacontableiva2SessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableiva2SessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableiva2SessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableiva2SessionBean.getisPaginaPopup();
			cuentacontableiva2SessionBean.setisPaginaPopup(false);
			cuentacontableiva2SessionBean.setEstaModoBusqueda(true);
			cuentacontableiva2SessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_iva2(TO_REPLACE);");
			cuentacontableiva2SessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableiva2SessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionServicioParaBusquedaCuentaContableCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(servicioSessionBean==null) {
				servicioSessionBean=new ServicioSessionBean();
			}

			if(cuentacontablecreditoSessionBean==null) {
				cuentacontablecreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditoSessionBean.setsPathNavegacionActual(servicioSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditoSessionBean.getisPaginaPopup();
			cuentacontablecreditoSessionBean.setisPaginaPopup(false);
			cuentacontablecreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditoSessionBean.setsFuncionBusquedaRapida("window.opener.servicioFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito(TO_REPLACE);");
			cuentacontablecreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ServicioConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionServicio(true);
			//cuentacontableSessionBean.setlidServicioActual(this.idServicioActual);

			servicioSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyServicio(true);
			servicioSessionBean.setlIdServicioActualForeignKey(this.idServicioActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ServicioSessionBean servicioSessionBean=new ServicioSessionBean();
		
		if(this.servicioSessionBean==null) {
			this.servicioSessionBean=new ServicioSessionBean();
		}
		
		this.servicioSessionBean.setsUltimaBusquedaServicio(this.getsAccionBusqueda());
		this.servicioSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.servicioSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			servicioSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
			servicioSessionBean.setnombre(this.getnombreBusquedaPorNombre());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFiscal2")) {
			servicioSessionBean.setid_cuenta_contable_fiscal2(this.getid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableIva2")) {
			servicioSessionBean.setid_cuenta_contable_iva2(this.getid_cuenta_contable_iva2FK_IdCuentaContableIva2());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableRetencion2")) {
			servicioSessionBean.setid_cuenta_contable_retencion2(this.getid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			servicioSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoServicio")) {
			servicioSessionBean.setid_estado_servicio(this.getid_estado_servicioFK_IdEstadoServicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoServicio")) {
			servicioSessionBean.setid_tipo_servicio(this.getid_tipo_servicioFK_IdTipoServicio());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ServicioSessionBean servicioSessionBean=new ServicioSessionBean();
		
		if(this.servicioSessionBean==null) {
			this.servicioSessionBean=new ServicioSessionBean();
		}
		
		if(this.servicioSessionBean.getsUltimaBusquedaServicio()!=null&&!this.servicioSessionBean.getsUltimaBusquedaServicio().equals("")) {
			this.setsAccionBusqueda(servicioSessionBean.getsUltimaBusquedaServicio());
			this.setiNumeroPaginacion(servicioSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(servicioSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(servicioSessionBean.getcodigo());
				servicioSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNombre")) {
				this.setnombreBusquedaPorNombre(servicioSessionBean.getnombre());
				servicioSessionBean.setnombre("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableFiscal2")) {
				this.setid_cuenta_contable_fiscal2FK_IdCuentaContableFiscal2(servicioSessionBean.getid_cuenta_contable_fiscal2());
				servicioSessionBean.setid_cuenta_contable_fiscal2(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableIva2")) {
				this.setid_cuenta_contable_iva2FK_IdCuentaContableIva2(servicioSessionBean.getid_cuenta_contable_iva2());
				servicioSessionBean.setid_cuenta_contable_iva2(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableRetencion2")) {
				this.setid_cuenta_contable_retencion2FK_IdCuentaContableRetencion2(servicioSessionBean.getid_cuenta_contable_retencion2());
				servicioSessionBean.setid_cuenta_contable_retencion2(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(servicioSessionBean.getid_empresa());
				servicioSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoServicio")) {
				this.setid_estado_servicioFK_IdEstadoServicio(servicioSessionBean.getid_estado_servicio());
				servicioSessionBean.setid_estado_servicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoServicio")) {
				this.setid_tipo_servicioFK_IdTipoServicio(servicioSessionBean.getid_tipo_servicio());
				servicioSessionBean.setid_tipo_servicio(-1L);
			}
		}
		
		this.servicioSessionBean.setsUltimaBusquedaServicio("");
		this.servicioSessionBean.setiNumeroPaginacion(ServicioConstantesFunciones.INUMEROPAGINACION);
		this.servicioSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaServicio(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioServicio() {
		this.updateBorderResaltarBusquedasFormularioServicio();
		this.updateVisibilidadBusquedasFormularioServicio();
		this.updateHabilitarBusquedasFormularioServicio();
	}
	
	public void updateBorderResaltarBusquedasFormularioServicio() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasServicio.getComponents().length>0) {
	

		if(this.servicioConstantesFunciones.resaltarBusquedaPorCodigoServicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorCodigoServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarBusquedaPorCodigoServicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarBusquedaPorNombreServicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorNombreServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarBusquedaPorNombreServicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableFiscal2Servicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableFiscal2Servicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableFiscal2Servicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableIva2Servicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableIva2Servicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableIva2Servicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableRetencion2Servicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableRetencion2Servicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableRetencion2Servicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarFK_IdEstadoServicioServicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdEstadoServicioServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdEstadoServicioServicio);
			}
		}

		if(this.servicioConstantesFunciones.resaltarFK_IdTipoServicioServicio!=null) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdTipoServicioServicio);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdTipoServicioServicio);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioServicio() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasServicio.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorCodigoServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarBusquedaPorCodigoServicio);
			if(!this.servicioConstantesFunciones.mostrarBusquedaPorCodigoServicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorNombreServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarBusquedaPorNombreServicio);
			if(!this.servicioConstantesFunciones.mostrarBusquedaPorNombreServicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableFiscal2Servicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarFK_IdCuentaContableFiscal2Servicio);
			if(!this.servicioConstantesFunciones.mostrarFK_IdCuentaContableFiscal2Servicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableIva2Servicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarFK_IdCuentaContableIva2Servicio);
			if(!this.servicioConstantesFunciones.mostrarFK_IdCuentaContableIva2Servicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableRetencion2Servicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarFK_IdCuentaContableRetencion2Servicio);
			if(!this.servicioConstantesFunciones.mostrarFK_IdCuentaContableRetencion2Servicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdEstadoServicioServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarFK_IdEstadoServicioServicio);
			if(!this.servicioConstantesFunciones.mostrarFK_IdEstadoServicioServicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdTipoServicioServicio);
			jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.servicioConstantesFunciones.mostrarFK_IdTipoServicioServicio);
			if(!this.servicioConstantesFunciones.mostrarFK_IdTipoServicioServicio && index>-1) {
				this.jTabbedPaneBusquedasServicio.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioServicio() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasServicio.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorCodigoServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarBusquedaPorCodigoServicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarBusquedaPorCodigoServicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorNombreServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarBusquedaPorNombreServicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarBusquedaPorNombreServicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableFiscal2Servicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarFK_IdCuentaContableFiscal2Servicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarFK_IdCuentaContableFiscal2Servicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableIva2Servicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarFK_IdCuentaContableIva2Servicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarFK_IdCuentaContableIva2Servicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableRetencion2Servicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarFK_IdCuentaContableRetencion2Servicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarFK_IdCuentaContableRetencion2Servicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdEstadoServicioServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarFK_IdEstadoServicioServicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarFK_IdEstadoServicioServicio);
			}

			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdTipoServicioServicio);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.servicioConstantesFunciones.activarFK_IdTipoServicioServicio);
				this.jTabbedPaneBusquedasServicio.setEnabledAt(index,this.servicioConstantesFunciones.activarFK_IdTipoServicioServicio);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaServicio(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorCodigoServicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarBusquedaPorCodigoServicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarBusquedaPorCodigoServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNombre")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelBusquedaPorNombreServicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarBusquedaPorNombreServicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarBusquedaPorNombreServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableFiscal2")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableFiscal2Servicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarFK_IdCuentaContableFiscal2Servicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableFiscal2Servicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableIva2")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableIva2Servicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarFK_IdCuentaContableIva2Servicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableIva2Servicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableRetencion2")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdCuentaContableRetencion2Servicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarFK_IdCuentaContableRetencion2Servicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdCuentaContableRetencion2Servicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoServicio")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdEstadoServicioServicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarFK_IdEstadoServicioServicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdEstadoServicioServicio);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoServicio")) {
			index= this.jTabbedPaneBusquedasServicio.indexOfComponent(this.jPanelFK_IdTipoServicioServicio);

			this.jTabbedPaneBusquedasServicio.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasServicio.getComponent(index);

			this.servicioConstantesFunciones.setResaltarFK_IdTipoServicioServicio(resaltar);

			jPanel.setBorder(this.servicioConstantesFunciones.resaltarFK_IdTipoServicioServicio);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarServicio.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioServicio() throws Exception {

		if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioServicio();
		this.updateVisibilidadResaltarControlesFormularioServicio();
		this.updateHabilitarResaltarControlesFormularioServicio();
		
	}
	
	public void updateBorderResaltarControlesFormularioServicio() throws Exception {
		if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.servicioConstantesFunciones.resaltaridServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jLabelidServicio.setBorder(this.servicioConstantesFunciones.resaltaridServicio);}
		if(this.servicioConstantesFunciones.resaltarid_empresaServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setBorder(this.servicioConstantesFunciones.resaltarid_empresaServicio);}
		if(this.servicioConstantesFunciones.resaltarid_tipo_servicioServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setBorder(this.servicioConstantesFunciones.resaltarid_tipo_servicioServicio);}
		if(this.servicioConstantesFunciones.resaltarcodigoServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setBorder(this.servicioConstantesFunciones.resaltarcodigoServicio);}
		if(this.servicioConstantesFunciones.resaltarnombreServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setBorder(this.servicioConstantesFunciones.resaltarnombreServicio);}
		if(this.servicioConstantesFunciones.resaltarivaServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setBorder(this.servicioConstantesFunciones.resaltarivaServicio);}
		if(this.servicioConstantesFunciones.resaltariceServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setBorder(this.servicioConstantesFunciones.resaltariceServicio);}
		if(this.servicioConstantesFunciones.resaltares_bienServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setBorderPainted(true);this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setBorder(this.servicioConstantesFunciones.resaltares_bienServicio);}
		if(this.servicioConstantesFunciones.resaltarid_estado_servicioServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setBorder(this.servicioConstantesFunciones.resaltarid_estado_servicioServicio);}
		if(this.servicioConstantesFunciones.resaltardescripcionServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setBorder(this.servicioConstantesFunciones.resaltardescripcionServicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_gastoServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_gastoServicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscalServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscalServicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscal2Servicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_fiscal2Servicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencionServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencionServicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencion2Servicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_retencion2Servicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_ivaServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_ivaServicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_iva2Servicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_iva2Servicio);}
		if(this.servicioConstantesFunciones.resaltarid_cuenta_contable_creditoServicio!=null && this.jInternalFrameDetalleFormServicio!=null) {this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setBorder(this.servicioConstantesFunciones.resaltarid_cuenta_contable_creditoServicio);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioServicio() throws Exception {		
		if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
	
		//this.jInternalFrameDetalleFormServicio.jLabelidServicio.setVisible(this.servicioConstantesFunciones.mostraridServicio);
		this.jInternalFrameDetalleFormServicio.jPanelidServicio.setVisible(this.servicioConstantesFunciones.mostraridServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setVisible(this.servicioConstantesFunciones.mostrarid_empresaServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_empresaServicio.setVisible(this.servicioConstantesFunciones.mostrarid_empresaServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setVisible(this.servicioConstantesFunciones.mostrarid_tipo_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_tipo_servicioServicio.setVisible(this.servicioConstantesFunciones.mostrarid_tipo_servicioServicio);
		//this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setVisible(this.servicioConstantesFunciones.mostrarcodigoServicio);
		this.jInternalFrameDetalleFormServicio.jPanelcodigoServicio.setVisible(this.servicioConstantesFunciones.mostrarcodigoServicio);
		//this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setVisible(this.servicioConstantesFunciones.mostrarnombreServicio);
		this.jInternalFrameDetalleFormServicio.jPanelnombreServicio.setVisible(this.servicioConstantesFunciones.mostrarnombreServicio);
		//this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setVisible(this.servicioConstantesFunciones.mostrarivaServicio);
		this.jInternalFrameDetalleFormServicio.jPanelivaServicio.setVisible(this.servicioConstantesFunciones.mostrarivaServicio);
		//this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setVisible(this.servicioConstantesFunciones.mostrariceServicio);
		this.jInternalFrameDetalleFormServicio.jPaneliceServicio.setVisible(this.servicioConstantesFunciones.mostrariceServicio);
		//this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setVisible(this.servicioConstantesFunciones.mostrares_bienServicio);
		this.jInternalFrameDetalleFormServicio.jPaneles_bienServicio.setVisible(this.servicioConstantesFunciones.mostrares_bienServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setVisible(this.servicioConstantesFunciones.mostrarid_estado_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_estado_servicioServicio.setVisible(this.servicioConstantesFunciones.mostrarid_estado_servicioServicio);
		//this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setVisible(this.servicioConstantesFunciones.mostrardescripcionServicio);
		this.jInternalFrameDetalleFormServicio.jPaneldescripcionServicio.setVisible(this.servicioConstantesFunciones.mostrardescripcionServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_gastoServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_gastoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_gastoServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_gastoServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscalServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_fiscalServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscalServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscalServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscal2Servicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_fiscal2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscal2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_fiscal2Servicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencionServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_retencionServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencionServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencionServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencion2Servicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_retencion2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencion2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_retencion2Servicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_ivaServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_ivaServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_ivaServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_ivaServicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_iva2Servicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_iva2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_iva2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2Servicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_iva2Servicio);
		//this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_creditoServicio);
		this.jInternalFrameDetalleFormServicio.jPanelid_cuenta_contable_creditoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_creditoServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicio.setVisible(this.servicioConstantesFunciones.mostrarid_cuenta_contable_creditoServicio);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioServicio() throws Exception {
		if(this.jInternalFrameDetalleFormServicio==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormServicio!=null) {
	
		this.jInternalFrameDetalleFormServicio.jLabelidServicio.setEnabled(this.servicioConstantesFunciones.activaridServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_empresaServicio.setEnabled(this.servicioConstantesFunciones.activarid_empresaServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_tipo_servicioServicio.setEnabled(this.servicioConstantesFunciones.activarid_tipo_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jTextAreacodigoServicio.setEnabled(this.servicioConstantesFunciones.activarcodigoServicio);
		this.jInternalFrameDetalleFormServicio.jTextAreanombreServicio.setEnabled(this.servicioConstantesFunciones.activarnombreServicio);
		this.jInternalFrameDetalleFormServicio.jTextFieldivaServicio.setEnabled(this.servicioConstantesFunciones.activarivaServicio);
		this.jInternalFrameDetalleFormServicio.jTextFieldiceServicio.setEnabled(this.servicioConstantesFunciones.activariceServicio);
		this.jInternalFrameDetalleFormServicio.jCheckBoxes_bienServicio.setEnabled(this.servicioConstantesFunciones.activares_bienServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_estado_servicioServicio.setEnabled(this.servicioConstantesFunciones.activarid_estado_servicioServicio);
		this.jInternalFrameDetalleFormServicio.jTextAreadescripcionServicio.setEnabled(this.servicioConstantesFunciones.activardescripcionServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_gastoServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_gastoServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_gastoServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_gastoServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscalServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_fiscalServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscalServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_fiscalServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_fiscal2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_fiscal2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_fiscal2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_fiscal2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencionServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_retencionServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencionServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_retencionServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_retencion2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_retencion2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_retencion2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_retencion2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_ivaServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_ivaServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_ivaServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_ivaServicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_iva2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_iva2Servicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_iva2Servicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_iva2Servicio);
		this.jInternalFrameDetalleFormServicio.jComboBoxid_cuenta_contable_creditoServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_creditoServicio);
			this.jInternalFrameDetalleFormServicio.jButtonid_cuenta_contable_creditoServicio.setEnabled(this.servicioConstantesFunciones.activarid_cuenta_contable_creditoServicio);
		}
	}
	
		
}