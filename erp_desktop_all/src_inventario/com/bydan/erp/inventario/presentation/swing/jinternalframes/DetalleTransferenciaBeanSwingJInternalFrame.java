/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.DetalleTransferenciaConstantesFunciones;
import com.bydan.erp.inventario.util.DetalleTransferenciaParameterReturnGeneral;
//import com.bydan.erp.inventario.util.DetalleTransferenciaParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.DetalleTransferenciaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleTransferenciaBeanSwingJInternalFrame extends DetalleTransferenciaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleTransferenciaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleTransferencia> detalletransferenciaValidator = new ClassValidator<DetalleTransferencia>(DetalleTransferencia.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleTransferencia detalletransferencia;	
	public DetalleTransferencia detalletransferenciaAux;
	public DetalleTransferencia detalletransferenciaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleTransferencia detalletransferenciaTotales;
	public Long idDetalleTransferenciaActual;
	public Long iIdNuevoDetalleTransferencia=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboTransferencia="";

	public List<Transferencia> transferenciasForeignKey;

	public List<Transferencia> gettransferenciasForeignKey() {
		return transferenciasForeignKey;
	}

	public void settransferenciasForeignKey(List<Transferencia> transferenciasForeignKey) {
		this.transferenciasForeignKey = transferenciasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transferencia transferenciaForeignKey;

	public Transferencia gettransferenciaForeignKey() {
		return transferenciaForeignKey;
	}

	public void settransferenciaForeignKey(Transferencia transferenciaForeignKey) {
		this.transferenciaForeignKey = transferenciaForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboBodegaEnviar="";

	public List<Bodega> bodegaenviarsForeignKey;

	public List<Bodega> getbodegaenviarsForeignKey() {
		return bodegaenviarsForeignKey;
	}

	public void setbodegaenviarsForeignKey(List<Bodega> bodegaenviarsForeignKey) {
		this.bodegaenviarsForeignKey = bodegaenviarsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaenviarForeignKey;

	public Bodega getbodegaenviarForeignKey() {
		return bodegaenviarForeignKey;
	}

	public void setbodegaenviarForeignKey(Bodega bodegaenviarForeignKey) {
		this.bodegaenviarForeignKey = bodegaenviarForeignKey;
	}

	public String sFinalQueryComboNovedadProducto="";

	public List<NovedadProducto> novedadproductosForeignKey;

	public List<NovedadProducto> getnovedadproductosForeignKey() {
		return novedadproductosForeignKey;
	}

	public void setnovedadproductosForeignKey(List<NovedadProducto> novedadproductosForeignKey) {
		this.novedadproductosForeignKey = novedadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public NovedadProducto novedadproductoForeignKey;

	public NovedadProducto getnovedadproductoForeignKey() {
		return novedadproductoForeignKey;
	}

	public void setnovedadproductoForeignKey(NovedadProducto novedadproductoForeignKey) {
		this.novedadproductoForeignKey = novedadproductoForeignKey;
	}

	public String sFinalQueryComboEstadoDetalleInventario="";

	public List<EstadoDetalleInventario> estadodetalleinventariosForeignKey;

	public List<EstadoDetalleInventario> getestadodetalleinventariosForeignKey() {
		return estadodetalleinventariosForeignKey;
	}

	public void setestadodetalleinventariosForeignKey(List<EstadoDetalleInventario> estadodetalleinventariosForeignKey) {
		this.estadodetalleinventariosForeignKey = estadodetalleinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoDetalleInventario estadodetalleinventarioForeignKey;

	public EstadoDetalleInventario getestadodetalleinventarioForeignKey() {
		return estadodetalleinventarioForeignKey;
	}

	public void setestadodetalleinventarioForeignKey(EstadoDetalleInventario estadodetalleinventarioForeignKey) {
		this.estadodetalleinventarioForeignKey = estadodetalleinventarioForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleTransferencia;
	public Boolean isPermisoNuevoDetalleTransferencia;
	public Boolean isPermisoActualizarDetalleTransferencia;
	public Boolean isPermisoActualizarOriginalDetalleTransferencia;
	public Boolean isPermisoEliminarDetalleTransferencia;
	public Boolean isPermisoGuardarCambiosDetalleTransferencia;
	public Boolean isPermisoConsultaDetalleTransferencia;
	public Boolean isPermisoBusquedaDetalleTransferencia;
	public Boolean isPermisoReporteDetalleTransferencia;
	public Boolean isPermisoPaginacionMedioDetalleTransferencia;
	public Boolean isPermisoPaginacionAltoDetalleTransferencia;
	public Boolean isPermisoPaginacionTodoDetalleTransferencia;
	public Boolean isPermisoCopiarDetalleTransferencia;
	public Boolean isPermisoVerFormDetalleTransferencia;
	public Boolean isPermisoDuplicarDetalleTransferencia;
	public Boolean isPermisoOrdenDetalleTransferencia;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleTransferenciaParameterReturnGeneral detalletransferenciaReturnGeneral;
	public DetalleTransferenciaParameterReturnGeneral detalletransferenciaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleTransferencia=false;
	public Boolean esParaAccionDesdeFormularioDetalleTransferencia=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleTransferenciaSessionBeanAdditional detalletransferenciaSessionBeanAdditional=null;
	
	public DetalleTransferenciaSessionBeanAdditional getDetalleTransferenciaSessionBeanAdditional() {
		return this.detalletransferenciaSessionBeanAdditional;
	}
	
	public void setDetalleTransferenciaSessionBeanAdditional(DetalleTransferenciaSessionBeanAdditional detalletransferenciaSessionBeanAdditional) {
		try {
			this.detalletransferenciaSessionBeanAdditional=detalletransferenciaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleTransferenciaBeanSwingJInternalFrameAdditional detalletransferenciaBeanSwingJInternalFrameAdditional=null;
	//public class DetalleTransferenciaBeanSwingJInternalFrame
	
	public DetalleTransferenciaBeanSwingJInternalFrameAdditional getDetalleTransferenciaBeanSwingJInternalFrameAdditional() {
		return this.detalletransferenciaBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleTransferenciaBeanSwingJInternalFrameAdditional(DetalleTransferenciaBeanSwingJInternalFrameAdditional detalletransferenciaBeanSwingJInternalFrameAdditional) {
		try {
			this.detalletransferenciaBeanSwingJInternalFrameAdditional=detalletransferenciaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleTransferenciaLogic detalletransferenciaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleTransferencia detalletransferenciaBean;
	public DetalleTransferenciaConstantesFunciones detalletransferenciaConstantesFunciones;
	//public DetalleTransferenciaParameterReturnGeneral detalletransferenciaReturnGeneral;
	
	//FK
	
	public TransferenciaLogic transferenciaLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public BodegaLogic bodegaenviarLogic;
	public NovedadProductoLogic novedadproductoLogic;
	public EstadoDetalleInventarioLogic estadodetalleinventarioLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleTransferencia> detalletransferencias;	
	//public List<DetalleTransferencia> detalletransferenciasEliminados;
	//public List<DetalleTransferencia> detalletransferenciasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleTransferencia=true;
	public Boolean isVisibilidadCeldaCopiarDetalleTransferencia=true;
	public Boolean isVisibilidadCeldaVerFormDetalleTransferencia=true;
	public Boolean isVisibilidadCeldaOrdenDetalleTransferencia=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaModificarDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaActualizarDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaEliminarDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaCancelarDetalleTransferencia=false;
	public Boolean isVisibilidadCeldaGuardarDetalleTransferencia=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdBodegaEnviar=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoDetalleInventario=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdNovedadProducto=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTransferencia=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleTransferencia() {
		return this.iIdNuevoDetalleTransferencia;
	}

	public void setiIdNuevoDetalleTransferencia(Long iIdNuevoDetalleTransferencia) {
		this.iIdNuevoDetalleTransferencia = iIdNuevoDetalleTransferencia;
	}
	
	public Long getidDetalleTransferenciaActual() {
		return this.idDetalleTransferenciaActual;
	}

	public void setidDetalleTransferenciaActual(Long idDetalleTransferenciaActual) {
		this.idDetalleTransferenciaActual = idDetalleTransferenciaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleTransferencia getdetalletransferencia() {
		return this.detalletransferencia;
	}

	public void setdetalletransferencia(DetalleTransferencia detalletransferencia) {
		this.detalletransferencia = detalletransferencia;
	}
	
	public DetalleTransferencia getdetalletransferenciaAux() {
		return this.detalletransferenciaAux;
	}

	public void setdetalletransferenciaAux(DetalleTransferencia detalletransferenciaAux) {
		this.detalletransferenciaAux = detalletransferenciaAux;
	}				
	
	public DetalleTransferencia getdetalletransferenciaAnterior() {
		return this.detalletransferenciaAnterior;
	}

	public void setdetalletransferenciaAnterior(DetalleTransferencia detalletransferenciaAnterior) {
		this.detalletransferenciaAnterior = detalletransferenciaAnterior;
	}	
	
	public DetalleTransferencia getdetalletransferenciaTotales() {
		return this.detalletransferenciaTotales;
	}

	public void setdetalletransferenciaTotales(DetalleTransferencia detalletransferenciaTotales) {
		this.detalletransferenciaTotales = detalletransferenciaTotales;
	}	
	
	public DetalleTransferencia getdetalletransferenciaBean() {
		return this.detalletransferenciaBean;
	}

	public void setdetalletransferenciaBean(DetalleTransferencia detalletransferenciaBean) {
		this.detalletransferenciaBean = detalletransferenciaBean;
	}	
	
	public DetalleTransferenciaParameterReturnGeneral getdetalletransferenciaReturnGeneral() {
		return this.detalletransferenciaReturnGeneral;
	}

	public void setdetalletransferenciaReturnGeneral(DetalleTransferenciaParameterReturnGeneral detalletransferenciaReturnGeneral) {
		this.detalletransferenciaReturnGeneral = detalletransferenciaReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_bodega_enviarFK_IdBodegaEnviar=-1L;

	public Long getid_bodega_enviarFK_IdBodegaEnviar() {
		return this.id_bodega_enviarFK_IdBodegaEnviar;
	}

	public void setid_bodega_enviarFK_IdBodegaEnviar(Long id_bodega_enviarFK_IdBodegaEnviar) {
		this.id_bodega_enviarFK_IdBodegaEnviar = id_bodega_enviarFK_IdBodegaEnviar;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_detalle_inventarioFK_IdEstadoDetalleInventario=-1L;

	public Long getid_estado_detalle_inventarioFK_IdEstadoDetalleInventario() {
		return this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario;
	}

	public void setid_estado_detalle_inventarioFK_IdEstadoDetalleInventario(Long id_estado_detalle_inventarioFK_IdEstadoDetalleInventario) {
		this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario = id_estado_detalle_inventarioFK_IdEstadoDetalleInventario;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_novedad_productoFK_IdNovedadProducto=null;

	public Long getid_novedad_productoFK_IdNovedadProducto() {
		return this.id_novedad_productoFK_IdNovedadProducto;
	}

	public void setid_novedad_productoFK_IdNovedadProducto(Long id_novedad_productoFK_IdNovedadProducto) {
		this.id_novedad_productoFK_IdNovedadProducto = id_novedad_productoFK_IdNovedadProducto;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_transferenciaFK_IdTransferencia=-1L;

	public Long getid_transferenciaFK_IdTransferencia() {
		return this.id_transferenciaFK_IdTransferencia;
	}

	public void setid_transferenciaFK_IdTransferencia(Long id_transferenciaFK_IdTransferencia) {
		this.id_transferenciaFK_IdTransferencia = id_transferenciaFK_IdTransferencia;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleTransferenciaLogic getDetalleTransferenciaLogic()	{		
		return detalletransferenciaLogic;
	}

	public void setDetalleTransferenciaLogic(DetalleTransferenciaLogic detalletransferenciaLogic) {
		this.detalletransferenciaLogic = detalletransferenciaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleTransferencia() {
		return isEsNuevoDetalleTransferencia;
	}

	public void setIsEsNuevoDetalleTransferencia(Boolean isEsNuevoDetalleTransferencia) {
		this.isEsNuevoDetalleTransferencia = isEsNuevoDetalleTransferencia;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleTransferencia() {
		return esParaAccionDesdeFormularioDetalleTransferencia;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleTransferencia(Boolean esParaAccionDesdeFormularioDetalleTransferencia) {
		this.esParaAccionDesdeFormularioDetalleTransferencia = esParaAccionDesdeFormularioDetalleTransferencia;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosTransferenciasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transferenciasForeignKey=new ArrayList<Transferencia>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransferenciaLogic transferenciaLogic=new TransferenciaLogic();

			transferenciaLogic.getTransferenciaDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransferencia()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getTransferenciaDataAccess().setIsForForeingKeyData(true);

					transferenciaLogic.getTodosTransferenciasWithConnection(sFinalQuery,new Pagination());

					this.transferenciasForeignKey=transferenciaLogic.getTransferencias();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransferencia(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transferenciaLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidTransferenciaActual());
					this.transferenciasForeignKey.add(transferenciaLogic.getTransferencia());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegaEnviarsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegaenviarsForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaenviarLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegaenviarsForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodegaEnviar(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidBodegaEnviarActual());
					this.bodegaenviarsForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNovedadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NovedadProducto novedadproductoNulo = new NovedadProducto();

			NovedadProductoLogic novedadproductoLogic=new NovedadProductoLogic();

			//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

					novedadproductoLogic.getTodosNovedadProductosWithConnection(sFinalQuery,new Pagination());

					this.novedadproductosForeignKey=novedadproductoLogic.getNovedadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.novedadproductosForeignKey.add(0, novedadproductoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNovedadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					novedadproductoLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidNovedadProductoActual());
					this.novedadproductosForeignKey.add(novedadproductoLogic.getNovedadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoDetalleInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoDetalleInventarioLogic estadodetalleinventarioLogic=new EstadoDetalleInventarioLogic();

			//estadodetalleinventarioLogic.getEstadoDetalleInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadodetalleinventarioLogic.getEstadoDetalleInventarioDataAccess().setIsForForeingKeyData(true);

					estadodetalleinventarioLogic.getTodosEstadoDetalleInventariosWithConnection(sFinalQuery,new Pagination());

					this.estadodetalleinventariosForeignKey=estadodetalleinventarioLogic.getEstadoDetalleInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoDetalleInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadodetalleinventarioLogic.getEntityWithConnection(detalletransferenciaSessionBean.getlidEstadoDetalleInventarioActual());
					this.estadodetalleinventariosForeignKey.add(estadodetalleinventarioLogic.getEstadoDetalleInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualTransferenciaForeignKey(Long idTransferenciaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transferencia  transferenciaTemp=null;

			for(Transferencia transferenciaAux:transferenciasForeignKey) {
				if(transferenciaAux.getId()!=null && transferenciaAux.getId().equals(idTransferenciaSeleccionado)) {
					transferenciaTemp=transferenciaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transferenciaTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setTransferencia(transferenciaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setSelectedItem(transferenciaTemp);
					}
				} else {
					//jComboBoxid_transferenciaDetalleTransferencia.setSelectedItem(transferenciaTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdTransferencia") || sFormularioTipoBusqueda.equals("Todos")){
					if(transferenciaTemp!=null && jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia!=null) {
						jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.setSelectedItem(transferenciaTemp);
					} else {
						if(jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia!=null) {
							//jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.setSelectedItem(transferenciaTemp);
							if(jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransferenciaForeignKeyDescripcion(Long idTransferenciaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transferencia  transferenciaTemp=null;

			for(Transferencia transferenciaAux:transferenciasForeignKey) {
				if(transferenciaAux.getId()!=null && transferenciaAux.getId().equals(idTransferenciaSeleccionado)) {
					transferenciaTemp=transferenciaAux;
					break;
				}
			}


			sDescripcion=TransferenciaConstantesFunciones.getTransferenciaDescripcion(transferenciaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransferenciaForeignKeyGenerico(Long idTransferenciaSeleccionado,JComboBox jComboBoxid_transferenciaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Transferencia  transferenciaTemp=null;

			for(Transferencia transferenciaAux:transferenciasForeignKey) {
				if(transferenciaAux.getId()!=null && transferenciaAux.getId().equals(idTransferenciaSeleccionado)) {
					transferenciaTemp=transferenciaAux;
					break;
				}
			}

			if(transferenciaTemp!=null) {
				jComboBoxid_transferenciaDetalleTransferenciaGenerico.setSelectedItem(transferenciaTemp);
			} else {
				if(jComboBoxid_transferenciaDetalleTransferenciaGenerico!=null && jComboBoxid_transferenciaDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_transferenciaDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleTransferencia.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleTransferenciaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleTransferenciaGenerico!=null && jComboBoxid_empresaDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleTransferencia.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleTransferenciaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleTransferenciaGenerico!=null && jComboBoxid_sucursalDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleTransferencia.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleTransferenciaGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleTransferenciaGenerico!=null && jComboBoxid_ejercicioDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleTransferencia.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleTransferenciaGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleTransferenciaGenerico!=null && jComboBoxid_periodoDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleTransferencia.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleTransferenciaGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleTransferenciaGenerico!=null && jComboBoxid_anioDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleTransferencia.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleTransferenciaGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleTransferenciaGenerico!=null && jComboBoxid_mesDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleTransferencia.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleTransferenciaGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleTransferenciaGenerico!=null && jComboBoxid_bodegaDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleTransferencia.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleTransferencia!=null) {
						jComboBoxid_productoFK_IdProductoDetalleTransferencia.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleTransferencia!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleTransferencia.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleTransferenciaGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleTransferenciaGenerico!=null && jComboBoxid_productoDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleTransferencia.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleTransferencia!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleTransferencia!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleTransferenciaGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleTransferenciaGenerico!=null && jComboBoxid_unidadDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaEnviarForeignKey(Long idBodegaEnviarSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaenviarTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setBodegaEnviar(bodegaenviarTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedItem(bodegaenviarTemp);
					}
				} else {
					//jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedItem(bodegaenviarTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdBodegaEnviar") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaenviarTemp!=null && jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia!=null) {
						jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.setSelectedItem(bodegaenviarTemp);
					} else {
						if(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia!=null) {
							//jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.setSelectedItem(bodegaenviarTemp);
							if(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaEnviarForeignKeyDescripcion(Long idBodegaEnviarSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaenviarTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaEnviarForeignKeyGenerico(Long idBodegaEnviarSeleccionado,JComboBox jComboBoxid_bodega_enviarDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaenviarTemp=null;

			for(Bodega bodegaenviarAux:bodegaenviarsForeignKey) {
				if(bodegaenviarAux.getId()!=null && bodegaenviarAux.getId().equals(idBodegaEnviarSeleccionado)) {
					bodegaenviarTemp=bodegaenviarAux;
					break;
				}
			}

			if(bodegaenviarTemp!=null) {
				jComboBoxid_bodega_enviarDetalleTransferenciaGenerico.setSelectedItem(bodegaenviarTemp);
			} else {
				if(jComboBoxid_bodega_enviarDetalleTransferenciaGenerico!=null && jComboBoxid_bodega_enviarDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_bodega_enviarDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNovedadProductoForeignKey(Long idNovedadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(novedadproductoTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setNovedadProducto(novedadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setSelectedItem(novedadproductoTemp);
					}
				} else {
					//jComboBoxid_novedad_productoDetalleTransferencia.setSelectedItem(novedadproductoTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(novedadproductoTemp!=null && jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia!=null) {
						jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.setSelectedItem(novedadproductoTemp);
					} else {
						if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia!=null) {
							//jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.setSelectedItem(novedadproductoTemp);
							if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNovedadProductoForeignKeyDescripcion(Long idNovedadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}


			sDescripcion=NovedadProductoConstantesFunciones.getNovedadProductoDescripcion(novedadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNovedadProductoForeignKeyGenerico(Long idNovedadProductoSeleccionado,JComboBox jComboBoxid_novedad_productoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(novedadproductoTemp!=null) {
				jComboBoxid_novedad_productoDetalleTransferenciaGenerico.setSelectedItem(novedadproductoTemp);
			} else {
				if(jComboBoxid_novedad_productoDetalleTransferenciaGenerico!=null && jComboBoxid_novedad_productoDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_novedad_productoDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoDetalleInventarioForeignKey(Long idEstadoDetalleInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadodetalleinventarioTemp!=null) {

					if(this.detalletransferencia!=null) {
						this.detalletransferencia.setEstadoDetalleInventario(estadodetalleinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedItem(estadodetalleinventarioTemp);
					}
				} else {
					//jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedItem(estadodetalleinventarioTemp);
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadodetalleinventarioTemp!=null && jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia!=null) {
						jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.setSelectedItem(estadodetalleinventarioTemp);
					} else {
						if(jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia!=null) {
							//jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.setSelectedItem(estadodetalleinventarioTemp);
							if(jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.getItemCount()>0) {
								jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoDetalleInventarioForeignKeyDescripcion(Long idEstadoDetalleInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}


			sDescripcion=EstadoDetalleInventarioConstantesFunciones.getEstadoDetalleInventarioDescripcion(estadodetalleinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoDetalleInventarioForeignKeyGenerico(Long idEstadoDetalleInventarioSeleccionado,JComboBox jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}

			if(estadodetalleinventarioTemp!=null) {
				jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico.setSelectedItem(estadodetalleinventarioTemp);
			} else {
				if(jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico!=null && jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico.getItemCount()>0) {
					jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransferenciaForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_transferenciaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Transferencia  transferenciaAux=new Transferencia();

			if(jComboBoxid_transferenciaDetalleTransferenciaGenerico==null) {
				transferenciaAux=(Transferencia)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.getSelectedItem();
			} else {
				transferenciaAux=(Transferencia)jComboBoxid_transferenciaDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(transferenciaAux!=null && transferenciaAux.getId()!=null) {
				detalletransferencia.setid_transferencia(transferenciaAux.getId());
				detalletransferencia.settransferencia_descripcion(DetalleTransferenciaConstantesFunciones.getTransferenciaDescripcion(transferenciaAux));
				detalletransferencia.setTransferencia(transferenciaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_empresaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleTransferenciaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detalletransferencia.setid_empresa(empresaAux.getId());
				detalletransferencia.setempresa_descripcion(DetalleTransferenciaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detalletransferencia.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_sucursalDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleTransferenciaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detalletransferencia.setid_sucursal(sucursalAux.getId());
				detalletransferencia.setsucursal_descripcion(DetalleTransferenciaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detalletransferencia.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_ejercicioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleTransferenciaGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detalletransferencia.setid_ejercicio(ejercicioAux.getId());
				detalletransferencia.setejercicio_descripcion(DetalleTransferenciaConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detalletransferencia.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_periodoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleTransferenciaGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detalletransferencia.setid_periodo(periodoAux.getId());
				detalletransferencia.setperiodo_descripcion(DetalleTransferenciaConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detalletransferencia.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_anioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleTransferenciaGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detalletransferencia.setid_anio(anioAux.getId());
				detalletransferencia.setanio_descripcion(DetalleTransferenciaConstantesFunciones.getAnioDescripcion(anioAux));
				detalletransferencia.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_mesDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleTransferenciaGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detalletransferencia.setid_mes(mesAux.getId());
				detalletransferencia.setmes_descripcion(DetalleTransferenciaConstantesFunciones.getMesDescripcion(mesAux));
				detalletransferencia.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_bodegaDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleTransferenciaGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detalletransferencia.setid_bodega(bodegaAux.getId());
				detalletransferencia.setbodega_descripcion(DetalleTransferenciaConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detalletransferencia.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_productoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleTransferenciaGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detalletransferencia.setid_producto(productoAux.getId());
				detalletransferencia.setproducto_descripcion(DetalleTransferenciaConstantesFunciones.getProductoDescripcion(productoAux));
				detalletransferencia.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_unidadDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleTransferenciaGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detalletransferencia.setid_unidad(unidadAux.getId());
				detalletransferencia.setunidad_descripcion(DetalleTransferenciaConstantesFunciones.getUnidadDescripcion(unidadAux));
				detalletransferencia.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaEnviarForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_bodega_enviarDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodega_enviarDetalleTransferenciaGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodega_enviarDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detalletransferencia.setid_bodega_enviar(bodegaAux.getId());
				detalletransferencia.setbodegaenviar_descripcion(DetalleTransferenciaConstantesFunciones.getBodegaEnviarDescripcion(bodegaAux));
				detalletransferencia.setBodegaEnviar(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNovedadProductoForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_novedad_productoDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoAux=new NovedadProducto();

			if(jComboBoxid_novedad_productoDetalleTransferenciaGenerico==null) {
				novedadproductoAux=(NovedadProducto)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.getSelectedItem();
			} else {
				novedadproductoAux=(NovedadProducto)jComboBoxid_novedad_productoDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(novedadproductoAux!=null) {
				detalletransferencia.setid_novedad_producto(novedadproductoAux.getId());
				detalletransferencia.setnovedadproducto_descripcion(DetalleTransferenciaConstantesFunciones.getNovedadProductoDescripcion(novedadproductoAux));
				detalletransferencia.setNovedadProducto(novedadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoDetalleInventarioForeignKey(DetalleTransferencia detalletransferencia,JComboBox jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioAux=new EstadoDetalleInventario();

			if(jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico==null) {
				estadodetalleinventarioAux=(EstadoDetalleInventario)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.getSelectedItem();
			} else {
				estadodetalleinventarioAux=(EstadoDetalleInventario)jComboBoxid_estado_detalle_inventarioDetalleTransferenciaGenerico.getSelectedItem();
			}

			if(estadodetalleinventarioAux!=null && estadodetalleinventarioAux.getId()!=null) {
				detalletransferencia.setid_estado_detalle_inventario(estadodetalleinventarioAux.getId());
				detalletransferencia.setestadodetalleinventario_descripcion(DetalleTransferenciaConstantesFunciones.getEstadoDetalleInventarioDescripcion(estadodetalleinventarioAux));
				detalletransferencia.setEstadoDetalleInventario(estadodetalleinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransferenciasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransferencia=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.removeAllItems();

							for(Transferencia transferencia:this.transferenciasForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.addItem(transferencia);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransferencia") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.removeAllItems();

							for(Transferencia transferencia:this.transferenciasForeignKey) {
								this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.addItem(transferencia);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.addItem(bodega);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.addItem(producto);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.addItem(unidad);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegaEnviarsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.removeAllItems();

							for(Bodega bodegaenviar:this.bodegaenviarsForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.addItem(bodegaenviar);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodegaEnviar") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.removeAllItems();

							for(Bodega bodegaenviar:this.bodegaenviarsForeignKey) {
								this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.addItem(bodegaenviar);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNovedadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNovedadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.addItem(novedadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.addItem(novedadproducto);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoDetalleInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoDetalleInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.removeAllItems();

							for(EstadoDetalleInventario estadodetalleinventario:this.estadodetalleinventariosForeignKey) {
								this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.addItem(estadodetalleinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { 
					}

					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.removeAllItems();

							for(EstadoDetalleInventario estadodetalleinventario:this.estadodetalleinventariosForeignKey) {
								this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.addItem(estadodetalleinventario);
							}
						}

						if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameTransferenciaForeignKey(Transferencia transferencia,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setSelectedItem(transferencia);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.setSelectedItem(transferencia);
						} else {
							this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaEnviarForeignKey(Bodega bodegaenviar,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedItem(bodegaenviar);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.setSelectedItem(bodegaenviar);
						} else {
							this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNovedadProductoForeignKey(NovedadProducto novedadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setSelectedItem(novedadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.setSelectedItem(novedadproducto);
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoDetalleInventarioForeignKey(EstadoDetalleInventario estadodetalleinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedItem(estadodetalleinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.setSelectedItem(estadodetalleinventario);
						} else {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleTransferencia() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleTransferenciaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleTransferencia(this.detalletransferenciaLogic.getDetalleTransferencias());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleTransferenciaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleTransferencia(this.detalletransferencias);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Transferencia.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(NovedadProducto.class));
		classes.add(new Classe(EstadoDetalleInventario.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detalletransferenciaLogic.setDetalleTransferencias(this.detalletransferencias);
			detalletransferenciaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleTransferenciaParameterReturnGeneral getDetalleTransferenciaParameterGeneral() {
		return this.detalletransferenciaParameterGeneral;
	}
	
	public void setDetalleTransferenciaParameterGeneral(DetalleTransferenciaParameterReturnGeneral detalletransferenciaParameterGeneral) {
		this.detalletransferenciaParameterGeneral = detalletransferenciaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleTransferencia() {
		return isPermisoTodoDetalleTransferencia;
	}

	public void setIsPermisoTodoDetalleTransferencia(Boolean isPermisoTodoDetalleTransferencia) {
		this.isPermisoTodoDetalleTransferencia = isPermisoTodoDetalleTransferencia;
	}

	public Boolean getIsPermisoNuevoDetalleTransferencia() {
		return isPermisoNuevoDetalleTransferencia;
	}

	public void setIsPermisoNuevoDetalleTransferencia(Boolean isPermisoNuevoDetalleTransferencia) {
		this.isPermisoNuevoDetalleTransferencia = isPermisoNuevoDetalleTransferencia;
	}

	public Boolean getIsPermisoActualizarDetalleTransferencia() {
		return isPermisoActualizarDetalleTransferencia;
	}

	public void setIsPermisoActualizarDetalleTransferencia(Boolean isPermisoActualizarDetalleTransferencia) {
		this.isPermisoActualizarDetalleTransferencia = isPermisoActualizarDetalleTransferencia;
	}

	public Boolean getIsPermisoEliminarDetalleTransferencia() {
		return isPermisoEliminarDetalleTransferencia;
	}

	public void setIsPermisoEliminarDetalleTransferencia(Boolean isPermisoEliminarDetalleTransferencia) {
		this.isPermisoEliminarDetalleTransferencia = isPermisoEliminarDetalleTransferencia;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleTransferencia() {
		return isPermisoGuardarCambiosDetalleTransferencia;
	}

	public void setIsPermisoGuardarCambiosDetalleTransferencia(Boolean isPermisoGuardarCambiosDetalleTransferencia) {
		this.isPermisoGuardarCambiosDetalleTransferencia = isPermisoGuardarCambiosDetalleTransferencia;
	}
	
	public Boolean getIsPermisoConsultaDetalleTransferencia() {
		return isPermisoConsultaDetalleTransferencia;
	}

	public void setIsPermisoConsultaDetalleTransferencia(Boolean isPermisoConsultaDetalleTransferencia) {
		this.isPermisoConsultaDetalleTransferencia = isPermisoConsultaDetalleTransferencia;
	}

	public Boolean getIsPermisoBusquedaDetalleTransferencia() {
		return isPermisoBusquedaDetalleTransferencia;
	}

	public void setIsPermisoBusquedaDetalleTransferencia(Boolean isPermisoBusquedaDetalleTransferencia) {
		this.isPermisoBusquedaDetalleTransferencia = isPermisoBusquedaDetalleTransferencia;
	}

	public Boolean getIsPermisoReporteDetalleTransferencia() {
		return isPermisoReporteDetalleTransferencia;
	}

	public void setIsPermisoReporteDetalleTransferencia(Boolean isPermisoReporteDetalleTransferencia) {
		this.isPermisoReporteDetalleTransferencia = isPermisoReporteDetalleTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleTransferencia() {
		return isPermisoPaginacionMedioDetalleTransferencia;
	}

	public void setIsPermisoPaginacionMedioDetalleTransferencia(Boolean isPermisoPaginacionMedioDetalleTransferencia) {
		this.isPermisoPaginacionMedioDetalleTransferencia = isPermisoPaginacionMedioDetalleTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleTransferencia() {
		return isPermisoPaginacionTodoDetalleTransferencia;
	}

	public void setIsPermisoPaginacionTodoDetalleTransferencia(Boolean isPermisoPaginacionTodoDetalleTransferencia) {
		this.isPermisoPaginacionTodoDetalleTransferencia = isPermisoPaginacionTodoDetalleTransferencia;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleTransferencia() {
		return isPermisoPaginacionAltoDetalleTransferencia;
	}

	public void setIsPermisoPaginacionAltoDetalleTransferencia(Boolean isPermisoPaginacionAltoDetalleTransferencia) {
		this.isPermisoPaginacionAltoDetalleTransferencia = isPermisoPaginacionAltoDetalleTransferencia;
	}
	
	public Boolean getIsPermisoCopiarDetalleTransferencia() {
		return isPermisoCopiarDetalleTransferencia;
	}

	public void setIsPermisoCopiarDetalleTransferencia(Boolean isPermisoCopiarDetalleTransferencia) {
		this.isPermisoCopiarDetalleTransferencia = isPermisoCopiarDetalleTransferencia;
	}
	
	public Boolean getIsPermisoVerFormDetalleTransferencia() {
		return isPermisoVerFormDetalleTransferencia;
	}

	public void setIsPermisoVerFormDetalleTransferencia(Boolean isPermisoVerFormDetalleTransferencia) {
		this.isPermisoVerFormDetalleTransferencia = isPermisoVerFormDetalleTransferencia;
	}
	
	public Boolean getIsPermisoDuplicarDetalleTransferencia() {
		return isPermisoDuplicarDetalleTransferencia;
	}

	public void setIsPermisoDuplicarDetalleTransferencia(Boolean isPermisoDuplicarDetalleTransferencia) {
		this.isPermisoDuplicarDetalleTransferencia = isPermisoDuplicarDetalleTransferencia;
	}
	
	public Boolean getIsPermisoOrdenDetalleTransferencia() {
		return isPermisoOrdenDetalleTransferencia;
	}

	public void setIsPermisoOrdenDetalleTransferencia(Boolean isPermisoOrdenDetalleTransferencia) {
		this.isPermisoOrdenDetalleTransferencia = isPermisoOrdenDetalleTransferencia;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleTransferencia() {
		return isVisibilidadCeldaNuevoDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaNuevoDetalleTransferencia(Boolean isVisibilidadCeldaNuevoDetalleTransferencia) {
		this.isVisibilidadCeldaNuevoDetalleTransferencia = isVisibilidadCeldaNuevoDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleTransferencia() {
		return isVisibilidadCeldaDuplicarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleTransferencia(Boolean isVisibilidadCeldaDuplicarDetalleTransferencia) {
		this.isVisibilidadCeldaDuplicarDetalleTransferencia = isVisibilidadCeldaDuplicarDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleTransferencia() {
		return isVisibilidadCeldaCopiarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaCopiarDetalleTransferencia(Boolean isVisibilidadCeldaCopiarDetalleTransferencia) {
		this.isVisibilidadCeldaCopiarDetalleTransferencia = isVisibilidadCeldaCopiarDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleTransferencia() {
		return isVisibilidadCeldaVerFormDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaVerFormDetalleTransferencia(Boolean isVisibilidadCeldaVerFormDetalleTransferencia) {
		this.isVisibilidadCeldaVerFormDetalleTransferencia = isVisibilidadCeldaVerFormDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleTransferencia() {
		return isVisibilidadCeldaOrdenDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaOrdenDetalleTransferencia(Boolean isVisibilidadCeldaOrdenDetalleTransferencia) {
		this.isVisibilidadCeldaOrdenDetalleTransferencia = isVisibilidadCeldaOrdenDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleTransferencia() {
		return isVisibilidadCeldaNuevoRelacionesDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleTransferencia(Boolean isVisibilidadCeldaNuevoRelacionesDetalleTransferencia) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia = isVisibilidadCeldaNuevoRelacionesDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleTransferencia() {
		return isVisibilidadCeldaModificarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaModificarDetalleTransferencia(Boolean isVisibilidadCeldaModificarDetalleTransferencia) {
		this.isVisibilidadCeldaModificarDetalleTransferencia = isVisibilidadCeldaModificarDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleTransferencia() {
		return isVisibilidadCeldaActualizarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaActualizarDetalleTransferencia(Boolean isVisibilidadCeldaActualizarDetalleTransferencia) {
		this.isVisibilidadCeldaActualizarDetalleTransferencia = isVisibilidadCeldaActualizarDetalleTransferencia;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleTransferencia() {
		return isVisibilidadCeldaEliminarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaEliminarDetalleTransferencia(Boolean isVisibilidadCeldaEliminarDetalleTransferencia) {
		this.isVisibilidadCeldaEliminarDetalleTransferencia = isVisibilidadCeldaEliminarDetalleTransferencia;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleTransferencia() {
		return isVisibilidadCeldaCancelarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaCancelarDetalleTransferencia(Boolean isVisibilidadCeldaCancelarDetalleTransferencia) {
		this.isVisibilidadCeldaCancelarDetalleTransferencia = isVisibilidadCeldaCancelarDetalleTransferencia;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleTransferencia() {
		return isVisibilidadCeldaGuardarDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaGuardarDetalleTransferencia(Boolean isVisibilidadCeldaGuardarDetalleTransferencia) {
		this.isVisibilidadCeldaGuardarDetalleTransferencia = isVisibilidadCeldaGuardarDetalleTransferencia;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleTransferencia() {
		return isVisibilidadCeldaGuardarCambiosDetalleTransferencia;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleTransferencia(Boolean isVisibilidadCeldaGuardarCambiosDetalleTransferencia) {
		this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia = isVisibilidadCeldaGuardarCambiosDetalleTransferencia;
	}
		
	public DetalleTransferenciaSessionBean getdetalletransferenciaSessionBean() {
		return this.detalletransferenciaSessionBean;
	}
	
	public void setdetalletransferenciaSessionBean(DetalleTransferenciaSessionBean detalletransferenciaSessionBean) {
		this.detalletransferenciaSessionBean=detalletransferenciaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdBodegaEnviar() {
		return this.isVisibilidadFK_IdBodegaEnviar;
	}

	public void setisVisibilidadFK_IdBodegaEnviar(Boolean isVisibilidadFK_IdBodegaEnviar) {
		this.isVisibilidadFK_IdBodegaEnviar=isVisibilidadFK_IdBodegaEnviar;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoDetalleInventario() {
		return this.isVisibilidadFK_IdEstadoDetalleInventario;
	}

	public void setisVisibilidadFK_IdEstadoDetalleInventario(Boolean isVisibilidadFK_IdEstadoDetalleInventario) {
		this.isVisibilidadFK_IdEstadoDetalleInventario=isVisibilidadFK_IdEstadoDetalleInventario;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdNovedadProducto() {
		return this.isVisibilidadFK_IdNovedadProducto;
	}

	public void setisVisibilidadFK_IdNovedadProducto(Boolean isVisibilidadFK_IdNovedadProducto) {
		this.isVisibilidadFK_IdNovedadProducto=isVisibilidadFK_IdNovedadProducto;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTransferencia() {
		return this.isVisibilidadFK_IdTransferencia;
	}

	public void setisVisibilidadFK_IdTransferencia(Boolean isVisibilidadFK_IdTransferencia) {
		this.isVisibilidadFK_IdTransferencia=isVisibilidadFK_IdTransferencia;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(DetalleTransferencia detalletransferencia)throws Exception {
		try {
			
				this.setActualParaGuardarTransferenciaForeignKey(detalletransferencia,null);
				this.setActualParaGuardarEmpresaForeignKey(detalletransferencia,null);
				this.setActualParaGuardarSucursalForeignKey(detalletransferencia,null);
				this.setActualParaGuardarEjercicioForeignKey(detalletransferencia,null);
				this.setActualParaGuardarPeriodoForeignKey(detalletransferencia,null);
				this.setActualParaGuardarAnioForeignKey(detalletransferencia,null);
				this.setActualParaGuardarMesForeignKey(detalletransferencia,null);
				this.setActualParaGuardarBodegaForeignKey(detalletransferencia,null);
				this.setActualParaGuardarProductoForeignKey(detalletransferencia,null);
				this.setActualParaGuardarUnidadForeignKey(detalletransferencia,null);
				this.setActualParaGuardarBodegaEnviarForeignKey(detalletransferencia,null);
				this.setActualParaGuardarNovedadProductoForeignKey(detalletransferencia,null);
				this.setActualParaGuardarEstadoDetalleInventarioForeignKey(detalletransferencia,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(DetalleTransferencia detalletransferencia,DetalleTransferencia detalletransferenciaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleTransferencia(detalletransferencia);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detalletransferenciaAux.setId(detalletransferencia.getId());
		detalletransferenciaAux.setVersionRow(detalletransferencia.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleTransferencia();
		
			int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detalletransferenciaValidator.getInvalidValues(this.detalletransferencia);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detalletransferenciaLogic.setDatosCliente(datosCliente);
			detalletransferenciaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detalletransferenciaAux=new  DetalleTransferencia();
				
				detalletransferenciaAux.setIsNew(true);
				detalletransferenciaAux.setIsChanged(true);
				
				detalletransferenciaAux.setDetalleTransferenciaOriginal(this.detalletransferencia);
				
				detalletransferenciaAux.setId(this.detalletransferencia.getId());	
				detalletransferenciaAux.setVersionRow(this.detalletransferencia.getVersionRow());	
				detalletransferenciaAux.setid_transferencia(this.detalletransferencia.getid_transferencia());	
				detalletransferenciaAux.setid_empresa(this.detalletransferencia.getid_empresa());	
				detalletransferenciaAux.setid_sucursal(this.detalletransferencia.getid_sucursal());	
				detalletransferenciaAux.setid_ejercicio(this.detalletransferencia.getid_ejercicio());	
				detalletransferenciaAux.setid_periodo(this.detalletransferencia.getid_periodo());	
				detalletransferenciaAux.setid_anio(this.detalletransferencia.getid_anio());	
				detalletransferenciaAux.setid_mes(this.detalletransferencia.getid_mes());	
				detalletransferenciaAux.setid_bodega(this.detalletransferencia.getid_bodega());	
				detalletransferenciaAux.setid_producto(this.detalletransferencia.getid_producto());	
				detalletransferenciaAux.setid_unidad(this.detalletransferencia.getid_unidad());	
				detalletransferenciaAux.setid_bodega_enviar(this.detalletransferencia.getid_bodega_enviar());	
				detalletransferenciaAux.setdescripcion(this.detalletransferencia.getdescripcion());	
				
				if(this.detalletransferencia.getid_novedad_producto()!=null && this.detalletransferencia.getid_novedad_producto()>0L) {
					detalletransferenciaAux.setid_novedad_producto(this.detalletransferencia.getid_novedad_producto());
				} else {
					detalletransferenciaAux.setid_novedad_producto(null);
				}	
				detalletransferenciaAux.setid_estado_detalle_inventario(this.detalletransferencia.getid_estado_detalle_inventario());	
				detalletransferenciaAux.setcantidad(this.detalletransferencia.getcantidad());	
				detalletransferenciaAux.setdescuento(this.detalletransferencia.getdescuento());	
				detalletransferenciaAux.setcosto_unitario(this.detalletransferencia.getcosto_unitario());	
				detalletransferenciaAux.setcosto_total(this.detalletransferencia.getcosto_total());	
				detalletransferenciaAux.setdisponible(this.detalletransferencia.getdisponible());	
				detalletransferenciaAux.setlote(this.detalletransferencia.getlote());	
				detalletransferenciaAux.setfecha_elaboracion_lote(this.detalletransferencia.getfecha_elaboracion_lote());	
				detalletransferenciaAux.setfecha_caducidad_lote(this.detalletransferencia.getfecha_caducidad_lote());	
				detalletransferenciaAux.setnumero_comprobante(this.detalletransferencia.getnumero_comprobante());	
				detalletransferenciaAux.setlote_cliente(this.detalletransferencia.getlote_cliente());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalletransferenciaAux,detalletransferencias);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.saveDetalleTransferencias();//WithConnection
						//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleTransferencia();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalletransferenciaLogic.saveDetalleTransferenciaRelaciones(detalletransferenciaAux);//WithConnection
								//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalletransferenciaAux,detalletransferencias);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detalletransferenciaAux=new  DetalleTransferencia();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado() 
					|| (this.detalletransferenciaSessionBean.getEsGuardarRelacionado() && this.detalletransferencia.getId()>=0)) {
						
					detalletransferenciaAux.setIsNew(false);
				}
				
				detalletransferenciaAux.setIsDeleted(false);
			
				detalletransferenciaAux.setId(this.detalletransferencia.getId());	
				detalletransferenciaAux.setVersionRow(this.detalletransferencia.getVersionRow());	
				detalletransferenciaAux.setid_transferencia(this.detalletransferencia.getid_transferencia());	
				detalletransferenciaAux.setid_empresa(this.detalletransferencia.getid_empresa());	
				detalletransferenciaAux.setid_sucursal(this.detalletransferencia.getid_sucursal());	
				detalletransferenciaAux.setid_ejercicio(this.detalletransferencia.getid_ejercicio());	
				detalletransferenciaAux.setid_periodo(this.detalletransferencia.getid_periodo());	
				detalletransferenciaAux.setid_anio(this.detalletransferencia.getid_anio());	
				detalletransferenciaAux.setid_mes(this.detalletransferencia.getid_mes());	
				detalletransferenciaAux.setid_bodega(this.detalletransferencia.getid_bodega());	
				detalletransferenciaAux.setid_producto(this.detalletransferencia.getid_producto());	
				detalletransferenciaAux.setid_unidad(this.detalletransferencia.getid_unidad());	
				detalletransferenciaAux.setid_bodega_enviar(this.detalletransferencia.getid_bodega_enviar());	
				detalletransferenciaAux.setdescripcion(this.detalletransferencia.getdescripcion());	
				
				if(this.detalletransferencia.getid_novedad_producto()!=null && this.detalletransferencia.getid_novedad_producto()>0L) {
					detalletransferenciaAux.setid_novedad_producto(this.detalletransferencia.getid_novedad_producto());
				} else {
					detalletransferenciaAux.setid_novedad_producto(null);
				}	
				detalletransferenciaAux.setid_estado_detalle_inventario(this.detalletransferencia.getid_estado_detalle_inventario());	
				detalletransferenciaAux.setcantidad(this.detalletransferencia.getcantidad());	
				detalletransferenciaAux.setdescuento(this.detalletransferencia.getdescuento());	
				detalletransferenciaAux.setcosto_unitario(this.detalletransferencia.getcosto_unitario());	
				detalletransferenciaAux.setcosto_total(this.detalletransferencia.getcosto_total());	
				detalletransferenciaAux.setdisponible(this.detalletransferencia.getdisponible());	
				detalletransferenciaAux.setlote(this.detalletransferencia.getlote());	
				detalletransferenciaAux.setfecha_elaboracion_lote(this.detalletransferencia.getfecha_elaboracion_lote());	
				detalletransferenciaAux.setfecha_caducidad_lote(this.detalletransferencia.getfecha_caducidad_lote());	
				detalletransferenciaAux.setnumero_comprobante(this.detalletransferencia.getnumero_comprobante());	
				detalletransferenciaAux.setlote_cliente(this.detalletransferencia.getlote_cliente());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalletransferenciaAux,detalletransferencias);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.saveDetalleTransferencias();//WithConnection
						//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleTransferencia();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalletransferenciaLogic.saveDetalleTransferenciaRelaciones(detalletransferenciaAux);//WithConnection
								//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detalletransferenciaAux,detalletransferencias);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detalletransferencia,detalletransferenciaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detalletransferenciaAux=new  DetalleTransferencia();
				
				detalletransferenciaAux.setIsNew(false);
				detalletransferenciaAux.setIsChanged(false);
				
				detalletransferenciaAux.setIsDeleted(true);
				
				detalletransferenciaAux.setId(this.detalletransferencia.getId());	
				detalletransferenciaAux.setVersionRow(this.detalletransferencia.getVersionRow());	
				detalletransferenciaAux.setid_transferencia(this.detalletransferencia.getid_transferencia());	
				detalletransferenciaAux.setid_empresa(this.detalletransferencia.getid_empresa());	
				detalletransferenciaAux.setid_sucursal(this.detalletransferencia.getid_sucursal());	
				detalletransferenciaAux.setid_ejercicio(this.detalletransferencia.getid_ejercicio());	
				detalletransferenciaAux.setid_periodo(this.detalletransferencia.getid_periodo());	
				detalletransferenciaAux.setid_anio(this.detalletransferencia.getid_anio());	
				detalletransferenciaAux.setid_mes(this.detalletransferencia.getid_mes());	
				detalletransferenciaAux.setid_bodega(this.detalletransferencia.getid_bodega());	
				detalletransferenciaAux.setid_producto(this.detalletransferencia.getid_producto());	
				detalletransferenciaAux.setid_unidad(this.detalletransferencia.getid_unidad());	
				detalletransferenciaAux.setid_bodega_enviar(this.detalletransferencia.getid_bodega_enviar());	
				detalletransferenciaAux.setdescripcion(this.detalletransferencia.getdescripcion());	
				
				if(this.detalletransferencia.getid_novedad_producto()!=null && this.detalletransferencia.getid_novedad_producto()>0L) {
					detalletransferenciaAux.setid_novedad_producto(this.detalletransferencia.getid_novedad_producto());
				} else {
					detalletransferenciaAux.setid_novedad_producto(null);
				}	
				detalletransferenciaAux.setid_estado_detalle_inventario(this.detalletransferencia.getid_estado_detalle_inventario());	
				detalletransferenciaAux.setcantidad(this.detalletransferencia.getcantidad());	
				detalletransferenciaAux.setdescuento(this.detalletransferencia.getdescuento());	
				detalletransferenciaAux.setcosto_unitario(this.detalletransferencia.getcosto_unitario());	
				detalletransferenciaAux.setcosto_total(this.detalletransferencia.getcosto_total());	
				detalletransferenciaAux.setdisponible(this.detalletransferencia.getdisponible());	
				detalletransferenciaAux.setlote(this.detalletransferencia.getlote());	
				detalletransferenciaAux.setfecha_elaboracion_lote(this.detalletransferencia.getfecha_elaboracion_lote());	
				detalletransferenciaAux.setfecha_caducidad_lote(this.detalletransferencia.getfecha_caducidad_lote());	
				detalletransferenciaAux.setnumero_comprobante(this.detalletransferencia.getnumero_comprobante());	
				detalletransferenciaAux.setlote_cliente(this.detalletransferencia.getlote_cliente());	
				
				if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detalletransferenciaAux.getId()>=0) {	
						this.detalletransferenciasEliminados.add(detalletransferenciaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalletransferenciaAux,detalletransferencias);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.saveDetalleTransferencias();//WithConnection
						//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detalletransferenciaLogic.saveDetalleTransferenciaRelaciones(detalletransferenciaAux);//WithConnection
								//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detalletransferenciaAux,detalletransferenciaLogic.getDetalleTransferencias());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detalletransferenciaAux,detalletransferencias);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getDetalleTransferencias().addAll(this.detalletransferenciasEliminados);
					
					detalletransferenciaLogic.saveDetalleTransferencias();//WithConnection
					//detalletransferenciaLogic.getSetVersionRowDetalleTransferencias();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleTransferencia();
				
				this.detalletransferenciasEliminados= new ArrayList<DetalleTransferencia>();		
			}
			
			if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(detalletransferenciaLogic.getDetalleTransferencias());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(this.detalletransferencias);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Transferencia GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detalletransferencia=detalletransferenciaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleTransferencia();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleTransferencia detalletransferenciaLocal) throws Exception {
		
		if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleTransferencia detalletransferenciaLocal) throws Exception {	
		if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(TransferenciaDetalleFormJInternalFrame.class)) {
				TransferenciaBeanSwingJInternalFrame transferenciaBeanSwingJInternalFrameLocal=(TransferenciaBeanSwingJInternalFrame) ((TransferenciaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transferenciaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransferencia(transferenciaBeanSwingJInternalFrameLocal.gettransferencia(),true);
				transferenciaBeanSwingJInternalFrameLocal.actualizarLista(transferenciaBeanSwingJInternalFrameLocal.transferencia,this.transferenciasForeignKey);

				transferenciaBeanSwingJInternalFrameLocal.actualizarRelaciones(transferenciaBeanSwingJInternalFrameLocal.transferencia);

				detalletransferenciaLocal.setTransferencia(transferenciaBeanSwingJInternalFrameLocal.transferencia);

				this.addItemDefectoCombosForeignKeyTransferencia();
				this.cargarCombosFrameTransferenciasForeignKey("Formulario");
				this.setActualTransferenciaForeignKey(transferenciaBeanSwingJInternalFrameLocal.transferencia.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detalletransferenciaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detalletransferenciaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detalletransferenciaLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detalletransferenciaLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detalletransferenciaLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detalletransferenciaLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detalletransferenciaLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detalletransferenciaLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detalletransferenciaLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaenviarBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaenviarBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaenviarBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaenviarBeanSwingJInternalFrameLocal.actualizarLista(bodegaenviarBeanSwingJInternalFrameLocal.bodega,this.bodegaenviarsForeignKey);

				bodegaenviarBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaenviarBeanSwingJInternalFrameLocal.bodega);

				detalletransferenciaLocal.setBodegaEnviar(bodegaenviarBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodegaEnviar();
				this.cargarCombosFrameBodegaEnviarsForeignKey("Formulario");
				this.setActualBodegaEnviarForeignKey(bodegaenviarBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NovedadProductoDetalleFormJInternalFrame.class)) {
				NovedadProductoBeanSwingJInternalFrame novedadproductoBeanSwingJInternalFrameLocal=(NovedadProductoBeanSwingJInternalFrame) ((NovedadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				novedadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.getnovedadproducto(),true);
				novedadproductoBeanSwingJInternalFrameLocal.actualizarLista(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto,this.novedadproductosForeignKey);

				novedadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				detalletransferenciaLocal.setNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey("Formulario");
				this.setActualNovedadProductoForeignKey(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoDetalleInventarioDetalleFormJInternalFrame.class)) {
				EstadoDetalleInventarioBeanSwingJInternalFrame estadodetalleinventarioBeanSwingJInternalFrameLocal=(EstadoDetalleInventarioBeanSwingJInternalFrame) ((EstadoDetalleInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadodetalleinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoDetalleInventario(estadodetalleinventarioBeanSwingJInternalFrameLocal.getestadodetalleinventario(),true);
				estadodetalleinventarioBeanSwingJInternalFrameLocal.actualizarLista(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario,this.estadodetalleinventariosForeignKey);

				estadodetalleinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario);

				detalletransferenciaLocal.setEstadoDetalleInventario(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario);

				this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
				this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Formulario");
				this.setActualEstadoDetalleInventarioForeignKey(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleTransferenciaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detalletransferenciaValidator.getInvalidValues(this.detalletransferencia);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleTransferencia detalletransferencia,List<DetalleTransferencia> detalletransferencias) throws Exception {
		try	{		
			DetalleTransferenciaConstantesFunciones.actualizarLista(detalletransferencia,detalletransferencias,this.detalletransferenciaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleTransferencia detalletransferencia,List<DetalleTransferencia> detalletransferencias) throws Exception {
		try	{			
			DetalleTransferenciaConstantesFunciones.actualizarSelectedLista(detalletransferencia,detalletransferencias);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleTransferencia> detalletransferenciasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detalletransferenciasLocal=this.detalletransferenciaLogic.getDetalleTransferencias();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detalletransferenciasLocal=this.detalletransferencias;
			}
			//ARCHITECTURE
		
			for(DetalleTransferencia detalletransferenciaLocal:detalletransferenciasLocal) {
				if(this.permiteMantenimiento(detalletransferenciaLocal) && detalletransferenciaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleTransferenciaConstantesFunciones.getDetalleTransferenciaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDTRANSFERENCIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_transferenciaDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_empresaDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_sucursalDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_ejercicioDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_periodoDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_anioDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_mesDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_bodegaDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_productoDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_unidadDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDBODEGAENVIAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_bodega_enviarDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldescripcionDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDNOVEDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_novedad_productoDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.IDESTADODETALLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_estado_detalle_inventarioDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcantidadDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldescuentoDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.COSTOUNITARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_unitarioDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.COSTOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_totalDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.DISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldisponibleDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.LOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelloteDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.FECHAELABORACIONLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_elaboracion_loteDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.FECHACADUCIDADLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_caducidad_loteDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelnumero_comprobanteDetalleTransferencia,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleTransferenciaConstantesFunciones.LOTECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabellote_clienteDetalleTransferencia,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_transferenciaDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_empresaDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_sucursalDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_ejercicioDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_periodoDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_anioDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_mesDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_bodegaDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_productoDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_unidadDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_bodega_enviarDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldescripcionDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_novedad_productoDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelid_estado_detalle_inventarioDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcantidadDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldescuentoDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_unitarioDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_totalDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldisponibleDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelloteDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_elaboracion_loteDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_caducidad_loteDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelnumero_comprobanteDetalleTransferencia,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleTransferencia.jLabellote_clienteDetalleTransferencia,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleTransferencia--;	
		
		
		this.detalletransferenciaAux=new DetalleTransferencia();
		
		this.detalletransferenciaAux.setId(this.iIdNuevoDetalleTransferencia);
		this.detalletransferenciaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detalletransferenciaLogic.getDetalleTransferencias().add(this.detalletransferenciaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detalletransferencias.add(this.detalletransferenciaAux);
		}
		//ARCHITECTURE
		
		this.detalletransferencia=this.detalletransferenciaAux;
		
		if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleTransferencia(this.detalletransferencia);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleTransferencia(this.detalletransferencia);
		}
				
		//this.setDefaultControlesDetalleTransferencia();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleTransferencia();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleTransferencia();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleTransferencia();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleTransferencia(this.detalletransferenciaBean,this.detalletransferencia,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
			classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detalletransferenciaReturnGeneral=detalletransferenciaLogic.procesarEventosDetalleTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalletransferenciaLogic.getDetalleTransferencias(),this.detalletransferencia,this.detalletransferenciaParameterGeneral,this.isEsNuevoDetalleTransferencia,classes);//this.detalletransferenciaLogic.getDetalleTransferencia()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleTransferencia(this.detalletransferenciaReturnGeneral,this.detalletransferenciaBean,false);
		
		if(this.detalletransferenciaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia());
		}
		
		if(this.detalletransferenciaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia(),classes);//this.detalletransferenciaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleTransferencia();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleTransferencia();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.RecargarFormDetalleTransferencia(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleTransferencia(false);
						
			if(detalletransferenciaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleTransferencia();
			}
			
			this.actualizarVisualTableDatosDetalleTransferencia();
			
			this.jTableDatosDetalleTransferencia.setRowSelectionInterval(this.getIndiceNuevoDetalleTransferencia(), this.getIndiceNuevoDetalleTransferencia());
			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
						
			this.actualizarEstadoCeldasBotonesDetalleTransferencia("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleTransferencia(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activardescripcionDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarcantidadDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddescuentoDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activardescuentoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarcosto_unitarioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarcosto_totalDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activardisponibleDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarloteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarfecha_elaboracion_loteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarfecha_caducidad_loteDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldnumero_comprobanteDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarnumero_comprobanteDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldlote_clienteDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarlote_clienteDetalleTransferencia);	
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_transferenciaDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_empresaDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_sucursalDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_ejercicioDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_periodoDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_anioDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_mesDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_bodegaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_productoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_unidadDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_bodega_enviarDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_novedad_productoDetalleTransferencia);//
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setEnabled(isHabilitar && this.detalletransferenciaConstantesFunciones.activarid_estado_detalle_inventarioDetalleTransferencia);
	};
	
	public void setDefaultControlesDetalleTransferencia() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleTransferencia(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detalletransferenciaSessionBean.setConGuardarRelaciones(true);			
			this.detalletransferenciaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.setVisible(true);
			
					
		} else {
			//this.detalletransferenciaSessionBean.setConGuardarRelaciones(false);			
			this.detalletransferenciaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleTransferencia() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
				if(detalletransferenciaAux.getId().equals(this.iIdNuevoDetalleTransferencia)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferencias) {
				if(detalletransferenciaAux.getId().equals(this.iIdNuevoDetalleTransferencia)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleTransferencia(DetalleTransferencia detalletransferencia,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
				if(detalletransferenciaAux.getId().equals(detalletransferencia.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferencias) {
				if(detalletransferenciaAux.getId().equals(detalletransferencia.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleTransferencia(DetalleTransferencia detalletransferenciaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
				if(detalletransferenciaAux.getDetalleTransferenciaOriginal().getId().equals(detalletransferenciaOriginal.getId())) {
					existe=true;
					detalletransferenciaOriginal.setId(detalletransferenciaAux.getId());
					detalletransferenciaOriginal.setVersionRow(detalletransferenciaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleTransferencia detalletransferenciaAux:this.detalletransferencias) {
				if(detalletransferenciaAux.getDetalleTransferenciaOriginal().getId().equals(detalletransferenciaOriginal.getId())) {
					existe=true;
					detalletransferenciaOriginal.setId(detalletransferenciaAux.getId());
					detalletransferenciaOriginal.setVersionRow(detalletransferenciaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleTransferencia(Boolean esParaCancelar) throws Exception {
		detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
		detalletransferenciaAux=new DetalleTransferencia();
		
		if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
					if(detalletransferenciaAux.getId()<0) {
						detalletransferenciasAux.add(detalletransferenciaAux);
					}		
				}
				this.iIdNuevoDetalleTransferencia=0L;
				this.detalletransferenciaLogic.getDetalleTransferencias().removeAll(detalletransferenciasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleTransferencia detalletransferenciaAux:this.detalletransferencias) {
					if(detalletransferenciaAux.getId()<0) {
						detalletransferenciasAux.add(detalletransferenciaAux);
					}		
				}
				this.iIdNuevoDetalleTransferencia=0L;
				this.detalletransferencias.removeAll(detalletransferenciasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleTransferencia 
					&& this.detalletransferenciaLogic.getDetalleTransferencias().size()>0
					) {
					detalletransferenciaAux=this.detalletransferenciaLogic.getDetalleTransferencias().get(this.detalletransferenciaLogic.getDetalleTransferencias().size() - 1);
				
					if(detalletransferenciaAux.getId()<0) {
						this.detalletransferenciaLogic.getDetalleTransferencias().remove(detalletransferenciaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleTransferencia && this.detalletransferencias.size()>0) {
					detalletransferenciaAux=this.detalletransferencias.get(this.detalletransferencias.size() - 1);
				
					if(detalletransferenciaAux.getId()<0) {
						this.detalletransferencias.remove(detalletransferenciaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleTransferencia(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detalletransferencia.getId()<0) {
				this.detalletransferenciaLogic.getDetalleTransferencias().remove(this.detalletransferencia);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detalletransferencia.getId()<0) {
				this.detalletransferencias.remove(this.detalletransferencia);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleTransferencia(List<DetalleTransferencia> detalletransferenciasAux) throws Exception {
		DetalleTransferenciaConstantesFunciones.setEstadosInicialesDetalleTransferencia(detalletransferenciasAux);
	}
	
	public void setEstadosInicialesDetalleTransferencia(DetalleTransferencia detalletransferenciaAux) throws Exception {
		DetalleTransferenciaConstantesFunciones.setEstadosInicialesDetalleTransferencia(detalletransferenciaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleTransferenciaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleTransferenciaActual()) {
				if(!this.isEsNuevoDetalleTransferencia) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleTransferencia=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleTransferenciaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Transferencia ?", "MANTENIMIENTO DE Detalle Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleTransferencia detalletransferencia) throws Exception {
		DetalleTransferenciaConstantesFunciones.seleccionarAsignar(this.detalletransferencia,detalletransferencia);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleTransferencia=this.isPermisoActualizarOriginalDetalleTransferencia;
			
			
			this.seleccionarAsignar(detalletransferencia);
			
			

			idProductoActual=detalletransferencia.getid_producto();
			this.seleccionarProductoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleTransferenciaConstantesFunciones.quitarEspaciosDetalleTransferencia(this.detalletransferencia,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detalletransferenciaSessionBean.setsFuncionBusquedaRapida(this.detalletransferenciaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleTransferencia) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleTransferencia(esParaCancelar);				
				this.cancelarNuevoDetalleTransferencia(esParaCancelar);								
			}
			
			this.detalletransferencia=new DetalleTransferencia();
			
			this.inicializarDetalleTransferencia();
			
			this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleTransferencia() throws Exception {
		try {
			DetalleTransferenciaConstantesFunciones.inicializarDetalleTransferencia(this.detalletransferencia);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detalletransferenciaLogic.getDetalleTransferencias().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleTransferencias(String sAccionBusqueda,List<DetalleTransferencia> detalletransferenciasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleTransferencia"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleTransferenciaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleTransferenciaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleTransferencia"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Transferencias");		
		parameters.put("busquedapor", DetalleTransferenciaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleTransferencia=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleTransferenciaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleTransferenciaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleTransferencia=new JRBeanArrayDataSource(DetalleTransferenciaJInternalFrame.TraerDetalleTransferenciaBeans(detalletransferenciasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleTransferencia);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleTransferenciaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleTransferenciaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleTransferenciaBean.TraerDetalleTransferenciaBeans(detalletransferenciasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoDetalleTransferenciaActionPerformed(null);
					//this.generarExcelReporteDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleTransferencias(sAccionBusqueda,sTipoArchivoReporte,detalletransferenciasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleTransferencia> detalletransferenciasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleTransferencias");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleTransferencia("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleTransferencia detalletransferencia : detalletransferenciasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleTransferenciaConstantesFunciones.generarExcelReporteDataDetalleTransferencia("NORMAL",row,workbook,detalletransferencia,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleTransferencia(String sTipo,Row row,Workbook workbook) {
		
		DetalleTransferenciaConstantesFunciones.generarExcelReporteHeaderDetalleTransferencia(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleTransferencia> detalletransferenciasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleTransferencias");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleTransferencia detalletransferencia : detalletransferenciasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleTransferenciaConstantesFunciones.getDetalleTransferenciaDescripcion(detalletransferencia));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.gettransferencia_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getbodegaenviar_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getnovedadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getestadodetalleinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getcosto_unitario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getcosto_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getdisponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_LOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getlote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getfecha_elaboracion_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getfecha_caducidad_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detalletransferencia.getlote_cliente());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleTransferencias(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleTransferencia> detalletransferenciasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleTransferencia> detalletransferenciasRespaldo=null;
		
		classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detalletransferenciaLogic.setDatosCliente(this.datosCliente);
		this.detalletransferenciaLogic.setDatosDeep(this.datosDeep);
		this.detalletransferenciaLogic.setIsConDeep(true);
		
		detalletransferenciasRespaldo=this.detalletransferenciaLogic.getDetalleTransferencias();
		
		this.detalletransferenciaLogic.setDetalleTransferencias(detalletransferenciasParaReportes);	
		this.detalletransferenciaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detalletransferenciasParaReportes=this.detalletransferenciaLogic.getDetalleTransferencias();
		this.detalletransferenciaLogic.setDetalleTransferencias(detalletransferenciasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleTransferencias");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleTransferencia("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleTransferencia detalletransferencia : detalletransferenciasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleTransferencia("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleTransferenciaConstantesFunciones.generarExcelReporteDataDetalleTransferencia("NORMAL",row,workbook,detalletransferencia,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleTransferenciaConstantesFunciones.getDetalleTransferenciaDescripcion(detalletransferencia));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessDetalleTransferencia() throws Exception {		
		this.startProcessDetalleTransferencia(true);
	}
	
	public void startProcessDetalleTransferencia(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleTransferencia ,this.jPanelParametrosReportesDetalleTransferencia, this.jScrollPanelDatosDetalleTransferencia,this.jPanelPaginacionDetalleTransferencia, this.jScrollPanelDatosEdicionDetalleTransferencia, this.jPanelAccionesDetalleTransferencia,this.jPanelAccionesFormularioDetalleTransferencia,this.jmenuBarDetalleTransferencia,this.jmenuBarDetalleDetalleTransferencia,this.jTtoolBarDetalleTransferencia,this.jTtoolBarDetalleDetalleTransferencia);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleTransferencia=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleTransferencia=this.jPanelParametrosReportesDetalleTransferencia;
		//final JScrollPane jScrollPanelDatosDetalleTransferencia=this.jScrollPanelDatosDetalleTransferencia;
		final JTable jTableDatosDetalleTransferencia=this.jTableDatosDetalleTransferencia;		
		final JPanel jPanelPaginacionDetalleTransferencia=this.jPanelPaginacionDetalleTransferencia;
		//final JScrollPane jScrollPanelDatosEdicionDetalleTransferencia=this.jScrollPanelDatosEdicionDetalleTransferencia;
		final JPanel jPanelAccionesDetalleTransferencia=this.jPanelAccionesDetalleTransferencia;
		
		JPanel jPanelCamposAuxiliarDetalleTransferencia=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleTransferencia=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			jPanelCamposAuxiliarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jPanelCamposDetalleTransferencia;
			jPanelAccionesFormularioAuxiliarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jPanelAccionesFormularioDetalleTransferencia;
		}
		
		final JPanel jPanelCamposDetalleTransferencia=jPanelCamposAuxiliarDetalleTransferencia;
		final JPanel jPanelAccionesFormularioDetalleTransferencia=jPanelAccionesFormularioAuxiliarDetalleTransferencia;
		
		
		final JMenuBar jmenuBarDetalleTransferencia=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleTransferencia=new JMenuBar();
		final JToolBar jTtoolBarDetalleTransferencia=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleTransferencia=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleTransferencia;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleTransferencia;
			processRunnable.jTableDatos=jTableDatosDetalleTransferencia;
			processRunnable.jPanelCampos=jPanelCamposDetalleTransferencia;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleTransferencia;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleTransferencia;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleTransferencia;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleTransferencia;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleTransferencia;
			processRunnable.jTtoolBar=jTtoolBarDetalleTransferencia;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleTransferencia;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleTransferencia ,jPanelParametrosReportesDetalleTransferencia,jTableDatosDetalleTransferencia, /*jScrollPanelDatosDetalleTransferencia,*/jPanelCamposDetalleTransferencia,jPanelPaginacionDetalleTransferencia, /*jScrollPanelDatosEdicionDetalleTransferencia,*/ jPanelAccionesDetalleTransferencia,jPanelAccionesFormularioDetalleTransferencia,jmenuBarDetalleTransferencia,jmenuBarDetalleDetalleTransferencia,jTtoolBarDetalleTransferencia,jTtoolBarDetalleDetalleTransferencia);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleTransferencia ,jPanelParametrosReportesDetalleTransferencia, jScrollPanelDatosDetalleTransferencia,jPanelPaginacionDetalleTransferencia, jScrollPanelDatosEdicionDetalleTransferencia, jPanelAccionesDetalleTransferencia,jPanelAccionesFormularioDetalleTransferencia,jmenuBarDetalleTransferencia,jmenuBarDetalleDetalleTransferencia,jTtoolBarDetalleTransferencia,jTtoolBarDetalleDetalleTransferencia);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleTransferencia() {// throws Exception 
		this.finishProcessDetalleTransferencia(true);
	}
	
	public void finishProcessDetalleTransferencia(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleTransferencia ,this.jPanelParametrosReportesDetalleTransferencia, this.jScrollPanelDatosDetalleTransferencia,this.jPanelPaginacionDetalleTransferencia, this.jScrollPanelDatosEdicionDetalleTransferencia, this.jPanelAccionesDetalleTransferencia,this.jPanelAccionesFormularioDetalleTransferencia,this.jmenuBarDetalleTransferencia,this.jmenuBarDetalleDetalleTransferencia,this.jTtoolBarDetalleTransferencia,this.jTtoolBarDetalleDetalleTransferencia);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleTransferencia=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleTransferencia=this.jPanelParametrosReportesDetalleTransferencia;
		//final JScrollPane jScrollPanelDatosDetalleTransferencia=this.jScrollPanelDatosDetalleTransferencia;
		final JTable jTableDatosDetalleTransferencia=this.jTableDatosDetalleTransferencia;		
		final JPanel jPanelPaginacionDetalleTransferencia=this.jPanelPaginacionDetalleTransferencia;
		//final JScrollPane jScrollPanelDatosEdicionDetalleTransferencia=this.jScrollPanelDatosEdicionDetalleTransferencia;
		final JPanel jPanelAccionesDetalleTransferencia=this.jPanelAccionesDetalleTransferencia;
		
		JPanel jPanelCamposAuxiliarDetalleTransferencia=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleTransferencia=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			jPanelCamposAuxiliarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jPanelCamposDetalleTransferencia;
			jPanelAccionesFormularioAuxiliarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jPanelAccionesFormularioDetalleTransferencia;
		}
		
		final JPanel jPanelCamposDetalleTransferencia=jPanelCamposAuxiliarDetalleTransferencia;
		final JPanel jPanelAccionesFormularioDetalleTransferencia=jPanelAccionesFormularioAuxiliarDetalleTransferencia;
		
		
		final JMenuBar jmenuBarDetalleTransferencia=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleTransferencia=new JMenuBar();
		final JToolBar jTtoolBarDetalleTransferencia=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleTransferencia=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleTransferencia;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleTransferencia;
			processRunnable.jTableDatos=jTableDatosDetalleTransferencia;
			processRunnable.jPanelCampos=jPanelCamposDetalleTransferencia;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleTransferencia;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleTransferencia;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleTransferencia;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleTransferencia;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleTransferencia;
			processRunnable.jTtoolBar=jTtoolBarDetalleTransferencia;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleTransferencia;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleTransferencia ,jPanelParametrosReportesDetalleTransferencia, jTableDatosDetalleTransferencia,/*jScrollPanelDatosDetalleTransferencia,*/jPanelCamposDetalleTransferencia,jPanelPaginacionDetalleTransferencia, /*jScrollPanelDatosEdicionDetalleTransferencia,*/ jPanelAccionesDetalleTransferencia,jPanelAccionesFormularioDetalleTransferencia,jmenuBarDetalleTransferencia,jmenuBarDetalleDetalleTransferencia,jTtoolBarDetalleTransferencia,jTtoolBarDetalleDetalleTransferencia));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleTransferencia(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleTransferencia(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleTransferencia,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleTransferencia,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleTransferencia(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleTransferencia,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleTransferencia,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detalletransferenciaConstantesFunciones.getsFinalQueryDetalleTransferencia();
		String  finalQueryPaginacionTodos=this.detalletransferenciaConstantesFunciones.getsFinalQueryDetalleTransferencia();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleTransferenciaConstantesFunciones.getArrayColumnasGlobalesNoDetalleTransferencia(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleTransferenciaConstantesFunciones.getArrayColumnasGlobalesDetalleTransferencia(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleTransferenciaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detalletransferenciasEliminados= new ArrayList<DetalleTransferencia>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleTransferencia();
		
				///*DetalleTransferenciaSessionBean*/this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			
			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleTransferenciaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleTransferenciaConstantesFunciones.getClassesForeignKeysOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detalletransferencia."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detalletransferenciasAux= new ArrayList<DetalleTransferencia>();
			
				
			detalletransferenciaLogic.setDatosCliente(this.datosCliente);
			detalletransferenciaLogic.setDatosDeep(this.datosDeep);
			detalletransferenciaLogic.setIsConDeep(true);
			
			
			detalletransferenciaLogic.getDetalleTransferenciaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detalletransferenciaLogic.getTodosDetalleTransferencias(finalQueryGlobal,pagination);
					
					//detalletransferenciaLogic.getTodosDetalleTransferenciasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detalletransferenciaLogic.getDetalleTransferencias()==null|| detalletransferenciaLogic.getDetalleTransferencias().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalletransferenciasAux= new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux= new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalletransferenciaLogic.getTodosDetalleTransferencias(finalQueryGlobal+"",this.pagination);												
							
							//detalletransferenciaLogic.getTodosDetalleTransferenciasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleTransferencias("Todos",detalletransferenciaLogic.getDetalleTransferencias() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());					
							detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleTransferencia=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleTransferencia=this.idActual;
				
				} else if(this.idDetalleTransferenciaActual!=null && this.idDetalleTransferenciaActual!=0L) {
					idDetalleTransferencia=idDetalleTransferenciaActual;
				}
				
					
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndicePorId(idDetalleTransferencia);
				
				this.detalletransferencias=new ArrayList<DetalleTransferencia>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detalletransferenciaLogic.getEntity(idDetalleTransferencia);
					
					//detalletransferenciaLogic.getEntityWithConnection(idDetalleTransferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
					detalletransferenciaLogic.getDetalleTransferencias().add(detalletransferenciaLogic.getDetalleTransferencia());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencias=new ArrayList<DetalleTransferencia>();
					this.detalletransferencias.add(detalletransferencia);
				}
				
				if(detalletransferenciaLogic.getDetalleTransferencia()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdBodega",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdBodega",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdBodegaEnviar")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdBodegaEnviar(finalQueryGlobal,pagination,id_bodega_enviarFK_IdBodegaEnviar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdBodegaEnviar(finalQueryGlobal,pagination,id_bodega_enviarFK_IdBodegaEnviar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdBodegaEnviar(id_bodega_enviarFK_IdBodegaEnviar);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdBodegaEnviar",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdBodegaEnviar",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdEjercicio",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdEjercicio",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdEmpresa",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdEmpresa",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoDetalleInventario")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdEstadoDetalleInventario(finalQueryGlobal,pagination,id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdEstadoDetalleInventario(finalQueryGlobal,pagination,id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdEstadoDetalleInventario",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdEstadoDetalleInventario",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNovedadProducto")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdNovedadProducto",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdNovedadProducto",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdPeriodo",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdPeriodo",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdProducto",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdProducto",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdSucursal",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdSucursal",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransferencia")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdTransferencia(id_transferenciaFK_IdTransferencia);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdTransferencia(finalQueryGlobal,pagination,id_transferenciaFK_IdTransferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdTransferencia(id_transferenciaFK_IdTransferencia);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdTransferencia(id_transferenciaFK_IdTransferencia);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdTransferencia(finalQueryGlobal,pagination,id_transferenciaFK_IdTransferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdTransferencia(id_transferenciaFK_IdTransferencia);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdTransferencia(id_transferenciaFK_IdTransferencia);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdTransferencia",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdTransferencia",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detalletransferenciaLogic.getDetalleTransferenciasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detalletransferenciaLogic.getDetalleTransferencias()==null||detalletransferenciaLogic.getDetalleTransferencias().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detalletransferencias==null|| detalletransferencias.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
						detalletransferenciasAux.addAll(detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciasAux=new ArrayList<DetalleTransferencia>();
							detalletransferenciasAux.addAll(detalletransferencias);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detalletransferenciaLogic.getDetalleTransferenciasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleTransferenciaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleTransferencias("FK_IdUnidad",detalletransferenciaLogic.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleTransferencias("FK_IdUnidad",detalletransferencias);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaLogic.setDetalleTransferencias(new ArrayList<DetalleTransferencia>());
						detalletransferenciaLogic.getDetalleTransferencias().addAll(detalletransferenciasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferencias=new ArrayList<DetalleTransferencia>();
							detalletransferencias.addAll(detalletransferenciasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleTransferencia();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(detalletransferenciaLogic.getDetalleTransferencias());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(this.detalletransferencias);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleTransferencia();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalletransferenciaLogic.getDetalleTransferencias().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalletransferencias.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detalletransferenciaLogic.getDetalleTransferencias().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detalletransferencias.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleTransferencia detalletransferencia) {
		Boolean permite=true;
		
		if(this.detalletransferencia.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(detalletransferenciaLogic.getDetalleTransferencias());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleTransferenciaConstantesFunciones.getTotalesListaDetalleTransferencia(this.detalletransferencias);
		}
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleTransferenciaConstantesFunciones.getOrderByListaDetalleTransferencia();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleTransferenciaConstantesFunciones.getOrderByListaDetalleTransferencia();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleTransferencia detalletransferencia:detalletransferenciaLogic.getDetalleTransferencias()) {
				if(detalletransferencia.getsType().equals(Constantes2.S_TOTALES)) {
					detalletransferenciaTotales=detalletransferencia;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleTransferencia detalletransferencia:this.detalletransferencias) {
				if(detalletransferencia.getsType().equals(Constantes2.S_TOTALES)) {
					detalletransferenciaTotales=detalletransferencia;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detalletransferenciaAux=new DetalleTransferencia();
			this.detalletransferenciaAux.setsType(Constantes2.S_TOTALES);
			this.detalletransferenciaAux.setIsNew(false);
			this.detalletransferenciaAux.setIsChanged(false);
			this.detalletransferenciaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleTransferenciaConstantesFunciones.TotalizarValoresFilaDetalleTransferencia(this.detalletransferenciaLogic.getDetalleTransferencias(),this.detalletransferenciaAux);
				
				this.detalletransferenciaLogic.getDetalleTransferencias().add(this.detalletransferenciaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleTransferenciaConstantesFunciones.TotalizarValoresFilaDetalleTransferencia(this.detalletransferencias,this.detalletransferenciaAux);
				
				this.detalletransferencias.add(this.detalletransferenciaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detalletransferenciaTotales=new DetalleTransferencia();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalletransferenciaLogic.getDetalleTransferencias().remove(detalletransferenciaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detalletransferencias.remove(detalletransferenciaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detalletransferenciaTotales=new DetalleTransferencia();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleTransferencia detalletransferencia:detalletransferenciaLogic.getDetalleTransferencias()) {
				if(detalletransferencia.getsType().equals(Constantes2.S_TOTALES)) {
					detalletransferenciaTotales=detalletransferencia;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleTransferenciaConstantesFunciones.TotalizarValoresFilaDetalleTransferencia(this.detalletransferenciaLogic.getDetalleTransferencias(),detalletransferenciaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleTransferencia detalletransferencia:this.detalletransferencias) {
				if(detalletransferencia.getsType().equals(Constantes2.S_TOTALES)) {
					detalletransferenciaTotales=detalletransferencia;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleTransferenciaConstantesFunciones.TotalizarValoresFilaDetalleTransferencia(this.detalletransferencias,detalletransferenciaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleTransferencia() {
		this.isPermisoTodoDetalleTransferencia=false;
		this.isPermisoNuevoDetalleTransferencia=false;
		this.isPermisoActualizarDetalleTransferencia=false;
		this.isPermisoActualizarOriginalDetalleTransferencia=false;
		this.isPermisoEliminarDetalleTransferencia=false;
		this.isPermisoGuardarCambiosDetalleTransferencia=false;
		this.isPermisoConsultaDetalleTransferencia=false;
		this.isPermisoBusquedaDetalleTransferencia=false;
		this.isPermisoReporteDetalleTransferencia=false;		
		this.isPermisoOrdenDetalleTransferencia=false;		
		this.isPermisoPaginacionMedioDetalleTransferencia=false;		
		this.isPermisoPaginacionAltoDetalleTransferencia=false;
		this.isPermisoPaginacionTodoDetalleTransferencia=false;
		this.isPermisoCopiarDetalleTransferencia=false;		
		this.isPermisoVerFormDetalleTransferencia=false;		
		this.isPermisoDuplicarDetalleTransferencia=false;		
		this.isPermisoOrdenDetalleTransferencia=false;		
	}
	
	public void setPermisosUsuarioDetalleTransferencia(Boolean isPermiso) {
		this.isPermisoTodoDetalleTransferencia=isPermiso;
		this.isPermisoNuevoDetalleTransferencia=isPermiso;
		this.isPermisoActualizarDetalleTransferencia=isPermiso;
		this.isPermisoActualizarOriginalDetalleTransferencia=isPermiso;
		this.isPermisoEliminarDetalleTransferencia=isPermiso;
		this.isPermisoGuardarCambiosDetalleTransferencia=isPermiso;
		this.isPermisoConsultaDetalleTransferencia=isPermiso;
		this.isPermisoBusquedaDetalleTransferencia=isPermiso;
		this.isPermisoReporteDetalleTransferencia=isPermiso;
		this.isPermisoOrdenDetalleTransferencia=isPermiso;		
		this.isPermisoPaginacionMedioDetalleTransferencia=isPermiso;		
		this.isPermisoPaginacionAltoDetalleTransferencia=isPermiso;		
		this.isPermisoPaginacionTodoDetalleTransferencia=isPermiso;		
		this.isPermisoCopiarDetalleTransferencia=isPermiso;		
		this.isPermisoVerFormDetalleTransferencia=isPermiso;		
		this.isPermisoDuplicarDetalleTransferencia=isPermiso;
		this.isPermisoOrdenDetalleTransferencia=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleTransferencia(Boolean isPermiso) {
		//this.isPermisoTodoDetalleTransferencia=isPermiso;
		this.isPermisoNuevoDetalleTransferencia=isPermiso;
		this.isPermisoActualizarDetalleTransferencia=isPermiso;
		this.isPermisoActualizarOriginalDetalleTransferencia=isPermiso;
		this.isPermisoEliminarDetalleTransferencia=isPermiso;
		this.isPermisoGuardarCambiosDetalleTransferencia=isPermiso;
		//this.isPermisoConsultaDetalleTransferencia=isPermiso;
		//this.isPermisoBusquedaDetalleTransferencia=isPermiso;
		//this.isPermisoReporteDetalleTransferencia=isPermiso;
		//this.isPermisoOrdenDetalleTransferencia=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleTransferencia=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleTransferencia=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleTransferencia=isPermiso;		
		//this.isPermisoCopiarDetalleTransferencia=isPermiso;		
		//this.isPermisoDuplicarDetalleTransferencia=isPermiso;
		//this.isPermisoOrdenDetalleTransferencia=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleTransferenciaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleTransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleTransferencia(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleTransferenciaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleTransferenciaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleTransferenciaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleTransferenciaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleTransferencia() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleTransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleTransferenciaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleTransferencia=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleTransferencia=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleTransferencia=this.isPermisoActualizarDetalleTransferencia;
			this.isPermisoEliminarDetalleTransferencia=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleTransferencia=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleTransferencia=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleTransferencia=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleTransferencia=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleTransferencia=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleTransferencia=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleTransferencia=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleTransferencia=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleTransferencia=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleTransferencia=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleTransferencia=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleTransferencia=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleTransferencia=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleTransferencia.setToolTipText(this.jTableDatosDetalleTransferencia.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleTransferencia(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleTransferencia(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleTransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleTransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleTransferencia() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleTransferenciaListas()throws Exception {
		try	{						
			
				this.transferenciasForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.bodegaenviarsForeignKey=new ArrayList();
				this.novedadproductosForeignKey=new ArrayList();
				this.estadodetalleinventariosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleTransferenciaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleTransferenciaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleTransferenciaListas(false);
			} else {
			
				this.cargarCombosForeignKeyTransferenciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaEnviarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoDetalleInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyTransferenciaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transferenciasForeignKey==null||this.transferenciasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransferenciaConstantesFunciones.getArrayColumnasGlobalesTransferencia(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransferenciaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransferenciaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransferenciasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaEnviarListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegaenviarsForeignKey==null||this.bodegaenviarsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegaEnviarsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NovedadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadodetalleinventariosForeignKey==null||this.estadodetalleinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoDetalleInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoDetalleInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoDetalleInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleTransferenciaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleTransferenciaParameterReturnGeneral detalletransferenciaReturnGeneral=new DetalleTransferenciaParameterReturnGeneral();
						
			


				String finalQueryGlobalTransferencia="";

				if(((this.transferenciasForeignKey==null||this.transferenciasForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_transferenciaDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_transferenciaDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransferencia()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransferenciaConstantesFunciones.getArrayColumnasGlobalesTransferencia(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransferencia=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransferenciaConstantesFunciones.TABLENAME);

						finalQueryGlobalTransferencia=Funciones.GetFinalQueryAppend(finalQueryGlobalTransferencia, "");
						finalQueryGlobalTransferencia+=TransferenciaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransferenciasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransferencia=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidTransferenciaActual();
					}
				} else {
					finalQueryGlobalTransferencia="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_empresaDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_empresaDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_sucursalDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_sucursalDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_ejercicioDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_ejercicioDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_periodoDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_periodoDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_anioDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_anioDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_mesDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_mesDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_bodegaDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_bodegaDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_productoDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_productoDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_unidadDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_unidadDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalBodegaEnviar="";

				if(((this.bodegaenviarsForeignKey==null||this.bodegaenviarsForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_bodega_enviarDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_bodega_enviarDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodegaEnviar=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodegaEnviar=Funciones.GetFinalQueryAppend(finalQueryGlobalBodegaEnviar, "");
						finalQueryGlobalBodegaEnviar+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegaEnviarsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodegaEnviar=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidBodegaEnviarActual();
					}
				} else {
					finalQueryGlobalBodegaEnviar="NONE";
				}


				String finalQueryGlobalNovedadProducto="";

				if(((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_novedad_productoDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_novedad_productoDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNovedadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalNovedadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalNovedadProducto, "");
						finalQueryGlobalNovedadProducto+=NovedadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNovedadProducto=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidNovedadProductoActual();
					}
				} else {
					finalQueryGlobalNovedadProducto="NONE";
				}


				String finalQueryGlobalEstadoDetalleInventario="";

				if(((this.estadodetalleinventariosForeignKey==null||this.estadodetalleinventariosForeignKey.size()<=0) && this.detalletransferenciaConstantesFunciones.cargarid_estado_detalle_inventarioDetalleTransferencia)
					 || (this.esRecargarFks && this.detalletransferenciaConstantesFunciones.cargarid_estado_detalle_inventarioDetalleTransferencia)) {

					if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoDetalleInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoDetalleInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoDetalleInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoDetalleInventario, "");
						finalQueryGlobalEstadoDetalleInventario+=EstadoDetalleInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoDetalleInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoDetalleInventario=" WHERE " + ConstantesSql.ID + "="+detalletransferenciaSessionBean.getlidEstadoDetalleInventarioActual();
					}
				} else {
					finalQueryGlobalEstadoDetalleInventario="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detalletransferenciaReturnGeneral=detalletransferenciaLogic.cargarCombosLoteForeignKeyDetalleTransferencia(finalQueryGlobalTransferencia,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalBodegaEnviar,finalQueryGlobalNovedadProducto,finalQueryGlobalEstadoDetalleInventario);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalTransferencia.equals("NONE")) {
				this.transferenciasForeignKey=detalletransferenciaReturnGeneral.gettransferenciasForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detalletransferenciaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detalletransferenciaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detalletransferenciaReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detalletransferenciaReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detalletransferenciaReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detalletransferenciaReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detalletransferenciaReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detalletransferenciaReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detalletransferenciaReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalBodegaEnviar.equals("NONE")) {
				this.bodegaenviarsForeignKey=detalletransferenciaReturnGeneral.getbodegaenviarsForeignKey();
			}

			if(!finalQueryGlobalNovedadProducto.equals("NONE")) {
				this.novedadproductosForeignKey=detalletransferenciaReturnGeneral.getnovedadproductosForeignKey();
			}

			if(!finalQueryGlobalEstadoDetalleInventario.equals("NONE")) {
				this.estadodetalleinventariosForeignKey=detalletransferenciaReturnGeneral.getestadodetalleinventariosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleTransferencia()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyTransferencia();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyBodegaEnviar();
			this.addItemDefectoCombosForeignKeyNovedadProducto();
			this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyTransferencia()throws Exception {
		try {
			if(this.detalletransferenciaSessionBean==null) {
				this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionTransferencia()) {
				Transferencia transferencia=new Transferencia();
				TransferenciaConstantesFunciones.setTransferenciaDescripcion(transferencia,Constantes.SMENSAJE_ESCOJA_OPCION);
				transferencia.setId(null);

				if(!TransferenciaConstantesFunciones.ExisteEnLista(this.transferenciasForeignKey,transferencia,true)) {

					this.transferenciasForeignKey.add(0,transferencia);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodegaEnviar()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionBodegaEnviar()) {
				Bodega bodegaenviar=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodegaenviar,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodegaenviar.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegaenviarsForeignKey,bodegaenviar,true)) {

					this.bodegaenviarsForeignKey.add(0,bodegaenviar);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNovedadProducto()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				NovedadProducto novedadproducto=new NovedadProducto();
				NovedadProductoConstantesFunciones.setNovedadProductoDescripcion(novedadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				novedadproducto.setId(null);

				if(!NovedadProductoConstantesFunciones.ExisteEnLista(this.novedadproductosForeignKey,novedadproducto,true)) {

					this.novedadproductosForeignKey.add(0,novedadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoDetalleInventario()throws Exception {
		try {

			if(!this.detalletransferenciaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {
				EstadoDetalleInventario estadodetalleinventario=new EstadoDetalleInventario();
				EstadoDetalleInventarioConstantesFunciones.setEstadoDetalleInventarioDescripcion(estadodetalleinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadodetalleinventario.setId(null);

				if(!EstadoDetalleInventarioConstantesFunciones.ExisteEnLista(this.estadodetalleinventariosForeignKey,estadodetalleinventario,true)) {

					this.estadodetalleinventariosForeignKey.add(0,estadodetalleinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleTransferencia()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
			this.initActionsCombosForeignKeyBodegaEnviar("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleTransferencia(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyBodegaEnviar(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detalletransferencia.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodegaEnviar(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega_enviar="+bodegaLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleTransferencia"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleTransferencia"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleTransferencia"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleTransferencia"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleTransferencia"));

						this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleTransferencia"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleTransferencia"));

						this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleTransferencia"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyBodegaEnviar(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"id_bodega_enviarDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_bodega_enviarDetalleTransferencia"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"id_bodega_enviarDetalleTransferencia"));
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"id_bodega_enviarDetalleTransferencia"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia"));

						this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia"));

					} else {
						this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia"));

						this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleTransferencia()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detalletransferencia.setfecha_elaboracion_lote(this.parametroGeneralUsuario.getfecha_sistema());
				this.detalletransferencia.setfecha_caducidad_lote(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleTransferencia();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleTransferencia(DetalleTransferencia detalletransferencia)throws Exception {	
		try {
			
			this.setActualTransferenciaForeignKey(detalletransferencia.getid_transferencia(),false,"Formulario");
			this.setActualBodegaForeignKey(detalletransferencia.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detalletransferencia.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detalletransferencia.getid_unidad(),false,"Formulario");
			this.setActualBodegaEnviarForeignKey(detalletransferencia.getid_bodega_enviar(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(detalletransferencia.getid_novedad_producto(),false,"Formulario");
			this.setActualEstadoDetalleInventarioForeignKey(detalletransferencia.getid_estado_detalle_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleTransferencia(DetalleTransferencia detalletransferencia,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detalletransferencia.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleTransferencia")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detalletransferencia.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleTransferencia()throws Exception {	
		try {
			
			this.setActualTransferenciaForeignKey(this.detalletransferenciaConstantesFunciones.getid_transferencia(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detalletransferenciaConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detalletransferenciaConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detalletransferenciaConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualBodegaEnviarForeignKey(this.detalletransferenciaConstantesFunciones.getid_bodega_enviar(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(this.detalletransferenciaConstantesFunciones.getid_novedad_producto(),false,"Formulario");
			this.setActualEstadoDetalleInventarioForeignKey(this.detalletransferenciaConstantesFunciones.getid_estado_detalle_inventario(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleTransferencia()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleTransferencia()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleTransferencia()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleTransferencia()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleTransferencia()throws Exception {
		try {
			

			this.cargarCombosFrameTransferenciasForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameBodegaEnviarsForeignKey("Todos");
			this.cargarCombosFrameNovedadProductosForeignKey("Todos");
			this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleTransferencia(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameTransferenciasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegaEnviarsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoDetalleInventariosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleTransferencia()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	















	public void recargarFormDetalleTransferenciaBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleTransferenciaid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleTransferenciaProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleTransferenciaid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}



	public void recargarFormDetalleTransferenciaBodegaEnviar(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

	}




	
	



	public void recargarFormDetalleTransferenciaid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detalletransferencia,jComboBoxGenericoProducto);
			}

			if(this.detalletransferencia.getid_bodega()!=null && this.detalletransferencia.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detalletransferencia.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detalletransferencia.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleTransferenciaid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detalletransferencia,jComboBoxGenericoUnidad);
			}

			if(this.detalletransferencia.getid_producto()!=null && this.detalletransferencia.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detalletransferencia.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detalletransferencia.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleTransferenciaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleTransferenciaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleTransferenciaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean(); 
		this.detalletransferenciaConstantesFunciones=new DetalleTransferenciaConstantesFunciones(); 
		this.detalletransferenciaBean=new DetalleTransferencia();//(this.detalletransferenciaConstantesFunciones); 		
		this.detalletransferenciaReturnGeneral=new DetalleTransferenciaParameterReturnGeneral(); 
		
		this.detalletransferenciaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detalletransferenciaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleTransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleTransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleTransferenciaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleTransferencia(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detalletransferenciaConstantesFunciones=new DetalleTransferenciaConstantesFunciones(); 
			this.detalletransferenciaBean=new DetalleTransferencia();//this.detalletransferenciaConstantesFunciones); 			
			this.detalletransferenciaReturnGeneral=new DetalleTransferenciaParameterReturnGeneral(); 
		
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Transferencia Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detalletransferencia=new DetalleTransferencia();
			this.detalletransferencias = new ArrayList<DetalleTransferencia>();
			this.detalletransferenciasAux = new ArrayList<DetalleTransferencia>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic=new DetalleTransferenciaLogic();
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			//this.detalletransferenciaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detalletransferenciaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleTransferencia);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleTransferencia);	
					}
					
					if(this.jInternalFrameImportacionDetalleTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleTransferencia);							
					}
					*/
				}
				
				if(this.jInternalFrameTotalesDetalleTransferencia!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleTransferencia);
				}
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByDetalleTransferencia!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleTransferencia);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleTransferencia);
				this.jInternalFrameDetalleFormDetalleTransferencia.setVisible(false);
				this.jInternalFrameDetalleFormDetalleTransferencia.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleTransferencia);
					this.jInternalFrameReporteDinamicoDetalleTransferencia.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleTransferencia.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleTransferencia);
					this.jInternalFrameImportacionDetalleTransferencia.setVisible(false);
					this.jInternalFrameImportacionDetalleTransferencia.setSelected(false);
				}
				
				*/
			}
			
			if(this.jInternalFrameTotalesDetalleTransferencia!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleTransferencia);
				this.jInternalFrameTotalesDetalleTransferencia.setVisible(false);
				this.jInternalFrameTotalesDetalleTransferencia.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByDetalleTransferencia!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleTransferencia);
					this.jInternalFrameOrderByDetalleTransferencia.setVisible(false);
					this.jInternalFrameOrderByDetalleTransferencia.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleTransferenciaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleTransferenciaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detalletransferenciaReturnGeneral=new DetalleTransferenciaParameterReturnGeneral();
			
			this.detalletransferenciaParameterGeneral=new DetalleTransferenciaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detalletransferenciaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleTransferenciaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleTransferenciaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),this.detalletransferenciaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleTransferenciaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),this.detalletransferenciaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaDuplicarDetalleTransferencia=true;
			this.isVisibilidadCeldaCopiarDetalleTransferencia=true;
			this.isVisibilidadCeldaVerFormDetalleTransferencia=true;
			this.isVisibilidadCeldaOrdenDetalleTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdBodegaEnviar=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoDetalleInventario=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdNovedadProducto=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTransferencia=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleTransferencia();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleTransferencia(false);
			
			this.setPermisosUsuarioDetalleTransferencia();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado() 
				|| (this.detalletransferenciaSessionBean.getEsGuardarRelacionado() && this.detalletransferenciaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleTransferenciaClasesRelacionadas();
			}
			
			if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleTransferenciaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleTransferencia();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleTransferencia();
			}
			
			if(!this.isPermisoBusquedaDetalleTransferencia) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleTransferencia,this.isPermisoPaginacionMedioDetalleTransferencia,this.isPermisoPaginacionTodoDetalleTransferencia);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleTransferenciaConstantesFunciones.getTiposSeleccionarDetalleTransferencia());
				
				this.tiposColumnasSelect=DetalleTransferenciaConstantesFunciones.getTiposSeleccionarDetalleTransferencia(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleTransferencia();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleTransferencia(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleTransferencia(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleTransferencia() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.transferenciaLogic=new TransferenciaLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.bodegaenviarLogic=new BodegaLogic();
			this.novedadproductoLogic=new NovedadProductoLogic();
			this.estadodetalleinventarioLogic=new EstadoDetalleInventarioLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detalletransferenciaImplementable= (DetalleTransferenciaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleTransferenciaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detalletransferenciaImplementableHome= (DetalleTransferenciaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleTransferenciaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detalletransferencias= new ArrayList<DetalleTransferencia>();
			this.detalletransferenciasEliminados= new ArrayList<DetalleTransferencia>();
						
			this.isEsNuevoDetalleTransferencia=false;
			this.esParaAccionDesdeFormularioDetalleTransferencia=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.transferenciasForeignKey=new ArrayList<Transferencia>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.bodegaenviarsForeignKey=new ArrayList<Bodega>() ;
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>() ;
			this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleTransferencia(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleTransferencia();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleTransferenciaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleTransferencia("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleTransferencia(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleTransferencia();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleTransferencia();
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleTransferencia.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleTransferencia(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleTransferencia: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleTransferencia() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleTransferencia")) {
				iIndex=this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleTransferencia();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleTransferencia(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleTransferencia(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleTransferencia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleTransferenciaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleTransferencia();
		
		this.cargarCombosFrameForeignKeyDetalleTransferencia();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleTransferencia();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleTransferencia();
		}
	}
	
	

	public void cargarCombosForeignKeyTransferencia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransferenciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransferencia();
				this.cargarCombosFrameTransferenciasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransferencia(this.transferenciasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaEnviar(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaEnviarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodegaEnviar();
				this.cargarCombosFrameBodegaEnviarsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodegaEnviar("Todos");
				}

			this.recargarComboTablaBodegaEnviar(this.bodegaenviarsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodegaEnviar("Todos");
				}

			this.recargarComboTablaNovedadProducto(this.novedadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoDetalleInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
				this.cargarCombosFrameEstadoDetalleInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodegaEnviar("Todos");
				}

			this.recargarComboTablaEstadoDetalleInventario(this.estadodetalleinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleTransferenciaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			
			if(jTableDatosDetalleTransferencia.getRowCount()>=1) {
				jTableDatosDetalleTransferencia.removeRowSelectionInterval(0, jTableDatosDetalleTransferencia.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleTransferencia=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleTransferencia(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleTransferencia(true);			
			//this.detalletransferencia=new DetalleTransferencia();
			//this.detalletransferencia.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleTransferencia(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleTransferencia() ;
			
			if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleTransferencia(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detalletransferencia);	
			this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);				
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleTransferencia: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleTransferenciaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleTransferencia.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleTransferencia.getSelectedRows().length;			
			}
			
			detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleTransferencia--;			
				//DetalleTransferencia detalletransferenciaAux= new DetalleTransferencia();			
				//detalletransferenciaAux.setId(this.iIdNuevoDetalleTransferencia);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleTransferencia detalletransferenciaOrigen=new DetalleTransferencia();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleTransferencia detalletransferenciaOrigen : detalletransferenciasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detalletransferenciaOrigen =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detalletransferenciaOrigen =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleTransferencia();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detalletransferencia.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleTransferencia(detalletransferenciaOrigen,this.detalletransferencia,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalletransferenciaLogic.getDetalleTransferencias().add(this.detalletransferenciaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalletransferencias.add(this.detalletransferenciaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
				
				this.jTableDatosDetalleTransferencia.setRowSelectionInterval(this.getIndiceNuevoDetalleTransferencia(), this.getIndiceNuevoDetalleTransferencia());
				
				int iLastRow =  this.jTableDatosDetalleTransferencia.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleTransferencia.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleTransferencia.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleTransferencia(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();									
		
			DetalleTransferencia detalletransferenciaOrigen=new DetalleTransferencia();
			DetalleTransferencia detalletransferenciaDestino=new DetalleTransferencia();
				
			detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleTransferencia.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detalletransferenciasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleTransferencia.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaOrigen =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalletransferenciaOrigen =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detalletransferenciaDestino =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detalletransferenciaDestino =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detalletransferenciaOrigen =detalletransferenciasSeleccionados.get(0);
				detalletransferenciaDestino =detalletransferenciasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleTransferencia(detalletransferenciaOrigen,detalletransferenciaDestino,true,false);
				
				detalletransferenciaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detalletransferenciaDestino,detalletransferenciaLogic.getDetalleTransferencias());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detalletransferenciaDestino,detalletransferencias);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
				
				//this.jTableDatosDetalleTransferencia.setRowSelectionInterval(this.getIndiceNuevoDetalleTransferencia(), this.getIndiceNuevoDetalleTransferencia());
				
				int iLastRow =  this.jTableDatosDetalleTransferencia.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleTransferencia.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleTransferencia.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleTransferencia(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleTransferencia.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleTransferencia.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesDetalleTransferencia.setVisible(!isVisible);
			this.jPanelPaginacionDetalleTransferencia.setVisible(!isVisible);
			this.jPanelAccionesDetalleTransferencia.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleTransferencia();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoDetalleTransferencia();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionDetalleTransferencia();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetalleTransferencia();
			
			this.abrirFrameTotalesDetalleTransferencia();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetalleTransferencia();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByDetalleTransferencia();
			
			this.abrirFrameOrderByDetalleTransferencia();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByDetalleTransferencia();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleTransferencia(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleTransferencia);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleTransferencia.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleTransferencia.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleTransferencia.setSize(this.jInternalFrameDetalleFormDetalleTransferencia.iWidthFormulario,this.jInternalFrameDetalleFormDetalleTransferencia.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleTransferencia.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleTransferencia.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleTransferencia.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleTransferencia.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleTransferencia.jContentPaneDetalleDetalleTransferencia.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleTransferencia.jContentPaneDetalleDetalleTransferencia.getWidth(),DetalleTransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleTransferencia.jContentPaneDetalleDetalleTransferencia.getWidth(),DetalleTransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleTransferencia.jContentPaneDetalleDetalleTransferencia.getWidth(),DetalleTransferenciaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleTransferencia.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleTransferencia.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByDetalleTransferencia() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleTransferencia==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleTransferencia=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleTransferencia,false,this);
				} else {
					this.jInternalFrameOrderByDetalleTransferencia=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleTransferencia,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleTransferencia);
				this.jInternalFrameOrderByDetalleTransferencia.setVisible(false);
				this.jInternalFrameOrderByDetalleTransferencia.setSelected(false);
				
				this.jInternalFrameOrderByDetalleTransferencia.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleTransferencia"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleTransferencia();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionDetalleTransferencia() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleTransferencia==null) {
				
				this.jInternalFrameImportacionDetalleTransferencia=new ImportacionJInternalFrame(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleTransferencia);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleTransferencia);
				this.jInternalFrameImportacionDetalleTransferencia.setVisible(false);
				this.jInternalFrameImportacionDetalleTransferencia.setSelected(false);


				this.jInternalFrameImportacionDetalleTransferencia.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleTransferencia"));
				this.jInternalFrameImportacionDetalleTransferencia.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleTransferencia"));
				this.jInternalFrameImportacionDetalleTransferencia.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleTransferencia"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoDetalleTransferencia() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleTransferencia==null) {
				this.jInternalFrameReporteDinamicoDetalleTransferencia=new ReporteDinamicoJInternalFrame(DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleTransferencia);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleTransferencia);
				this.jInternalFrameReporteDinamicoDetalleTransferencia.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleTransferencia.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleTransferencia"));
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleTransferencia"));
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleTransferencia"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleTransferencia();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	public void abrirInicializarFrameTotalesDetalleTransferencia() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetalleTransferencia==null) {
				this.jInternalFrameTotalesDetalleTransferencia=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetalleTransferencia,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleTransferencia);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleTransferencia);
				this.jInternalFrameTotalesDetalleTransferencia.setVisible(false);
				this.jInternalFrameTotalesDetalleTransferencia.setSelected(false);


				this.jInternalFrameTotalesDetalleTransferencia.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleTransferencia"));
								
				this.inicializarActualizarBindingTablaTotalesDetalleTransferencia();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		
					
	public void cerrarFrameDetalleDetalleTransferencia() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleTransferencia);
			
	       	this.jInternalFrameDetalleFormDetalleTransferencia.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleTransferencia.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleTransferencia.dispose();
			//this.jInternalFrameDetalleFormDetalleTransferencia=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoDetalleTransferencia() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleTransferencia.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionDetalleTransferencia() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleTransferencia.setVisible(true);
	        this.jInternalFrameImportacionDetalleTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	public void abrirFrameTotalesDetalleTransferencia() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleTransferencia.setVisible(true);
	        this.jInternalFrameTotalesDetalleTransferencia.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetalleTransferencia() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleTransferencia.setVisible(false);
	        this.jInternalFrameTotalesDetalleTransferencia.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	/*
	public void abrirFrameOrderByDetalleTransferencia() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleTransferencia.setVisible(true);
	        this.jInternalFrameOrderByDetalleTransferencia.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByDetalleTransferencia() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleTransferencia.setVisible(false);
	        this.jInternalFrameOrderByDetalleTransferencia.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoDetalleTransferencia() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleTransferencia.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleTransferencia.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionDetalleTransferencia() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleTransferencia.setVisible(false);
	        this.jInternalFrameImportacionDetalleTransferencia.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	
	
	public void jButtonModificarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleTransferencia(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleTransferencia(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleTransferencia(true);
			//this.isEsNuevoDetalleTransferencia=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleTransferencia(false) ;
			
			if(detalletransferenciaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleTransferencia(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleTransferencia(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleTransferenciaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleTransferencia(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleTransferencia(true);
			//this.isEsNuevoDetalleTransferencia=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detalletransferencia.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleTransferencia("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleTransferencia(false) ;
			
			if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleTransferencia(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleTransferencia(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detalletransferenciaConstantesFunciones.cargarid_productoDetalleTransferencia) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleTransferencia(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaTransferencia(List<Transferencia> transferenciasForeignKey)throws Exception{
		TableColumn tableColumnTransferencia=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA));
		TableCellEditor tableCellEditorTransferencia =tableColumnTransferencia.getCellEditor();

		TransferenciaTableCell transferenciaTableCellFk=(TransferenciaTableCell)tableCellEditorTransferencia;

		if(transferenciaTableCellFk!=null) {
			transferenciaTableCellFk.settransferenciasForeignKey(transferenciasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transferenciaTableCellFk.setRowActual(intSelectedRow);
			//transferenciaTableCellFk.settransferenciasForeignKeyActual(transferenciasForeignKey);
		//}


		if(transferenciaTableCellFk!=null) {
			transferenciaTableCellFk.RecargarTransferenciasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodegaEnviar(List<Bodega> bodegaenviarsForeignKey)throws Exception{
		TableColumn tableColumnBodegaEnviar=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR));
		TableCellEditor tableCellEditorBodegaEnviar =tableColumnBodegaEnviar.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodegaEnviar;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegaenviarsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegaenviarsForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaNovedadProducto(List<NovedadProducto> novedadproductosForeignKey)throws Exception{
		TableColumn tableColumnNovedadProducto=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));
		TableCellEditor tableCellEditorNovedadProducto =tableColumnNovedadProducto.getCellEditor();

		NovedadProductoTableCell novedadproductoTableCellFk=(NovedadProductoTableCell)tableCellEditorNovedadProducto;

		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.setnovedadproductosForeignKey(novedadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//novedadproductoTableCellFk.setRowActual(intSelectedRow);
			//novedadproductoTableCellFk.setnovedadproductosForeignKeyActual(novedadproductosForeignKey);
		//}


		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.RecargarNovedadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoDetalleInventario(List<EstadoDetalleInventario> estadodetalleinventariosForeignKey)throws Exception{
		TableColumn tableColumnEstadoDetalleInventario=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO));
		TableCellEditor tableCellEditorEstadoDetalleInventario =tableColumnEstadoDetalleInventario.getCellEditor();

		EstadoDetalleInventarioTableCell estadodetalleinventarioTableCellFk=(EstadoDetalleInventarioTableCell)tableCellEditorEstadoDetalleInventario;

		if(estadodetalleinventarioTableCellFk!=null) {
			estadodetalleinventarioTableCellFk.setestadodetalleinventariosForeignKey(estadodetalleinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadodetalleinventarioTableCellFk.setRowActual(intSelectedRow);
			//estadodetalleinventarioTableCellFk.setestadodetalleinventariosForeignKeyActual(estadodetalleinventariosForeignKey);
		//}


		if(estadodetalleinventarioTableCellFk!=null) {
			estadodetalleinventarioTableCellFk.RecargarEstadoDetalleInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleTransferencia(false);
			
			//if(!this.isEsNuevoDetalleTransferencia) {								
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				
			}
			
			if(this.permiteMantenimiento(this.detalletransferencia)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleTransferencia=true;
					this.inicializarActualizarBindingTablaDetalleTransferencia(false);
					this.isEsNuevoDetalleTransferencia=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleTransferencia=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleTransferencia=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleTransferencia(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleTransferencia(false);
				
				this.habilitarDeshabilitarControlesDetalleTransferencia(false);
			
												
				
				if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleTransferencia();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleTransferenciaActionPerformed(evt,detalletransferenciaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleTransferencia(this.detalletransferencia,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detalletransferenciaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detalletransferencia.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				this.detalletransferencia.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				this.detalletransferencia.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detalletransferencia)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleTransferenciaModel) this.jTableDatosDetalleTransferencia.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleTransferencia=true;
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
				this.isEsNuevoDetalleTransferencia=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleTransferencia(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleTransferencia(false);
				
				this.habilitarDeshabilitarControlesDetalleTransferencia(false);
				
				
				
				if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleTransferencia();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleTransferencia.getRowCount()>=1) {
				jTableDatosDetalleTransferencia.removeRowSelectionInterval(0, jTableDatosDetalleTransferencia.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleTransferencia(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleTransferencia(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleTransferencia(false) ;
			
			this.isEsNuevoDetalleTransferencia=false;
			
			if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleTransferencia();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleTransferencia(false);
				
				//SI ES MANUAL
				if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleTransferencia();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleTransferencia--;			
			//DetalleTransferencia detalletransferenciaAux= new DetalleTransferencia();			
			//detalletransferenciaAux.setId(this.iIdNuevoDetalleTransferencia);
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleTransferencia();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
			
			this.detalletransferencia.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detalletransferenciaLogic.getDetalleTransferencias().add(this.detalletransferenciaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detalletransferencias.add(this.detalletransferenciaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			
			this.jTableDatosDetalleTransferencia.setRowSelectionInterval(this.getIndiceNuevoDetalleTransferencia(), this.getIndiceNuevoDetalleTransferencia());
			
			int iLastRow =  this.jTableDatosDetalleTransferencia.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleTransferencia.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleTransferencia.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleTransferencia(false);
			
			//SI ES MANUAL
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleTransferencia();
			}
			
			//this.abrirFrameTreeDetalleTransferencia();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle TransferenciaS ?", "MANTENIMIENTO DE Detalle Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleTransferencia.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleTransferencia();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detalletransferenciaReturnGeneral=detalletransferenciaLogic.procesarImportacionDetalleTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detalletransferenciaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleTransferenciaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleTransferencia.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleTransferencia.setFileImportacion(this.jInternalFrameImportacionDetalleTransferencia.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleTransferencia.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleTransferencia.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleTransferencia.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleTransferencia.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		

		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleTransferenciaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleTransferenciaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transferencia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transferencia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transferencia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transferencia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_BodegaEnviar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_BodegaEnviar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_BodegaEnviar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_BodegaEnviar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NovedadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NovedadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NovedadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NovedadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoDetalleInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoDetalleInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoDetalleInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoDetalleInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoUnitario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoUnitario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoUnitario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoUnitario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_te_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_te_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_te_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_te_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaElaboracionLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaElaboracionLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaElaboracionLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaElaboracionLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducidadLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducidadLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducidadLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducidadLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_teCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_teCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_teCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_teCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA:
					sNombreCampoCategoria="id_transferencia";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR:
					sNombreCampoCategoria="id_bodega_enviar";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoria="id_novedad_producto";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					sNombreCampoCategoria="id_estado_detalle_inventario";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoria="costo_unitario";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoria="costo_total";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoria="disponible";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoria="lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoria="fecha_elaboracion_lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoria="fecha_caducidad_lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoria="lote_cliente";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA:
					sNombreCampoCategoriaValor="id_transferencia";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR:
					sNombreCampoCategoriaValor="id_bodega_enviar";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoriaValor="id_novedad_producto";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					sNombreCampoCategoriaValor="id_estado_detalle_inventario";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoriaValor="costo_unitario";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoriaValor="costo_total";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoriaValor="disponible";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoriaValor="lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoriaValor="fecha_elaboracion_lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoriaValor="fecha_caducidad_lote";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoriaValor="lote_cliente";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transferencia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transferencia");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega Enviar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega_enviar");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Novedad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_novedad_producto");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_detalle_inventario");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Unitario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_unitario");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_total");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"disponible");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Elaboracion Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_elaboracion_lote");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Caducidad Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caducidad_lote");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote_cliente");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleTransferencias");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.gettransferencia_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getbodegaenviar_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getnovedadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getestadodetalleinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getcosto_unitario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getcosto_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getdisponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getlote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getfecha_elaboracion_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getfecha_caducidad_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE);
					iRow++;

					for(DetalleTransferencia detalletransferencia:detalletransferenciasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detalletransferencia.getlote_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleTransferencia(row);				
			//	iRow++;
			//}				
			
			//for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleTransferencia(detalletransferenciaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleTransferencia(false);
			
			//SI ES MANUAL
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleTransferencia();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleTransferencia(false);
			
			//SI ES MANUAL
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleTransferencia();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleTransferenciaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleTransferencia(false);
			
			//SI ES MANUAL
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleTransferencia();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleTransferencia() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleTransferencia.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleTransferencia.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleTransferencia.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleTransferencia.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleTransferencia.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleTransferencia.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleTransferencia.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleTransferencia(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleTransferencia(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleTransferencia(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleTransferencia(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleTransferencia(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleTransferencia(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleTransferencia(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleTransferencia(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleTransferencia() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleTransferencia();
		
		this.inicializarActualizarBindingBotonesManualDetalleTransferencia(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleTransferencia();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleTransferencia() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleTransferencia(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleTransferencia(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleTransferencia.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleTransferencia.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleTransferencia.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionNuevoDetalleTransferencia.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionSinCerrarDetalleTransferencia.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionSinMensajeDetalleTransferencia.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleTransferencia.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleTransferencia.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteDetalleTransferencia.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionNuevoDetalleTransferencia.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionSinCerrarDetalleTransferencia.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleTransferencia.jCheckBoxPostAccionSinMensajeDetalleTransferencia.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionDetalleTransferencia.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleTransferencia.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleTransferencia.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleTransferencia.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleTransferencia.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleTransferencia.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleTransferencia.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleTransferencia.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleTransferencia.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleTransferencia(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleTransferencia(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleTransferencia() throws Exception {
		try	{
			if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleTransferencia();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleTransferencia() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleTransferencia() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleTransferencia.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleTransferencia.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleTransferencia.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleTransferencia.addItem(reporte);
			}
			
			
			if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleTransferencia.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleTransferencia.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleTransferencia.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleTransferencia.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleTransferencia.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleTransferencia.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleTransferencia.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleTransferencia();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleTransferencia() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleTransferenciaConstantesFunciones.getTiposSeleccionarDetalleTransferencia(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleTransferenciaConstantesFunciones.getTiposSeleccionarDetalleTransferencia(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleTransferenciaConstantesFunciones.getTiposSeleccionarDetalleTransferencia(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleTransferencia.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualDetalleTransferencia()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.getSelectedItem()!=null){this.id_bodega_enviarFK_IdBodegaEnviar=((Bodega)this.jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.getSelectedItem()!=null){this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario=((EstadoDetalleInventario)this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.getSelectedItem()!=null){this.id_novedad_productoFK_IdNovedadProducto=((NovedadProducto)this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.getSelectedItem()!=null){this.id_transferenciaFK_IdTransferencia=((Transferencia)this.jComboBoxid_transferenciaFK_IdTransferenciaDetalleTransferencia.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleTransferencia.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleTransferencia(Boolean esInicializar) throws Exception {				
		if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleTransferencia();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleTransferencia() throws Exception {
		this.inicializarActualizarBindingTablaDetalleTransferencia(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByDetalleTransferencia() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleTransferenciaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferenciaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	public void inicializarActualizarBindingTablaTotalesDetalleTransferencia() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetalleTransferencia(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detalletransferenciaLogic.getDetalleTransferencias().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detalletransferencias.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleTransferencia.setModel(new DetalleTransferenciaModel(this.detalletransferenciaLogic.getDetalleTransferencias(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleTransferencia.setModel(new DetalleTransferenciaModel(this.detalletransferencias,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetalleTransferencia!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleTransferencia.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
			}
							
			/*
			
			if(this.jInternalFrameOrderByDetalleTransferencia!=null && this.jInternalFrameOrderByDetalleTransferencia.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleTransferencia();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO,detalletransferenciaConstantesFunciones.resaltarSeleccionarDetalleTransferencia,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleTransferenciaConstantesFunciones.SCLASSWEBTITULO,detalletransferenciaConstantesFunciones.resaltarSeleccionarDetalleTransferencia,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_ID));

		if(this.detalletransferenciaConstantesFunciones.mostraridDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalletransferenciaConstantesFunciones.resaltaridDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activaridDetalleTransferencia,iSizeTabla,this,true,"idDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltaridDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activaridDetalleTransferencia,this,true,"idDetalleTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_transferenciaDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransferenciaTableCell(this.transferenciasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_transferenciaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_transferenciaDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new TransferenciaTableCell(this.transferenciasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_transferenciaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_transferenciaDetalleTransferencia,true,"id_transferenciaDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_empresaDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_empresaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_empresaDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_empresaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_empresaDetalleTransferencia,false,"id_empresaDetalleTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_sucursalDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_sucursalDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_sucursalDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_sucursalDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_sucursalDetalleTransferencia,false,"id_sucursalDetalleTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_ejercicioDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_ejercicioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_ejercicioDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_ejercicioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_ejercicioDetalleTransferencia,false,"id_ejercicioDetalleTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_periodoDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_periodoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_periodoDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_periodoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_periodoDetalleTransferencia,false,"id_periodoDetalleTransferencia","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDANIO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_anioDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_anioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_anioDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_anioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_anioDetalleTransferencia,true,"id_anioDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDMES));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_mesDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_mesDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_mesDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_mesDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_mesDetalleTransferencia,true,"id_mesDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_bodegaDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_bodegaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_bodegaDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_bodegaDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_bodegaDetalleTransferencia,true,"id_bodegaDetalleTransferencia","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_productoDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_productoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_productoDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_productoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_productoDetalleTransferencia,true,"id_productoDetalleTransferencia","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_unidadDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_unidadDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_unidadDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_unidadDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_unidadDetalleTransferencia,true,"id_unidadDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_bodega_enviarDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegaenviarsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_bodega_enviarDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_bodega_enviarDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegaenviarsForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_bodega_enviarDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_bodega_enviarDetalleTransferencia,true,"id_bodega_enviarDetalleTransferencia","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detalletransferenciaConstantesFunciones.mostrardescripcionDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalletransferenciaConstantesFunciones.resaltardescripcionDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activardescripcionDetalleTransferencia,iSizeTabla,this,true,"descripcionDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltardescripcionDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activardescripcionDetalleTransferencia,this,true,"descripcionDetalleTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_novedad_productoDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_novedad_productoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_novedad_productoDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_novedad_productoDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_novedad_productoDetalleTransferencia,true,"id_novedad_productoDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO));

		if(this.detalletransferenciaConstantesFunciones.mostrarid_estado_detalle_inventarioDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoDetalleInventarioTableCell(this.estadodetalleinventariosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_estado_detalle_inventarioDetalleTransferencia,iSizeTabla));
			tableColumn.setCellEditor(new EstadoDetalleInventarioTableCell(this.estadodetalleinventariosForeignKey,this.detalletransferenciaConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleTransferencia,this,this.detalletransferenciaConstantesFunciones.activarid_estado_detalle_inventarioDetalleTransferencia,true,"id_estado_detalle_inventarioDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD));

		if(this.detalletransferenciaConstantesFunciones.mostrarcantidadDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalletransferenciaConstantesFunciones.resaltarcantidadDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcantidadDetalleTransferencia,iSizeTabla,this,true,"cantidadDetalleTransferencia","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarcantidadDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcantidadDetalleTransferencia,this,true,"cantidadDetalleTransferencia","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO));

		if(this.detalletransferenciaConstantesFunciones.mostrarcosto_unitarioDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalletransferenciaConstantesFunciones.resaltarcosto_unitarioDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcosto_unitarioDetalleTransferencia,iSizeTabla,this,true,"costo_unitarioDetalleTransferencia","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarcosto_unitarioDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcosto_unitarioDetalleTransferencia,this,true,"costo_unitarioDetalleTransferencia","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL));

		if(this.detalletransferenciaConstantesFunciones.mostrarcosto_totalDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalletransferenciaConstantesFunciones.resaltarcosto_totalDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcosto_totalDetalleTransferencia,iSizeTabla,this,true,"costo_totalDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarcosto_totalDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarcosto_totalDetalleTransferencia,this,true,"costo_totalDetalleTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE));

		if(this.detalletransferenciaConstantesFunciones.mostrardisponibleDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detalletransferenciaConstantesFunciones.resaltardisponibleDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activardisponibleDetalleTransferencia,iSizeTabla,this,true,"disponibleDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltardisponibleDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activardisponibleDetalleTransferencia,this,true,"disponibleDetalleTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_LOTE));

		if(this.detalletransferenciaConstantesFunciones.mostrarloteDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_LOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detalletransferenciaConstantesFunciones.resaltarloteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarloteDetalleTransferencia,iSizeTabla,this,true,"loteDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarloteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarloteDetalleTransferencia,this,true,"loteDetalleTransferencia","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE));

		if(this.detalletransferenciaConstantesFunciones.mostrarfecha_elaboracion_loteDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalletransferenciaConstantesFunciones.resaltarfecha_elaboracion_loteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarfecha_elaboracion_loteDetalleTransferencia,iSizeTabla,this,true,"fecha_elaboracion_loteDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarfecha_elaboracion_loteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarfecha_elaboracion_loteDetalleTransferencia,this,true,"fecha_elaboracion_loteDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE));

		if(this.detalletransferenciaConstantesFunciones.mostrarfecha_caducidad_loteDetalleTransferencia && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detalletransferenciaConstantesFunciones.resaltarfecha_caducidad_loteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarfecha_caducidad_loteDetalleTransferencia,iSizeTabla,this,true,"fecha_caducidad_loteDetalleTransferencia","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detalletransferenciaConstantesFunciones.resaltarfecha_caducidad_loteDetalleTransferencia,this.detalletransferenciaConstantesFunciones.activarfecha_caducidad_loteDetalleTransferencia,this,true,"fecha_caducidad_loteDetalleTransferencia","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleTransferenciaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleTransferencia.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleTransferencia.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleTransferencia.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleTransferencia.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleTransferencia.moveColumn(this.jTableDatosDetalleTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleTransferencia.moveColumn(this.jTableDatosDetalleTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleTransferencia.moveColumn(this.jTableDatosDetalleTransferencia.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleTransferencia.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleTransferencia.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleTransferencia,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleTransferencia.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleTransferencia.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleTransferencia.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleTransferencia.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detalletransferenciaLogic.getDetalleTransferencias().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detalletransferencias.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleTransferencia.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleTransferencia.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleTransferencia();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleTransferencia=false;
					
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleTransferencia==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleTransferencia.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detalletransferencia.getsType().equals("DUPLICADO")
				   || this.detalletransferencia.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleTransferencia=true;
				
				} else {
					this.isEsNuevoDetalleTransferencia=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					if(this.detalletransferencia.getId()>=0 && !this.detalletransferencia.getIsNew()) {						
						this.isEsNuevoDetalleTransferencia=false;
						
					} else {
						this.isEsNuevoDetalleTransferencia=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleTransferencia(esRelaciones);						
				
				this.seleccionarDetalleTransferencia(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detalletransferencia.getId()<0) {
					this.isEsNuevoDetalleTransferencia=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleTransferencia(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleTransferencia(evt,rowIndex);
				}	
				
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleTransferencia: " + this.dDif); 
					}
				}								
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleTransferencia(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detalletransferencia)) {
					if(this.detalletransferencia.getId()>0) {
						this.detalletransferencia.setIsDeleted(true);
						
						this.detalletransferenciasEliminados.add(this.detalletransferencia);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detalletransferenciaLogic.getDetalleTransferencias().remove(this.detalletransferencia);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detalletransferencias.remove(this.detalletransferencia);				
					}
					
					
					((DetalleTransferenciaModel) this.jTableDatosDetalleTransferencia.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleTransferencia(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleTransferencia(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleTransferencia) {
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleTransferencia.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleTransferencia.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleTransferencia(this.detalletransferencia);
				}
				
				//ARCHITECTURE
				try {
					

					//Transferencia
					if(!this.detalletransferenciaConstantesFunciones.cargarid_transferenciaDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_transferenciaDetalleTransferencia) {
						//this.cargarCombosTransferenciasForeignKeyLista(" where id="+this.detalletransferencia.getid_transferencia());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.transferenciasForeignKey=new ArrayList<Transferencia>();

						if(detalletransferencia.getTransferencia()!=null) {
							this.transferenciasForeignKey.add(detalletransferencia.getTransferencia());
						}

						this.addItemDefectoCombosForeignKeyTransferencia();
						this.cargarCombosFrameTransferenciasForeignKey("Todos");
					}
					this.setActualTransferenciaForeignKey(this.detalletransferencia.getid_transferencia(),false,"Formulario");

					//Empresa
					if(!this.detalletransferenciaConstantesFunciones.cargarid_empresaDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_empresaDetalleTransferencia) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detalletransferencia.getid_empresa());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detalletransferencia.getEmpresa()!=null) {
							this.empresasForeignKey.add(detalletransferencia.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detalletransferencia.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detalletransferenciaConstantesFunciones.cargarid_sucursalDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_sucursalDetalleTransferencia) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detalletransferencia.getid_sucursal());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detalletransferencia.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detalletransferencia.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detalletransferencia.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detalletransferenciaConstantesFunciones.cargarid_ejercicioDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_ejercicioDetalleTransferencia) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detalletransferencia.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detalletransferencia.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detalletransferencia.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detalletransferencia.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detalletransferenciaConstantesFunciones.cargarid_periodoDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_periodoDetalleTransferencia) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detalletransferencia.getid_periodo());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detalletransferencia.getPeriodo()!=null) {
							this.periodosForeignKey.add(detalletransferencia.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detalletransferencia.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detalletransferenciaConstantesFunciones.cargarid_anioDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_anioDetalleTransferencia) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detalletransferencia.getid_anio());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detalletransferencia.getAnio()!=null) {
							this.aniosForeignKey.add(detalletransferencia.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detalletransferencia.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detalletransferenciaConstantesFunciones.cargarid_mesDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_mesDetalleTransferencia) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detalletransferencia.getid_mes());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detalletransferencia.getMes()!=null) {
							this.messForeignKey.add(detalletransferencia.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detalletransferencia.getid_mes(),false,"Formulario");

					//Bodega
					if(!this.detalletransferenciaConstantesFunciones.cargarid_bodegaDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_bodegaDetalleTransferencia) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detalletransferencia.getid_bodega());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detalletransferencia.getBodega()!=null) {
							this.bodegasForeignKey.add(detalletransferencia.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detalletransferencia.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detalletransferenciaConstantesFunciones.cargarid_productoDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_productoDetalleTransferencia) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detalletransferencia.getid_producto());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detalletransferencia.getProducto()!=null) {
							this.productosForeignKey.add(detalletransferencia.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detalletransferencia.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detalletransferenciaConstantesFunciones.cargarid_unidadDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_unidadDetalleTransferencia) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detalletransferencia.getid_unidad());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detalletransferencia.getUnidad()!=null) {
							this.unidadsForeignKey.add(detalletransferencia.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detalletransferencia.getid_unidad(),false,"Formulario");

					//BodegaEnviar
					if(!this.detalletransferenciaConstantesFunciones.cargarid_bodega_enviarDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_bodega_enviarDetalleTransferencia) {
						//this.cargarCombosBodegaEnviarsForeignKeyLista(" where id="+this.detalletransferencia.getid_bodega_enviar());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.bodegaenviarsForeignKey=new ArrayList<Bodega>();

						if(detalletransferencia.getBodegaEnviar()!=null) {
							this.bodegaenviarsForeignKey.add(detalletransferencia.getBodegaEnviar());
						}

						this.addItemDefectoCombosForeignKeyBodegaEnviar();
						this.cargarCombosFrameBodegaEnviarsForeignKey("Todos");
					}
					this.setActualBodegaEnviarForeignKey(this.detalletransferencia.getid_bodega_enviar(),false,"Formulario");

					//NovedadProducto
					if(!this.detalletransferenciaConstantesFunciones.cargarid_novedad_productoDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_novedad_productoDetalleTransferencia) {
						//this.cargarCombosNovedadProductosForeignKeyLista(" where id="+this.detalletransferencia.getid_novedad_producto());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

						if(detalletransferencia.getNovedadProducto()!=null) {
							this.novedadproductosForeignKey.add(detalletransferencia.getNovedadProducto());
						}

						this.addItemDefectoCombosForeignKeyNovedadProducto();
						this.cargarCombosFrameNovedadProductosForeignKey("Todos");
					}
					this.setActualNovedadProductoForeignKey(this.detalletransferencia.getid_novedad_producto(),false,"Formulario");

					//EstadoDetalleInventario
					if(!this.detalletransferenciaConstantesFunciones.cargarid_estado_detalle_inventarioDetalleTransferencia || this.detalletransferenciaConstantesFunciones.event_dependid_estado_detalle_inventarioDetalleTransferencia) {
						//this.cargarCombosEstadoDetalleInventariosForeignKeyLista(" where id="+this.detalletransferencia.getid_estado_detalle_inventario());
									//this.inicializarActualizarBindingDetalleTransferencia(false,false);
						this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>();

						if(detalletransferencia.getEstadoDetalleInventario()!=null) {
							this.estadodetalleinventariosForeignKey.add(detalletransferencia.getEstadoDetalleInventario());
						}

						this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
						this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Todos");
					}
					this.setActualEstadoDetalleInventarioForeignKey(this.detalletransferencia.getid_estado_detalle_inventario(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleTransferencia("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleTransferencia(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleTransferencia() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleTransferencia(DetalleTransferencia detalletransferencia) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleTransferencia(detalletransferencia,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleTransferencia(DetalleTransferencia detalletransferencia,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleTransferencia(detalletransferencia);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleTransferencia(detalletransferencia,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleTransferencia(detalletransferencia);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleTransferencia(DetalleTransferencia detalletransferencia) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setText(detalletransferencia.getId().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setText(detalletransferencia.getdescripcion());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setText(detalletransferencia.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setText(detalletransferencia.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setText(detalletransferencia.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setText(detalletransferencia.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setText(detalletransferencia.getlote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setDate(detalletransferencia.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setDate(detalletransferencia.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleTransferencia detalletransferenciaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detalletransferenciaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleTransferencia detalletransferenciaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detalletransferenciaLocal=this.detalletransferencia;
			} else {
				detalletransferenciaLocal=this.detalletransferenciaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detalletransferenciaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleTransferencia(detalletransferenciaLocal,true);
					
					if(detalletransferenciaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detalletransferenciaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detalletransferenciaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleTransferencia(DetalleTransferencia detalletransferencia,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleTransferencia(detalletransferencia,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(detalletransferencia);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleTransferencia(DetalleTransferencia detalletransferencia,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleTransferencia(detalletransferencia,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleTransferencia(DetalleTransferencia detalletransferencia,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.getText()==null || this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.getText()=="" || this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setText("0");
			}

			if(conColumnasBase) {detalletransferencia.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelIdDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setdescripcion(this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldescripcionDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcantidadDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setcosto_unitario(Double.parseDouble(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_unitarioDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setcosto_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelcosto_totalDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setdisponible(Integer.parseInt(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabeldisponibleDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setlote(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_LOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelloteDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setfecha_elaboracion_lote(this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_elaboracion_loteDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detalletransferencia.setfecha_caducidad_lote(this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleTransferencia.jLabelfecha_caducidad_loteDetalleTransferencia,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleTransferencia(DetalleTransferencia detalletransferenciaBean,DetalleTransferencia detalletransferencia,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleTransferencia(DetalleTransferencia detalletransferenciaOrigen,DetalleTransferencia detalletransferencia,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalletransferenciaOrigen.getId()!=null && !detalletransferenciaOrigen.getId().equals(0L))) {detalletransferencia.setId(detalletransferenciaOrigen.getId());}}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getdescripcion()!=null && !detalletransferenciaOrigen.getdescripcion().equals(""))) {detalletransferencia.setdescripcion(detalletransferenciaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getcantidad()!=null && !detalletransferenciaOrigen.getcantidad().equals(0))) {detalletransferencia.setcantidad(detalletransferenciaOrigen.getcantidad());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getdescuento()!=null && !detalletransferenciaOrigen.getdescuento().equals(0.0))) {detalletransferencia.setdescuento(detalletransferenciaOrigen.getdescuento());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getcosto_unitario()!=null && !detalletransferenciaOrigen.getcosto_unitario().equals(0.0))) {detalletransferencia.setcosto_unitario(detalletransferenciaOrigen.getcosto_unitario());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getcosto_total()!=null && !detalletransferenciaOrigen.getcosto_total().equals(0.0))) {detalletransferencia.setcosto_total(detalletransferenciaOrigen.getcosto_total());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getdisponible()!=null && !detalletransferenciaOrigen.getdisponible().equals(0))) {detalletransferencia.setdisponible(detalletransferenciaOrigen.getdisponible());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getlote()!=null && !detalletransferenciaOrigen.getlote().equals(""))) {detalletransferencia.setlote(detalletransferenciaOrigen.getlote());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getfecha_elaboracion_lote()!=null && !detalletransferenciaOrigen.getfecha_elaboracion_lote().equals(new Date()))) {detalletransferencia.setfecha_elaboracion_lote(detalletransferenciaOrigen.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getfecha_caducidad_lote()!=null && !detalletransferenciaOrigen.getfecha_caducidad_lote().equals(new Date()))) {detalletransferencia.setfecha_caducidad_lote(detalletransferenciaOrigen.getfecha_caducidad_lote());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getnumero_comprobante()!=null && !detalletransferenciaOrigen.getnumero_comprobante().equals(""))) {detalletransferencia.setnumero_comprobante(detalletransferenciaOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && detalletransferenciaOrigen.getlote_cliente()!=null && !detalletransferenciaOrigen.getlote_cliente().equals(""))) {detalletransferencia.setlote_cliente(detalletransferenciaOrigen.getlote_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleTransferencia(DetalleTransferencia detalletransferencia) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setText(detalletransferencia.getId().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setText(detalletransferencia.getdescripcion());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setText(detalletransferencia.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setText(detalletransferencia.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setText(detalletransferencia.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setText(detalletransferencia.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setText(detalletransferencia.getlote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setDate(detalletransferencia.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setDate(detalletransferencia.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleTransferencia(DetalleTransferenciaBean detalletransferenciaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setText(detalletransferenciaBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setText(detalletransferenciaBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setText(detalletransferenciaBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setText(detalletransferenciaBean.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setText(detalletransferenciaBean.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setText(detalletransferenciaBean.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setText(detalletransferenciaBean.getlote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setDate(detalletransferenciaBean.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setDate(detalletransferenciaBean.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleTransferencia(DetalleTransferenciaParameterReturnGeneral detalletransferenciaReturnGeneral,DetalleTransferenciaBean detalletransferenciaBean,Boolean conDefault) throws Exception { 
		try {
			DetalleTransferencia detalletransferenciaLocal=new DetalleTransferencia();
			
			detalletransferenciaLocal=detalletransferenciaReturnGeneral.getDetalleTransferencia();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detalletransferenciaLocal.getId()!=null && !detalletransferenciaLocal.getId().equals(0L))) {detalletransferenciaBean.setId(detalletransferenciaLocal.getId());}}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getdescripcion()!=null && !detalletransferenciaLocal.getdescripcion().equals(""))) {detalletransferenciaBean.setdescripcion(detalletransferenciaLocal.getdescripcion());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getcantidad()!=null && !detalletransferenciaLocal.getcantidad().equals(0))) {detalletransferenciaBean.setcantidad(detalletransferenciaLocal.getcantidad());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getcosto_unitario()!=null && !detalletransferenciaLocal.getcosto_unitario().equals(0.0))) {detalletransferenciaBean.setcosto_unitario(detalletransferenciaLocal.getcosto_unitario());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getcosto_total()!=null && !detalletransferenciaLocal.getcosto_total().equals(0.0))) {detalletransferenciaBean.setcosto_total(detalletransferenciaLocal.getcosto_total());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getdisponible()!=null && !detalletransferenciaLocal.getdisponible().equals(0))) {detalletransferenciaBean.setdisponible(detalletransferenciaLocal.getdisponible());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getlote()!=null && !detalletransferenciaLocal.getlote().equals(""))) {detalletransferenciaBean.setlote(detalletransferenciaLocal.getlote());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getfecha_elaboracion_lote()!=null && !detalletransferenciaLocal.getfecha_elaboracion_lote().equals(new Date()))) {detalletransferenciaBean.setfecha_elaboracion_lote(detalletransferenciaLocal.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detalletransferenciaLocal.getfecha_caducidad_lote()!=null && !detalletransferenciaLocal.getfecha_caducidad_lote().equals(new Date()))) {detalletransferenciaBean.setfecha_caducidad_lote(detalletransferenciaLocal.getfecha_caducidad_lote());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleTransferenciaGenerico(Long idDetalleTransferenciaSeleccionado,JComboBox jComboBoxDetalleTransferencia,List<DetalleTransferencia> detalletransferenciasLocal)throws Exception {
		try {
			DetalleTransferencia  detalletransferenciaTemp=null;

			for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasLocal) {
				if(detalletransferenciaAux.getId()!=null && detalletransferenciaAux.getId().equals(idDetalleTransferenciaSeleccionado)) {
					detalletransferenciaTemp=detalletransferenciaAux;
					break;
				}
			}

			jComboBoxDetalleTransferencia.setSelectedItem(detalletransferenciaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleTransferenciaGenerico(JComboBox jComboBoxDetalleTransferencia,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleTransferencia.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleTransferencia.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleTransferencia.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleTransferencia.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleTransferencia.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleTransferencia.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalletransferencia=(DetalleTransferencia) detalletransferenciaLogic.getDetalleTransferencias().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalletransferencia =(DetalleTransferencia) detalletransferencias.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Transferencia")) {
			//sDescripcion=this.getActualTransferenciaForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.gettransferencia_descripcion();
			} else {
				//sDescripcion=this.getActualTransferenciaForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.gettransferencia_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getmes_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detalletransferencia.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detalletransferencia.getunidad_descripcion();
			}
		}

		if(sTipo.equals("BodegaEnviar")) {
			//sDescripcion=this.getActualBodegaEnviarForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getbodegaenviar_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaEnviarForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getbodegaenviar_descripcion();
			}
		}

		if(sTipo.equals("NovedadProducto")) {
			//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getnovedadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getnovedadproducto_descripcion();
			}
		}

		if(sTipo.equals("EstadoDetalleInventario")) {
			//sDescripcion=this.getActualEstadoDetalleInventarioForeignKeyDescripcion((Long)value);
			if(!detalletransferencia.getIsNew() && !detalletransferencia.getIsChanged() && !detalletransferencia.getIsDeleted()) {
				sDescripcion=detalletransferencia.getestadodetalleinventario_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoDetalleInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=detalletransferencia.getestadodetalleinventario_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleTransferencia detalletransferenciaRow=new DetalleTransferencia();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalletransferenciaRow=(DetalleTransferencia) detalletransferenciaLogic.getDetalleTransferencias().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detalletransferenciaRow=(DetalleTransferencia) detalletransferencias.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleTransferencia(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));			
			this.jButtonDuplicarDetalleTransferencia.setVisible((this.isVisibilidadCeldaDuplicarDetalleTransferencia && this.isPermisoDuplicarDetalleTransferencia));			
			this.jButtonCopiarDetalleTransferencia.setVisible((this.isVisibilidadCeldaCopiarDetalleTransferencia && this.isPermisoCopiarDetalleTransferencia));
			this.jButtonVerFormDetalleTransferencia.setVisible((this.isVisibilidadCeldaVerFormDetalleTransferencia && this.isPermisoVerFormDetalleTransferencia));
			/*
			this.jButtonAbrirOrderByDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));			
			*/
			this.jButtonNuevoRelacionesDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));			
			this.jButtonNuevoGuardarCambiosDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarDetalleTransferencia.setVisible((this.isVisibilidadCeldaModificarDetalleTransferencia && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.setVisible((this.isVisibilidadCeldaActualizarDetalleTransferencia && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.setVisible((this.isVisibilidadCeldaEliminarDetalleTransferencia && this.isPermisoEliminarDetalleTransferencia));
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.setVisible(this.isVisibilidadCeldaCancelarDetalleTransferencia);							
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));						
			this.jButtonDuplicarToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaDuplicarDetalleTransferencia && this.isPermisoDuplicarDetalleTransferencia));						
			this.jButtonCopiarToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaCopiarDetalleTransferencia && this.isPermisoCopiarDetalleTransferencia));			
			this.jButtonVerFormToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaVerFormDetalleTransferencia && this.isPermisoVerFormDetalleTransferencia));			
			this.jButtonAbrirOrderByToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));
			this.jButtonNuevoRelacionesToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));			
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaModificarDetalleTransferencia && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaActualizarDetalleTransferencia  && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaEliminarDetalleTransferencia && this.isPermisoEliminarDetalleTransferencia));
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarToolBarDetalleTransferencia.setVisible(this.isVisibilidadCeldaCancelarDetalleTransferencia);				
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));			
			this.jMenuItemDuplicarDetalleTransferencia.setVisible((this.isVisibilidadCeldaDuplicarDetalleTransferencia && this.isPermisoDuplicarDetalleTransferencia));			
			this.jMenuItemCopiarDetalleTransferencia.setVisible((this.isVisibilidadCeldaCopiarDetalleTransferencia && this.isPermisoCopiarDetalleTransferencia));			
			this.jMenuItemVerFormDetalleTransferencia.setVisible((this.isVisibilidadCeldaVerFormDetalleTransferencia && this.isPermisoVerFormDetalleTransferencia));			
			this.jMenuItemAbrirOrderByDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));			
			//this.jMenuItemMostrarOcultarDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));
			this.jMenuItemDetalleAbrirOrderByDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));			
			//this.jMenuItemDetalleMostrarOcultarDetalleTransferencia.setVisible((this.isVisibilidadCeldaOrdenDetalleTransferencia && this.isPermisoOrdenDetalleTransferencia));			
			this.jMenuItemNuevoRelacionesDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia));			
			this.jMenuItemNuevoGuardarCambiosDetalleTransferencia.setVisible((this.isVisibilidadCeldaNuevoDetalleTransferencia && this.isPermisoNuevoDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));									
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemModificarDetalleTransferencia.setVisible((this.isVisibilidadCeldaModificarDetalleTransferencia && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemActualizarDetalleTransferencia.setVisible((this.isVisibilidadCeldaActualizarDetalleTransferencia && this.isPermisoActualizarDetalleTransferencia));	
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemEliminarDetalleTransferencia.setVisible((this.isVisibilidadCeldaEliminarDetalleTransferencia && this.isPermisoEliminarDetalleTransferencia));
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemCancelarDetalleTransferencia.setVisible(this.isVisibilidadCeldaCancelarDetalleTransferencia);				
			}
			
			this.jMenuItemGuardarCambiosDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));						
			this.jMenuItemGuardarCambiosTablaDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=this.jButtonNuevoDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleTransferencia=this.jButtonDuplicarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaCopiarDetalleTransferencia=this.jButtonCopiarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaVerFormDetalleTransferencia=this.jButtonVerFormDetalleTransferencia.isVisible();
			/*
			this.isVisibilidadCeldaOrdenDetalleTransferencia=this.jButtonAbrirOrderByDetalleTransferencia.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=this.jButtonNuevoRelacionesDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaModificarDetalleTransferencia=this.jButtonModificarDetalleTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.isVisibilidadCeldaActualizarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=this.jButtonGuardarCambiosTablaDetalleTransferencia.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoDetalleTransferencia=this.jButtonNuevoToolBarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=this.jButtonNuevoRelacionesToolBarDetalleTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.isVisibilidadCeldaModificarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarToolBarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaActualizarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarToolBarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarToolBarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarToolBarDetalleTransferencia.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleTransferencia=this.jButtonGuardarCambiosToolBarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=this.jButtonGuardarCambiosTablaToolBarDetalleTransferencia.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoDetalleTransferencia=this.jMenuItemNuevoDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=this.jMenuItemNuevoRelacionesDetalleTransferencia.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.isVisibilidadCeldaModificarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemModificarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaActualizarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemActualizarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaEliminarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemEliminarDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaCancelarDetalleTransferencia=this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemCancelarDetalleTransferencia.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleTransferencia=this.jMenuItemGuardarCambiosDetalleTransferencia.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=this.jMenuItemGuardarCambiosTablaDetalleTransferencia.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleTransferencia(Boolean esInicializar) {
		if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
				//if(this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleTransferencia();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleTransferencia(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleTransferencia() {
		this.jButtonNuevoDetalleTransferencia.setVisible(this.isPermisoNuevoDetalleTransferencia);			
		this.jButtonDuplicarDetalleTransferencia.setVisible(this.isPermisoDuplicarDetalleTransferencia);			
		this.jButtonCopiarDetalleTransferencia.setVisible(this.isPermisoCopiarDetalleTransferencia);			
		this.jButtonVerFormDetalleTransferencia.setVisible(this.isPermisoVerFormDetalleTransferencia);			
		/*
		this.jButtonAbrirOrderByDetalleTransferencia.setVisible(this.isPermisoOrdenDetalleTransferencia);					
		*/
		this.jButtonNuevoRelacionesDetalleTransferencia.setVisible(this.isPermisoNuevoDetalleTransferencia);			
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarDetalleTransferencia.setVisible(this.isPermisoActualizarDetalleTransferencia);	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.setVisible(this.isPermisoActualizarDetalleTransferencia);	
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.setVisible(this.isPermisoEliminarDetalleTransferencia);
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.setVisible(this.isVisibilidadCeldaCancelarDetalleTransferencia);						
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.setVisible(this.isPermisoGuardarCambiosDetalleTransferencia);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleTransferencia.setVisible(this.isPermisoActualizarDetalleTransferencia);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleTransferencia() {
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarDetalleTransferencia.setVisible(this.isPermisoActualizarDetalleTransferencia);	
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.setVisible(this.isPermisoActualizarDetalleTransferencia);	
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.setVisible(this.isPermisoEliminarDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.setVisible(this.isVisibilidadCeldaCancelarDetalleTransferencia);							
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.setVisible((this.isVisibilidadCeldaGuardarDetalleTransferencia && this.isPermisoGuardarCambiosDetalleTransferencia));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleTransferencia() {
		if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleTransferencia();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleTransferencia() {
	}
	
	public void jTableDatosDetalleTransferenciaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleTransferencia(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detalletransferencia.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transferenciaDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransferencia=true;

			idTienePermisotransferencia=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(TransferenciaConstantesFunciones.CLASSNAME);

			if(idTienePermisotransferencia) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.transferenciaBeanSwingJInternalFrame=new TransferenciaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transferenciaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transferenciaBeanSwingJInternalFrame.getTransferenciaLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_transferencia()!=null) {
					this.transferenciaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transferenciaBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_transferencia());
					this.transferenciaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transferenciaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transferenciaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransferencia();
				}

				JInternalFrameBase jinternalFrame =this.transferenciaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBordertransferencia=(TitledBorder)this.transferenciaBeanSwingJInternalFrame.jScrollPanelDatosTransferencia.getBorder();

				titledBordertransferencia.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Transferencia");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transferenciaDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_transferencia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transferencia = "+this.detalletransferencia.getid_transferencia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detalletransferencia.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detalletransferencia.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detalletransferencia.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detalletransferencia.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detalletransferencia.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detalletransferencia.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detalletransferencia.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleTransferenciaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {

				//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND
				this.productoBeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryComboProducto;
				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleTransferencia=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleTransferencia.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detalletransferencia.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detalletransferencia.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodega_enviarDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodegaenviar=true;

			idTienePermisobodegaenviar=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodegaenviar) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.bodegaenviarBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaenviarBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaenviarBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_bodega_enviar()!=null) {
					this.bodegaenviarBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaenviarBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_bodega_enviar());
					this.bodegaenviarBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaenviarBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaenviarBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaenviarBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderbodegaenviar=(TitledBorder)this.bodegaenviarBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodegaenviar.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodega_enviarDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_bodega_enviar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega_enviar = "+this.detalletransferencia.getid_bodega_enviar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detalletransferencia.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_novedad_productoDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonovedadproducto=true;

			idTienePermisonovedadproducto=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(NovedadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisonovedadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.novedadproductoBeanSwingJInternalFrame=new NovedadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.novedadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.novedadproductoBeanSwingJInternalFrame.getNovedadProductoLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_novedad_producto()!=null) {
					this.novedadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.novedadproductoBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_novedad_producto());
					this.novedadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadProducto();
				}

				JInternalFrameBase jinternalFrame =this.novedadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBordernovedadproducto=(TitledBorder)this.novedadproductoBeanSwingJInternalFrame.jScrollPanelDatosNovedadProducto.getBorder();

				titledBordernovedadproducto.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Novedad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_novedad_productoDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_novedad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_novedad_producto = "+this.detalletransferencia.getid_novedad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadodetalleinventario=true;

			idTienePermisoestadodetalleinventario=this.tienePermisosUsuarioEnPaginaWebDetalleTransferencia(EstadoDetalleInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadodetalleinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleTransferencia.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleTransferencia.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);

				this.estadodetalleinventarioBeanSwingJInternalFrame=new EstadoDetalleInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadodetalleinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadodetalleinventarioBeanSwingJInternalFrame.getEstadoDetalleInventarioLogic().setConnexion(this.detalletransferenciaLogic.getConnexion());

				if(this.detalletransferencia.getid_estado_detalle_inventario()!=null) {
					this.estadodetalleinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadodetalleinventarioBeanSwingJInternalFrame.setIdActual(this.detalletransferencia.getid_estado_detalle_inventario());
					this.estadodetalleinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadodetalleinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadodetalleinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoDetalleInventario();
				}

				JInternalFrameBase jinternalFrame =this.estadodetalleinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleTransferencia=(TitledBorder)this.jScrollPanelDatosDetalleTransferencia.getBorder();
				TitledBorder titledBorderestadodetalleinventario=(TitledBorder)this.estadodetalleinventarioBeanSwingJInternalFrame.jScrollPanelDatosEstadoDetalleInventario.getBorder();

				titledBorderestadodetalleinventario.setTitle(titledBorderDetalleTransferencia.getTitle() + " -> Estado Detalle Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detalletransferenciaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_detalle_inventarioDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getid_estado_detalle_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_detalle_inventario = "+this.detalletransferencia.getid_estado_detalle_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detalletransferencia.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detalletransferencia.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_unitarioDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getcosto_unitario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_unitario = "+this.detalletransferencia.getcosto_unitario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_totalDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getcosto_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_total = "+this.detalletransferencia.getcosto_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondisponibleDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getdisponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where disponible = "+this.detalletransferencia.getdisponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonloteDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getlote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote like '%"+this.detalletransferencia.getlote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_elaboracion_loteDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getfecha_elaboracion_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_elaboracion_lote = '"+Funciones2.getStringPostgresDate(this.detalletransferencia.getfecha_elaboracion_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caducidad_loteDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getfecha_caducidad_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caducidad_lote = '"+Funciones2.getStringPostgresDate(this.detalletransferencia.getfecha_caducidad_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.detalletransferencia.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlote_clienteDetalleTransferenciaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.getdetalletransferencia(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detalletransferencia==null) {
						this.detalletransferencia = new DetalleTransferencia();
					}

					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);
				}

				if(this.detalletransferencia.getlote_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote_cliente like '%"+this.detalletransferencia.getlote_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleTransferencia(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameDetalleTransferencia() {
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
			this.jInternalFrameDetalleFormDetalleTransferencia.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleTransferencia.dispose();
			this.jInternalFrameDetalleFormDetalleTransferencia=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
			this.jInternalFrameReporteDinamicoDetalleTransferencia.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleTransferencia.dispose();
			this.jInternalFrameReporteDinamicoDetalleTransferencia=null;
		}
		
		if(this.jInternalFrameImportacionDetalleTransferencia!=null) {
			this.jInternalFrameImportacionDetalleTransferencia.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleTransferencia.dispose();
			this.jInternalFrameImportacionDetalleTransferencia=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleTransferencia();
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleTransferencia")) {
				jButtonDuplicarDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleTransferencia")) {
				jButtonCopiarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleTransferencia")) {
				jButtonVerFormDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleTransferencia")) {
				jButtonDuplicarDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleTransferencia")) {
				jButtonDuplicarDetalleTransferenciaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleTransferencia")) {
				jButtonModificarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleTransferencia")) {
				jButtonModificarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleTransferencia")) {
				jButtonModificarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleTransferencia")) {
				jButtonActualizarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleTransferencia")) {
				jButtonActualizarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleTransferencia")) {
				jButtonActualizarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleTransferencia")) {
				jButtonEliminarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleTransferencia")) {
				jButtonEliminarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleTransferencia")) {
				jButtonEliminarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleTransferencia")) {
				jButtonCancelarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleTransferencia")) {
				jButtonCancelarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleTransferencia")) {
				jButtonCancelarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleTransferencia")) {
				jButtonCerrarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleTransferencia")) {
				jButtonCerrarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleTransferencia")) {
				jButtonCerrarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleTransferencia")) {
				jButtonMostrarOcultarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleTransferencia")) {
				jButtonCancelarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleTransferencia")) {
				jButtonCopiarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleTransferencia")) {
				jButtonVerFormDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleTransferencia")) {
				jButtonCopiarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleTransferencia")) {
				jButtonVerFormDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleTransferencia")) {
				jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleTransferencia")) {
				jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleTransferencia")) {
				jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleTransferencia")) {
				jButtonAnterioresDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleTransferencia")) {
				jButtonAnterioresDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleTransferencia")) {
				jButtonAnterioresDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleTransferencia")) {
				jButtonSiguientesDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleTransferencia")) {
				jButtonSiguientesDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleTransferencia")) {
				jButtonSiguientesDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleTransferencia") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleTransferencia")) {
				jButtonAbrirOrderByDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleTransferencia") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleTransferencia")) {
				jButtonMostrarOcultarDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleTransferencia")) {
				jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleTransferencia")) {
				jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleTransferencia")) {
				jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleTransferencia")) {
				jButtonCerrarReporteDinamicoDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleTransferencia")) {
				jButtonGenerarReporteDinamicoDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleTransferencia")) {
				/*
				jButtonGenerarExcelReporteDinamicoDetalleTransferenciaActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionDetalleTransferencia")) {
				jButtonCerrarImportacionDetalleTransferenciaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleTransferencia")) {
				/*
				jButtonGenerarImportacionDetalleTransferenciaActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionDetalleTransferencia")) {
				/*
				jButtonAbrirImportacionDetalleTransferenciaActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesDetalleTransferencia")) {
				jComboBoxTiposAccionesDetalleTransferenciaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleTransferencia")) {
				jComboBoxTiposRelacionesDetalleTransferenciaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleTransferencia")) {
				jComboBoxTiposAccionesDetalleTransferenciaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleTransferencia")) {
				/*
				jComboBoxTiposSeleccionarDetalleTransferenciaActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralDetalleTransferencia")) {
				jTextFieldValorCampoGeneralDetalleTransferenciaActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetalleTransferencia")) {
				jButtonAbrirTotalesDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetalleTransferencia")) {
				jButtonCerrarTotalesDetalleTransferenciaActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetalleTransferencia")) {
				jButtonAbrirOrderByDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleTransferencia")) {
				jButtonAbrirOrderByDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleTransferencia")) {
				jButtonCerrarOrderByDetalleTransferenciaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleTransferenciaBusqueda")) {
				this.jButtonidDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transferenciaDetalleTransferenciaUpdate")) {
				this.jButtonid_transferenciaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transferenciaDetalleTransferenciaBusqueda")) {
				this.jButtonid_transferenciaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleTransferenciaUpdate")) {
				this.jButtonid_empresaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleTransferenciaBusqueda")) {
				this.jButtonid_empresaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleTransferenciaUpdate")) {
				this.jButtonid_sucursalDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleTransferenciaBusqueda")) {
				this.jButtonid_sucursalDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleTransferenciaUpdate")) {
				this.jButtonid_ejercicioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleTransferenciaBusqueda")) {
				this.jButtonid_ejercicioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleTransferenciaUpdate")) {
				this.jButtonid_periodoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleTransferenciaBusqueda")) {
				this.jButtonid_periodoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleTransferenciaUpdate")) {
				this.jButtonid_anioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleTransferenciaBusqueda")) {
				this.jButtonid_anioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleTransferenciaUpdate")) {
				this.jButtonid_mesDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleTransferenciaBusqueda")) {
				this.jButtonid_mesDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleTransferenciaUpdate")) {
				this.jButtonid_bodegaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleTransferenciaBusqueda")) {
				this.jButtonid_bodegaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleTransferencia")) {
				this.jButtonid_productoDetalleTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleTransferenciaUpdate")) {
				this.jButtonid_productoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleTransferenciaBusqueda")) {
				this.jButtonid_productoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleTransferenciaUpdate")) {
				this.jButtonid_unidadDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleTransferenciaBusqueda")) {
				this.jButtonid_unidadDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleTransferenciaUpdate")) {
				this.jButtonid_bodega_enviarDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleTransferenciaBusqueda")) {
				this.jButtonid_bodega_enviarDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleTransferenciaBusqueda")) {
				this.jButtondescripcionDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleTransferenciaUpdate")) {
				this.jButtonid_novedad_productoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleTransferenciaBusqueda")) {
				this.jButtonid_novedad_productoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleTransferenciaUpdate")) {
				this.jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleTransferenciaBusqueda")) {
				this.jButtonid_estado_detalle_inventarioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleTransferenciaBusqueda")) {
				this.jButtoncantidadDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleTransferenciaBusqueda")) {
				this.jButtondescuentoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleTransferenciaBusqueda")) {
				this.jButtoncosto_unitarioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleTransferenciaBusqueda")) {
				this.jButtoncosto_totalDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleTransferenciaBusqueda")) {
				this.jButtondisponibleDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleTransferenciaBusqueda")) {
				this.jButtonloteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleTransferenciaBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleTransferenciaBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleTransferenciaBusqueda")) {
				this.jButtonnumero_comprobanteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleTransferenciaBusqueda")) {
				this.jButtonlote_clienteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_productoDetalleTransferencia")) {
				this.jButtonid_productoDetalleTransferenciaActionPerformed(evt);
			}
			
			
			;
			
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleTransferencia();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				


			if(sTipo.equals("cantidadDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleTransferencia detalletransferenciaLocal=null;
			
			if(!this.getEsControlTabla()) {
				detalletransferenciaLocal=this.detalletransferencia;
			} else {
				detalletransferenciaLocal=this.detalletransferenciaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("cantidadDetalleTransferencia")) {
					if(detalletransferenciaLocal.getcantidad()==Integer.parseInt(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_unitarioDetalleTransferencia")) {
					if(detalletransferenciaLocal.getcosto_unitario()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
							
				
				


			if(sTipo.equals("cantidadDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("cantidadDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
								
						
				


				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
								
				
				


				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
							
				
				


				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
								
				
				


			if(sTipo.equals("cantidadDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleTransferencia")) {
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleTransferencia")) {
					jCheckBoxSeleccionarTodosDetalleTransferenciaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleTransferencia")) {
					jCheckBoxSeleccionadosDetalleTransferenciaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleTransferencia")) {
					
				}
				
				


				
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
												
				
				


				
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
				//recargarFormDetalleTransferenciaProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
			}
			 else if(sTipo.equals("id_bodega_enviarDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleTransferenciaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
				//recargarFormDetalleTransferenciaProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
			}
			 else if(sTipo.equals("id_bodega_enviarDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
			}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detalletransferencia);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detalletransferencia);
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleTransferencia,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
				//recargarFormDetalleTransferenciaProducto(jComboBoxid_productoFK_IdProductoDetalleTransferencia,"FK_IdProducto");
			}
			 else if(sTipo.equals("id_bodega_enviarDetalleTransferencia")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia;
				}

				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleTransferencia(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia")) {
				//this.procesarActionsCombosForeignKeyBodegaEnviar(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
				//recargarFormDetalleTransferenciaBodega(jComboBoxid_bodega_enviarFK_IdBodegaEnviarDetalleTransferencia,"FK_IdBodegaEnviar");
			}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleTransferencia.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleTransferencia.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleTransferenciaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detalletransferenciaAnterior =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleTransferencia")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleTransferenciaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleTransferencia.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detalletransferencia =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detalletransferencia =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detalletransferencia);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleTransferencia")) {
				
				}
				
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleTransferencia")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleTransferencia.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleTransferencia")) {
			
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleTransferencia();
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleTransferencia")) {
				jButtonDuplicarDetalleTransferenciaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleTransferencia")) {
				jButtonCopiarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleTransferencia")) {
				jButtonVerFormDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleTransferencia")) {
				jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleTransferencia")) {
				jButtonModificarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleTransferencia")) {
				jButtonActualizarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleTransferencia")) {
				jButtonEliminarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleTransferencia")) {
				jButtonCancelarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleTransferencia")) {
				jButtonCerrarDetalleTransferenciaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleTransferencia")) {
				jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleTransferencia")) {
				jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleTransferencia")) {
				jButtonAbrirOrderByDetalleTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleTransferencia")) {
				jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleTransferencia")) {
				jButtonAnterioresDetalleTransferenciaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleTransferencia")) {
				jButtonSiguientesDetalleTransferenciaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleTransferenciaBusqueda")) {
				this.jButtonidDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transferenciaDetalleTransferenciaUpdate")) {
				this.jButtonid_transferenciaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transferenciaDetalleTransferenciaBusqueda")) {
				this.jButtonid_transferenciaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleTransferenciaUpdate")) {
				this.jButtonid_empresaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleTransferenciaBusqueda")) {
				this.jButtonid_empresaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleTransferenciaUpdate")) {
				this.jButtonid_sucursalDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleTransferenciaBusqueda")) {
				this.jButtonid_sucursalDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleTransferenciaUpdate")) {
				this.jButtonid_ejercicioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleTransferenciaBusqueda")) {
				this.jButtonid_ejercicioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleTransferenciaUpdate")) {
				this.jButtonid_periodoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleTransferenciaBusqueda")) {
				this.jButtonid_periodoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleTransferenciaUpdate")) {
				this.jButtonid_anioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleTransferenciaBusqueda")) {
				this.jButtonid_anioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleTransferenciaUpdate")) {
				this.jButtonid_mesDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleTransferenciaBusqueda")) {
				this.jButtonid_mesDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleTransferenciaUpdate")) {
				this.jButtonid_bodegaDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleTransferenciaBusqueda")) {
				this.jButtonid_bodegaDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleTransferencia")) {
				this.jButtonid_productoDetalleTransferenciaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleTransferenciaUpdate")) {
				this.jButtonid_productoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleTransferenciaBusqueda")) {
				this.jButtonid_productoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleTransferenciaUpdate")) {
				this.jButtonid_unidadDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleTransferenciaBusqueda")) {
				this.jButtonid_unidadDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleTransferenciaUpdate")) {
				this.jButtonid_bodega_enviarDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodega_enviarDetalleTransferenciaBusqueda")) {
				this.jButtonid_bodega_enviarDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleTransferenciaBusqueda")) {
				this.jButtondescripcionDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleTransferenciaUpdate")) {
				this.jButtonid_novedad_productoDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleTransferenciaBusqueda")) {
				this.jButtonid_novedad_productoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleTransferenciaUpdate")) {
				this.jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleTransferenciaBusqueda")) {
				this.jButtonid_estado_detalle_inventarioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleTransferenciaBusqueda")) {
				this.jButtoncantidadDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleTransferenciaBusqueda")) {
				this.jButtondescuentoDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleTransferenciaBusqueda")) {
				this.jButtoncosto_unitarioDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleTransferenciaBusqueda")) {
				this.jButtoncosto_totalDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleTransferenciaBusqueda")) {
				this.jButtondisponibleDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleTransferenciaBusqueda")) {
				this.jButtonloteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleTransferenciaBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleTransferenciaBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleTransferenciaBusqueda")) {
				this.jButtonnumero_comprobanteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleTransferenciaBusqueda")) {
				this.jButtonlote_clienteDetalleTransferenciaBusquedaActionPerformed(evt);
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleTransferencia();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleTransferencia")) {
				closingInternalFrameDetalleTransferencia();
				
			} else if(sTipo.equals("jButtonCancelarDetalleTransferencia")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleTransferencia = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleTransferenciaBeanSwingJInternalFrame jInternalFrameParent=(DetalleTransferenciaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleTransferencia.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleTransferenciaActionPerformed(null);
			}
			
			DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detalletransferencia,new Object(),this.detalletransferenciaParameterGeneral,this.detalletransferenciaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleTransferencia(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleTransferencia(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleTransferencia(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detalletransferencia)) {
			if(!esControlTabla) {
				if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);			
				}
				
				if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleTransferencia(this.detalletransferencia,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalletransferenciaReturnGeneral=detalletransferenciaLogic.procesarEventosDetalleTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalletransferenciaLogic.getDetalleTransferencias(),this.detalletransferencia,this.detalletransferenciaParameterGeneral,this.isEsNuevoDetalleTransferencia,classes);//this.detalletransferenciaLogic.getDetalleTransferencia()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleTransferencia(this.detalletransferenciaReturnGeneral,this.detalletransferenciaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleTransferencia(classes,this.detalletransferenciaReturnGeneral,this.detalletransferenciaBean,false);
					}
						
					if(this.detalletransferenciaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia());	
					}
						
					if(this.detalletransferenciaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia(),classes);//this.detalletransferenciaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleTransferencia(this.detalletransferencia,classes);//this.detalletransferenciaBean);									
				}
			
				if(DetalleTransferenciaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleTransferencia(this.detalletransferencia,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleTransferencia(this.detalletransferencia);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detalletransferenciaAnterior!=null) {
						this.detalletransferencia=this.detalletransferenciaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detalletransferenciaReturnGeneral=detalletransferenciaLogic.procesarEventosDetalleTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalletransferenciaLogic.getDetalleTransferencias(),this.detalletransferencia,this.detalletransferenciaParameterGeneral,this.isEsNuevoDetalleTransferencia,classes);//this.detalletransferenciaLogic.getDetalleTransferencia()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detalletransferenciaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detalletransferenciaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detalletransferenciaReturnGeneral.getDetalleTransferencia(),detalletransferenciaLogic.getDetalleTransferencias());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detalletransferenciaReturnGeneral.getDetalleTransferencia(),this.detalletransferencias);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleTransferencia.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleTransferencia.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleTransferencia();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleTransferencia() throws Exception {
		
		DetalleTransferenciaModel detalletransferenciaModel=(DetalleTransferenciaModel)this.jTableDatosDetalleTransferencia.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detalletransferenciaModel.detalletransferencias=this.detalletransferenciaLogic.getDetalleTransferencias();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detalletransferenciaModel.detalletransferencias=this.detalletransferencias;
		}
		
		
		((DetalleTransferenciaModel) this.jTableDatosDetalleTransferencia.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleTransferencia() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetalletransferenciaAnterior(),this.detalletransferenciaLogic.getDetalleTransferencias());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetalletransferenciaAnterior(),this.detalletransferencias);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleTransferencia();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleTransferencia(DetalleTransferencia detalletransferencia,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalletransferencia,new Object(),generalEntityParameterGeneral,this.detalletransferenciaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detalletransferenciaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsOfDetalleTransferencia(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleTransferenciaConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleTransferencia(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleTransferencia(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleTransferenciaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detalletransferencia,new Object(),generalEntityParameterGeneral,this.detalletransferenciaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleTransferencia(DetalleTransferenciaBean detalletransferenciaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleTransferencia(ArrayList<Classe> classes,DetalleTransferenciaReturnGeneral detalletransferenciaReturnGeneral,DetalleTransferenciaBean detalletransferenciaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleTransferencia(DetalleTransferencia detalletransferencia,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detalletransferencia)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleTransferencia = new DetalleTransferenciaDetalleFormJInternalFrame(jDesktopPane,this.detalletransferenciaSessionBean.getConGuardarRelaciones(),this.detalletransferenciaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.setVisible(false);
		this.jInternalFrameDetalleFormDetalleTransferencia.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleTransferencia.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleTransferencia.detalletransferenciaLogic=this.detalletransferenciaLogic;
		
		this.cargarCombosFrameForeignKeyDetalleTransferencia("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleTransferencia();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleTransferencia();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleTransferencia("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleTransferencia();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleTransferencia.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleTransferencia"));
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ModificarDetalleTransferencia"));

		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleTransferencia"));
					
		this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemModificarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleTransferencia"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"ActualizarDetalleTransferencia"));
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleTransferencia"));
						
		this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemActualizarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleTransferencia"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"EliminarDetalleTransferencia"));
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleTransferencia"));
								
		this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemEliminarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleTransferencia"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CancelarDetalleTransferencia"));
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleTransferencia"));
					
		this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemCancelarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleTransferencia"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemDetalleCerrarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleTransferencia"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleTransferencia"));
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleTransferencia"));
		*/
		
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleTransferencia"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleTransferencia"));
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.addActionListener(new TextFieldActionListener(this,"cantidadDetalleTransferencia"));
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleTransferencia,"cantidadDetalleTransferencia"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleTransferencia"));
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleTransferencia"));
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleTransferencia,"costo_unitarioDetalleTransferencia"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonidDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaBusqueda"));
		//jButtonid_productoDetalleTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescripcionDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncantidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescuentoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_unitarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_totalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondisponibleDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonloteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_elaboracion_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_caducidad_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonnumero_comprobanteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonlote_clienteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleTransferenciaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleTransferencia"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleTransferencia"));
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleTransferencia"));
		}
		
		this.jTableDatosDetalleTransferencia.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleTransferencia"));
		
		this.jTableDatosDetalleTransferencia.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleTransferencia"));
		
		this.jButtonNuevoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"NuevoDetalleTransferencia"));
		
		this.jButtonDuplicarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"DuplicarDetalleTransferencia"));
		
		this.jButtonCopiarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"CopiarDetalleTransferencia"));
		
		this.jButtonVerFormDetalleTransferencia.addActionListener(new ButtonActionListener(this,"VerFormDetalleTransferencia"));
		
		/*
		this.jButtonNuevoToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleTransferencia"));
			
		this.jButtonDuplicarToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleTransferencia"));
			
		this.jMenuItemNuevoDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleTransferencia"));
			
		this.jMenuItemDuplicarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleTransferencia"));		
		*/
		
		this.jButtonNuevoRelacionesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleTransferencia"));
		
		/*
		this.jButtonNuevoRelacionesToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleTransferencia"));
			
		this.jMenuItemNuevoRelacionesDetalleTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleTransferencia"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ModificarDetalleTransferencia"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonModificarToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleTransferencia"));
			
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemModificarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleTransferencia"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"ActualizarDetalleTransferencia"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonActualizarToolBarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleTransferencia"));
				
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemActualizarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleTransferencia"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"EliminarDetalleTransferencia"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonEliminarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleTransferencia"));
						
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemEliminarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleTransferencia"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CancelarDetalleTransferencia"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonCancelarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleTransferencia"));
			
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemCancelarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleTransferencia"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleTransferencia"));		
		*/
		
		this.jButtonCerrarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CerrarDetalleTransferencia"));
		
		/*
		this.jButtonCerrarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleTransferencia"));
			
		this.jMenuItemCerrarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleTransferencia"));
			
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jMenuItemDetalleCerrarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleTransferencia"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleTransferencia"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleTransferencia"));
		}
		
		this.jButtonCopiarToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleTransferencia"));
			
		this.jButtonVerFormToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleTransferencia"));
		
		this.jMenuItemGuardarCambiosDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleTransferencia"));
			
		this.jMenuItemCopiarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleTransferencia"));		
		
		this.jMenuItemVerFormDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleTransferencia"));		
		*/
		
		this.jButtonGuardarCambiosTablaDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleTransferencia"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleTransferencia"));
			
		this.jMenuItemGuardarCambiosTablaDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleTransferencia"));		
		*/
		
		/*
		this.jButtonRecargarInformacionDetalleTransferencia.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleTransferencia"));
					
		this.jButtonRecargarInformacionToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleTransferencia"));
		
		this.jMenuItemRecargarInformacionDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleTransferencia"));		
		*/
		
		
		this.jButtonAnterioresDetalleTransferencia.addActionListener (new ButtonActionListener(this,"AnterioresDetalleTransferencia"));
		
		/*
		this.jButtonAnterioresToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleTransferencia"));
		
		this.jMenuItemAnterioresDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleTransferencia"));		
		*/
		
		this.jButtonSiguientesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"SiguientesDetalleTransferencia"));
		
		/*
		this.jButtonSiguientesToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleTransferencia"));
			
		this.jMenuItemSiguientesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleTransferencia"));
			
		this.jMenuItemAbrirOrderByDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleTransferencia"));
			
		this.jMenuItemMostrarOcultarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleTransferencia"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleTransferencia"));
			
		this.jMenuItemDetalleMostarOcultarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleTransferencia"));		
		*/
		
		this.jButtonNuevoGuardarCambiosDetalleTransferencia.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleTransferencia"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleTransferencia"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleTransferencia.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleTransferencia"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleTransferencia.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleTransferencia"));

		this.jCheckBoxSeleccionadosDetalleTransferencia.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleTransferencia"));
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleTransferencia"));
		}
		
		/*
		this.jComboBoxTiposRelacionesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleTransferencia"));
			
		this.jComboBoxTiposAccionesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleTransferencia"));
					
		this.jComboBoxTiposSeleccionarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleTransferencia"));
			
		this.jTextFieldValorCampoGeneralDetalleTransferencia.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleTransferencia"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleTransferencia"));
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.addActionListener(new TextFieldActionListener(this,"cantidadDetalleTransferencia"));
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleTransferencia,"cantidadDetalleTransferencia"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleTransferencia"));
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleTransferencia"));
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleTransferencia,"costo_unitarioDetalleTransferencia"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonidDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaBusqueda"));
		//jButtonid_productoDetalleTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescripcionDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncantidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescuentoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_unitarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_totalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondisponibleDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonloteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_elaboracion_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_caducidad_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonnumero_comprobanteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonlote_clienteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleTransferenciaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonFK_IdBodegaDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleTransferencia"));

			this.jButtonFK_IdBodegaEnviarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdBodegaEnviarDetalleTransferencia"));

			this.jButtonFK_IdEstadoDetalleInventarioDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleInventarioDetalleTransferencia"));

			this.jButtonFK_IdNovedadProductoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleTransferencia"));

			this.jButtonFK_IdProductoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleTransferencia"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferencia"));

			this.jButtonFK_IdTransferenciaDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdTransferenciaDetalleTransferencia"));

			this.jButtonFK_IdUnidadDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleTransferencia"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoDetalleTransferencia!=null) {
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleTransferencia"));
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleTransferencia"));
				this.jInternalFrameReporteDinamicoDetalleTransferencia.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleTransferencia"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleTransferencia.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleTransferencia"));				
			//this.jButtonGenerarReporteDinamicoDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleTransferencia"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleTransferencia.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleTransferencia"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleTransferencia!=null) {
				this.jInternalFrameImportacionDetalleTransferencia.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleTransferencia"));
				this.jInternalFrameImportacionDetalleTransferencia.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleTransferencia"));
				this.jInternalFrameImportacionDetalleTransferencia.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleTransferencia"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleTransferencia.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleTransferencia"));
			
			this.jButtonAbrirOrderByToolBarDetalleTransferencia.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleTransferencia"));			
			
			if(this.jInternalFrameOrderByDetalleTransferencia!=null) {
				this.jInternalFrameOrderByDetalleTransferencia.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleTransferencia"));				
			}
			*/
			
		}
		
		this.jButtonAbrirTotalesDetalleTransferencia.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetalleTransferencia"));
		
		if(this.jInternalFrameTotalesDetalleTransferencia!=null) {
			this.jInternalFrameTotalesDetalleTransferencia.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleTransferencia"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleTransferencia.jTabbedPaneRelacionesDetalleTransferencia.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleTransferencia"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleTransferencia();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleTransferencia.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleTransferencia = (JInternalFrameBase)event.getSource();
	            	
	            DetalleTransferenciaBeanSwingJInternalFrame jInternalFrameParent=(DetalleTransferenciaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleTransferencia.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleTransferenciaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleTransferencia.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleTransferenciaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleTransferencia.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleTransferencia.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleTransferencia";
		inputMap = this.jButtonNuevoDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleTransferencia";
		inputMap = this.jButtonNuevoRelacionesDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleTransferenciaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleTransferencia";
		inputMap = this.jButtonModificarDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleTransferencia";
		inputMap = this.jButtonActualizarDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleTransferencia";
		inputMap = this.jButtonEliminarDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleTransferencia";
		inputMap = this.jButtonCancelarDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleTransferencia";
		inputMap = this.jButtonCerrarDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleTransferencia";
		inputMap = this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonGuardarCambiosDetalleTransferencia.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleTransferenciaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleTransferencia.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleTransferenciaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleTransferencia.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleTransferenciaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonidDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_transferenciaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_transferenciaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_empresaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_sucursalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_ejercicioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_periodoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_anioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_mesDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodegaDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleTransferenciaBusqueda"));
		//jButtonid_productoDetalleTransferencia.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleTransferenciaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferencia"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_unidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_bodega_enviarDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodega_enviarDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescripcionDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_novedad_productoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleTransferenciaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_estado_detalle_inventarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncantidadDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondescuentoDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_unitarioDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtoncosto_totalDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtondisponibleDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonloteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_elaboracion_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonfecha_caducidad_loteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonnumero_comprobanteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleTransferenciaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleTransferencia.jButtonlote_clienteDetalleTransferenciaBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleTransferenciaBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleTransferencia"));

		this.jButtonFK_IdBodegaEnviarDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdBodegaEnviarDetalleTransferencia"));

		this.jButtonFK_IdEstadoDetalleInventarioDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleInventarioDetalleTransferencia"));

		this.jButtonFK_IdNovedadProductoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleTransferencia"));

		this.jButtonFK_IdProductoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleTransferencia"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleTransferencia.addActionListener(new ButtonActionListener(this,"id_productoDetalleTransferencia"));

		this.jButtonFK_IdTransferenciaDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdTransferenciaDetalleTransferencia"));

		this.jButtonFK_IdUnidadDetalleTransferencia.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleTransferencia"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleTransferencia.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleTransferenciaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarDetalleTransferenciaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleTransferencia.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosDetalleTransferencia(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
					detalletransferenciaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleTransferencia detalletransferenciaAux:detalletransferencias) {
					detalletransferenciaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleTransferenciaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
						detalletransferenciaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleTransferencia detalletransferenciaAux:detalletransferencias) {
						detalletransferenciaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleTransferencia detalletransferenciaAux:detalletransferencias) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleTransferencia.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleTransferencia.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleTransferenciaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleTransferencia.getSelectedRows();
			
			DetalleTransferencia detalletransferenciaLocal=new DetalleTransferencia();
			
			//this.seleccionarTodosDetalleTransferencia(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalletransferenciaLocal =(DetalleTransferencia) this.detalletransferenciaLogic.getDetalleTransferencias().toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detalletransferenciaLocal =(DetalleTransferencia) this.detalletransferencias.toArray()[this.jTableDatosDetalleTransferencia.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detalletransferenciaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
						detalletransferenciaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleTransferencia detalletransferenciaAux:detalletransferencias) {
						detalletransferenciaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleTransferencia.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleTransferencia.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleTransferencia,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleTransferenciaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleTransferenciaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleTransferenciaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleTransferencia.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleTransferencia detalletransferenciaAux:this.detalletransferenciaLogic.getDetalleTransferencias()) {
				
						if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalletransferenciaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detalletransferenciaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detalletransferenciaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detalletransferenciaAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detalletransferenciaAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detalletransferenciaAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detalletransferenciaAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detalletransferenciaAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detalletransferenciaAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detalletransferenciaAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detalletransferenciaAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleTransferencia detalletransferenciaAux:detalletransferencias) {
					
						if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detalletransferenciaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detalletransferenciaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detalletransferenciaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detalletransferenciaAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detalletransferenciaAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detalletransferenciaAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detalletransferenciaAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detalletransferenciaAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detalletransferenciaAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detalletransferenciaAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detalletransferenciaAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleTransferenciaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleTransferencia=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleTransferencia.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleTransferencia) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleTransferencia(conSplash);
				
					this.generarReporteDetalleTransferenciasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleTransferenciasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleTransferenciasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleTransferenciasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleTransferencia();
				
				this.exportarDetalleTransferenciasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleTransferencias();
				//this.importarDetalleTransferencias();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleTransferencia();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleTransferenciasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleTransferencia();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleTransferencia)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleTransferencia(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleTransferenciaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleTransferencia) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleTransferencia(conSplash);
					
						//this.actualizarParametrosGeneralDetalleTransferencia();
						
						this.generarReporteProcesoAccionDetalleTransferenciasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleTransferenciaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle TransferenciaS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Transferencia", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleTransferencia();
				
						this.actualizarParametrosGeneralDetalleTransferencia();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detalletransferenciaReturnGeneral=detalletransferenciaLogic.procesarAccionDetalleTransferenciasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detalletransferenciaLogic.getDetalleTransferencias(),this.detalletransferenciaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleTransferenciaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleTransferencia();
					
					DetalleTransferenciaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleTransferenciaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleTransferencia.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxTiposAccionesFormularioDetalleTransferencia.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleTransferencia(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleTransferenciaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleTransferencia();
			
			if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
			DetalleTransferencia detalletransferencia=new DetalleTransferencia();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleTransferencia(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleTransferencia.getSelectedItem();
			*/
			
			
			
			detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detalletransferenciasSeleccionados.size()==1) {
				for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
					detalletransferencia=detalletransferenciaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleTransferencia();
			
      		//this.finishProcessDetalleTransferencia(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleTransferenciaReturnGeneral() throws Exception {
		if(this.detalletransferenciaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detalletransferenciaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detalletransferenciaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detalletransferenciaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detalletransferenciaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detalletransferenciaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleTransferencia(false);
		}
		
		if(this.detalletransferenciaReturnGeneral.getConRetornoLista() || this.detalletransferenciaReturnGeneral.getConRetornoObjeto()) {
			if(this.detalletransferenciaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalletransferenciaLogic.setDetalleTransferencias(this.detalletransferenciaReturnGeneral.getDetalleTransferencias());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detalletransferenciaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detalletransferenciaLogic.setDetalleTransferencia(this.detalletransferenciaReturnGeneral.getDetalleTransferencia());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleTransferencia(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleTransferencia() throws Exception {
		
		
	}
	
	public ArrayList<DetalleTransferencia> getDetalleTransferenciasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleTransferencia) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleTransferencia detalletransferenciaAux:detalletransferenciaLogic.getDetalleTransferencias()) {
					if(detalletransferenciaAux.getIsSelected()) {
						detalletransferenciasSeleccionados.add(detalletransferenciaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleTransferencia detalletransferenciaAux:this.detalletransferencias) {
					if(detalletransferenciaAux.getIsSelected()) {
						detalletransferenciasSeleccionados.add(detalletransferenciaAux);				
					}
				}
			}
			
			if(detalletransferenciasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detalletransferenciasSeleccionados.addAll(this.detalletransferenciaLogic.getDetalleTransferencias());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detalletransferenciasSeleccionados.addAll(this.detalletransferencias);				
					}
				}
			}
		} else {
			detalletransferenciasSeleccionados.add(this.detalletransferencia);
		}
		
		return detalletransferenciasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleTransferenciasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleTransferenciasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleTransferenciasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleTransferenciasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleTransferenciasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Transferencia",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleTransferenciasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoDetalleTransferencia();
		*/
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoDetalleTransferencia();
		*/
		
		//this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados ,detalletransferenciaImplementable,detalletransferenciaImplementableHome);
	}
	
	public void mostrarImportacionDetalleTransferencias() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionDetalleTransferencia();
		
		this.abrirFrameImportacionDetalleTransferencia();		
		*/
			
		//this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados ,detalletransferenciaImplementable,detalletransferenciaImplementableHome);
	}
	
	public void importarDetalleTransferencias() throws Exception {		
	
	}
	
	public void exportarDetalleTransferenciasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleTransferenciasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleTransferenciasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleTransferenciasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Transferencia",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleTransferencia(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleTransferencia(detalletransferenciaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detalletransferenciaAux.setsDetalleGeneralEntityReporte(detalletransferenciaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleTransferencia(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_LOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleTransferencia(DetalleTransferencia detalletransferencia,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detalletransferencia.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.gettransferencia_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getbodegaenviar_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getnovedadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getestadodetalleinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getcosto_unitario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getcosto_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getdisponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getlote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getfecha_elaboracion_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getfecha_caducidad_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detalletransferencia.getlote_cliente();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleTransferencias");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleTransferencia(row);				
				iRow++;
			}				
			
			for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleTransferencia(detalletransferenciaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleTransferenciasSeleccionados() throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();		
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detalletransferencia.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detalletransferencias");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detalletransferencia");
			//elementRoot.appendChild(element);
		
			for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
				element = document.createElement("detalletransferencia");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleTransferencia(detalletransferenciaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Transferencia",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleTransferencia(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOUNITARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_COSTOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleTransferencia(DetalleTransferencia detalletransferencia,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.gettransferencia_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getbodegaenviar_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getnovedadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getestadodetalleinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getcosto_unitario());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getcosto_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getdisponible());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getlote());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getfecha_elaboracion_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getfecha_caducidad_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(detalletransferencia.getlote_cliente());				
	}
	
	public void setFilaDatosExportarXmlDetalleTransferencia(DetalleTransferencia detalletransferencia,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleTransferenciaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detalletransferencia.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleTransferenciaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detalletransferencia.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementtransferencia_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDTRANSFERENCIA);
		elementtransferencia_descripcion.appendChild(document.createTextNode(detalletransferencia.gettransferencia_descripcion()));
		element.appendChild(elementtransferencia_descripcion);

		Element elementempresa_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detalletransferencia.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detalletransferencia.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detalletransferencia.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detalletransferencia.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detalletransferencia.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detalletransferencia.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detalletransferencia.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detalletransferencia.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detalletransferencia.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementbodegaenviar_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDBODEGAENVIAR);
		elementbodegaenviar_descripcion.appendChild(document.createTextNode(detalletransferencia.getbodegaenviar_descripcion()));
		element.appendChild(elementbodegaenviar_descripcion);

		Element elementdescripcion = document.createElement(DetalleTransferenciaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detalletransferencia.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementnovedadproducto_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDNOVEDADPRODUCTO);
		elementnovedadproducto_descripcion.appendChild(document.createTextNode(detalletransferencia.getnovedadproducto_descripcion()));
		element.appendChild(elementnovedadproducto_descripcion);

		Element elementestadodetalleinventario_descripcion = document.createElement(DetalleTransferenciaConstantesFunciones.IDESTADODETALLEINVENTARIO);
		elementestadodetalleinventario_descripcion.appendChild(document.createTextNode(detalletransferencia.getestadodetalleinventario_descripcion()));
		element.appendChild(elementestadodetalleinventario_descripcion);

		Element elementcantidad = document.createElement(DetalleTransferenciaConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detalletransferencia.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementdescuento = document.createElement(DetalleTransferenciaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detalletransferencia.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementcosto_unitario = document.createElement(DetalleTransferenciaConstantesFunciones.COSTOUNITARIO);
		elementcosto_unitario.appendChild(document.createTextNode(detalletransferencia.getcosto_unitario().toString().trim()));
		element.appendChild(elementcosto_unitario);

		Element elementcosto_total = document.createElement(DetalleTransferenciaConstantesFunciones.COSTOTOTAL);
		elementcosto_total.appendChild(document.createTextNode(detalletransferencia.getcosto_total().toString().trim()));
		element.appendChild(elementcosto_total);

		Element elementdisponible = document.createElement(DetalleTransferenciaConstantesFunciones.DISPONIBLE);
		elementdisponible.appendChild(document.createTextNode(detalletransferencia.getdisponible().toString().trim()));
		element.appendChild(elementdisponible);

		Element elementlote = document.createElement(DetalleTransferenciaConstantesFunciones.LOTE);
		elementlote.appendChild(document.createTextNode(detalletransferencia.getlote().trim()));
		element.appendChild(elementlote);

		Element elementfecha_elaboracion_lote = document.createElement(DetalleTransferenciaConstantesFunciones.FECHAELABORACIONLOTE);
		elementfecha_elaboracion_lote.appendChild(document.createTextNode(detalletransferencia.getfecha_elaboracion_lote().toString().trim()));
		element.appendChild(elementfecha_elaboracion_lote);

		Element elementfecha_caducidad_lote = document.createElement(DetalleTransferenciaConstantesFunciones.FECHACADUCIDADLOTE);
		elementfecha_caducidad_lote.appendChild(document.createTextNode(detalletransferencia.getfecha_caducidad_lote().toString().trim()));
		element.appendChild(elementfecha_caducidad_lote);

		Element elementnumero_comprobante = document.createElement(DetalleTransferenciaConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(detalletransferencia.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementlote_cliente = document.createElement(DetalleTransferenciaConstantesFunciones.LOTECLIENTE);
		elementlote_cliente.appendChild(document.createTextNode(detalletransferencia.getlote_cliente().trim()));
		element.appendChild(elementlote_cliente);
	}
	
	public void generarReporteGroupGenericoDetalleTransferenciasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados=new ArrayList<DetalleTransferencia>();
		
		detalletransferenciasSeleccionados=this.getDetalleTransferenciasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleTransferencia(detalletransferenciasSeleccionados);
		
		this.generarReporteDetalleTransferencias("Todos",detalletransferenciasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleTransferencia(ArrayList<DetalleTransferencia> detalletransferenciasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleTransferencia detalletransferenciaAux:detalletransferenciasSeleccionados) {
				detalletransferenciaAux.setsDetalleGeneralEntityReporte(detalletransferenciaAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDTRANSFERENCIA)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.gettransferencia_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDBODEGAENVIAR)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getbodegaenviar_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDNOVEDADPRODUCTO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getnovedadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getestadodetalleinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_DISPONIBLE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getdisponible().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getlote());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalletransferenciaAux.getfecha_elaboracion_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detalletransferenciaAux.getfecha_caducidad_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(DetalleTransferenciaConstantesFunciones.LABEL_LOTECLIENTE)) {
					existe=true;
					detalletransferenciaAux.setsDescripcionGeneralEntityReporte1(detalletransferenciaAux.getlote_cliente());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleTransferenciaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleTransferencia(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleTransferencia=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=true;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=true;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=true;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=true;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=true;
			this.isVisibilidadCeldaModificarDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
			this.isVisibilidadCeldaModificarDetalleTransferencia=true;
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
			this.isVisibilidadCeldaCancelarDetalleTransferencia=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleTransferencia=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleTransferenciaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleTransferencia=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=true;
		} else {
			this.actualizarEstadoPanelsDetalleTransferencia(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleTransferencia=false;
			//this.isVisibilidadCeldaVerFormDetalleTransferencia=false;
			this.isVisibilidadCeldaDuplicarDetalleTransferencia=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detalletransferenciaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleTransferencia=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleTransferencia=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			if(!detalletransferenciaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;												
			}
			
			this.jButtonCerrarDetalleTransferencia.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleTransferencia=false;
		}
		
		if(!this.permiteMantenimiento(this.detalletransferencia)) {
			this.isVisibilidadCeldaActualizarDetalleTransferencia=false;
			this.isVisibilidadCeldaEliminarDetalleTransferencia=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleTransferencia() {
	}
	
	public void actualizarEstadoPanelsDetalleTransferencia(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleTransferencia!=null) {
				this.jScrollPanelDatosEdicionDetalleTransferencia.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleTransferencia!=null) {
				this.jScrollPanelDatosDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleTransferencia!=null) {
				this.jPanelPaginacionDetalleTransferencia.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
					this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detalletransferenciaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleTransferencia!=null) {
				this.jTabbedPaneBusquedasDetalleTransferencia.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesDetalleTransferencia!=null) {
				this.jPanelParametrosReportesDetalleTransferencia.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaTransferencia(Boolean isParaTransferencia){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaTransferenciaNegation=!isParaTransferencia;

			this.isVisibilidadFK_IdBodega=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaTransferencia;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaTransferenciaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaBodegaEnviar(Boolean isParaBodegaEnviar){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaEnviarNegation=!isParaBodegaEnviar;

			this.isVisibilidadFK_IdBodega=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaBodegaEnviar;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaEnviarNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaNovedadProducto(Boolean isParaNovedadProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaNovedadProductoNegation=!isParaNovedadProducto;

			this.isVisibilidadFK_IdBodega=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaNovedadProducto;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEstadoDetalleInventario(Boolean isParaEstadoDetalleInventario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoDetalleInventarioNegation=!isParaEstadoDetalleInventario;

			this.isVisibilidadFK_IdBodega=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaDetalleTransferencia);}

			this.isVisibilidadFK_IdBodegaEnviar=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdBodegaEnviar) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdBodegaEnviarDetalleTransferencia);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEstadoDetalleInventario;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdNovedadProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdProducto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdProductoDetalleTransferencia);}

			this.isVisibilidadFK_IdTransferencia=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdTransferencia) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdTransferenciaDetalleTransferencia);}

			this.isVisibilidadFK_IdUnidad=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleTransferencia.remove(jPanelFK_IdUnidadDetalleTransferencia);}
		}
		*/
	}
	
	
	
	

	public String registrarSesionDetalleTransferenciaParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detalletransferenciaSessionBean==null) {
				detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detalletransferenciaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detalletransferenciaFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleTransferenciaConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleTransferencia(true);
			//productoSessionBean.setlidDetalleTransferenciaActual(this.idDetalleTransferenciaActual);

			detalletransferenciaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleTransferencia(true);
			detalletransferenciaSessionBean.setlIdDetalleTransferenciaActualForeignKey(this.idDetalleTransferenciaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleTransferenciaSessionBean detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
		
		if(this.detalletransferenciaSessionBean==null) {
			this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
		}
		
		this.detalletransferenciaSessionBean.setsUltimaBusquedaDetalleTransferencia(this.getsAccionBusqueda());
		this.detalletransferenciaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detalletransferenciaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detalletransferenciaSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdBodegaEnviar")) {
			detalletransferenciaSessionBean.setid_bodega_enviar(this.getid_bodega_enviarFK_IdBodegaEnviar());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detalletransferenciaSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detalletransferenciaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleInventario")) {
			detalletransferenciaSessionBean.setid_estado_detalle_inventario(this.getid_estado_detalle_inventarioFK_IdEstadoDetalleInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
			detalletransferenciaSessionBean.setid_novedad_producto(this.getid_novedad_productoFK_IdNovedadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detalletransferenciaSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detalletransferenciaSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detalletransferenciaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransferencia")) {
			detalletransferenciaSessionBean.setid_transferencia(this.getid_transferenciaFK_IdTransferencia());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detalletransferenciaSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleTransferenciaSessionBean detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
		
		if(this.detalletransferenciaSessionBean==null) {
			this.detalletransferenciaSessionBean=new DetalleTransferenciaSessionBean();
		}
		
		if(this.detalletransferenciaSessionBean.getsUltimaBusquedaDetalleTransferencia()!=null&&!this.detalletransferenciaSessionBean.getsUltimaBusquedaDetalleTransferencia().equals("")) {
			this.setsAccionBusqueda(detalletransferenciaSessionBean.getsUltimaBusquedaDetalleTransferencia());
			this.setiNumeroPaginacion(detalletransferenciaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detalletransferenciaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detalletransferenciaSessionBean.getid_bodega());
				detalletransferenciaSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdBodegaEnviar")) {
				this.setid_bodega_enviarFK_IdBodegaEnviar(detalletransferenciaSessionBean.getid_bodega_enviar());
				detalletransferenciaSessionBean.setid_bodega_enviar(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detalletransferenciaSessionBean.getid_ejercicio());
				detalletransferenciaSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detalletransferenciaSessionBean.getid_empresa());
				detalletransferenciaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleInventario")) {
				this.setid_estado_detalle_inventarioFK_IdEstadoDetalleInventario(detalletransferenciaSessionBean.getid_estado_detalle_inventario());
				detalletransferenciaSessionBean.setid_estado_detalle_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
				this.setid_novedad_productoFK_IdNovedadProducto(detalletransferenciaSessionBean.getid_novedad_producto());
				detalletransferenciaSessionBean.setid_novedad_producto(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detalletransferenciaSessionBean.getid_periodo());
				detalletransferenciaSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detalletransferenciaSessionBean.getid_producto());
				detalletransferenciaSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detalletransferenciaSessionBean.getid_sucursal());
				detalletransferenciaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransferencia")) {
				this.setid_transferenciaFK_IdTransferencia(detalletransferenciaSessionBean.getid_transferencia());
				detalletransferenciaSessionBean.setid_transferencia(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detalletransferenciaSessionBean.getid_unidad());
				detalletransferenciaSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detalletransferenciaSessionBean.setsUltimaBusquedaDetalleTransferencia("");
		this.detalletransferenciaSessionBean.setiNumeroPaginacion(DetalleTransferenciaConstantesFunciones.INUMEROPAGINACION);
		this.detalletransferenciaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleTransferencia(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleTransferencia() {
		this.updateBorderResaltarBusquedasFormularioDetalleTransferencia();
		this.updateVisibilidadBusquedasFormularioDetalleTransferencia();
		this.updateHabilitarBusquedasFormularioDetalleTransferencia();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleTransferencia() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleTransferencia.getComponents().length>0) {
	

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdNovedadProductoDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdNovedadProductoDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdProductoDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdProductoDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdProductoDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdTransferenciaDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdTransferenciaDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdTransferenciaDetalleTransferencia);
			}
		}

		if(this.detalletransferenciaConstantesFunciones.resaltarFK_IdUnidadDetalleTransferencia!=null) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdUnidadDetalleTransferencia);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdUnidadDetalleTransferencia);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleTransferencia() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleTransferencia.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdBodegaDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdBodegaDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdBodegaEnviarDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdBodegaEnviarDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdEstadoDetalleInventarioDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdEstadoDetalleInventarioDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdNovedadProductoDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdNovedadProductoDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdProductoDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdProductoDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdProductoDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdTransferenciaDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdTransferenciaDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdTransferenciaDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdUnidadDetalleTransferencia);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detalletransferenciaConstantesFunciones.mostrarFK_IdUnidadDetalleTransferencia);
			if(!this.detalletransferenciaConstantesFunciones.mostrarFK_IdUnidadDetalleTransferencia && index>-1) {
				this.jTabbedPaneBusquedasDetalleTransferencia.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioDetalleTransferencia() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleTransferencia.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdBodegaDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdBodegaDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdBodegaEnviarDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdBodegaEnviarDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdEstadoDetalleInventarioDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdEstadoDetalleInventarioDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdNovedadProductoDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdNovedadProductoDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdProductoDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdProductoDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdProductoDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdTransferenciaDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdTransferenciaDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdTransferenciaDetalleTransferencia);
			}

			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdUnidadDetalleTransferencia);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detalletransferenciaConstantesFunciones.activarFK_IdUnidadDetalleTransferencia);
				this.jTabbedPaneBusquedasDetalleTransferencia.setEnabledAt(index,this.detalletransferenciaConstantesFunciones.activarFK_IdUnidadDetalleTransferencia);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaDetalleTransferencia(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdBodegaDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdBodegaEnviar")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdBodegaEnviarDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdBodegaEnviarDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdBodegaEnviarDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoDetalleInventario")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdEstadoDetalleInventarioDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNovedadProducto")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdNovedadProductoDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdNovedadProductoDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdProductoDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdProductoDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdProductoDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransferencia")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdTransferenciaDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdTransferenciaDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdTransferenciaDetalleTransferencia);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleTransferencia.indexOfComponent(this.jPanelFK_IdUnidadDetalleTransferencia);

			this.jTabbedPaneBusquedasDetalleTransferencia.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleTransferencia.getComponent(index);

			this.detalletransferenciaConstantesFunciones.setResaltarFK_IdUnidadDetalleTransferencia(resaltar);

			jPanel.setBorder(this.detalletransferenciaConstantesFunciones.resaltarFK_IdUnidadDetalleTransferencia);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarDetalleTransferencia.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleTransferencia() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleTransferencia();
		this.updateVisibilidadResaltarControlesFormularioDetalleTransferencia();
		this.updateHabilitarResaltarControlesFormularioDetalleTransferencia();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleTransferencia() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detalletransferenciaConstantesFunciones.resaltaridDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltaridDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_transferenciaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_transferenciaDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_empresaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_empresaDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_sucursalDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_sucursalDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_ejercicioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_ejercicioDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_periodoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_periodoDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_anioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_anioDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_mesDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_mesDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_bodegaDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_bodegaDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_productoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_productoDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_unidadDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_unidadDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_bodega_enviarDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_bodega_enviarDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltardescripcionDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltardescripcionDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_novedad_productoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_novedad_productoDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarcantidadDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarcantidadDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltardescuentoDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddescuentoDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltardescuentoDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarcosto_unitarioDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarcosto_unitarioDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarcosto_totalDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarcosto_totalDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltardisponibleDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltardisponibleDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarloteDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarloteDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarfecha_elaboracion_loteDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarfecha_elaboracion_loteDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarfecha_caducidad_loteDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarfecha_caducidad_loteDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarnumero_comprobanteDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldnumero_comprobanteDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarnumero_comprobanteDetalleTransferencia);}
		if(this.detalletransferenciaConstantesFunciones.resaltarlote_clienteDetalleTransferencia!=null && this.jInternalFrameDetalleFormDetalleTransferencia!=null) {this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldlote_clienteDetalleTransferencia.setBorder(this.detalletransferenciaConstantesFunciones.resaltarlote_clienteDetalleTransferencia);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleTransferencia() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
	
		//this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostraridDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelidDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostraridDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_transferenciaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_transferenciaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_transferenciaDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_empresaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_empresaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_empresaDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_sucursalDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_sucursalDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_sucursalDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_ejercicioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_ejercicioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_ejercicioDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_periodoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_periodoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_periodoDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_anioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_anioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_anioDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_mesDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_mesDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_mesDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_bodegaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_bodegaDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_bodegaDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_productoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_productoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_productoDetalleTransferencia);
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_productoDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_unidadDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_unidadDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_unidadDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_bodega_enviarDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_bodega_enviarDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_bodega_enviarDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardescripcionDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPaneldescripcionDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardescripcionDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_novedad_productoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_novedad_productoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_novedad_productoDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_estado_detalle_inventarioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelid_estado_detalle_inventarioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarid_estado_detalle_inventarioDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcantidadDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelcantidadDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcantidadDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddescuentoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardescuentoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPaneldescuentoDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardescuentoDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcosto_unitarioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelcosto_unitarioDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcosto_unitarioDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcosto_totalDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelcosto_totalDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarcosto_totalDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardisponibleDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPaneldisponibleDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrardisponibleDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarloteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelloteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarloteDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarfecha_elaboracion_loteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelfecha_elaboracion_loteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarfecha_elaboracion_loteDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarfecha_caducidad_loteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelfecha_caducidad_loteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarfecha_caducidad_loteDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldnumero_comprobanteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarnumero_comprobanteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanelnumero_comprobanteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarnumero_comprobanteDetalleTransferencia);
		//this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldlote_clienteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarlote_clienteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jPanellote_clienteDetalleTransferencia.setVisible(this.detalletransferenciaConstantesFunciones.mostrarlote_clienteDetalleTransferencia);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleTransferencia() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleTransferencia==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleTransferencia!=null) {
	
		this.jInternalFrameDetalleFormDetalleTransferencia.jLabelidDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activaridDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_transferenciaDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_transferenciaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_empresaDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_empresaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_sucursalDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_sucursalDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_ejercicioDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_ejercicioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_periodoDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_periodoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_anioDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_anioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_mesDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_mesDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodegaDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_bodegaDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_productoDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_productoDetalleTransferencia);
			this.jInternalFrameDetalleFormDetalleTransferencia.jButtonid_productoDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_productoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_unidadDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_unidadDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_bodega_enviarDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_bodega_enviarDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextAreadescripcionDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activardescripcionDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_novedad_productoDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_novedad_productoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jComboBoxid_estado_detalle_inventarioDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarid_estado_detalle_inventarioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcantidadDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarcantidadDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddescuentoDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activardescuentoDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_unitarioDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarcosto_unitarioDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldcosto_totalDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarcosto_totalDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFielddisponibleDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activardisponibleDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldloteDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarloteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_elaboracion_loteDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarfecha_elaboracion_loteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jDateChooserfecha_caducidad_loteDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarfecha_caducidad_loteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldnumero_comprobanteDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarnumero_comprobanteDetalleTransferencia);
		this.jInternalFrameDetalleFormDetalleTransferencia.jTextFieldlote_clienteDetalleTransferencia.setEnabled(this.detalletransferenciaConstantesFunciones.activarlote_clienteDetalleTransferencia);
		}
	}
	
		
}