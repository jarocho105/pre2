/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.ProductoCuentaContableConstantesFunciones;
import com.bydan.erp.inventario.util.ProductoCuentaContableParameterReturnGeneral;
//import com.bydan.erp.inventario.util.ProductoCuentaContableParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.ProductoCuentaContableBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ProductoCuentaContableBeanSwingJInternalFrame extends ProductoCuentaContableJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ProductoCuentaContableBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ProductoCuentaContable> productocuentacontableValidator = new ClassValidator<ProductoCuentaContable>(ProductoCuentaContable.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ProductoCuentaContable productocuentacontable;	
	public ProductoCuentaContable productocuentacontableAux;
	public ProductoCuentaContable productocuentacontableAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ProductoCuentaContable productocuentacontableTotales;
	public Long idProductoCuentaContableActual;
	public Long iIdNuevoProductoCuentaContable=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventario="";

	public List<CuentaContable> cuentacontableinventariosForeignKey;

	public List<CuentaContable> getcuentacontableinventariosForeignKey() {
		return cuentacontableinventariosForeignKey;
	}

	public void setcuentacontableinventariosForeignKey(List<CuentaContable> cuentacontableinventariosForeignKey) {
		this.cuentacontableinventariosForeignKey = cuentacontableinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventarioForeignKey;

	public CuentaContable getcuentacontableinventarioForeignKey() {
		return cuentacontableinventarioForeignKey;
	}

	public void setcuentacontableinventarioForeignKey(CuentaContable cuentacontableinventarioForeignKey) {
		this.cuentacontableinventarioForeignKey = cuentacontableinventarioForeignKey;
	}

	public String sFinalQueryComboCuentaContableCosto="";

	public List<CuentaContable> cuentacontablecostosForeignKey;

	public List<CuentaContable> getcuentacontablecostosForeignKey() {
		return cuentacontablecostosForeignKey;
	}

	public void setcuentacontablecostosForeignKey(List<CuentaContable> cuentacontablecostosForeignKey) {
		this.cuentacontablecostosForeignKey = cuentacontablecostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoForeignKey;

	public CuentaContable getcuentacontablecostoForeignKey() {
		return cuentacontablecostoForeignKey;
	}

	public void setcuentacontablecostoForeignKey(CuentaContable cuentacontablecostoForeignKey) {
		this.cuentacontablecostoForeignKey = cuentacontablecostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableVenta="";

	public List<CuentaContable> cuentacontableventasForeignKey;

	public List<CuentaContable> getcuentacontableventasForeignKey() {
		return cuentacontableventasForeignKey;
	}

	public void setcuentacontableventasForeignKey(List<CuentaContable> cuentacontableventasForeignKey) {
		this.cuentacontableventasForeignKey = cuentacontableventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableventaForeignKey;

	public CuentaContable getcuentacontableventaForeignKey() {
		return cuentacontableventaForeignKey;
	}

	public void setcuentacontableventaForeignKey(CuentaContable cuentacontableventaForeignKey) {
		this.cuentacontableventaForeignKey = cuentacontableventaForeignKey;
	}

	public String sFinalQueryComboCuentaContableDescuento="";

	public List<CuentaContable> cuentacontabledescuentosForeignKey;

	public List<CuentaContable> getcuentacontabledescuentosForeignKey() {
		return cuentacontabledescuentosForeignKey;
	}

	public void setcuentacontabledescuentosForeignKey(List<CuentaContable> cuentacontabledescuentosForeignKey) {
		this.cuentacontabledescuentosForeignKey = cuentacontabledescuentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledescuentoForeignKey;

	public CuentaContable getcuentacontabledescuentoForeignKey() {
		return cuentacontabledescuentoForeignKey;
	}

	public void setcuentacontabledescuentoForeignKey(CuentaContable cuentacontabledescuentoForeignKey) {
		this.cuentacontabledescuentoForeignKey = cuentacontabledescuentoForeignKey;
	}

	public String sFinalQueryComboCuentaContableDevolucion="";

	public List<CuentaContable> cuentacontabledevolucionsForeignKey;

	public List<CuentaContable> getcuentacontabledevolucionsForeignKey() {
		return cuentacontabledevolucionsForeignKey;
	}

	public void setcuentacontabledevolucionsForeignKey(List<CuentaContable> cuentacontabledevolucionsForeignKey) {
		this.cuentacontabledevolucionsForeignKey = cuentacontabledevolucionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledevolucionForeignKey;

	public CuentaContable getcuentacontabledevolucionForeignKey() {
		return cuentacontabledevolucionForeignKey;
	}

	public void setcuentacontabledevolucionForeignKey(CuentaContable cuentacontabledevolucionForeignKey) {
		this.cuentacontabledevolucionForeignKey = cuentacontabledevolucionForeignKey;
	}

	public String sFinalQueryComboCuentaContableDebito="";

	public List<CuentaContable> cuentacontabledebitosForeignKey;

	public List<CuentaContable> getcuentacontabledebitosForeignKey() {
		return cuentacontabledebitosForeignKey;
	}

	public void setcuentacontabledebitosForeignKey(List<CuentaContable> cuentacontabledebitosForeignKey) {
		this.cuentacontabledebitosForeignKey = cuentacontabledebitosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledebitoForeignKey;

	public CuentaContable getcuentacontabledebitoForeignKey() {
		return cuentacontabledebitoForeignKey;
	}

	public void setcuentacontabledebitoForeignKey(CuentaContable cuentacontabledebitoForeignKey) {
		this.cuentacontabledebitoForeignKey = cuentacontabledebitoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCredito="";

	public List<CuentaContable> cuentacontablecreditosForeignKey;

	public List<CuentaContable> getcuentacontablecreditosForeignKey() {
		return cuentacontablecreditosForeignKey;
	}

	public void setcuentacontablecreditosForeignKey(List<CuentaContable> cuentacontablecreditosForeignKey) {
		this.cuentacontablecreditosForeignKey = cuentacontablecreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoForeignKey;

	public CuentaContable getcuentacontablecreditoForeignKey() {
		return cuentacontablecreditoForeignKey;
	}

	public void setcuentacontablecreditoForeignKey(CuentaContable cuentacontablecreditoForeignKey) {
		this.cuentacontablecreditoForeignKey = cuentacontablecreditoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoProductoCuentaContable;
	public Boolean isPermisoNuevoProductoCuentaContable;
	public Boolean isPermisoActualizarProductoCuentaContable;
	public Boolean isPermisoActualizarOriginalProductoCuentaContable;
	public Boolean isPermisoEliminarProductoCuentaContable;
	public Boolean isPermisoGuardarCambiosProductoCuentaContable;
	public Boolean isPermisoConsultaProductoCuentaContable;
	public Boolean isPermisoBusquedaProductoCuentaContable;
	public Boolean isPermisoReporteProductoCuentaContable;
	public Boolean isPermisoPaginacionMedioProductoCuentaContable;
	public Boolean isPermisoPaginacionAltoProductoCuentaContable;
	public Boolean isPermisoPaginacionTodoProductoCuentaContable;
	public Boolean isPermisoCopiarProductoCuentaContable;
	public Boolean isPermisoVerFormProductoCuentaContable;
	public Boolean isPermisoDuplicarProductoCuentaContable;
	public Boolean isPermisoOrdenProductoCuentaContable;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ProductoCuentaContableParameterReturnGeneral productocuentacontableReturnGeneral;
	public ProductoCuentaContableParameterReturnGeneral productocuentacontableParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoProductoCuentaContable=false;
	public Boolean esParaAccionDesdeFormularioProductoCuentaContable=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ProductoCuentaContableSessionBeanAdditional productocuentacontableSessionBeanAdditional=null;
	
	public ProductoCuentaContableSessionBeanAdditional getProductoCuentaContableSessionBeanAdditional() {
		return this.productocuentacontableSessionBeanAdditional;
	}
	
	public void setProductoCuentaContableSessionBeanAdditional(ProductoCuentaContableSessionBeanAdditional productocuentacontableSessionBeanAdditional) {
		try {
			this.productocuentacontableSessionBeanAdditional=productocuentacontableSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ProductoCuentaContableBeanSwingJInternalFrameAdditional productocuentacontableBeanSwingJInternalFrameAdditional=null;
	//public class ProductoCuentaContableBeanSwingJInternalFrame
	
	public ProductoCuentaContableBeanSwingJInternalFrameAdditional getProductoCuentaContableBeanSwingJInternalFrameAdditional() {
		return this.productocuentacontableBeanSwingJInternalFrameAdditional;
	}
	
	public void setProductoCuentaContableBeanSwingJInternalFrameAdditional(ProductoCuentaContableBeanSwingJInternalFrameAdditional productocuentacontableBeanSwingJInternalFrameAdditional) {
		try {
			this.productocuentacontableBeanSwingJInternalFrameAdditional=productocuentacontableBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ProductoCuentaContableLogic productocuentacontableLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ProductoCuentaContable productocuentacontableBean;
	public ProductoCuentaContableConstantesFunciones productocuentacontableConstantesFunciones;
	//public ProductoCuentaContableParameterReturnGeneral productocuentacontableReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public CentroCostoLogic centrocostoLogic;
	public CuentaContableLogic cuentacontableinventarioLogic;
	public CuentaContableLogic cuentacontablecostoLogic;
	public CuentaContableLogic cuentacontableventaLogic;
	public CuentaContableLogic cuentacontabledescuentoLogic;
	public CuentaContableLogic cuentacontabledevolucionLogic;
	public CuentaContableLogic cuentacontabledebitoLogic;
	public CuentaContableLogic cuentacontablecreditoLogic;
	
	//PARAMETROS
	
	
	//public List<ProductoCuentaContable> productocuentacontables;	
	//public List<ProductoCuentaContable> productocuentacontablesEliminados;
	//public List<ProductoCuentaContable> productocuentacontablesAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaDuplicarProductoCuentaContable=true;
	public Boolean isVisibilidadCeldaCopiarProductoCuentaContable=true;
	public Boolean isVisibilidadCeldaVerFormProductoCuentaContable=true;
	public Boolean isVisibilidadCeldaOrdenProductoCuentaContable=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaModificarProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaActualizarProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaEliminarProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaCancelarProductoCuentaContable=false;
	public Boolean isVisibilidadCeldaGuardarProductoCuentaContable=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;	
	
	
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableCosto=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableDebito=false;
	public Boolean isVisibilidadFK_IdCuentaContableDescuento=false;
	public Boolean isVisibilidadFK_IdCuentaContableDevolucion=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventario=false;
	public Boolean isVisibilidadFK_IdCuentaContableVenta=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	
	public Long getiIdNuevoProductoCuentaContable() {
		return this.iIdNuevoProductoCuentaContable;
	}

	public void setiIdNuevoProductoCuentaContable(Long iIdNuevoProductoCuentaContable) {
		this.iIdNuevoProductoCuentaContable = iIdNuevoProductoCuentaContable;
	}
	
	public Long getidProductoCuentaContableActual() {
		return this.idProductoCuentaContableActual;
	}

	public void setidProductoCuentaContableActual(Long idProductoCuentaContableActual) {
		this.idProductoCuentaContableActual = idProductoCuentaContableActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ProductoCuentaContable getproductocuentacontable() {
		return this.productocuentacontable;
	}

	public void setproductocuentacontable(ProductoCuentaContable productocuentacontable) {
		this.productocuentacontable = productocuentacontable;
	}
	
	public ProductoCuentaContable getproductocuentacontableAux() {
		return this.productocuentacontableAux;
	}

	public void setproductocuentacontableAux(ProductoCuentaContable productocuentacontableAux) {
		this.productocuentacontableAux = productocuentacontableAux;
	}				
	
	public ProductoCuentaContable getproductocuentacontableAnterior() {
		return this.productocuentacontableAnterior;
	}

	public void setproductocuentacontableAnterior(ProductoCuentaContable productocuentacontableAnterior) {
		this.productocuentacontableAnterior = productocuentacontableAnterior;
	}	
	
	public ProductoCuentaContable getproductocuentacontableTotales() {
		return this.productocuentacontableTotales;
	}

	public void setproductocuentacontableTotales(ProductoCuentaContable productocuentacontableTotales) {
		this.productocuentacontableTotales = productocuentacontableTotales;
	}	
	
	public ProductoCuentaContable getproductocuentacontableBean() {
		return this.productocuentacontableBean;
	}

	public void setproductocuentacontableBean(ProductoCuentaContable productocuentacontableBean) {
		this.productocuentacontableBean = productocuentacontableBean;
	}	
	
	public ProductoCuentaContableParameterReturnGeneral getproductocuentacontableReturnGeneral() {
		return this.productocuentacontableReturnGeneral;
	}

	public void setproductocuentacontableReturnGeneral(ProductoCuentaContableParameterReturnGeneral productocuentacontableReturnGeneral) {
		this.productocuentacontableReturnGeneral = productocuentacontableReturnGeneral;
	}	
	
	
	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_cuenta_contable_costoFK_IdCuentaContableCosto=-1L;

	public Long getid_cuenta_contable_costoFK_IdCuentaContableCosto() {
		return this.id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public void setid_cuenta_contable_costoFK_IdCuentaContableCosto(Long id_cuenta_contable_costoFK_IdCuentaContableCosto) {
		this.id_cuenta_contable_costoFK_IdCuentaContableCosto = id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public Long id_cuenta_contable_creditoFK_IdCuentaContableCredito=-1L;

	public Long getid_cuenta_contable_creditoFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_creditoFK_IdCuentaContableCredito(Long id_cuenta_contable_creditoFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_creditoFK_IdCuentaContableCredito = id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_debitoFK_IdCuentaContableDebito=-1L;

	public Long getid_cuenta_contable_debitoFK_IdCuentaContableDebito() {
		return this.id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public void setid_cuenta_contable_debitoFK_IdCuentaContableDebito(Long id_cuenta_contable_debitoFK_IdCuentaContableDebito) {
		this.id_cuenta_contable_debitoFK_IdCuentaContableDebito = id_cuenta_contable_debitoFK_IdCuentaContableDebito;
	}

	public Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento=-1L;

	public Long getid_cuenta_contable_descuentoFK_IdCuentaContableDescuento() {
		return this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public void setid_cuenta_contable_descuentoFK_IdCuentaContableDescuento(Long id_cuenta_contable_descuentoFK_IdCuentaContableDescuento) {
		this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento = id_cuenta_contable_descuentoFK_IdCuentaContableDescuento;
	}

	public Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion=-1L;

	public Long getid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion() {
		return this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public void setid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion(Long id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion) {
		this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion = id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion;
	}

	public Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario=-1L;

	public Long getid_cuenta_contable_inventarioFK_IdCuentaContableInventario() {
		return this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public void setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario) {
		this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario = id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public Long id_cuenta_contable_ventaFK_IdCuentaContableVenta=-1L;

	public Long getid_cuenta_contable_ventaFK_IdCuentaContableVenta() {
		return this.id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public void setid_cuenta_contable_ventaFK_IdCuentaContableVenta(Long id_cuenta_contable_ventaFK_IdCuentaContableVenta) {
		this.id_cuenta_contable_ventaFK_IdCuentaContableVenta = id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ProductoCuentaContableLogic getProductoCuentaContableLogic()	{		
		return productocuentacontableLogic;
	}

	public void setProductoCuentaContableLogic(ProductoCuentaContableLogic productocuentacontableLogic) {
		this.productocuentacontableLogic = productocuentacontableLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoProductoCuentaContable() {
		return isEsNuevoProductoCuentaContable;
	}

	public void setIsEsNuevoProductoCuentaContable(Boolean isEsNuevoProductoCuentaContable) {
		this.isEsNuevoProductoCuentaContable = isEsNuevoProductoCuentaContable;
	}

	public Boolean getEsParaAccionDesdeFormularioProductoCuentaContable() {
		return esParaAccionDesdeFormularioProductoCuentaContable;
	}
	
	public void setEsParaAccionDesdeFormularioProductoCuentaContable(Boolean esParaAccionDesdeFormularioProductoCuentaContable) {
		this.esParaAccionDesdeFormularioProductoCuentaContable = esParaAccionDesdeFormularioProductoCuentaContable;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventarioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventariosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableInventarioActual());
					this.cuentacontableinventariosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableCostoActual());
					this.cuentacontablecostosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableVentaActual());
					this.cuentacontableventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDescuentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledescuentoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledescuentosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDescuento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableDescuentoActual());
					this.cuentacontabledescuentosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDevolucionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledevolucionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledevolucionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDevolucion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableDevolucionActual());
					this.cuentacontabledevolucionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDebitosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledebitoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledebitosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDebito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableDebitoActual());
					this.cuentacontabledebitosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(productocuentacontableSessionBean.getlidCuentaContableCreditoActual());
					this.cuentacontablecreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaProductoCuentaContable.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaProductoCuentaContableGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaProductoCuentaContableGenerico!=null && jComboBoxid_empresaProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_empresaProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalProductoCuentaContable.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalProductoCuentaContableGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalProductoCuentaContableGenerico!=null && jComboBoxid_sucursalProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_sucursalProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaProductoCuentaContable.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable!=null) {
						jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable!=null) {
							//jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaProductoCuentaContableGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaProductoCuentaContableGenerico!=null && jComboBoxid_bodegaProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_bodegaProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoProductoCuentaContable.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoProductoCuentaContable!=null) {
						jComboBoxid_productoFK_IdProductoProductoCuentaContable.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoProductoCuentaContable!=null) {
							//jComboBoxid_productoFK_IdProductoProductoCuentaContable.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoProductoCuentaContableGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoProductoCuentaContableGenerico!=null && jComboBoxid_productoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_productoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoProductoCuentaContable.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoProductoCuentaContableGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoProductoCuentaContableGenerico!=null && jComboBoxid_centro_costoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioForeignKey(Long idCuentaContableInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventarioTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableInventario(cuentacontableinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedItem(cuentacontableinventarioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedItem(cuentacontableinventarioTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableinventarioTemp!=null && jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.setSelectedItem(cuentacontableinventarioTemp);
					} else {
						if(jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.setSelectedItem(cuentacontableinventarioTemp);
							if(jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioForeignKeyDescripcion(Long idCuentaContableInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioForeignKeyGenerico(Long idCuentaContableInventarioSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(cuentacontableinventarioTemp!=null) {
				jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico.setSelectedItem(cuentacontableinventarioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoForeignKey(Long idCuentaContableCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableCosto(cuentacontablecostoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedItem(cuentacontablecostoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedItem(cuentacontablecostoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecostoTemp!=null && jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.setSelectedItem(cuentacontablecostoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.setSelectedItem(cuentacontablecostoTemp);
							if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoForeignKeyDescripcion(Long idCuentaContableCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoForeignKeyGenerico(Long idCuentaContableCostoSeleccionado,JComboBox jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(cuentacontablecostoTemp!=null) {
				jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico.setSelectedItem(cuentacontablecostoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableVentaForeignKey(Long idCuentaContableVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableventaTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableVenta(cuentacontableventaTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedItem(cuentacontableventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedItem(cuentacontableventaTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableventaTemp!=null && jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.setSelectedItem(cuentacontableventaTemp);
					} else {
						if(jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.setSelectedItem(cuentacontableventaTemp);
							if(jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableVentaForeignKeyDescripcion(Long idCuentaContableVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableVentaForeignKeyGenerico(Long idCuentaContableVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(cuentacontableventaTemp!=null) {
				jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico.setSelectedItem(cuentacontableventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDescuentoForeignKey(Long idCuentaContableDescuentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledescuentoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableDescuento(cuentacontabledescuentoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuentoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuentoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDescuento") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontabledescuentoTemp!=null && jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuentoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuentoTemp);
							if(jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDescuentoForeignKeyDescripcion(Long idCuentaContableDescuentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledescuentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDescuentoForeignKeyGenerico(Long idCuentaContableDescuentoSeleccionado,JComboBox jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledescuentoTemp=null;

			for(CuentaContable cuentacontabledescuentoAux:cuentacontabledescuentosForeignKey) {
				if(cuentacontabledescuentoAux.getId()!=null && cuentacontabledescuentoAux.getId().equals(idCuentaContableDescuentoSeleccionado)) {
					cuentacontabledescuentoTemp=cuentacontabledescuentoAux;
					break;
				}
			}

			if(cuentacontabledescuentoTemp!=null) {
				jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico.setSelectedItem(cuentacontabledescuentoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDevolucionForeignKey(Long idCuentaContableDevolucionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledevolucionTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableDevolucion(cuentacontabledevolucionTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucionTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDevolucion") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontabledevolucionTemp!=null && jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucionTemp);
					} else {
						if(jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucionTemp);
							if(jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDevolucionForeignKeyDescripcion(Long idCuentaContableDevolucionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledevolucionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDevolucionForeignKeyGenerico(Long idCuentaContableDevolucionSeleccionado,JComboBox jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledevolucionTemp=null;

			for(CuentaContable cuentacontabledevolucionAux:cuentacontabledevolucionsForeignKey) {
				if(cuentacontabledevolucionAux.getId()!=null && cuentacontabledevolucionAux.getId().equals(idCuentaContableDevolucionSeleccionado)) {
					cuentacontabledevolucionTemp=cuentacontabledevolucionAux;
					break;
				}
			}

			if(cuentacontabledevolucionTemp!=null) {
				jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico.setSelectedItem(cuentacontabledevolucionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDebitoForeignKey(Long idCuentaContableDebitoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledebitoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableDebito(cuentacontabledebitoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDebito") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontabledebitoTemp!=null && jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.setSelectedItem(cuentacontabledebitoTemp);
							if(jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDebitoForeignKeyDescripcion(Long idCuentaContableDebitoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledebitoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDebitoForeignKeyGenerico(Long idCuentaContableDebitoSeleccionado,JComboBox jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledebitoTemp=null;

			for(CuentaContable cuentacontabledebitoAux:cuentacontabledebitosForeignKey) {
				if(cuentacontabledebitoAux.getId()!=null && cuentacontabledebitoAux.getId().equals(idCuentaContableDebitoSeleccionado)) {
					cuentacontabledebitoTemp=cuentacontabledebitoAux;
					break;
				}
			}

			if(cuentacontabledebitoTemp!=null) {
				jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico.setSelectedItem(cuentacontabledebitoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoForeignKey(Long idCuentaContableCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoTemp!=null) {

					if(this.productocuentacontable!=null) {
						this.productocuentacontable.setCuentaContableCredito(cuentacontablecreditoTemp);
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.getItemCount()>0) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCredito") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditoTemp!=null && jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable!=null) {
						jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable!=null) {
							//jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.setSelectedItem(cuentacontablecreditoTemp);
							if(jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.getItemCount()>0) {
								jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoForeignKeyDescripcion(Long idCuentaContableCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoForeignKeyGenerico(Long idCuentaContableCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(cuentacontablecreditoTemp!=null) {
				jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico.setSelectedItem(cuentacontablecreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico!=null && jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_empresaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaProductoCuentaContableGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaProductoCuentaContableGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				productocuentacontable.setid_empresa(empresaAux.getId());
				productocuentacontable.setempresa_descripcion(ProductoCuentaContableConstantesFunciones.getEmpresaDescripcion(empresaAux));
				productocuentacontable.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_sucursalProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalProductoCuentaContableGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalProductoCuentaContableGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				productocuentacontable.setid_sucursal(sucursalAux.getId());
				productocuentacontable.setsucursal_descripcion(ProductoCuentaContableConstantesFunciones.getSucursalDescripcion(sucursalAux));
				productocuentacontable.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_bodegaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaProductoCuentaContableGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaProductoCuentaContableGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				productocuentacontable.setid_bodega(bodegaAux.getId());
				productocuentacontable.setbodega_descripcion(ProductoCuentaContableConstantesFunciones.getBodegaDescripcion(bodegaAux));
				productocuentacontable.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_productoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoProductoCuentaContableGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				productocuentacontable.setid_producto(productoAux.getId());
				productocuentacontable.setproducto_descripcion(ProductoCuentaContableConstantesFunciones.getProductoDescripcion(productoAux));
				productocuentacontable.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_centro_costoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoProductoCuentaContableGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				productocuentacontable.setid_centro_costo(centrocostoAux.getId());
				productocuentacontable.setcentrocosto_descripcion(ProductoCuentaContableConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				productocuentacontable.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventarioProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_inventario(cuentacontableAux.getId());
				productocuentacontable.setcuentacontableinventario_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableInventarioDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableInventario(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_costo(cuentacontableAux.getId());
				productocuentacontable.setcuentacontablecosto_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableCostoDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableCosto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableVentaForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_ventaProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_venta(cuentacontableAux.getId());
				productocuentacontable.setcuentacontableventa_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableVentaDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDescuentoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_descuentoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_descuento(cuentacontableAux.getId());
				productocuentacontable.setcuentacontabledescuento_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableDescuentoDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableDescuento(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDevolucionForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_devolucionProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_devolucion(cuentacontableAux.getId());
				productocuentacontable.setcuentacontabledevolucion_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableDevolucionDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableDevolucion(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDebitoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_debitoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_debito(cuentacontableAux.getId());
				productocuentacontable.setcuentacontabledebito_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableDebitoDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableDebito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoForeignKey(ProductoCuentaContable productocuentacontable,JComboBox jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_creditoProductoCuentaContableGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				productocuentacontable.setid_cuenta_contable_credito(cuentacontableAux.getId());
				productocuentacontable.setcuentacontablecredito_descripcion(ProductoCuentaContableConstantesFunciones.getCuentaContableCreditoDescripcion(cuentacontableAux));
				productocuentacontable.setCuentaContableCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.addItem(bodega);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.addItem(producto);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.addItem(centrocosto);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.addItem(cuentacontableinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.addItem(cuentacontableinventario);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.addItem(cuentacontablecosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.addItem(cuentacontablecosto);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.addItem(cuentacontableventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.addItem(cuentacontableventa);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDescuentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledescuento:this.cuentacontabledescuentosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.addItem(cuentacontabledescuento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDescuento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledescuento:this.cuentacontabledescuentosForeignKey) {
								this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.addItem(cuentacontabledescuento);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDevolucionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledevolucion:this.cuentacontabledevolucionsForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.addItem(cuentacontabledevolucion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDevolucion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledevolucion:this.cuentacontabledevolucionsForeignKey) {
								this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.addItem(cuentacontabledevolucion);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDebitosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledebito:this.cuentacontabledebitosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.addItem(cuentacontabledebito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDebito") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontabledebito:this.cuentacontabledebitosForeignKey) {
								this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.addItem(cuentacontabledebito);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.addItem(cuentacontablecredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { 
					}

					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCredito") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.addItem(cuentacontablecredito);
							}
						}

						if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioForeignKey(CuentaContable cuentacontableinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedItem(cuentacontableinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.setSelectedItem(cuentacontableinventario);
						} else {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoForeignKey(CuentaContable cuentacontablecosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedItem(cuentacontablecosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.setSelectedItem(cuentacontablecosto);
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableVentaForeignKey(CuentaContable cuentacontableventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedItem(cuentacontableventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.setSelectedItem(cuentacontableventa);
						} else {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDescuentoForeignKey(CuentaContable cuentacontabledescuento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuento);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.setSelectedItem(cuentacontabledescuento);
						} else {
							this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDevolucionForeignKey(CuentaContable cuentacontabledevolucion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucion);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.setSelectedItem(cuentacontabledevolucion);
						} else {
							this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDebitoForeignKey(CuentaContable cuentacontabledebito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedItem(cuentacontabledebito);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.setSelectedItem(cuentacontabledebito);
						} else {
							this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoForeignKey(CuentaContable cuentacontablecredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedItem(cuentacontablecredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.setSelectedItem(cuentacontablecredito);
						} else {
							this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesProductoCuentaContable() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ProductoCuentaContableConstantesFunciones.refrescarForeignKeysDescripcionesProductoCuentaContable(this.productocuentacontableLogic.getProductoCuentaContables());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ProductoCuentaContableConstantesFunciones.refrescarForeignKeysDescripcionesProductoCuentaContable(this.productocuentacontables);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//productocuentacontableLogic.setProductoCuentaContables(this.productocuentacontables);
			productocuentacontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ProductoCuentaContableParameterReturnGeneral getProductoCuentaContableParameterGeneral() {
		return this.productocuentacontableParameterGeneral;
	}
	
	public void setProductoCuentaContableParameterGeneral(ProductoCuentaContableParameterReturnGeneral productocuentacontableParameterGeneral) {
		this.productocuentacontableParameterGeneral = productocuentacontableParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoProductoCuentaContable() {
		return isPermisoTodoProductoCuentaContable;
	}

	public void setIsPermisoTodoProductoCuentaContable(Boolean isPermisoTodoProductoCuentaContable) {
		this.isPermisoTodoProductoCuentaContable = isPermisoTodoProductoCuentaContable;
	}

	public Boolean getIsPermisoNuevoProductoCuentaContable() {
		return isPermisoNuevoProductoCuentaContable;
	}

	public void setIsPermisoNuevoProductoCuentaContable(Boolean isPermisoNuevoProductoCuentaContable) {
		this.isPermisoNuevoProductoCuentaContable = isPermisoNuevoProductoCuentaContable;
	}

	public Boolean getIsPermisoActualizarProductoCuentaContable() {
		return isPermisoActualizarProductoCuentaContable;
	}

	public void setIsPermisoActualizarProductoCuentaContable(Boolean isPermisoActualizarProductoCuentaContable) {
		this.isPermisoActualizarProductoCuentaContable = isPermisoActualizarProductoCuentaContable;
	}

	public Boolean getIsPermisoEliminarProductoCuentaContable() {
		return isPermisoEliminarProductoCuentaContable;
	}

	public void setIsPermisoEliminarProductoCuentaContable(Boolean isPermisoEliminarProductoCuentaContable) {
		this.isPermisoEliminarProductoCuentaContable = isPermisoEliminarProductoCuentaContable;
	}

	public Boolean getIsPermisoGuardarCambiosProductoCuentaContable() {
		return isPermisoGuardarCambiosProductoCuentaContable;
	}

	public void setIsPermisoGuardarCambiosProductoCuentaContable(Boolean isPermisoGuardarCambiosProductoCuentaContable) {
		this.isPermisoGuardarCambiosProductoCuentaContable = isPermisoGuardarCambiosProductoCuentaContable;
	}
	
	public Boolean getIsPermisoConsultaProductoCuentaContable() {
		return isPermisoConsultaProductoCuentaContable;
	}

	public void setIsPermisoConsultaProductoCuentaContable(Boolean isPermisoConsultaProductoCuentaContable) {
		this.isPermisoConsultaProductoCuentaContable = isPermisoConsultaProductoCuentaContable;
	}

	public Boolean getIsPermisoBusquedaProductoCuentaContable() {
		return isPermisoBusquedaProductoCuentaContable;
	}

	public void setIsPermisoBusquedaProductoCuentaContable(Boolean isPermisoBusquedaProductoCuentaContable) {
		this.isPermisoBusquedaProductoCuentaContable = isPermisoBusquedaProductoCuentaContable;
	}

	public Boolean getIsPermisoReporteProductoCuentaContable() {
		return isPermisoReporteProductoCuentaContable;
	}

	public void setIsPermisoReporteProductoCuentaContable(Boolean isPermisoReporteProductoCuentaContable) {
		this.isPermisoReporteProductoCuentaContable = isPermisoReporteProductoCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionMedioProductoCuentaContable() {
		return isPermisoPaginacionMedioProductoCuentaContable;
	}

	public void setIsPermisoPaginacionMedioProductoCuentaContable(Boolean isPermisoPaginacionMedioProductoCuentaContable) {
		this.isPermisoPaginacionMedioProductoCuentaContable = isPermisoPaginacionMedioProductoCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionTodoProductoCuentaContable() {
		return isPermisoPaginacionTodoProductoCuentaContable;
	}

	public void setIsPermisoPaginacionTodoProductoCuentaContable(Boolean isPermisoPaginacionTodoProductoCuentaContable) {
		this.isPermisoPaginacionTodoProductoCuentaContable = isPermisoPaginacionTodoProductoCuentaContable;
	}
	
	public Boolean getIsPermisoPaginacionAltoProductoCuentaContable() {
		return isPermisoPaginacionAltoProductoCuentaContable;
	}

	public void setIsPermisoPaginacionAltoProductoCuentaContable(Boolean isPermisoPaginacionAltoProductoCuentaContable) {
		this.isPermisoPaginacionAltoProductoCuentaContable = isPermisoPaginacionAltoProductoCuentaContable;
	}
	
	public Boolean getIsPermisoCopiarProductoCuentaContable() {
		return isPermisoCopiarProductoCuentaContable;
	}

	public void setIsPermisoCopiarProductoCuentaContable(Boolean isPermisoCopiarProductoCuentaContable) {
		this.isPermisoCopiarProductoCuentaContable = isPermisoCopiarProductoCuentaContable;
	}
	
	public Boolean getIsPermisoVerFormProductoCuentaContable() {
		return isPermisoVerFormProductoCuentaContable;
	}

	public void setIsPermisoVerFormProductoCuentaContable(Boolean isPermisoVerFormProductoCuentaContable) {
		this.isPermisoVerFormProductoCuentaContable = isPermisoVerFormProductoCuentaContable;
	}
	
	public Boolean getIsPermisoDuplicarProductoCuentaContable() {
		return isPermisoDuplicarProductoCuentaContable;
	}

	public void setIsPermisoDuplicarProductoCuentaContable(Boolean isPermisoDuplicarProductoCuentaContable) {
		this.isPermisoDuplicarProductoCuentaContable = isPermisoDuplicarProductoCuentaContable;
	}
	
	public Boolean getIsPermisoOrdenProductoCuentaContable() {
		return isPermisoOrdenProductoCuentaContable;
	}

	public void setIsPermisoOrdenProductoCuentaContable(Boolean isPermisoOrdenProductoCuentaContable) {
		this.isPermisoOrdenProductoCuentaContable = isPermisoOrdenProductoCuentaContable;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoProductoCuentaContable() {
		return isVisibilidadCeldaNuevoProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaNuevoProductoCuentaContable(Boolean isVisibilidadCeldaNuevoProductoCuentaContable) {
		this.isVisibilidadCeldaNuevoProductoCuentaContable = isVisibilidadCeldaNuevoProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarProductoCuentaContable() {
		return isVisibilidadCeldaDuplicarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaDuplicarProductoCuentaContable(Boolean isVisibilidadCeldaDuplicarProductoCuentaContable) {
		this.isVisibilidadCeldaDuplicarProductoCuentaContable = isVisibilidadCeldaDuplicarProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarProductoCuentaContable() {
		return isVisibilidadCeldaCopiarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaCopiarProductoCuentaContable(Boolean isVisibilidadCeldaCopiarProductoCuentaContable) {
		this.isVisibilidadCeldaCopiarProductoCuentaContable = isVisibilidadCeldaCopiarProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormProductoCuentaContable() {
		return isVisibilidadCeldaVerFormProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaVerFormProductoCuentaContable(Boolean isVisibilidadCeldaVerFormProductoCuentaContable) {
		this.isVisibilidadCeldaVerFormProductoCuentaContable = isVisibilidadCeldaVerFormProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenProductoCuentaContable() {
		return isVisibilidadCeldaOrdenProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaOrdenProductoCuentaContable(Boolean isVisibilidadCeldaOrdenProductoCuentaContable) {
		this.isVisibilidadCeldaOrdenProductoCuentaContable = isVisibilidadCeldaOrdenProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesProductoCuentaContable() {
		return isVisibilidadCeldaNuevoRelacionesProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesProductoCuentaContable(Boolean isVisibilidadCeldaNuevoRelacionesProductoCuentaContable) {
		this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable = isVisibilidadCeldaNuevoRelacionesProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaModificarProductoCuentaContable() {
		return isVisibilidadCeldaModificarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaModificarProductoCuentaContable(Boolean isVisibilidadCeldaModificarProductoCuentaContable) {
		this.isVisibilidadCeldaModificarProductoCuentaContable = isVisibilidadCeldaModificarProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarProductoCuentaContable() {
		return isVisibilidadCeldaActualizarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaActualizarProductoCuentaContable(Boolean isVisibilidadCeldaActualizarProductoCuentaContable) {
		this.isVisibilidadCeldaActualizarProductoCuentaContable = isVisibilidadCeldaActualizarProductoCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaEliminarProductoCuentaContable() {
		return isVisibilidadCeldaEliminarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaEliminarProductoCuentaContable(Boolean isVisibilidadCeldaEliminarProductoCuentaContable) {
		this.isVisibilidadCeldaEliminarProductoCuentaContable = isVisibilidadCeldaEliminarProductoCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaCancelarProductoCuentaContable() {
		return isVisibilidadCeldaCancelarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaCancelarProductoCuentaContable(Boolean isVisibilidadCeldaCancelarProductoCuentaContable) {
		this.isVisibilidadCeldaCancelarProductoCuentaContable = isVisibilidadCeldaCancelarProductoCuentaContable;
	}

	public Boolean getIsVisibilidadCeldaGuardarProductoCuentaContable() {
		return isVisibilidadCeldaGuardarProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaGuardarProductoCuentaContable(Boolean isVisibilidadCeldaGuardarProductoCuentaContable) {
		this.isVisibilidadCeldaGuardarProductoCuentaContable = isVisibilidadCeldaGuardarProductoCuentaContable;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosProductoCuentaContable() {
		return isVisibilidadCeldaGuardarCambiosProductoCuentaContable;
	}

	public void setIsVisibilidadCeldaGuardarCambiosProductoCuentaContable(Boolean isVisibilidadCeldaGuardarCambiosProductoCuentaContable) {
		this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable = isVisibilidadCeldaGuardarCambiosProductoCuentaContable;
	}
		
	public ProductoCuentaContableSessionBean getproductocuentacontableSessionBean() {
		return this.productocuentacontableSessionBean;
	}
	
	public void setproductocuentacontableSessionBean(ProductoCuentaContableSessionBean productocuentacontableSessionBean) {
		this.productocuentacontableSessionBean=productocuentacontableSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCosto() {
		return this.isVisibilidadFK_IdCuentaContableCosto;
	}

	public void setisVisibilidadFK_IdCuentaContableCosto(Boolean isVisibilidadFK_IdCuentaContableCosto) {
		this.isVisibilidadFK_IdCuentaContableCosto=isVisibilidadFK_IdCuentaContableCosto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDebito() {
		return this.isVisibilidadFK_IdCuentaContableDebito;
	}

	public void setisVisibilidadFK_IdCuentaContableDebito(Boolean isVisibilidadFK_IdCuentaContableDebito) {
		this.isVisibilidadFK_IdCuentaContableDebito=isVisibilidadFK_IdCuentaContableDebito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDescuento() {
		return this.isVisibilidadFK_IdCuentaContableDescuento;
	}

	public void setisVisibilidadFK_IdCuentaContableDescuento(Boolean isVisibilidadFK_IdCuentaContableDescuento) {
		this.isVisibilidadFK_IdCuentaContableDescuento=isVisibilidadFK_IdCuentaContableDescuento;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDevolucion() {
		return this.isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public void setisVisibilidadFK_IdCuentaContableDevolucion(Boolean isVisibilidadFK_IdCuentaContableDevolucion) {
		this.isVisibilidadFK_IdCuentaContableDevolucion=isVisibilidadFK_IdCuentaContableDevolucion;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventario() {
		return this.isVisibilidadFK_IdCuentaContableInventario;
	}

	public void setisVisibilidadFK_IdCuentaContableInventario(Boolean isVisibilidadFK_IdCuentaContableInventario) {
		this.isVisibilidadFK_IdCuentaContableInventario=isVisibilidadFK_IdCuentaContableInventario;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableVenta() {
		return this.isVisibilidadFK_IdCuentaContableVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableVenta(Boolean isVisibilidadFK_IdCuentaContableVenta) {
		this.isVisibilidadFK_IdCuentaContableVenta=isVisibilidadFK_IdCuentaContableVenta;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(ProductoCuentaContable productocuentacontable)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(productocuentacontable,null);
				this.setActualParaGuardarSucursalForeignKey(productocuentacontable,null);
				this.setActualParaGuardarBodegaForeignKey(productocuentacontable,null);
				this.setActualParaGuardarProductoForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCentroCostoForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableInventarioForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableCostoForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableVentaForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableDescuentoForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableDevolucionForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableDebitoForeignKey(productocuentacontable,null);
				this.setActualParaGuardarCuentaContableCreditoForeignKey(productocuentacontable,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ProductoCuentaContable productocuentacontable,ProductoCuentaContable productocuentacontableAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalProductoCuentaContable(productocuentacontable);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		productocuentacontableAux.setId(productocuentacontable.getId());
		productocuentacontableAux.setVersionRow(productocuentacontable.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessProductoCuentaContable();
		
			int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = productocuentacontableValidator.getInvalidValues(this.productocuentacontable);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			productocuentacontableLogic.setDatosCliente(datosCliente);
			productocuentacontableLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				productocuentacontableAux=new  ProductoCuentaContable();
				
				productocuentacontableAux.setIsNew(true);
				productocuentacontableAux.setIsChanged(true);
				
				productocuentacontableAux.setProductoCuentaContableOriginal(this.productocuentacontable);
				
				productocuentacontableAux.setId(this.productocuentacontable.getId());	
				productocuentacontableAux.setVersionRow(this.productocuentacontable.getVersionRow());	
				productocuentacontableAux.setid_empresa(this.productocuentacontable.getid_empresa());	
				productocuentacontableAux.setid_sucursal(this.productocuentacontable.getid_sucursal());	
				productocuentacontableAux.setid_bodega(this.productocuentacontable.getid_bodega());	
				productocuentacontableAux.setid_producto(this.productocuentacontable.getid_producto());	
				productocuentacontableAux.setid_centro_costo(this.productocuentacontable.getid_centro_costo());	
				productocuentacontableAux.setid_cuenta_contable_inventario(this.productocuentacontable.getid_cuenta_contable_inventario());	
				productocuentacontableAux.setid_cuenta_contable_costo(this.productocuentacontable.getid_cuenta_contable_costo());	
				productocuentacontableAux.setid_cuenta_contable_venta(this.productocuentacontable.getid_cuenta_contable_venta());	
				productocuentacontableAux.setid_cuenta_contable_descuento(this.productocuentacontable.getid_cuenta_contable_descuento());	
				productocuentacontableAux.setid_cuenta_contable_devolucion(this.productocuentacontable.getid_cuenta_contable_devolucion());	
				productocuentacontableAux.setid_cuenta_contable_debito(this.productocuentacontable.getid_cuenta_contable_debito());	
				productocuentacontableAux.setid_cuenta_contable_credito(this.productocuentacontable.getid_cuenta_contable_credito());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(productocuentacontableAux,productocuentacontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.saveProductoCuentaContables();//WithConnection
						//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);
					
					this.refrescarForeignKeysDescripcionesProductoCuentaContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								productocuentacontableLogic.saveProductoCuentaContableRelaciones(productocuentacontableAux);//WithConnection
								//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(productocuentacontableAux,productocuentacontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				productocuentacontableAux=new  ProductoCuentaContable();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado() 
					|| (this.productocuentacontableSessionBean.getEsGuardarRelacionado() && this.productocuentacontable.getId()>=0)) {
						
					productocuentacontableAux.setIsNew(false);
				}
				
				productocuentacontableAux.setIsDeleted(false);
			
				productocuentacontableAux.setId(this.productocuentacontable.getId());	
				productocuentacontableAux.setVersionRow(this.productocuentacontable.getVersionRow());	
				productocuentacontableAux.setid_empresa(this.productocuentacontable.getid_empresa());	
				productocuentacontableAux.setid_sucursal(this.productocuentacontable.getid_sucursal());	
				productocuentacontableAux.setid_bodega(this.productocuentacontable.getid_bodega());	
				productocuentacontableAux.setid_producto(this.productocuentacontable.getid_producto());	
				productocuentacontableAux.setid_centro_costo(this.productocuentacontable.getid_centro_costo());	
				productocuentacontableAux.setid_cuenta_contable_inventario(this.productocuentacontable.getid_cuenta_contable_inventario());	
				productocuentacontableAux.setid_cuenta_contable_costo(this.productocuentacontable.getid_cuenta_contable_costo());	
				productocuentacontableAux.setid_cuenta_contable_venta(this.productocuentacontable.getid_cuenta_contable_venta());	
				productocuentacontableAux.setid_cuenta_contable_descuento(this.productocuentacontable.getid_cuenta_contable_descuento());	
				productocuentacontableAux.setid_cuenta_contable_devolucion(this.productocuentacontable.getid_cuenta_contable_devolucion());	
				productocuentacontableAux.setid_cuenta_contable_debito(this.productocuentacontable.getid_cuenta_contable_debito());	
				productocuentacontableAux.setid_cuenta_contable_credito(this.productocuentacontable.getid_cuenta_contable_credito());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(productocuentacontableAux,productocuentacontables);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.saveProductoCuentaContables();//WithConnection
						//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);
					
					this.refrescarForeignKeysDescripcionesProductoCuentaContable();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								productocuentacontableLogic.saveProductoCuentaContableRelaciones(productocuentacontableAux);//WithConnection
								//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
									|| this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(productocuentacontableAux,productocuentacontables);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.productocuentacontable,productocuentacontableAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				productocuentacontableAux=new  ProductoCuentaContable();
				
				productocuentacontableAux.setIsNew(false);
				productocuentacontableAux.setIsChanged(false);
				
				productocuentacontableAux.setIsDeleted(true);
				
				productocuentacontableAux.setId(this.productocuentacontable.getId());	
				productocuentacontableAux.setVersionRow(this.productocuentacontable.getVersionRow());	
				productocuentacontableAux.setid_empresa(this.productocuentacontable.getid_empresa());	
				productocuentacontableAux.setid_sucursal(this.productocuentacontable.getid_sucursal());	
				productocuentacontableAux.setid_bodega(this.productocuentacontable.getid_bodega());	
				productocuentacontableAux.setid_producto(this.productocuentacontable.getid_producto());	
				productocuentacontableAux.setid_centro_costo(this.productocuentacontable.getid_centro_costo());	
				productocuentacontableAux.setid_cuenta_contable_inventario(this.productocuentacontable.getid_cuenta_contable_inventario());	
				productocuentacontableAux.setid_cuenta_contable_costo(this.productocuentacontable.getid_cuenta_contable_costo());	
				productocuentacontableAux.setid_cuenta_contable_venta(this.productocuentacontable.getid_cuenta_contable_venta());	
				productocuentacontableAux.setid_cuenta_contable_descuento(this.productocuentacontable.getid_cuenta_contable_descuento());	
				productocuentacontableAux.setid_cuenta_contable_devolucion(this.productocuentacontable.getid_cuenta_contable_devolucion());	
				productocuentacontableAux.setid_cuenta_contable_debito(this.productocuentacontable.getid_cuenta_contable_debito());	
				productocuentacontableAux.setid_cuenta_contable_credito(this.productocuentacontable.getid_cuenta_contable_credito());	
				
				if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.productocuentacontableAux.getId()>=0) {	
						this.productocuentacontablesEliminados.add(productocuentacontableAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(productocuentacontableAux,productocuentacontables);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.saveProductoCuentaContables();//WithConnection
						//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								productocuentacontableLogic.saveProductoCuentaContableRelaciones(productocuentacontableAux);//WithConnection
								//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
								|| this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(productocuentacontableAux,productocuentacontableLogic.getProductoCuentaContables());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(productocuentacontableAux,productocuentacontables);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getProductoCuentaContables().addAll(this.productocuentacontablesEliminados);
					
					productocuentacontableLogic.saveProductoCuentaContables();//WithConnection
					//productocuentacontableLogic.getSetVersionRowProductoCuentaContables();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesProductoCuentaContable();
				
				this.productocuentacontablesEliminados= new ArrayList<ProductoCuentaContable>();		
			}
			
			if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Producto Cuenta Contable GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.productocuentacontable=productocuentacontableAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessProductoCuentaContable();
      	}
		
	}	
	
	public void actualizarRelaciones(ProductoCuentaContable productocuentacontableLocal) throws Exception {
		
		if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ProductoCuentaContable productocuentacontableLocal) throws Exception {	
		if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				productocuentacontableLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				productocuentacontableLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				productocuentacontableLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				productocuentacontableLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				productocuentacontableLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventarioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventarioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventariosForeignKey);

				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableInventario(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey("Formulario");
				this.setActualCuentaContableInventarioForeignKey(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostosForeignKey);

				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableCosto(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey("Formulario");
				this.setActualCuentaContableCostoForeignKey(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableventasForeignKey);

				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableVenta(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey("Formulario");
				this.setActualCuentaContableVentaForeignKey(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledescuentoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledescuentoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledescuentosForeignKey);

				cuentacontabledescuentoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableDescuento(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey("Formulario");
				this.setActualCuentaContableDescuentoForeignKey(cuentacontabledescuentoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledevolucionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledevolucionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledevolucionsForeignKey);

				cuentacontabledevolucionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableDevolucion(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Formulario");
				this.setActualCuentaContableDevolucionForeignKey(cuentacontabledevolucionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledebitoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledebitoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledebitoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledebitosForeignKey);

				cuentacontabledebitoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableDebito(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey("Formulario");
				this.setActualCuentaContableDebitoForeignKey(cuentacontabledebitoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditosForeignKey);

				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				productocuentacontableLocal.setCuentaContableCredito(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey("Formulario");
				this.setActualCuentaContableCreditoForeignKey(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarProductoCuentaContableActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = productocuentacontableValidator.getInvalidValues(this.productocuentacontable);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ProductoCuentaContable productocuentacontable,List<ProductoCuentaContable> productocuentacontables) throws Exception {
		try	{		
			ProductoCuentaContableConstantesFunciones.actualizarLista(productocuentacontable,productocuentacontables,this.productocuentacontableSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ProductoCuentaContable productocuentacontable,List<ProductoCuentaContable> productocuentacontables) throws Exception {
		try	{			
			ProductoCuentaContableConstantesFunciones.actualizarSelectedLista(productocuentacontable,productocuentacontables);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ProductoCuentaContable> productocuentacontablesLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				productocuentacontablesLocal=this.productocuentacontableLogic.getProductoCuentaContables();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				productocuentacontablesLocal=this.productocuentacontables;
			}
			//ARCHITECTURE
		
			for(ProductoCuentaContable productocuentacontableLocal:productocuentacontablesLocal) {
				if(this.permiteMantenimiento(productocuentacontableLocal) && productocuentacontableLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ProductoCuentaContableConstantesFunciones.getProductoCuentaContableLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_empresaProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_sucursalProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_bodegaProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_productoProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_centro_costoProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_inventarioProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLECOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_costoProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_ventaProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_descuentoProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDEVOLUCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_devolucionProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDEBITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_debitoProductoCuentaContable,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_creditoProductoCuentaContable,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_empresaProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_sucursalProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_bodegaProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_productoProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_centro_costoProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_inventarioProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_costoProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_ventaProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_descuentoProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_devolucionProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_debitoProductoCuentaContable,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelid_cuenta_contable_creditoProductoCuentaContable,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoProductoCuentaContable--;	
		
		
		this.productocuentacontableAux=new ProductoCuentaContable();
		
		this.productocuentacontableAux.setId(this.iIdNuevoProductoCuentaContable);
		this.productocuentacontableAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.productocuentacontableLogic.getProductoCuentaContables().add(this.productocuentacontableAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.productocuentacontables.add(this.productocuentacontableAux);
		}
		//ARCHITECTURE
		
		this.productocuentacontable=this.productocuentacontableAux;
		
		if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontable);
			this.setVariablesObjetoActualToFormularioForeignKeyProductoCuentaContable(this.productocuentacontable);
		}
				
		//this.setDefaultControlesProductoCuentaContable();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyProductoCuentaContable();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyProductoCuentaContable();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyProductoCuentaContable();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualProductoCuentaContable(this.productocuentacontableBean,this.productocuentacontable,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
			classes=ProductoCuentaContableConstantesFunciones.getClassesRelationshipsOfProductoCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.productocuentacontableReturnGeneral=productocuentacontableLogic.procesarEventosProductoCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.productocuentacontableLogic.getProductoCuentaContables(),this.productocuentacontable,this.productocuentacontableParameterGeneral,this.isEsNuevoProductoCuentaContable,classes);//this.productocuentacontableLogic.getProductoCuentaContable()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanProductoCuentaContable(this.productocuentacontableReturnGeneral,this.productocuentacontableBean,false);
		
		if(this.productocuentacontableReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable());
		}
		
		if(this.productocuentacontableReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable(),classes);//this.productocuentacontableBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyProductoCuentaContable();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyProductoCuentaContable();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.RecargarFormProductoCuentaContable(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingProductoCuentaContable(false);
						
			if(productocuentacontableSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductoCuentaContable();
			}
			
			this.actualizarVisualTableDatosProductoCuentaContable();
			
			this.jTableDatosProductoCuentaContable.setRowSelectionInterval(this.getIndiceNuevoProductoCuentaContable(), this.getIndiceNuevoProductoCuentaContable());
			
			this.seleccionarFilaTablaProductoCuentaContableActual();
						
			this.actualizarEstadoCeldasBotonesProductoCuentaContable("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesProductoCuentaContable(Boolean isHabilitar) throws Exception {
			
		//
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_empresaProductoCuentaContable);//
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_sucursalProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_bodegaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_productoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_centro_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_inventarioProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_ventaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_descuentoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_devolucionProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_debitoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setEnabled(isHabilitar && this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_creditoProductoCuentaContable);
	};
	
	public void setDefaultControlesProductoCuentaContable() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoProductoCuentaContable(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.productocuentacontableSessionBean.setConGuardarRelaciones(true);			
			this.productocuentacontableSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.setVisible(true);
			
					
		} else {
			//this.productocuentacontableSessionBean.setConGuardarRelaciones(false);			
			this.productocuentacontableSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoProductoCuentaContable() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
				if(productocuentacontableAux.getId().equals(this.iIdNuevoProductoCuentaContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontables) {
				if(productocuentacontableAux.getId().equals(this.iIdNuevoProductoCuentaContable)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualProductoCuentaContable(ProductoCuentaContable productocuentacontable,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
				if(productocuentacontableAux.getId().equals(productocuentacontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontables) {
				if(productocuentacontableAux.getId().equals(productocuentacontable.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalProductoCuentaContable(ProductoCuentaContable productocuentacontableOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
				if(productocuentacontableAux.getProductoCuentaContableOriginal().getId().equals(productocuentacontableOriginal.getId())) {
					existe=true;
					productocuentacontableOriginal.setId(productocuentacontableAux.getId());
					productocuentacontableOriginal.setVersionRow(productocuentacontableAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontables) {
				if(productocuentacontableAux.getProductoCuentaContableOriginal().getId().equals(productocuentacontableOriginal.getId())) {
					existe=true;
					productocuentacontableOriginal.setId(productocuentacontableAux.getId());
					productocuentacontableOriginal.setVersionRow(productocuentacontableAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosProductoCuentaContable(Boolean esParaCancelar) throws Exception {
		productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
		productocuentacontableAux=new ProductoCuentaContable();
		
		if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
					if(productocuentacontableAux.getId()<0) {
						productocuentacontablesAux.add(productocuentacontableAux);
					}		
				}
				this.iIdNuevoProductoCuentaContable=0L;
				this.productocuentacontableLogic.getProductoCuentaContables().removeAll(productocuentacontablesAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontables) {
					if(productocuentacontableAux.getId()<0) {
						productocuentacontablesAux.add(productocuentacontableAux);
					}		
				}
				this.iIdNuevoProductoCuentaContable=0L;
				this.productocuentacontables.removeAll(productocuentacontablesAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoProductoCuentaContable 
					&& this.productocuentacontableLogic.getProductoCuentaContables().size()>0
					) {
					productocuentacontableAux=this.productocuentacontableLogic.getProductoCuentaContables().get(this.productocuentacontableLogic.getProductoCuentaContables().size() - 1);
				
					if(productocuentacontableAux.getId()<0) {
						this.productocuentacontableLogic.getProductoCuentaContables().remove(productocuentacontableAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoProductoCuentaContable && this.productocuentacontables.size()>0) {
					productocuentacontableAux=this.productocuentacontables.get(this.productocuentacontables.size() - 1);
				
					if(productocuentacontableAux.getId()<0) {
						this.productocuentacontables.remove(productocuentacontableAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoProductoCuentaContable(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(productocuentacontable.getId()<0) {
				this.productocuentacontableLogic.getProductoCuentaContables().remove(this.productocuentacontable);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(productocuentacontable.getId()<0) {
				this.productocuentacontables.remove(this.productocuentacontable);
			}
		}			
	}
	
	public void setEstadosInicialesProductoCuentaContable(List<ProductoCuentaContable> productocuentacontablesAux) throws Exception {
		ProductoCuentaContableConstantesFunciones.setEstadosInicialesProductoCuentaContable(productocuentacontablesAux);
	}
	
	public void setEstadosInicialesProductoCuentaContable(ProductoCuentaContable productocuentacontableAux) throws Exception {
		ProductoCuentaContableConstantesFunciones.setEstadosInicialesProductoCuentaContable(productocuentacontableAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarProductoCuentaContableActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarProductoCuentaContableActual()) {
				if(!this.isEsNuevoProductoCuentaContable) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoProductoCuentaContable=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarProductoCuentaContableActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Producto Cuenta Contable ?", "MANTENIMIENTO DE Producto Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ProductoCuentaContable productocuentacontable) throws Exception {
		ProductoCuentaContableConstantesFunciones.seleccionarAsignar(this.productocuentacontable,productocuentacontable);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarProductoCuentaContable=this.isPermisoActualizarOriginalProductoCuentaContable;
			
			
			this.seleccionarAsignar(productocuentacontable);
			
			

			idProductoActual=productocuentacontable.getid_producto();
			this.seleccionarProductoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ProductoCuentaContableConstantesFunciones.quitarEspaciosProductoCuentaContable(this.productocuentacontable,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesProductoCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.productocuentacontableSessionBean.setsFuncionBusquedaRapida(this.productocuentacontableSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoProductoCuentaContable) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosProductoCuentaContable(esParaCancelar);				
				this.cancelarNuevoProductoCuentaContable(esParaCancelar);								
			}
			
			this.productocuentacontable=new ProductoCuentaContable();
			
			this.inicializarProductoCuentaContable();
			
			this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarProductoCuentaContable() throws Exception {
		try {
			ProductoCuentaContableConstantesFunciones.inicializarProductoCuentaContable(this.productocuentacontable);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.productocuentacontableLogic.getProductoCuentaContables().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteProductoCuentaContables(String sAccionBusqueda,List<ProductoCuentaContable> productocuentacontablesParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ProductoCuentaContable"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ProductoCuentaContableMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ProductoCuentaContableMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ProductoCuentaContable"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Producto Cuenta Contables");		
		parameters.put("busquedapor", ProductoCuentaContableConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceProductoCuentaContable=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ProductoCuentaContableConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ProductoCuentaContableConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceProductoCuentaContable=new JRBeanArrayDataSource(ProductoCuentaContableJInternalFrame.TraerProductoCuentaContableBeans(productocuentacontablesParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceProductoCuentaContable);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ProductoCuentaContableConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ProductoCuentaContableConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ProductoCuentaContableBean.TraerProductoCuentaContableBeans(productocuentacontablesParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoProductoCuentaContableActionPerformed(null);
					//this.generarExcelReporteProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesProductoCuentaContables(sAccionBusqueda,sTipoArchivoReporte,productocuentacontablesParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteProductoCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductoCuentaContable> productocuentacontablesParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductoCuentaContables");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderProductoCuentaContable("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ProductoCuentaContable productocuentacontable : productocuentacontablesParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ProductoCuentaContableConstantesFunciones.generarExcelReporteDataProductoCuentaContable("NORMAL",row,workbook,productocuentacontable,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderProductoCuentaContable(String sTipo,Row row,Workbook workbook) {
		
		ProductoCuentaContableConstantesFunciones.generarExcelReporteHeaderProductoCuentaContable(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalProductoCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductoCuentaContable> productocuentacontablesParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductoCuentaContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ProductoCuentaContable productocuentacontable : productocuentacontablesParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ProductoCuentaContableConstantesFunciones.getProductoCuentaContableDescripcion(productocuentacontable));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontableinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontablecosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontableventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontabledescuento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontabledevolucion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontabledebito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(productocuentacontable.getcuentacontablecredito_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesProductoCuentaContables(String sAccionBusqueda,String sTipoArchivoReporte,List<ProductoCuentaContable> productocuentacontablesParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ProductoCuentaContable> productocuentacontablesRespaldo=null;
		
		classes=ProductoCuentaContableConstantesFunciones.getClassesRelationshipsOfProductoCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.productocuentacontableLogic.setDatosCliente(this.datosCliente);
		this.productocuentacontableLogic.setDatosDeep(this.datosDeep);
		this.productocuentacontableLogic.setIsConDeep(true);
		
		productocuentacontablesRespaldo=this.productocuentacontableLogic.getProductoCuentaContables();
		
		this.productocuentacontableLogic.setProductoCuentaContables(productocuentacontablesParaReportes);	
		this.productocuentacontableLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		productocuentacontablesParaReportes=this.productocuentacontableLogic.getProductoCuentaContables();
		this.productocuentacontableLogic.setProductoCuentaContables(productocuentacontablesRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ProductoCuentaContables");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderProductoCuentaContable("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ProductoCuentaContable productocuentacontable : productocuentacontablesParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderProductoCuentaContable("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ProductoCuentaContableConstantesFunciones.generarExcelReporteDataProductoCuentaContable("NORMAL",row,workbook,productocuentacontable,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ProductoCuentaContableConstantesFunciones.getProductoCuentaContableDescripcion(productocuentacontable));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessProductoCuentaContable() throws Exception {		
		this.startProcessProductoCuentaContable(true);
	}
	
	public void startProcessProductoCuentaContable(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasProductoCuentaContable ,this.jPanelParametrosReportesProductoCuentaContable, this.jScrollPanelDatosProductoCuentaContable,this.jPanelPaginacionProductoCuentaContable, this.jScrollPanelDatosEdicionProductoCuentaContable, this.jPanelAccionesProductoCuentaContable,this.jPanelAccionesFormularioProductoCuentaContable,this.jmenuBarProductoCuentaContable,this.jmenuBarDetalleProductoCuentaContable,this.jTtoolBarProductoCuentaContable,this.jTtoolBarDetalleProductoCuentaContable);		
		
		final JTabbedPane jTabbedPaneBusquedasProductoCuentaContable=this.jTabbedPaneBusquedasProductoCuentaContable; 
		
		final JPanel jPanelParametrosReportesProductoCuentaContable=this.jPanelParametrosReportesProductoCuentaContable;
		//final JScrollPane jScrollPanelDatosProductoCuentaContable=this.jScrollPanelDatosProductoCuentaContable;
		final JTable jTableDatosProductoCuentaContable=this.jTableDatosProductoCuentaContable;		
		final JPanel jPanelPaginacionProductoCuentaContable=this.jPanelPaginacionProductoCuentaContable;
		//final JScrollPane jScrollPanelDatosEdicionProductoCuentaContable=this.jScrollPanelDatosEdicionProductoCuentaContable;
		final JPanel jPanelAccionesProductoCuentaContable=this.jPanelAccionesProductoCuentaContable;
		
		JPanel jPanelCamposAuxiliarProductoCuentaContable=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarProductoCuentaContable=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			jPanelCamposAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jPanelCamposProductoCuentaContable;
			jPanelAccionesFormularioAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jPanelAccionesFormularioProductoCuentaContable;
		}
		
		final JPanel jPanelCamposProductoCuentaContable=jPanelCamposAuxiliarProductoCuentaContable;
		final JPanel jPanelAccionesFormularioProductoCuentaContable=jPanelAccionesFormularioAuxiliarProductoCuentaContable;
		
		
		final JMenuBar jmenuBarProductoCuentaContable=this.jmenuBarProductoCuentaContable;
		final JToolBar jTtoolBarProductoCuentaContable=this.jTtoolBarProductoCuentaContable;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarProductoCuentaContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarProductoCuentaContable=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			jmenuBarDetalleAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jmenuBarDetalleProductoCuentaContable;
			jTtoolBarDetalleAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jTtoolBarDetalleProductoCuentaContable;
		}
		
		final JMenuBar jmenuBarDetalleProductoCuentaContable=jmenuBarDetalleAuxiliarProductoCuentaContable;
		final JToolBar jTtoolBarDetalleProductoCuentaContable=jTtoolBarDetalleAuxiliarProductoCuentaContable;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasProductoCuentaContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesProductoCuentaContable;
			processRunnable.jTableDatos=jTableDatosProductoCuentaContable;
			processRunnable.jPanelCampos=jPanelCamposProductoCuentaContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionProductoCuentaContable;
			processRunnable.jPanelAcciones=jPanelAccionesProductoCuentaContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioProductoCuentaContable;
			
			
			processRunnable.jmenuBar=jmenuBarProductoCuentaContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleProductoCuentaContable;
			processRunnable.jTtoolBar=jTtoolBarProductoCuentaContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleProductoCuentaContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasProductoCuentaContable ,jPanelParametrosReportesProductoCuentaContable,jTableDatosProductoCuentaContable, /*jScrollPanelDatosProductoCuentaContable,*/jPanelCamposProductoCuentaContable,jPanelPaginacionProductoCuentaContable, /*jScrollPanelDatosEdicionProductoCuentaContable,*/ jPanelAccionesProductoCuentaContable,jPanelAccionesFormularioProductoCuentaContable,jmenuBarProductoCuentaContable,jmenuBarDetalleProductoCuentaContable,jTtoolBarProductoCuentaContable,jTtoolBarDetalleProductoCuentaContable);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasProductoCuentaContable ,jPanelParametrosReportesProductoCuentaContable, jScrollPanelDatosProductoCuentaContable,jPanelPaginacionProductoCuentaContable, jScrollPanelDatosEdicionProductoCuentaContable, jPanelAccionesProductoCuentaContable,jPanelAccionesFormularioProductoCuentaContable,jmenuBarProductoCuentaContable,jmenuBarDetalleProductoCuentaContable,jTtoolBarProductoCuentaContable,jTtoolBarDetalleProductoCuentaContable);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessProductoCuentaContable() {// throws Exception 
		this.finishProcessProductoCuentaContable(true);
	}
	
	public void finishProcessProductoCuentaContable(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasProductoCuentaContable ,this.jPanelParametrosReportesProductoCuentaContable, this.jScrollPanelDatosProductoCuentaContable,this.jPanelPaginacionProductoCuentaContable, this.jScrollPanelDatosEdicionProductoCuentaContable, this.jPanelAccionesProductoCuentaContable,this.jPanelAccionesFormularioProductoCuentaContable,this.jmenuBarProductoCuentaContable,this.jmenuBarDetalleProductoCuentaContable,this.jTtoolBarProductoCuentaContable,this.jTtoolBarDetalleProductoCuentaContable);		
		
		final JTabbedPane jTabbedPaneBusquedasProductoCuentaContable=this.jTabbedPaneBusquedasProductoCuentaContable; 
		
		final JPanel jPanelParametrosReportesProductoCuentaContable=this.jPanelParametrosReportesProductoCuentaContable;
		//final JScrollPane jScrollPanelDatosProductoCuentaContable=this.jScrollPanelDatosProductoCuentaContable;
		final JTable jTableDatosProductoCuentaContable=this.jTableDatosProductoCuentaContable;		
		final JPanel jPanelPaginacionProductoCuentaContable=this.jPanelPaginacionProductoCuentaContable;
		//final JScrollPane jScrollPanelDatosEdicionProductoCuentaContable=this.jScrollPanelDatosEdicionProductoCuentaContable;
		final JPanel jPanelAccionesProductoCuentaContable=this.jPanelAccionesProductoCuentaContable;
		
		JPanel jPanelCamposAuxiliarProductoCuentaContable=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarProductoCuentaContable=new JPanel();
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			jPanelCamposAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jPanelCamposProductoCuentaContable;
			jPanelAccionesFormularioAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jPanelAccionesFormularioProductoCuentaContable;
		}
		
		final JPanel jPanelCamposProductoCuentaContable=jPanelCamposAuxiliarProductoCuentaContable;
		final JPanel jPanelAccionesFormularioProductoCuentaContable=jPanelAccionesFormularioAuxiliarProductoCuentaContable;
		
		
		final JMenuBar jmenuBarProductoCuentaContable=this.jmenuBarProductoCuentaContable;		
		final JToolBar jTtoolBarProductoCuentaContable=this.jTtoolBarProductoCuentaContable;
				
		JMenuBar jmenuBarDetalleAuxiliarProductoCuentaContable=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarProductoCuentaContable=new JToolBar();
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			jmenuBarDetalleAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jmenuBarDetalleProductoCuentaContable;
			jTtoolBarDetalleAuxiliarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jTtoolBarDetalleProductoCuentaContable;		
		}
		
		final JMenuBar jmenuBarDetalleProductoCuentaContable=jmenuBarDetalleAuxiliarProductoCuentaContable;
		final JToolBar jTtoolBarDetalleProductoCuentaContable=jTtoolBarDetalleAuxiliarProductoCuentaContable;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasProductoCuentaContable;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesProductoCuentaContable;
			processRunnable.jTableDatos=jTableDatosProductoCuentaContable;
			processRunnable.jPanelCampos=jPanelCamposProductoCuentaContable;
			processRunnable.jPanelPaginacion=jPanelPaginacionProductoCuentaContable;
			processRunnable.jPanelAcciones=jPanelAccionesProductoCuentaContable;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioProductoCuentaContable;
			
			
			processRunnable.jmenuBar=jmenuBarProductoCuentaContable;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleProductoCuentaContable;
			processRunnable.jTtoolBar=jTtoolBarProductoCuentaContable;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleProductoCuentaContable;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasProductoCuentaContable ,jPanelParametrosReportesProductoCuentaContable, jTableDatosProductoCuentaContable,/*jScrollPanelDatosProductoCuentaContable,*/jPanelCamposProductoCuentaContable,jPanelPaginacionProductoCuentaContable, /*jScrollPanelDatosEdicionProductoCuentaContable,*/ jPanelAccionesProductoCuentaContable,jPanelAccionesFormularioProductoCuentaContable,jmenuBarProductoCuentaContable,jmenuBarDetalleProductoCuentaContable,jTtoolBarProductoCuentaContable,jTtoolBarDetalleProductoCuentaContable));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesProductoCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarProductoCuentaContable(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuProductoCuentaContable(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarProductoCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarProductoCuentaContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleProductoCuentaContable,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuProductoCuentaContable(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarProductoCuentaContable,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleProductoCuentaContable,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.productocuentacontableConstantesFunciones.getsFinalQueryProductoCuentaContable();
		String  finalQueryPaginacionTodos=this.productocuentacontableConstantesFunciones.getsFinalQueryProductoCuentaContable();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ProductoCuentaContableConstantesFunciones.getArrayColumnasGlobalesNoProductoCuentaContable(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ProductoCuentaContableConstantesFunciones.getArrayColumnasGlobalesProductoCuentaContable(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ProductoCuentaContableConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.productocuentacontablesEliminados= new ArrayList<ProductoCuentaContable>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessProductoCuentaContable();
		
				///*ProductoCuentaContableSessionBean*/this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			
			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ProductoCuentaContableConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ProductoCuentaContableConstantesFunciones.getClassesForeignKeysOfProductoCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/productocuentacontable."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			productocuentacontablesAux= new ArrayList<ProductoCuentaContable>();
			
				
			productocuentacontableLogic.setDatosCliente(this.datosCliente);
			productocuentacontableLogic.setDatosDeep(this.datosDeep);
			productocuentacontableLogic.setIsConDeep(true);
			
			
			productocuentacontableLogic.getProductoCuentaContableDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					productocuentacontableLogic.getTodosProductoCuentaContables(finalQueryGlobal,pagination);
					
					//productocuentacontableLogic.getTodosProductoCuentaContablesWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(productocuentacontableLogic.getProductoCuentaContables()==null|| productocuentacontableLogic.getProductoCuentaContables().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							productocuentacontablesAux= new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux= new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							productocuentacontableLogic.getTodosProductoCuentaContables(finalQueryGlobal+"",this.pagination);												
							
							//productocuentacontableLogic.getTodosProductoCuentaContablesWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteProductoCuentaContables("Todos",productocuentacontableLogic.getProductoCuentaContables() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());					
							productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idProductoCuentaContable=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idProductoCuentaContable=this.idActual;
				
				} else if(this.idProductoCuentaContableActual!=null && this.idProductoCuentaContableActual!=0L) {
					idProductoCuentaContable=idProductoCuentaContableActual;
				}
				
					
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndicePorId(idProductoCuentaContable);
				
				this.productocuentacontables=new ArrayList<ProductoCuentaContable>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					productocuentacontableLogic.getEntity(idProductoCuentaContable);
					
					//productocuentacontableLogic.getEntityWithConnection(idProductoCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
					productocuentacontableLogic.getProductoCuentaContables().add(productocuentacontableLogic.getProductoCuentaContable());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontables=new ArrayList<ProductoCuentaContable>();
					this.productocuentacontables.add(productocuentacontable);
				}
				
				if(productocuentacontableLogic.getProductoCuentaContable()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdBodega",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdBodega",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCentroCosto",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCentroCosto",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCosto")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableCosto",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableCosto",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCredito")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCredito(id_cuenta_contable_creditoFK_IdCuentaContableCredito);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCredito(finalQueryGlobal,pagination,id_cuenta_contable_creditoFK_IdCuentaContableCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCredito(id_cuenta_contable_creditoFK_IdCuentaContableCredito);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCredito(id_cuenta_contable_creditoFK_IdCuentaContableCredito);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCredito(finalQueryGlobal,pagination,id_cuenta_contable_creditoFK_IdCuentaContableCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCredito(id_cuenta_contable_creditoFK_IdCuentaContableCredito);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCredito(id_cuenta_contable_creditoFK_IdCuentaContableCredito);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableCredito",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableCredito",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableDebito")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDebito(id_cuenta_contable_debitoFK_IdCuentaContableDebito);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDebito(finalQueryGlobal,pagination,id_cuenta_contable_debitoFK_IdCuentaContableDebito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDebito(id_cuenta_contable_debitoFK_IdCuentaContableDebito);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDebito(id_cuenta_contable_debitoFK_IdCuentaContableDebito);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDebito(finalQueryGlobal,pagination,id_cuenta_contable_debitoFK_IdCuentaContableDebito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDebito(id_cuenta_contable_debitoFK_IdCuentaContableDebito);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDebito(id_cuenta_contable_debitoFK_IdCuentaContableDebito);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDebito",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDebito",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableDescuento")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDescuento(id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDescuento(finalQueryGlobal,pagination,id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDescuento(id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDescuento(id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDescuento(finalQueryGlobal,pagination,id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDescuento(id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDescuento(id_cuenta_contable_descuentoFK_IdCuentaContableDescuento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDescuento",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDescuento",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableDevolucion")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDevolucion(id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDevolucion(finalQueryGlobal,pagination,id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDevolucion(id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDevolucion(id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDevolucion(finalQueryGlobal,pagination,id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDevolucion(id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDevolucion(id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDevolucion",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableDevolucion",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableInventario")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableInventario(finalQueryGlobal,pagination,id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableInventario(finalQueryGlobal,pagination,id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableInventario",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableInventario",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableVenta")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableVenta(finalQueryGlobal,pagination,id_cuenta_contable_ventaFK_IdCuentaContableVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableVenta(finalQueryGlobal,pagination,id_cuenta_contable_ventaFK_IdCuentaContableVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableVenta",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdCuentaContableVenta",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdEmpresa",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdEmpresa",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdProducto",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdProducto",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					productocuentacontableLogic.getProductoCuentaContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=productocuentacontableLogic.getProductoCuentaContables()==null||productocuentacontableLogic.getProductoCuentaContables().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=productocuentacontables==null|| productocuentacontables.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
						productocuentacontablesAux.addAll(productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontablesAux=new ArrayList<ProductoCuentaContable>();
							productocuentacontablesAux.addAll(productocuentacontables);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							productocuentacontableLogic.getProductoCuentaContablesFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ProductoCuentaContableConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteProductoCuentaContables("FK_IdSucursal",productocuentacontableLogic.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteProductoCuentaContables("FK_IdSucursal",productocuentacontables);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableLogic.setProductoCuentaContables(new ArrayList<ProductoCuentaContable>());
						productocuentacontableLogic.getProductoCuentaContables().addAll(productocuentacontablesAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontables=new ArrayList<ProductoCuentaContable>();
							productocuentacontables.addAll(productocuentacontablesAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesProductoCuentaContable();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessProductoCuentaContable();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=productocuentacontableLogic.getProductoCuentaContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=productocuentacontables.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=productocuentacontableLogic.getProductoCuentaContables().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=productocuentacontables.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ProductoCuentaContable productocuentacontable) {
		Boolean permite=true;
		
		if(this.productocuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ProductoCuentaContableConstantesFunciones.getOrderByListaProductoCuentaContable();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ProductoCuentaContableConstantesFunciones.getOrderByListaProductoCuentaContable();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductoCuentaContable productocuentacontable:productocuentacontableLogic.getProductoCuentaContables()) {
				if(productocuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					productocuentacontableTotales=productocuentacontable;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductoCuentaContable productocuentacontable:this.productocuentacontables) {
				if(productocuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					productocuentacontableTotales=productocuentacontable;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.productocuentacontableAux=new ProductoCuentaContable();
			this.productocuentacontableAux.setsType(Constantes2.S_TOTALES);
			this.productocuentacontableAux.setIsNew(false);
			this.productocuentacontableAux.setIsChanged(false);
			this.productocuentacontableAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ProductoCuentaContableConstantesFunciones.TotalizarValoresFilaProductoCuentaContable(this.productocuentacontableLogic.getProductoCuentaContables(),this.productocuentacontableAux);
				
				this.productocuentacontableLogic.getProductoCuentaContables().add(this.productocuentacontableAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ProductoCuentaContableConstantesFunciones.TotalizarValoresFilaProductoCuentaContable(this.productocuentacontables,this.productocuentacontableAux);
				
				this.productocuentacontables.add(this.productocuentacontableAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		productocuentacontableTotales=new ProductoCuentaContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.productocuentacontableLogic.getProductoCuentaContables().remove(productocuentacontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.productocuentacontables.remove(productocuentacontableTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		productocuentacontableTotales=new ProductoCuentaContable();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ProductoCuentaContable productocuentacontable:productocuentacontableLogic.getProductoCuentaContables()) {
				if(productocuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					productocuentacontableTotales=productocuentacontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ProductoCuentaContableConstantesFunciones.TotalizarValoresFilaProductoCuentaContable(this.productocuentacontableLogic.getProductoCuentaContables(),productocuentacontableTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ProductoCuentaContable productocuentacontable:this.productocuentacontables) {
				if(productocuentacontable.getsType().equals(Constantes2.S_TOTALES)) {
					productocuentacontableTotales=productocuentacontable;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ProductoCuentaContableConstantesFunciones.TotalizarValoresFilaProductoCuentaContable(this.productocuentacontables,productocuentacontableTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getProductoCuentaContablesFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDebito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDebito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDescuento()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDescuento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDevolucion()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDevolucion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getProductoCuentaContablesFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getProductoCuentaContablesFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableCosto(String sFinalQuery,Long id_cuenta_contable_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCosto(sFinalQuery,this.pagination,id_cuenta_contable_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDebito(String sFinalQuery,Long id_cuenta_contable_debito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDebito(sFinalQuery,this.pagination,id_cuenta_contable_debito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDescuento(String sFinalQuery,Long id_cuenta_contable_descuento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDescuento(sFinalQuery,this.pagination,id_cuenta_contable_descuento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableDevolucion(String sFinalQuery,Long id_cuenta_contable_devolucion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableDevolucion(sFinalQuery,this.pagination,id_cuenta_contable_devolucion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableInventario(String sFinalQuery,Long id_cuenta_contable_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableInventario(sFinalQuery,this.pagination,id_cuenta_contable_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdCuentaContableVenta(String sFinalQuery,Long id_cuenta_contable_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdCuentaContableVenta(sFinalQuery,this.pagination,id_cuenta_contable_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getProductoCuentaContablesFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLogic.getProductoCuentaContablesFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosProductoCuentaContable() {
		this.isPermisoTodoProductoCuentaContable=false;
		this.isPermisoNuevoProductoCuentaContable=false;
		this.isPermisoActualizarProductoCuentaContable=false;
		this.isPermisoActualizarOriginalProductoCuentaContable=false;
		this.isPermisoEliminarProductoCuentaContable=false;
		this.isPermisoGuardarCambiosProductoCuentaContable=false;
		this.isPermisoConsultaProductoCuentaContable=false;
		this.isPermisoBusquedaProductoCuentaContable=false;
		this.isPermisoReporteProductoCuentaContable=false;		
		this.isPermisoOrdenProductoCuentaContable=false;		
		this.isPermisoPaginacionMedioProductoCuentaContable=false;		
		this.isPermisoPaginacionAltoProductoCuentaContable=false;
		this.isPermisoPaginacionTodoProductoCuentaContable=false;
		this.isPermisoCopiarProductoCuentaContable=false;		
		this.isPermisoVerFormProductoCuentaContable=false;		
		this.isPermisoDuplicarProductoCuentaContable=false;		
		this.isPermisoOrdenProductoCuentaContable=false;		
	}
	
	public void setPermisosUsuarioProductoCuentaContable(Boolean isPermiso) {
		this.isPermisoTodoProductoCuentaContable=isPermiso;
		this.isPermisoNuevoProductoCuentaContable=isPermiso;
		this.isPermisoActualizarProductoCuentaContable=isPermiso;
		this.isPermisoActualizarOriginalProductoCuentaContable=isPermiso;
		this.isPermisoEliminarProductoCuentaContable=isPermiso;
		this.isPermisoGuardarCambiosProductoCuentaContable=isPermiso;
		this.isPermisoConsultaProductoCuentaContable=isPermiso;
		this.isPermisoBusquedaProductoCuentaContable=isPermiso;
		this.isPermisoReporteProductoCuentaContable=isPermiso;
		this.isPermisoOrdenProductoCuentaContable=isPermiso;		
		this.isPermisoPaginacionMedioProductoCuentaContable=isPermiso;		
		this.isPermisoPaginacionAltoProductoCuentaContable=isPermiso;		
		this.isPermisoPaginacionTodoProductoCuentaContable=isPermiso;		
		this.isPermisoCopiarProductoCuentaContable=isPermiso;		
		this.isPermisoVerFormProductoCuentaContable=isPermiso;		
		this.isPermisoDuplicarProductoCuentaContable=isPermiso;
		this.isPermisoOrdenProductoCuentaContable=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioProductoCuentaContable(Boolean isPermiso) {
		//this.isPermisoTodoProductoCuentaContable=isPermiso;
		this.isPermisoNuevoProductoCuentaContable=isPermiso;
		this.isPermisoActualizarProductoCuentaContable=isPermiso;
		this.isPermisoActualizarOriginalProductoCuentaContable=isPermiso;
		this.isPermisoEliminarProductoCuentaContable=isPermiso;
		this.isPermisoGuardarCambiosProductoCuentaContable=isPermiso;
		//this.isPermisoConsultaProductoCuentaContable=isPermiso;
		//this.isPermisoBusquedaProductoCuentaContable=isPermiso;
		//this.isPermisoReporteProductoCuentaContable=isPermiso;
		//this.isPermisoOrdenProductoCuentaContable=isPermiso;		
		//this.isPermisoPaginacionMedioProductoCuentaContable=isPermiso;		
		//this.isPermisoPaginacionAltoProductoCuentaContable=isPermiso;		
		//this.isPermisoPaginacionTodoProductoCuentaContable=isPermiso;		
		//this.isPermisoCopiarProductoCuentaContable=isPermiso;		
		//this.isPermisoDuplicarProductoCuentaContable=isPermiso;
		//this.isPermisoOrdenProductoCuentaContable=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioProductoCuentaContableClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ProductoCuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebProductoCuentaContable(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioProductoCuentaContableClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioProductoCuentaContableClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionProductoCuentaContableClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioProductoCuentaContableClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioProductoCuentaContable() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ProductoCuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ProductoCuentaContableConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoProductoCuentaContable=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarProductoCuentaContable=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalProductoCuentaContable=this.isPermisoActualizarProductoCuentaContable;
			this.isPermisoEliminarProductoCuentaContable=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosProductoCuentaContable=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaProductoCuentaContable=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaProductoCuentaContable=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoProductoCuentaContable=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteProductoCuentaContable=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenProductoCuentaContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioProductoCuentaContable=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoProductoCuentaContable=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoProductoCuentaContable=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarProductoCuentaContable=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormProductoCuentaContable=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarProductoCuentaContable=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenProductoCuentaContable=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosProductoCuentaContable.setToolTipText(this.jTableDatosProductoCuentaContable.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioProductoCuentaContable(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioProductoCuentaContable(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ProductoCuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ProductoCuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioProductoCuentaContable() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyProductoCuentaContableListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.cuentacontableinventariosForeignKey=new ArrayList();
				this.cuentacontablecostosForeignKey=new ArrayList();
				this.cuentacontableventasForeignKey=new ArrayList();
				this.cuentacontabledescuentosForeignKey=new ArrayList();
				this.cuentacontabledevolucionsForeignKey=new ArrayList();
				this.cuentacontabledebitosForeignKey=new ArrayList();
				this.cuentacontablecreditosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyProductoCuentaContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ProductoCuentaContableJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyProductoCuentaContableListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebitoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyProductoCuentaContableListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ProductoCuentaContableParameterReturnGeneral productocuentacontableReturnGeneral=new ProductoCuentaContableParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_empresaProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_empresaProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_sucursalProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_sucursalProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_bodegaProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_bodegaProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_productoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_productoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_centro_costoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_centro_costoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCuentaContableInventario="";

				if(((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_inventarioProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_inventarioProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventario, "");
						finalQueryGlobalCuentaContableInventario+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventario=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableInventarioActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventario="NONE";
				}


				String finalQueryGlobalCuentaContableCosto="";

				if(((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_costoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_costoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCosto, "");
						finalQueryGlobalCuentaContableCosto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCosto=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableCostoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCosto="NONE";
				}


				String finalQueryGlobalCuentaContableVenta="";

				if(((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_ventaProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_ventaProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableVenta, "");
						finalQueryGlobalCuentaContableVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableVenta=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableVenta="NONE";
				}


				String finalQueryGlobalCuentaContableDescuento="";

				if(((this.cuentacontabledescuentosForeignKey==null||this.cuentacontabledescuentosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_descuentoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_descuentoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDescuento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDescuento=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDescuento, "");
						finalQueryGlobalCuentaContableDescuento+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDescuento=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableDescuentoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDescuento="NONE";
				}


				String finalQueryGlobalCuentaContableDevolucion="";

				if(((this.cuentacontabledevolucionsForeignKey==null||this.cuentacontabledevolucionsForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_devolucionProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_devolucionProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDevolucion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDevolucion=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDevolucion, "");
						finalQueryGlobalCuentaContableDevolucion+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDevolucion=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableDevolucionActual();
					}
				} else {
					finalQueryGlobalCuentaContableDevolucion="NONE";
				}


				String finalQueryGlobalCuentaContableDebito="";

				if(((this.cuentacontabledebitosForeignKey==null||this.cuentacontabledebitosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDebito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDebito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDebito, "");
						finalQueryGlobalCuentaContableDebito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDebitosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDebito=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableDebitoActual();
					}
				} else {
					finalQueryGlobalCuentaContableDebito="NONE";
				}


				String finalQueryGlobalCuentaContableCredito="";

				if(((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0) && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoProductoCuentaContable)
					 || (this.esRecargarFks && this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoProductoCuentaContable)) {

					if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCredito, "");
						finalQueryGlobalCuentaContableCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCredito=" WHERE " + ConstantesSql.ID + "="+productocuentacontableSessionBean.getlidCuentaContableCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCredito="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				productocuentacontableReturnGeneral=productocuentacontableLogic.cargarCombosLoteForeignKeyProductoCuentaContable(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalCentroCosto,finalQueryGlobalCuentaContableInventario,finalQueryGlobalCuentaContableCosto,finalQueryGlobalCuentaContableVenta,finalQueryGlobalCuentaContableDescuento,finalQueryGlobalCuentaContableDevolucion,finalQueryGlobalCuentaContableDebito,finalQueryGlobalCuentaContableCredito);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=productocuentacontableReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=productocuentacontableReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=productocuentacontableReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=productocuentacontableReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=productocuentacontableReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventario.equals("NONE")) {
				this.cuentacontableinventariosForeignKey=productocuentacontableReturnGeneral.getcuentacontableinventariosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCosto.equals("NONE")) {
				this.cuentacontablecostosForeignKey=productocuentacontableReturnGeneral.getcuentacontablecostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableVenta.equals("NONE")) {
				this.cuentacontableventasForeignKey=productocuentacontableReturnGeneral.getcuentacontableventasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDescuento.equals("NONE")) {
				this.cuentacontabledescuentosForeignKey=productocuentacontableReturnGeneral.getcuentacontabledescuentosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDevolucion.equals("NONE")) {
				this.cuentacontabledevolucionsForeignKey=productocuentacontableReturnGeneral.getcuentacontabledevolucionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDebito.equals("NONE")) {
				this.cuentacontabledebitosForeignKey=productocuentacontableReturnGeneral.getcuentacontabledebitosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCredito.equals("NONE")) {
				this.cuentacontablecreditosForeignKey=productocuentacontableReturnGeneral.getcuentacontablecreditosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyProductoCuentaContable()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableInventario();
			this.addItemDefectoCombosForeignKeyCuentaContableCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableVenta();
			this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
			this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
			this.addItemDefectoCombosForeignKeyCuentaContableDebito();
			this.addItemDefectoCombosForeignKeyCuentaContableCredito();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.productocuentacontableSessionBean==null) {
				this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventario()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				CuentaContable cuentacontableinventario=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventario.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventariosForeignKey,cuentacontableinventario,true)) {

					this.cuentacontableinventariosForeignKey.add(0,cuentacontableinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCosto()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				CuentaContable cuentacontablecosto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecosto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostosForeignKey,cuentacontablecosto,true)) {

					this.cuentacontablecostosForeignKey.add(0,cuentacontablecosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableVenta()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				CuentaContable cuentacontableventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableventasForeignKey,cuentacontableventa,true)) {

					this.cuentacontableventasForeignKey.add(0,cuentacontableventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDescuento()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDescuento()) {
				CuentaContable cuentacontabledescuento=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledescuento,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledescuento.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledescuentosForeignKey,cuentacontabledescuento,true)) {

					this.cuentacontabledescuentosForeignKey.add(0,cuentacontabledescuento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDevolucion()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDevolucion()) {
				CuentaContable cuentacontabledevolucion=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledevolucion,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledevolucion.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledevolucionsForeignKey,cuentacontabledevolucion,true)) {

					this.cuentacontabledevolucionsForeignKey.add(0,cuentacontabledevolucion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDebito()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDebito()) {
				CuentaContable cuentacontabledebito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledebito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledebito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledebitosForeignKey,cuentacontabledebito,true)) {

					this.cuentacontabledebitosForeignKey.add(0,cuentacontabledebito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCredito()throws Exception {
		try {

			if(!this.productocuentacontableSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				CuentaContable cuentacontablecredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditosForeignKey,cuentacontablecredito,true)) {

					this.cuentacontablecreditosForeignKey.add(0,cuentacontablecredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyProductoCuentaContable()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyProductoCuentaContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyProductoCuentaContable()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyProductoCuentaContable();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyProductoCuentaContable(ProductoCuentaContable productocuentacontable)throws Exception {	
		try {
			
			this.setActualBodegaForeignKey(productocuentacontable.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(productocuentacontable.getid_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(productocuentacontable.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(productocuentacontable.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(productocuentacontable.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(productocuentacontable.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(productocuentacontable.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(productocuentacontable.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(productocuentacontable.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(productocuentacontable.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyProductoCuentaContable(ProductoCuentaContable productocuentacontable,String sTipoEvento)throws Exception {	
		try {
			
			

				if(productocuentacontable.getProducto()!=null && !sTipoEvento.equals("id_productoProductoCuentaContable")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(productocuentacontable.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyProductoCuentaContable()throws Exception {	
		try {
			
			this.setActualBodegaForeignKey(this.productocuentacontableConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.productocuentacontableConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.productocuentacontableConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_costo(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_venta(),false,"Formulario");
			this.setActualCuentaContableDescuentoForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_descuento(),false,"Formulario");
			this.setActualCuentaContableDevolucionForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_devolucion(),false,"Formulario");
			this.setActualCuentaContableDebitoForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_debito(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(this.productocuentacontableConstantesFunciones.getid_cuenta_contable_credito(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyProductoCuentaContable()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyProductoCuentaContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyProductoCuentaContable()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroProductoCuentaContable()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyProductoCuentaContable()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyProductoCuentaContable(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyProductoCuentaContable()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.getItemCount()>0) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
























	
	

	public ProductoCuentaContableBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ProductoCuentaContableBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ProductoCuentaContableBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean(); 
		this.productocuentacontableConstantesFunciones=new ProductoCuentaContableConstantesFunciones(); 
		this.productocuentacontableBean=new ProductoCuentaContable();//(this.productocuentacontableConstantesFunciones); 		
		this.productocuentacontableReturnGeneral=new ProductoCuentaContableParameterReturnGeneral(); 
		
		this.productocuentacontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.productocuentacontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ProductoCuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ProductoCuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ProductoCuentaContableBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessProductoCuentaContable(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.productocuentacontableConstantesFunciones=new ProductoCuentaContableConstantesFunciones(); 
			this.productocuentacontableBean=new ProductoCuentaContable();//this.productocuentacontableConstantesFunciones); 			
			this.productocuentacontableReturnGeneral=new ProductoCuentaContableParameterReturnGeneral(); 
		
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Producto Cuenta Contable Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			
			
			this.productocuentacontable=new ProductoCuentaContable();
			this.productocuentacontables = new ArrayList<ProductoCuentaContable>();
			this.productocuentacontablesAux = new ArrayList<ProductoCuentaContable>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic=new ProductoCuentaContableLogic();
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			//this.productocuentacontableSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.productocuentacontableSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormProductoCuentaContable);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoProductoCuentaContable);	
					}
					
					if(this.jInternalFrameImportacionProductoCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionProductoCuentaContable);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByProductoCuentaContable!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByProductoCuentaContable);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormProductoCuentaContable);
				this.jInternalFrameDetalleFormProductoCuentaContable.setVisible(false);
				this.jInternalFrameDetalleFormProductoCuentaContable.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoProductoCuentaContable);
					this.jInternalFrameReporteDinamicoProductoCuentaContable.setVisible(false);
					this.jInternalFrameReporteDinamicoProductoCuentaContable.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionProductoCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionProductoCuentaContable);
					this.jInternalFrameImportacionProductoCuentaContable.setVisible(false);
					this.jInternalFrameImportacionProductoCuentaContable.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByProductoCuentaContable!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByProductoCuentaContable);
					this.jInternalFrameOrderByProductoCuentaContable.setVisible(false);
					this.jInternalFrameOrderByProductoCuentaContable.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idProductoCuentaContableActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ProductoCuentaContableConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.productocuentacontableReturnGeneral=new ProductoCuentaContableParameterReturnGeneral();
			
			this.productocuentacontableParameterGeneral=new ProductoCuentaContableParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.productocuentacontableLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ProductoCuentaContableJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ProductoCuentaContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.productocuentacontableSessionBean.getEsGuardarRelacionado(),this.productocuentacontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ProductoCuentaContableConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.productocuentacontableSessionBean.getEsGuardarRelacionado(),this.productocuentacontableSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaDuplicarProductoCuentaContable=true;
			this.isVisibilidadCeldaCopiarProductoCuentaContable=true;
			this.isVisibilidadCeldaVerFormProductoCuentaContable=true;
			this.isVisibilidadCeldaOrdenProductoCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			
			
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCuentaContableCosto=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableDebito=true;
			this.isVisibilidadFK_IdCuentaContableDescuento=true;
			this.isVisibilidadFK_IdCuentaContableDevolucion=true;
			this.isVisibilidadFK_IdCuentaContableInventario=true;
			this.isVisibilidadFK_IdCuentaContableVenta=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosProductoCuentaContable();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioProductoCuentaContable(false);
			
			this.setPermisosUsuarioProductoCuentaContable();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado() 
				|| (this.productocuentacontableSessionBean.getEsGuardarRelacionado() && this.productocuentacontableSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioProductoCuentaContableClasesRelacionadas();
			}
			
			if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioProductoCuentaContableClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosProductoCuentaContable();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualProductoCuentaContable();
			}
			
			if(!this.isPermisoBusquedaProductoCuentaContable) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioProductoCuentaContable,this.isPermisoPaginacionMedioProductoCuentaContable,this.isPermisoPaginacionTodoProductoCuentaContable);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ProductoCuentaContableConstantesFunciones.getTiposSeleccionarProductoCuentaContable());
				
				this.tiposColumnasSelect=ProductoCuentaContableConstantesFunciones.getTiposSeleccionarProductoCuentaContable(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioProductoCuentaContable();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioProductoCuentaContable(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioProductoCuentaContable(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesProductoCuentaContable() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.cuentacontableinventarioLogic=new CuentaContableLogic();
			this.cuentacontablecostoLogic=new CuentaContableLogic();
			this.cuentacontableventaLogic=new CuentaContableLogic();
			this.cuentacontabledescuentoLogic=new CuentaContableLogic();
			this.cuentacontabledevolucionLogic=new CuentaContableLogic();
			this.cuentacontabledebitoLogic=new CuentaContableLogic();
			this.cuentacontablecreditoLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				productocuentacontableImplementable= (ProductoCuentaContableImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ProductoCuentaContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				productocuentacontableImplementableHome= (ProductoCuentaContableImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ProductoCuentaContableConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.productocuentacontables= new ArrayList<ProductoCuentaContable>();
			this.productocuentacontablesEliminados= new ArrayList<ProductoCuentaContable>();
						
			this.isEsNuevoProductoCuentaContable=false;
			this.esParaAccionDesdeFormularioProductoCuentaContable=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyProductoCuentaContable(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroProductoCuentaContable();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ProductoCuentaContableConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesProductoCuentaContable("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingProductoCuentaContable(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioProductoCuentaContable();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioProductoCuentaContable();
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasProductoCuentaContable.getTabCount(); i++) {
					this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessProductoCuentaContable(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ProductoCuentaContable: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectProductoCuentaContable() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesProductoCuentaContable")) {
				iIndex=this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessProductoCuentaContable();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyProductoCuentaContable(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyProductoCuentaContable(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyProductoCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyProductoCuentaContableListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyProductoCuentaContable();
		
		this.cargarCombosFrameForeignKeyProductoCuentaContable();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyProductoCuentaContable();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyProductoCuentaContable();
		}
	}
	
	

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDescuento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDescuentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
				this.cargarCombosFrameCuentaContableDescuentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDescuento(this.cuentacontabledescuentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDevolucion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDevolucionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
				this.cargarCombosFrameCuentaContableDevolucionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDevolucion(this.cuentacontabledevolucionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDebito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDebitoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDebito();
				this.cargarCombosFrameCuentaContableDebitosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDebito(this.cuentacontabledebitosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoProductoCuentaContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			
			if(jTableDatosProductoCuentaContable.getRowCount()>=1) {
				jTableDatosProductoCuentaContable.removeRowSelectionInterval(0, jTableDatosProductoCuentaContable.getRowCount()-1);						
			}
			
			this.isEsNuevoProductoCuentaContable=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoProductoCuentaContable(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesProductoCuentaContable(true);			
			//this.productocuentacontable=new ProductoCuentaContable();
			//this.productocuentacontable.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductoCuentaContable(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductoCuentaContable() ;
			
			if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductoCuentaContable(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.productocuentacontable);	
			this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);				
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ProductoCuentaContable: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarProductoCuentaContableActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosProductoCuentaContable.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosProductoCuentaContable.getSelectedRows().length;			
			}
			
			productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoProductoCuentaContable--;			
				//ProductoCuentaContable productocuentacontableAux= new ProductoCuentaContable();			
				//productocuentacontableAux.setId(this.iIdNuevoProductoCuentaContable);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ProductoCuentaContable productocuentacontableOrigen=new ProductoCuentaContable();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ProductoCuentaContable productocuentacontableOrigen : productocuentacontablesSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							productocuentacontableOrigen =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							productocuentacontableOrigen =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaProductoCuentaContable();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.productocuentacontable.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosProductoCuentaContable(productocuentacontableOrigen,this.productocuentacontable,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.productocuentacontableLogic.getProductoCuentaContables().add(this.productocuentacontableAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.productocuentacontables.add(this.productocuentacontableAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
				
				this.jTableDatosProductoCuentaContable.setRowSelectionInterval(this.getIndiceNuevoProductoCuentaContable(), this.getIndiceNuevoProductoCuentaContable());
				
				int iLastRow =  this.jTableDatosProductoCuentaContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosProductoCuentaContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosProductoCuentaContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaProductoCuentaContable(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();									
		
			ProductoCuentaContable productocuentacontableOrigen=new ProductoCuentaContable();
			ProductoCuentaContable productocuentacontableDestino=new ProductoCuentaContable();
				
			productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosProductoCuentaContable.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || productocuentacontablesSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosProductoCuentaContable.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableOrigen =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						productocuentacontableOrigen =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						productocuentacontableDestino =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						productocuentacontableDestino =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				productocuentacontableOrigen =productocuentacontablesSeleccionados.get(0);
				productocuentacontableDestino =productocuentacontablesSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosProductoCuentaContable(productocuentacontableOrigen,productocuentacontableDestino,true,false);
				
				productocuentacontableDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(productocuentacontableDestino,productocuentacontableLogic.getProductoCuentaContables());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(productocuentacontableDestino,productocuentacontables);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
				
				//this.jTableDatosProductoCuentaContable.setRowSelectionInterval(this.getIndiceNuevoProductoCuentaContable(), this.getIndiceNuevoProductoCuentaContable());
				
				int iLastRow =  this.jTableDatosProductoCuentaContable.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosProductoCuentaContable.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosProductoCuentaContable.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaProductoCuentaContable(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormProductoCuentaContable.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesProductoCuentaContable.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesProductoCuentaContable.setVisible(!isVisible);
			this.jPanelPaginacionProductoCuentaContable.setVisible(!isVisible);
			this.jPanelAccionesProductoCuentaContable.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameProductoCuentaContable();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoProductoCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionProductoCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByProductoCuentaContable();
			
			this.abrirFrameOrderByProductoCuentaContable();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByProductoCuentaContable();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleProductoCuentaContable(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormProductoCuentaContable);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormProductoCuentaContable.isMaximum()) {
					this.jInternalFrameDetalleFormProductoCuentaContable.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormProductoCuentaContable.setSize(this.jInternalFrameDetalleFormProductoCuentaContable.iWidthFormulario,this.jInternalFrameDetalleFormProductoCuentaContable.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormProductoCuentaContable.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormProductoCuentaContable.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormProductoCuentaContable.isMaximum()) {
						this.jInternalFrameDetalleFormProductoCuentaContable.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormProductoCuentaContable.jContentPaneDetalleProductoCuentaContable.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormProductoCuentaContable.jContentPaneDetalleProductoCuentaContable.getWidth(),ProductoCuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormProductoCuentaContable.jContentPaneDetalleProductoCuentaContable.getWidth(),ProductoCuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormProductoCuentaContable.jContentPaneDetalleProductoCuentaContable.getWidth(),ProductoCuentaContableConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormProductoCuentaContable.setVisible(true);
	        this.jInternalFrameDetalleFormProductoCuentaContable.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByProductoCuentaContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByProductoCuentaContable==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByProductoCuentaContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByProductoCuentaContable,false,this);
				} else {
					this.jInternalFrameOrderByProductoCuentaContable=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByProductoCuentaContable,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByProductoCuentaContable);
				this.jInternalFrameOrderByProductoCuentaContable.setVisible(false);
				this.jInternalFrameOrderByProductoCuentaContable.setSelected(false);
				
				this.jInternalFrameOrderByProductoCuentaContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByProductoCuentaContable"));
				
				this.inicializarActualizarBindingTablaOrderByProductoCuentaContable();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionProductoCuentaContable() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionProductoCuentaContable==null) {
				
				this.jInternalFrameImportacionProductoCuentaContable=new ImportacionJInternalFrame(ProductoCuentaContableConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionProductoCuentaContable);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionProductoCuentaContable);
				this.jInternalFrameImportacionProductoCuentaContable.setVisible(false);
				this.jInternalFrameImportacionProductoCuentaContable.setSelected(false);


				this.jInternalFrameImportacionProductoCuentaContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionProductoCuentaContable"));
				this.jInternalFrameImportacionProductoCuentaContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionProductoCuentaContable"));
				this.jInternalFrameImportacionProductoCuentaContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionProductoCuentaContable"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoProductoCuentaContable() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoProductoCuentaContable==null) {
				this.jInternalFrameReporteDinamicoProductoCuentaContable=new ReporteDinamicoJInternalFrame(ProductoCuentaContableConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoProductoCuentaContable);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoProductoCuentaContable);
				this.jInternalFrameReporteDinamicoProductoCuentaContable.setVisible(false);
				this.jInternalFrameReporteDinamicoProductoCuentaContable.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductoCuentaContable"));
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductoCuentaContable"));
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductoCuentaContable"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductoCuentaContable();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleProductoCuentaContable() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormProductoCuentaContable);
			
	       	this.jInternalFrameDetalleFormProductoCuentaContable.setVisible(false);
	        this.jInternalFrameDetalleFormProductoCuentaContable.setSelected(false);
			
			//this.jInternalFrameDetalleFormProductoCuentaContable.dispose();
			//this.jInternalFrameDetalleFormProductoCuentaContable=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoProductoCuentaContable() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoProductoCuentaContable.setVisible(true);
	        this.jInternalFrameReporteDinamicoProductoCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionProductoCuentaContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionProductoCuentaContable.setVisible(true);
	        this.jInternalFrameImportacionProductoCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByProductoCuentaContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByProductoCuentaContable.setVisible(true);
	        this.jInternalFrameOrderByProductoCuentaContable.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByProductoCuentaContable() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByProductoCuentaContable.setVisible(false);
	        this.jInternalFrameOrderByProductoCuentaContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoProductoCuentaContable() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoProductoCuentaContable.setVisible(false);
	        this.jInternalFrameReporteDinamicoProductoCuentaContable.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionProductoCuentaContable() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionProductoCuentaContable.setVisible(false);
	        this.jInternalFrameImportacionProductoCuentaContable.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventario(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventario";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableInventario=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventario.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventario(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCosto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableCosto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCosto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCosto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableVenta.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDescuento(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDescuento";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableDescuento=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDescuento.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDescuento(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDevolucion(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDevolucion";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableDevolucion=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDevolucion.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDevolucion(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDebito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDebito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableDebito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDebito.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDebito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
						TitledBorder titledBorderCuentaContableCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCredito.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarProductoCuentaContable(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarProductoCuentaContable(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesProductoCuentaContable(true);
			//this.isEsNuevoProductoCuentaContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesProductoCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductoCuentaContable(false) ;
			
			if(productocuentacontableSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductoCuentaContable(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductoCuentaContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaProductoCuentaContableActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarProductoCuentaContable(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesProductoCuentaContable(true);
			//this.isEsNuevoProductoCuentaContable=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.productocuentacontable.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesProductoCuentaContable("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesProductoCuentaContable(false) ;
			
			if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleProductoCuentaContable(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductoCuentaContable(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.productocuentacontableConstantesFunciones.cargarid_productoProductoCuentaContable) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingProductoCuentaContable(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventario(List<CuentaContable> cuentacontableinventariosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventario=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));
		TableCellEditor tableCellEditorCuentaContableInventario =tableColumnCuentaContableInventario.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventario;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventariosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCosto(List<CuentaContable> cuentacontablecostosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCosto=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));
		TableCellEditor tableCellEditorCuentaContableCosto =tableColumnCuentaContableCosto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCosto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableVenta(List<CuentaContable> cuentacontableventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableVenta=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));
		TableCellEditor tableCellEditorCuentaContableVenta =tableColumnCuentaContableVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDescuento(List<CuentaContable> cuentacontabledescuentosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDescuento=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));
		TableCellEditor tableCellEditorCuentaContableDescuento =tableColumnCuentaContableDescuento.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDescuento;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledescuentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledescuentosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDevolucion(List<CuentaContable> cuentacontabledevolucionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDevolucion=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));
		TableCellEditor tableCellEditorCuentaContableDevolucion =tableColumnCuentaContableDevolucion.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDevolucion;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledevolucionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledevolucionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDebito(List<CuentaContable> cuentacontabledebitosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDebito=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));
		TableCellEditor tableCellEditorCuentaContableDebito =tableColumnCuentaContableDebito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDebito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledebitosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledebitosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCredito(List<CuentaContable> cuentacontablecreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCredito=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));
		TableCellEditor tableCellEditorCuentaContableCredito =tableColumnCuentaContableCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesProductoCuentaContable(false);
			
			//if(!this.isEsNuevoProductoCuentaContable) {								
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				
			}
			
			if(this.permiteMantenimiento(this.productocuentacontable)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoProductoCuentaContable=true;
					this.inicializarActualizarBindingTablaProductoCuentaContable(false);
					this.isEsNuevoProductoCuentaContable=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoProductoCuentaContable=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoProductoCuentaContable=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesProductoCuentaContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductoCuentaContable(false);
				
				this.habilitarDeshabilitarControlesProductoCuentaContable(false);
			
												
				
				if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleProductoCuentaContable();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoProductoCuentaContableActionPerformed(evt,productocuentacontableSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualProductoCuentaContable(this.productocuentacontable,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,productocuentacontableSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.productocuentacontable.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				this.productocuentacontable.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				this.productocuentacontable.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.productocuentacontable)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ProductoCuentaContableModel) this.jTableDatosProductoCuentaContable.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoProductoCuentaContable=true;
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
				this.isEsNuevoProductoCuentaContable=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesProductoCuentaContable(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductoCuentaContable(false);
				
				this.habilitarDeshabilitarControlesProductoCuentaContable(false);
				
				
				
				if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleProductoCuentaContable();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosProductoCuentaContable.getRowCount()>=1) {
				jTableDatosProductoCuentaContable.removeRowSelectionInterval(0, jTableDatosProductoCuentaContable.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesProductoCuentaContable(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesProductoCuentaContable(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualProductoCuentaContable(false) ;
			
			this.isEsNuevoProductoCuentaContable=false;
			
			if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleProductoCuentaContable();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingProductoCuentaContable(false);
				
				//SI ES MANUAL
				if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualProductoCuentaContable();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoProductoCuentaContable--;			
			//ProductoCuentaContable productocuentacontableAux= new ProductoCuentaContable();			
			//productocuentacontableAux.setId(this.iIdNuevoProductoCuentaContable);
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaProductoCuentaContable();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
			
			this.productocuentacontable.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.productocuentacontableLogic.getProductoCuentaContables().add(this.productocuentacontableAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.productocuentacontables.add(this.productocuentacontableAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			
			this.jTableDatosProductoCuentaContable.setRowSelectionInterval(this.getIndiceNuevoProductoCuentaContable(), this.getIndiceNuevoProductoCuentaContable());
			
			int iLastRow =  this.jTableDatosProductoCuentaContable.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosProductoCuentaContable.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosProductoCuentaContable.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductoCuentaContable(false);
			
			//SI ES MANUAL
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductoCuentaContable();
			}
			
			//this.abrirFrameTreeProductoCuentaContable();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Producto Cuenta ContableS ?", "MANTENIMIENTO DE Producto Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionProductoCuentaContable.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralProductoCuentaContable();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.productocuentacontableReturnGeneral=productocuentacontableLogic.procesarImportacionProductoCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.productocuentacontableParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarProductoCuentaContableReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionProductoCuentaContable.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionProductoCuentaContable.setFileImportacion(this.jInternalFrameImportacionProductoCuentaContable.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionProductoCuentaContable.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionProductoCuentaContable.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionProductoCuentaContable.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionProductoCuentaContable.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		

		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ProductoCuentaContableBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ProductoCuentaContableBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDevolucion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDevolucion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDevolucion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDevolucion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDebito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDebito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDebito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDebito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoProductoCuentaContable.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoria="id_cuenta_contable_inventario";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoria="id_cuenta_contable_costo";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoria="id_cuenta_contable_venta";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoria="id_cuenta_contable_descuento";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoria="id_cuenta_contable_devolucion";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoria="id_cuenta_contable_debito";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoria="id_cuenta_contable_credito";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_venta";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_descuento";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					sNombreCampoCategoriaValor="id_cuenta_contable_devolucion";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_debito";
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_venta");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_descuento");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Devolucion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_devolucion");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Debito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_debito");
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ProductoCuentaContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontableinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontablecosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontableventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontabledescuento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontabledevolucion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontabledebito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
					iRow++;

					for(ProductoCuentaContable productocuentacontable:productocuentacontablesSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(productocuentacontable.getcuentacontablecredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelProductoCuentaContable(row);				
			//	iRow++;
			//}				
			
			//for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelProductoCuentaContable(productocuentacontableAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductoCuentaContable(false);
			
			//SI ES MANUAL
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualProductoCuentaContable();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductoCuentaContable(false);
			
			//SI ES MANUAL
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualProductoCuentaContable();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingProductoCuentaContable(false);
			
			//SI ES MANUAL
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualProductoCuentaContable();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaProductoCuentaContable() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosProductoCuentaContable.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosProductoCuentaContable.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosProductoCuentaContable.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosProductoCuentaContable.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosProductoCuentaContable.setMinimumSize(dimensionMinimum);
		this.jTableDatosProductoCuentaContable.setMaximumSize(dimensionMaximum);
		this.jTableDatosProductoCuentaContable.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingProductoCuentaContable(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingProductoCuentaContable(esInicializar,true);
	}
	
	public void inicializarActualizarBindingProductoCuentaContable(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaProductoCuentaContable(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesProductoCuentaContable(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasProductoCuentaContable(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesProductoCuentaContable(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesProductoCuentaContable(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualProductoCuentaContable() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaProductoCuentaContable();
		
		this.inicializarActualizarBindingBotonesManualProductoCuentaContable(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualProductoCuentaContable();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesProductoCuentaContable() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualProductoCuentaContable(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualProductoCuentaContable(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosProductoCuentaContable.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosProductoCuentaContable.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteProductoCuentaContable.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionNuevoProductoCuentaContable.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionSinCerrarProductoCuentaContable.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionSinMensajeProductoCuentaContable.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosProductoCuentaContable.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosProductoCuentaContable.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteProductoCuentaContable.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionNuevoProductoCuentaContable.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionSinCerrarProductoCuentaContable.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormProductoCuentaContable.jCheckBoxPostAccionSinMensajeProductoCuentaContable.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionProductoCuentaContable.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionProductoCuentaContable.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesProductoCuentaContable.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesProductoCuentaContable.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesProductoCuentaContable.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarProductoCuentaContable.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesProductoCuentaContable.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesProductoCuentaContable.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralProductoCuentaContable.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesProductoCuentaContable(Boolean esInicializar) throws Exception {
		try	{	
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualProductoCuentaContable(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesProductoCuentaContable() throws Exception {
		try	{
			if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualProductoCuentaContable();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleProductoCuentaContable() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualProductoCuentaContable() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesProductoCuentaContable.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesProductoCuentaContable.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesProductoCuentaContable.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionProductoCuentaContable.addItem(reporte);
			}
			
			
			if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionProductoCuentaContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionProductoCuentaContable.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesProductoCuentaContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesProductoCuentaContable.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarProductoCuentaContable.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarProductoCuentaContable.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarProductoCuentaContable.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductoCuentaContable();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualProductoCuentaContable() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
				
				if(this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoProductoCuentaContable.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualProductoCuentaContable()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_costoFK_IdCuentaContableCosto=((CuentaContable)this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_creditoFK_IdCuentaContableCredito=((CuentaContable)this.jComboBoxid_cuenta_contable_creditoFK_IdCuentaContableCreditoProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_debitoFK_IdCuentaContableDebito=((CuentaContable)this.jComboBoxid_cuenta_contable_debitoFK_IdCuentaContableDebitoProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_descuentoFK_IdCuentaContableDescuento=((CuentaContable)this.jComboBoxid_cuenta_contable_descuentoFK_IdCuentaContableDescuentoProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_devolucionFK_IdCuentaContableDevolucion=((CuentaContable)this.jComboBoxid_cuenta_contable_devolucionFK_IdCuentaContableDevolucionProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario=((CuentaContable)this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.getSelectedItem()!=null){this.id_cuenta_contable_ventaFK_IdCuentaContableVenta=((CuentaContable)this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaProductoCuentaContable.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoProductoCuentaContable.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasProductoCuentaContable(Boolean esInicializar) throws Exception {				
		if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualProductoCuentaContable();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaProductoCuentaContable() throws Exception {
		this.inicializarActualizarBindingTablaProductoCuentaContable(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByProductoCuentaContable() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosProductoCuentaContableOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContableOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaProductoCuentaContable(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=productocuentacontableLogic.getProductoCuentaContables().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=productocuentacontables.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosProductoCuentaContable.setModel(new ProductoCuentaContableModel(this.productocuentacontableLogic.getProductoCuentaContables(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosProductoCuentaContable.setModel(new ProductoCuentaContableModel(this.productocuentacontables,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByProductoCuentaContable!=null && this.jInternalFrameOrderByProductoCuentaContable.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByProductoCuentaContable();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ProductoCuentaContableConstantesFunciones.SCLASSWEBTITULO,productocuentacontableConstantesFunciones.resaltarSeleccionarProductoCuentaContable,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ProductoCuentaContableConstantesFunciones.SCLASSWEBTITULO,productocuentacontableConstantesFunciones.resaltarSeleccionarProductoCuentaContable,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_ID));

		if(this.productocuentacontableConstantesFunciones.mostraridProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.productocuentacontableConstantesFunciones.resaltaridProductoCuentaContable,this.productocuentacontableConstantesFunciones.activaridProductoCuentaContable,this,true,"idProductoCuentaContable","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.productocuentacontableConstantesFunciones.resaltaridProductoCuentaContable,this.productocuentacontableConstantesFunciones.activaridProductoCuentaContable,this,true,"idProductoCuentaContable","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA));

		if(this.productocuentacontableConstantesFunciones.mostrarid_empresaProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_empresaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_empresaProductoCuentaContable));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_empresaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_empresaProductoCuentaContable,false,"id_empresaProductoCuentaContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.productocuentacontableConstantesFunciones.mostrarid_sucursalProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_sucursalProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_sucursalProductoCuentaContable));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_sucursalProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_sucursalProductoCuentaContable,false,"id_sucursalProductoCuentaContable","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA));

		if(this.productocuentacontableConstantesFunciones.mostrarid_bodegaProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_bodegaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_bodegaProductoCuentaContable));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_bodegaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_bodegaProductoCuentaContable,true,"id_bodegaProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_productoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_productoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_productoProductoCuentaContable));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_productoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_productoProductoCuentaContable,true,"id_productoProductoCuentaContable","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_centro_costoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_centro_costoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_centro_costoProductoCuentaContable));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_centro_costoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_centro_costoProductoCuentaContable,true,"id_centro_costoProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_inventarioProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_inventarioProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_inventarioProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_inventarioProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_inventarioProductoCuentaContable,true,"id_cuenta_contable_inventarioProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_costoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_costoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_costoProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_costoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_costoProductoCuentaContable,true,"id_cuenta_contable_costoProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_ventaProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_ventaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_ventaProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_ventaProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_ventaProductoCuentaContable,true,"id_cuenta_contable_ventaProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_descuentoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_descuentoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_descuentoProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledescuentosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_descuentoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_descuentoProductoCuentaContable,true,"id_cuenta_contable_descuentoProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_devolucionProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_devolucionProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_devolucionProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledevolucionsForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_devolucionProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_devolucionProductoCuentaContable,true,"id_cuenta_contable_devolucionProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_debitoProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledebitosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_debitoProductoCuentaContable,true,"id_cuenta_contable_debitoProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));

		if(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoProductoCuentaContable && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_creditoProductoCuentaContable));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditosForeignKey,this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoProductoCuentaContable,this,this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_creditoProductoCuentaContable,true,"id_cuenta_contable_creditoProductoCuentaContable","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ProductoCuentaContablePropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosProductoCuentaContable.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosProductoCuentaContable.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.productocuentacontableSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosProductoCuentaContable.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosProductoCuentaContable.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosProductoCuentaContable.moveColumn(this.jTableDatosProductoCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosProductoCuentaContable.moveColumn(this.jTableDatosProductoCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosProductoCuentaContable.moveColumn(this.jTableDatosProductoCuentaContable.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosProductoCuentaContable.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosProductoCuentaContable.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosProductoCuentaContable,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosProductoCuentaContable.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosProductoCuentaContable.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosProductoCuentaContable.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosProductoCuentaContable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=productocuentacontableLogic.getProductoCuentaContables().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=productocuentacontables.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosProductoCuentaContable.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosProductoCuentaContable.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosProductoCuentaContable();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoProductoCuentaContable=false;
					
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
				if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormProductoCuentaContable==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosProductoCuentaContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.productocuentacontable.getsType().equals("DUPLICADO")
				   || this.productocuentacontable.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoProductoCuentaContable=true;
				
				} else {
					this.isEsNuevoProductoCuentaContable=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					if(this.productocuentacontable.getId()>=0 && !this.productocuentacontable.getIsNew()) {						
						this.isEsNuevoProductoCuentaContable=false;
						
					} else {
						this.isEsNuevoProductoCuentaContable=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoProductoCuentaContable(esRelaciones);						
				
				this.seleccionarProductoCuentaContable(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.productocuentacontable.getId()<0) {
					this.isEsNuevoProductoCuentaContable=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarProductoCuentaContable(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarProductoCuentaContable(evt,rowIndex);
				}	
				
				if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ProductoCuentaContable: " + this.dDif); 
					}
				}								
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarProductoCuentaContable(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.productocuentacontable)) {
					if(this.productocuentacontable.getId()>0) {
						this.productocuentacontable.setIsDeleted(true);
						
						this.productocuentacontablesEliminados.add(this.productocuentacontable);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.productocuentacontableLogic.getProductoCuentaContables().remove(this.productocuentacontable);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.productocuentacontables.remove(this.productocuentacontable);				
					}
					
					
					((ProductoCuentaContableModel) this.jTableDatosProductoCuentaContable.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaProductoCuentaContable(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarProductoCuentaContable(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoProductoCuentaContable) {
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosProductoCuentaContable.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosProductoCuentaContable.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontable);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.productocuentacontableConstantesFunciones.cargarid_empresaProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_empresaProductoCuentaContable) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.productocuentacontable.getid_empresa());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(productocuentacontable.getEmpresa()!=null) {
							this.empresasForeignKey.add(productocuentacontable.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.productocuentacontable.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.productocuentacontableConstantesFunciones.cargarid_sucursalProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_sucursalProductoCuentaContable) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.productocuentacontable.getid_sucursal());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(productocuentacontable.getSucursal()!=null) {
							this.sucursalsForeignKey.add(productocuentacontable.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.productocuentacontable.getid_sucursal(),false,"Formulario");

					//Bodega
					if(!this.productocuentacontableConstantesFunciones.cargarid_bodegaProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_bodegaProductoCuentaContable) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.productocuentacontable.getid_bodega());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(productocuentacontable.getBodega()!=null) {
							this.bodegasForeignKey.add(productocuentacontable.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.productocuentacontable.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.productocuentacontableConstantesFunciones.cargarid_productoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_productoProductoCuentaContable) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.productocuentacontable.getid_producto());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(productocuentacontable.getProducto()!=null) {
							this.productosForeignKey.add(productocuentacontable.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.productocuentacontable.getid_producto(),false,"Formulario");

					//CentroCosto
					if(!this.productocuentacontableConstantesFunciones.cargarid_centro_costoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_centro_costoProductoCuentaContable) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.productocuentacontable.getid_centro_costo());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(productocuentacontable.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(productocuentacontable.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.productocuentacontable.getid_centro_costo(),false,"Formulario");

					//CuentaContableInventario
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_inventarioProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_inventarioProductoCuentaContable) {
						//this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_inventario());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableInventario()!=null) {
							this.cuentacontableinventariosForeignKey.add(productocuentacontable.getCuentaContableInventario());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventario();
						this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioForeignKey(this.productocuentacontable.getid_cuenta_contable_inventario(),false,"Formulario");

					//CuentaContableCosto
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_costoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_costoProductoCuentaContable) {
						//this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_costo());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableCosto()!=null) {
							this.cuentacontablecostosForeignKey.add(productocuentacontable.getCuentaContableCosto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCosto();
						this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
					}
					this.setActualCuentaContableCostoForeignKey(this.productocuentacontable.getid_cuenta_contable_costo(),false,"Formulario");

					//CuentaContableVenta
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_ventaProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_ventaProductoCuentaContable) {
						//this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_venta());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableVenta()!=null) {
							this.cuentacontableventasForeignKey.add(productocuentacontable.getCuentaContableVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableVenta();
						this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
					}
					this.setActualCuentaContableVentaForeignKey(this.productocuentacontable.getid_cuenta_contable_venta(),false,"Formulario");

					//CuentaContableDescuento
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_descuentoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_descuentoProductoCuentaContable) {
						//this.cargarCombosCuentaContableDescuentosForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_descuento());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontabledescuentosForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableDescuento()!=null) {
							this.cuentacontabledescuentosForeignKey.add(productocuentacontable.getCuentaContableDescuento());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDescuento();
						this.cargarCombosFrameCuentaContableDescuentosForeignKey("Todos");
					}
					this.setActualCuentaContableDescuentoForeignKey(this.productocuentacontable.getid_cuenta_contable_descuento(),false,"Formulario");

					//CuentaContableDevolucion
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_devolucionProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_devolucionProductoCuentaContable) {
						//this.cargarCombosCuentaContableDevolucionsForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_devolucion());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontabledevolucionsForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableDevolucion()!=null) {
							this.cuentacontabledevolucionsForeignKey.add(productocuentacontable.getCuentaContableDevolucion());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDevolucion();
						this.cargarCombosFrameCuentaContableDevolucionsForeignKey("Todos");
					}
					this.setActualCuentaContableDevolucionForeignKey(this.productocuentacontable.getid_cuenta_contable_devolucion(),false,"Formulario");

					//CuentaContableDebito
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_debitoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_debitoProductoCuentaContable) {
						//this.cargarCombosCuentaContableDebitosForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_debito());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontabledebitosForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableDebito()!=null) {
							this.cuentacontabledebitosForeignKey.add(productocuentacontable.getCuentaContableDebito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDebito();
						this.cargarCombosFrameCuentaContableDebitosForeignKey("Todos");
					}
					this.setActualCuentaContableDebitoForeignKey(this.productocuentacontable.getid_cuenta_contable_debito(),false,"Formulario");

					//CuentaContableCredito
					if(!this.productocuentacontableConstantesFunciones.cargarid_cuenta_contable_creditoProductoCuentaContable || this.productocuentacontableConstantesFunciones.event_dependid_cuenta_contable_creditoProductoCuentaContable) {
						//this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+this.productocuentacontable.getid_cuenta_contable_credito());
									//this.inicializarActualizarBindingProductoCuentaContable(false,false);
						this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

						if(productocuentacontable.getCuentaContableCredito()!=null) {
							this.cuentacontablecreditosForeignKey.add(productocuentacontable.getCuentaContableCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCredito();
						this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoForeignKey(this.productocuentacontable.getid_cuenta_contable_credito(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesProductoCuentaContable("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesProductoCuentaContable(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualProductoCuentaContable() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoProductoCuentaContable(ProductoCuentaContable productocuentacontable) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoProductoCuentaContable(productocuentacontable,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoProductoCuentaContable(ProductoCuentaContable productocuentacontable,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioProductoCuentaContable(productocuentacontable);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyProductoCuentaContable(productocuentacontable,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyProductoCuentaContable(productocuentacontable);
	}
	
	public void setVariablesObjetoActualToFormularioProductoCuentaContable(ProductoCuentaContable productocuentacontable) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setText(productocuentacontable.getId().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ProductoCuentaContable productocuentacontableLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,productocuentacontableLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ProductoCuentaContable productocuentacontableLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				productocuentacontableLocal=this.productocuentacontable;
			} else {
				productocuentacontableLocal=this.productocuentacontableAnterior;
			}
		}
		
		if(this.permiteMantenimiento(productocuentacontableLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoProductoCuentaContable(productocuentacontableLocal,true);
					
					if(productocuentacontableSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(productocuentacontableLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(productocuentacontableLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoProductoCuentaContable(ProductoCuentaContable productocuentacontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualProductoCuentaContable(productocuentacontable,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(productocuentacontable);
	}
	
	public void setVariablesFormularioToObjetoActualProductoCuentaContable(ProductoCuentaContable productocuentacontable,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualProductoCuentaContable(productocuentacontable,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualProductoCuentaContable(ProductoCuentaContable productocuentacontable,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.getText()==null || this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.getText()=="" || this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.getText()=="Id") {
				this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setText("0");
			}

			if(conColumnasBase) {productocuentacontable.setId(Long.parseLong(this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ProductoCuentaContableConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormProductoCuentaContable.jLabelIdProductoCuentaContable,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualProductoCuentaContable(ProductoCuentaContable productocuentacontableBean,ProductoCuentaContable productocuentacontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && productocuentacontableBean.getid_bodega()!=null && !productocuentacontableBean.getid_bodega().equals(-1L))) {productocuentacontable.setid_bodega(productocuentacontableBean.getid_bodega());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_producto()!=null && !productocuentacontableBean.getid_producto().equals(-1L))) {productocuentacontable.setid_producto(productocuentacontableBean.getid_producto());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_centro_costo()!=null && !productocuentacontableBean.getid_centro_costo().equals(null))) {productocuentacontable.setid_centro_costo(productocuentacontableBean.getid_centro_costo());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_inventario()!=null && !productocuentacontableBean.getid_cuenta_contable_inventario().equals(-1L))) {productocuentacontable.setid_cuenta_contable_inventario(productocuentacontableBean.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_costo()!=null && !productocuentacontableBean.getid_cuenta_contable_costo().equals(-1L))) {productocuentacontable.setid_cuenta_contable_costo(productocuentacontableBean.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_venta()!=null && !productocuentacontableBean.getid_cuenta_contable_venta().equals(-1L))) {productocuentacontable.setid_cuenta_contable_venta(productocuentacontableBean.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_descuento()!=null && !productocuentacontableBean.getid_cuenta_contable_descuento().equals(-1L))) {productocuentacontable.setid_cuenta_contable_descuento(productocuentacontableBean.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_devolucion()!=null && !productocuentacontableBean.getid_cuenta_contable_devolucion().equals(-1L))) {productocuentacontable.setid_cuenta_contable_devolucion(productocuentacontableBean.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_debito()!=null && !productocuentacontableBean.getid_cuenta_contable_debito().equals(-1L))) {productocuentacontable.setid_cuenta_contable_debito(productocuentacontableBean.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && productocuentacontableBean.getid_cuenta_contable_credito()!=null && !productocuentacontableBean.getid_cuenta_contable_credito().equals(-1L))) {productocuentacontable.setid_cuenta_contable_credito(productocuentacontableBean.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosProductoCuentaContable(ProductoCuentaContable productocuentacontableOrigen,ProductoCuentaContable productocuentacontable,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && productocuentacontableOrigen.getId()!=null && !productocuentacontableOrigen.getId().equals(0L))) {productocuentacontable.setId(productocuentacontableOrigen.getId());}}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_bodega()!=null && !productocuentacontableOrigen.getid_bodega().equals(-1L))) {productocuentacontable.setid_bodega(productocuentacontableOrigen.getid_bodega());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_producto()!=null && !productocuentacontableOrigen.getid_producto().equals(-1L))) {productocuentacontable.setid_producto(productocuentacontableOrigen.getid_producto());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_centro_costo()!=null && !productocuentacontableOrigen.getid_centro_costo().equals(null))) {productocuentacontable.setid_centro_costo(productocuentacontableOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_inventario()!=null && !productocuentacontableOrigen.getid_cuenta_contable_inventario().equals(-1L))) {productocuentacontable.setid_cuenta_contable_inventario(productocuentacontableOrigen.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_costo()!=null && !productocuentacontableOrigen.getid_cuenta_contable_costo().equals(-1L))) {productocuentacontable.setid_cuenta_contable_costo(productocuentacontableOrigen.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_venta()!=null && !productocuentacontableOrigen.getid_cuenta_contable_venta().equals(-1L))) {productocuentacontable.setid_cuenta_contable_venta(productocuentacontableOrigen.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_descuento()!=null && !productocuentacontableOrigen.getid_cuenta_contable_descuento().equals(-1L))) {productocuentacontable.setid_cuenta_contable_descuento(productocuentacontableOrigen.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_devolucion()!=null && !productocuentacontableOrigen.getid_cuenta_contable_devolucion().equals(-1L))) {productocuentacontable.setid_cuenta_contable_devolucion(productocuentacontableOrigen.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_debito()!=null && !productocuentacontableOrigen.getid_cuenta_contable_debito().equals(-1L))) {productocuentacontable.setid_cuenta_contable_debito(productocuentacontableOrigen.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && productocuentacontableOrigen.getid_cuenta_contable_credito()!=null && !productocuentacontableOrigen.getid_cuenta_contable_credito().equals(-1L))) {productocuentacontable.setid_cuenta_contable_credito(productocuentacontableOrigen.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioProductoCuentaContable(ProductoCuentaContable productocuentacontable) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setText(productocuentacontable.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioProductoCuentaContable(ProductoCuentaContableBean productocuentacontableBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setText(productocuentacontableBean.getId().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanProductoCuentaContable(ProductoCuentaContableParameterReturnGeneral productocuentacontableReturnGeneral,ProductoCuentaContableBean productocuentacontableBean,Boolean conDefault) throws Exception { 
		try {
			ProductoCuentaContable productocuentacontableLocal=new ProductoCuentaContable();
			
			productocuentacontableLocal=productocuentacontableReturnGeneral.getProductoCuentaContable();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && productocuentacontableLocal.getId()!=null && !productocuentacontableLocal.getId().equals(0L))) {productocuentacontableBean.setId(productocuentacontableLocal.getId());}}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_bodega()!=null && !productocuentacontableLocal.getid_bodega().equals(-1L))) {productocuentacontableBean.setid_bodega(productocuentacontableLocal.getid_bodega());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_producto()!=null && !productocuentacontableLocal.getid_producto().equals(-1L))) {productocuentacontableBean.setid_producto(productocuentacontableLocal.getid_producto());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_centro_costo()!=null && !productocuentacontableLocal.getid_centro_costo().equals(null))) {productocuentacontableBean.setid_centro_costo(productocuentacontableLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_inventario()!=null && !productocuentacontableLocal.getid_cuenta_contable_inventario().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_inventario(productocuentacontableLocal.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_costo()!=null && !productocuentacontableLocal.getid_cuenta_contable_costo().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_costo(productocuentacontableLocal.getid_cuenta_contable_costo());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_venta()!=null && !productocuentacontableLocal.getid_cuenta_contable_venta().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_venta(productocuentacontableLocal.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_descuento()!=null && !productocuentacontableLocal.getid_cuenta_contable_descuento().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_descuento(productocuentacontableLocal.getid_cuenta_contable_descuento());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_devolucion()!=null && !productocuentacontableLocal.getid_cuenta_contable_devolucion().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_devolucion(productocuentacontableLocal.getid_cuenta_contable_devolucion());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_debito()!=null && !productocuentacontableLocal.getid_cuenta_contable_debito().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_debito(productocuentacontableLocal.getid_cuenta_contable_debito());}
			if(conDefault || (!conDefault && productocuentacontableLocal.getid_cuenta_contable_credito()!=null && !productocuentacontableLocal.getid_cuenta_contable_credito().equals(-1L))) {productocuentacontableBean.setid_cuenta_contable_credito(productocuentacontableLocal.getid_cuenta_contable_credito());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxProductoCuentaContableGenerico(Long idProductoCuentaContableSeleccionado,JComboBox jComboBoxProductoCuentaContable,List<ProductoCuentaContable> productocuentacontablesLocal)throws Exception {
		try {
			ProductoCuentaContable  productocuentacontableTemp=null;

			for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesLocal) {
				if(productocuentacontableAux.getId()!=null && productocuentacontableAux.getId().equals(idProductoCuentaContableSeleccionado)) {
					productocuentacontableTemp=productocuentacontableAux;
					break;
				}
			}

			jComboBoxProductoCuentaContable.setSelectedItem(productocuentacontableTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxProductoCuentaContableGenerico(JComboBox jComboBoxProductoCuentaContable,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxProductoCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxProductoCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxProductoCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxProductoCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxProductoCuentaContable.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxProductoCuentaContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxProductoCuentaContable.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxProductoCuentaContable.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxProductoCuentaContable.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxProductoCuentaContable.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productocuentacontable=(ProductoCuentaContable) productocuentacontableLogic.getProductoCuentaContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			productocuentacontable =(ProductoCuentaContable) productocuentacontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getproducto_descripcion();
			} else {
				//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getproducto_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventario")) {
			//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontableinventario_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontableinventario_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCosto")) {
			//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontablecosto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontablecosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableVenta")) {
			//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontableventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontableventa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDescuento")) {
			//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontabledescuento_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDescuentoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontabledescuento_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDevolucion")) {
			//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontabledevolucion_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDevolucionForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontabledevolucion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDebito")) {
			//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontabledebito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDebitoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontabledebito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCredito")) {
			//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
			if(!productocuentacontable.getIsNew() && !productocuentacontable.getIsChanged() && !productocuentacontable.getIsDeleted()) {
				sDescripcion=productocuentacontable.getcuentacontablecredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=productocuentacontable.getcuentacontablecredito_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ProductoCuentaContable productocuentacontableRow=new ProductoCuentaContable();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productocuentacontableRow=(ProductoCuentaContable) productocuentacontableLogic.getProductoCuentaContables().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			productocuentacontableRow=(ProductoCuentaContable) productocuentacontables.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualProductoCuentaContable(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));			
			this.jButtonDuplicarProductoCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarProductoCuentaContable && this.isPermisoDuplicarProductoCuentaContable));			
			this.jButtonCopiarProductoCuentaContable.setVisible((this.isVisibilidadCeldaCopiarProductoCuentaContable && this.isPermisoCopiarProductoCuentaContable));
			this.jButtonVerFormProductoCuentaContable.setVisible((this.isVisibilidadCeldaVerFormProductoCuentaContable && this.isPermisoVerFormProductoCuentaContable));
			
			this.jButtonAbrirOrderByProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));			
			
			this.jButtonNuevoRelacionesProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));			
			this.jButtonNuevoGuardarCambiosProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarProductoCuentaContable.setVisible((this.isVisibilidadCeldaModificarProductoCuentaContable && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.setVisible((this.isVisibilidadCeldaActualizarProductoCuentaContable && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.setVisible((this.isVisibilidadCeldaEliminarProductoCuentaContable && this.isPermisoEliminarProductoCuentaContable));
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.setVisible(this.isVisibilidadCeldaCancelarProductoCuentaContable);							
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));			
			
			}
						
			this.jButtonGuardarCambiosTablaProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));						
			this.jButtonDuplicarToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarProductoCuentaContable && this.isPermisoDuplicarProductoCuentaContable));						
			this.jButtonCopiarToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaCopiarProductoCuentaContable && this.isPermisoCopiarProductoCuentaContable));			
			this.jButtonVerFormToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaVerFormProductoCuentaContable && this.isPermisoVerFormProductoCuentaContable));			
			this.jButtonAbrirOrderByToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));
			this.jButtonNuevoRelacionesToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));			
			this.jButtonNuevoGuardarCambiosToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));			
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaModificarProductoCuentaContable && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaActualizarProductoCuentaContable  && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaEliminarProductoCuentaContable && this.isPermisoEliminarProductoCuentaContable));
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarToolBarProductoCuentaContable.setVisible(this.isVisibilidadCeldaCancelarProductoCuentaContable);				
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));			
			this.jMenuItemDuplicarProductoCuentaContable.setVisible((this.isVisibilidadCeldaDuplicarProductoCuentaContable && this.isPermisoDuplicarProductoCuentaContable));			
			this.jMenuItemCopiarProductoCuentaContable.setVisible((this.isVisibilidadCeldaCopiarProductoCuentaContable && this.isPermisoCopiarProductoCuentaContable));			
			this.jMenuItemVerFormProductoCuentaContable.setVisible((this.isVisibilidadCeldaVerFormProductoCuentaContable && this.isPermisoVerFormProductoCuentaContable));			
			this.jMenuItemAbrirOrderByProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));			
			//this.jMenuItemMostrarOcultarProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));
			this.jMenuItemDetalleAbrirOrderByProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));			
			//this.jMenuItemDetalleMostrarOcultarProductoCuentaContable.setVisible((this.isVisibilidadCeldaOrdenProductoCuentaContable && this.isPermisoOrdenProductoCuentaContable));			
			this.jMenuItemNuevoRelacionesProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable));			
			this.jMenuItemNuevoGuardarCambiosProductoCuentaContable.setVisible((this.isVisibilidadCeldaNuevoProductoCuentaContable && this.isPermisoNuevoProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));									
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemModificarProductoCuentaContable.setVisible((this.isVisibilidadCeldaModificarProductoCuentaContable && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemActualizarProductoCuentaContable.setVisible((this.isVisibilidadCeldaActualizarProductoCuentaContable && this.isPermisoActualizarProductoCuentaContable));	
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemEliminarProductoCuentaContable.setVisible((this.isVisibilidadCeldaEliminarProductoCuentaContable && this.isPermisoEliminarProductoCuentaContable));
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemCancelarProductoCuentaContable.setVisible(this.isVisibilidadCeldaCancelarProductoCuentaContable);				
			}
			
			this.jMenuItemGuardarCambiosProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));						
			this.jMenuItemGuardarCambiosTablaProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=this.jButtonNuevoProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaDuplicarProductoCuentaContable=this.jButtonDuplicarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaCopiarProductoCuentaContable=this.jButtonCopiarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaVerFormProductoCuentaContable=this.jButtonVerFormProductoCuentaContable.isVisible();
			
			this.isVisibilidadCeldaOrdenProductoCuentaContable=this.jButtonAbrirOrderByProductoCuentaContable.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=this.jButtonNuevoRelacionesProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaModificarProductoCuentaContable=this.jButtonModificarProductoCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.isVisibilidadCeldaActualizarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=this.jButtonGuardarCambiosTablaProductoCuentaContable.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoProductoCuentaContable=this.jButtonNuevoToolBarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=this.jButtonNuevoRelacionesToolBarProductoCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.isVisibilidadCeldaModificarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarToolBarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaActualizarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarToolBarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarToolBarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarToolBarProductoCuentaContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarProductoCuentaContable=this.jButtonGuardarCambiosToolBarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=this.jButtonGuardarCambiosTablaToolBarProductoCuentaContable.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoProductoCuentaContable=this.jMenuItemNuevoProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=this.jMenuItemNuevoRelacionesProductoCuentaContable.isVisible();
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.isVisibilidadCeldaModificarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemModificarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaActualizarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemActualizarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaEliminarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemEliminarProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaCancelarProductoCuentaContable=this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemCancelarProductoCuentaContable.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarProductoCuentaContable=this.jMenuItemGuardarCambiosProductoCuentaContable.isVisible();
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=this.jMenuItemGuardarCambiosTablaProductoCuentaContable.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesProductoCuentaContable(Boolean esInicializar) {
		if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {			
			if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
				//if(this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesProductoCuentaContable();
			}
			
			this.inicializarActualizarBindingBotonesManualProductoCuentaContable(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualProductoCuentaContable() {
		this.jButtonNuevoProductoCuentaContable.setVisible(this.isPermisoNuevoProductoCuentaContable);			
		this.jButtonDuplicarProductoCuentaContable.setVisible(this.isPermisoDuplicarProductoCuentaContable);			
		this.jButtonCopiarProductoCuentaContable.setVisible(this.isPermisoCopiarProductoCuentaContable);			
		this.jButtonVerFormProductoCuentaContable.setVisible(this.isPermisoVerFormProductoCuentaContable);			
		
		this.jButtonAbrirOrderByProductoCuentaContable.setVisible(this.isPermisoOrdenProductoCuentaContable);					
		
		this.jButtonNuevoRelacionesProductoCuentaContable.setVisible(this.isPermisoNuevoProductoCuentaContable);			
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarProductoCuentaContable.setVisible(this.isPermisoActualizarProductoCuentaContable);	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.setVisible(this.isPermisoActualizarProductoCuentaContable);	
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.setVisible(this.isPermisoEliminarProductoCuentaContable);
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.setVisible(this.isVisibilidadCeldaCancelarProductoCuentaContable);						
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.setVisible(this.isPermisoGuardarCambiosProductoCuentaContable);							
		}
		
		this.jButtonGuardarCambiosTablaProductoCuentaContable.setVisible(this.isPermisoActualizarProductoCuentaContable);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleProductoCuentaContable() {
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarProductoCuentaContable.setVisible(this.isPermisoActualizarProductoCuentaContable);	
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.setVisible(this.isPermisoActualizarProductoCuentaContable);	
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.setVisible(this.isPermisoEliminarProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.setVisible(this.isVisibilidadCeldaCancelarProductoCuentaContable);							
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.setVisible((this.isVisibilidadCeldaGuardarProductoCuentaContable && this.isPermisoGuardarCambiosProductoCuentaContable));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosProductoCuentaContable() {
		if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualProductoCuentaContable();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesProductoCuentaContable() {
	}
	
	public void jTableDatosProductoCuentaContableListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarProductoCuentaContable(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.productocuentacontable.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.productocuentacontable.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.productocuentacontable.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.productocuentacontable.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoProductoCuentaContableActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderProductoCuentaContable=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosProductoCuentaContable.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.productocuentacontable.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.productocuentacontable.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventario=true;

			idTienePermisocuentacontableinventario=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventarioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_inventario()!=null) {
					this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventarioBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_inventario());
					this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventarioProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario = "+this.productocuentacontable.getid_cuenta_contable_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecosto=true;

			idTienePermisocuentacontablecosto=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_costo()!=null) {
					this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_costo());
					this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo = "+this.productocuentacontable.getid_cuenta_contable_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_ventaProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableventa=true;

			idTienePermisocuentacontableventa=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_venta()!=null) {
					this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableventaBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_venta());
					this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_ventaProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_venta = "+this.productocuentacontable.getid_cuenta_contable_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledescuento=true;

			idTienePermisocuentacontabledescuento=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledescuento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontabledescuentoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledescuentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledescuentoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_descuento()!=null) {
					this.cuentacontabledescuentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_descuento());
					this.cuentacontabledescuentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledescuentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledescuentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontabledescuento=(TitledBorder)this.cuentacontabledescuentoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledescuento.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_descuentoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_descuento = "+this.productocuentacontable.getid_cuenta_contable_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledevolucion=true;

			idTienePermisocuentacontabledevolucion=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledevolucion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontabledevolucionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledevolucionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledevolucionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_devolucion()!=null) {
					this.cuentacontabledevolucionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_devolucion());
					this.cuentacontabledevolucionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledevolucionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledevolucionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontabledevolucion=(TitledBorder)this.cuentacontabledevolucionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledevolucion.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_devolucionProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_devolucion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_devolucion = "+this.productocuentacontable.getid_cuenta_contable_devolucion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_debitoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledebito=true;

			idTienePermisocuentacontabledebito=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledebito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontabledebitoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledebitoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledebitoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_debito()!=null) {
					this.cuentacontabledebitoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledebitoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_debito());
					this.cuentacontabledebitoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledebitoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledebitoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontabledebito=(TitledBorder)this.cuentacontabledebitoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledebito.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_debitoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_debito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_debito = "+this.productocuentacontable.getid_cuenta_contable_debito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_creditoProductoCuentaContableUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecredito=true;

			idTienePermisocuentacontablecredito=this.tienePermisosUsuarioEnPaginaWebProductoCuentaContable(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosProductoCuentaContable.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosProductoCuentaContable.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);

				this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.productocuentacontableLogic.getConnexion());

				if(this.productocuentacontable.getid_cuenta_contable_credito()!=null) {
					this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoBeanSwingJInternalFrame.setIdActual(this.productocuentacontable.getid_cuenta_contable_credito());
					this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderProductoCuentaContable=(TitledBorder)this.jScrollPanelDatosProductoCuentaContable.getBorder();
				TitledBorder titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderProductoCuentaContable.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_creditoProductoCuentaContableBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.getproductocuentacontable(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.productocuentacontable==null) {
						this.productocuentacontable = new ProductoCuentaContable();
					}

					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);
				}

				if(this.productocuentacontable.getid_cuenta_contable_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito = "+this.productocuentacontable.getid_cuenta_contable_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingProductoCuentaContable(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBodegaProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdBodega();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCentroCosto();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableCosto();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDebitoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableDebito();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDescuentoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableDescuento();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDevolucionProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableDevolucion();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableInventario();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableVentaProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdCuentaContableVenta();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdEmpresa();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdProducto();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalProductoCuentaContableActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingProductoCuentaContable(false,false);

			this.getProductoCuentaContablesFK_IdSucursal();

			this.inicializarActualizarBindingProductoCuentaContable(false);

			//if(ProductoCuentaContableBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingProductoCuentaContable(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.productocuentacontableLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameProductoCuentaContable() {
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
			this.jInternalFrameDetalleFormProductoCuentaContable.setVisible(false);	    			
			this.jInternalFrameDetalleFormProductoCuentaContable.dispose();
			this.jInternalFrameDetalleFormProductoCuentaContable=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
			this.jInternalFrameReporteDinamicoProductoCuentaContable.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoProductoCuentaContable.dispose();
			this.jInternalFrameReporteDinamicoProductoCuentaContable=null;
		}
		
		if(this.jInternalFrameImportacionProductoCuentaContable!=null) {
			this.jInternalFrameImportacionProductoCuentaContable.setVisible(false);	    			
			this.jInternalFrameImportacionProductoCuentaContable.dispose();
			this.jInternalFrameImportacionProductoCuentaContable=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessProductoCuentaContable();
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			
			if(sTipo.equals("NuevoProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarProductoCuentaContable")) {
				jButtonDuplicarProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarProductoCuentaContable")) {
				jButtonCopiarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormProductoCuentaContable")) {
				jButtonVerFormProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarProductoCuentaContable")) {
				jButtonDuplicarProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarProductoCuentaContable")) {
				jButtonDuplicarProductoCuentaContableActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarProductoCuentaContable")) {
				jButtonModificarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarProductoCuentaContable")) {
				jButtonModificarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarProductoCuentaContable")) {
				jButtonModificarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarProductoCuentaContable")) {
				jButtonActualizarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarProductoCuentaContable")) {
				jButtonActualizarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarProductoCuentaContable")) {
				jButtonActualizarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarProductoCuentaContable")) {
				jButtonEliminarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarProductoCuentaContable")) {
				jButtonEliminarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarProductoCuentaContable")) {
				jButtonEliminarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarProductoCuentaContable")) {
				jButtonCancelarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarProductoCuentaContable")) {
				jButtonCancelarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarProductoCuentaContable")) {
				jButtonCancelarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarProductoCuentaContable")) {
				jButtonCerrarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarProductoCuentaContable")) {
				jButtonCerrarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarProductoCuentaContable")) {
				jButtonCerrarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarProductoCuentaContable")) {
				jButtonMostrarOcultarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarProductoCuentaContable")) {
				jButtonCancelarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarProductoCuentaContable")) {
				jButtonCopiarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarProductoCuentaContable")) {
				jButtonVerFormProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarProductoCuentaContable")) {
				jButtonCopiarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormProductoCuentaContable")) {
				jButtonVerFormProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionProductoCuentaContable")) {
				jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarProductoCuentaContable")) {
				jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionProductoCuentaContable")) {
				jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresProductoCuentaContable")) {
				jButtonAnterioresProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarProductoCuentaContable")) {
				jButtonAnterioresProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreProductoCuentaContable")) {
				jButtonAnterioresProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesProductoCuentaContable")) {
				jButtonSiguientesProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarProductoCuentaContable")) {
				jButtonSiguientesProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesProductoCuentaContable")) {
				jButtonSiguientesProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByProductoCuentaContable") || sTipo.equals("MenuItemDetalleAbrirOrderByProductoCuentaContable")) {
				jButtonAbrirOrderByProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarProductoCuentaContable") || sTipo.equals("MenuItemDetalleMostrarOcultarProductoCuentaContable")) {
				jButtonMostrarOcultarProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosProductoCuentaContable")) {
				jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarProductoCuentaContable")) {
				jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosProductoCuentaContable")) {
				jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoProductoCuentaContable")) {
				jButtonCerrarReporteDinamicoProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoProductoCuentaContable")) {
				jButtonGenerarReporteDinamicoProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoProductoCuentaContable")) {
				
				jButtonGenerarExcelReporteDinamicoProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionProductoCuentaContable")) {
				jButtonCerrarImportacionProductoCuentaContableActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionProductoCuentaContable")) {
				
				jButtonGenerarImportacionProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionProductoCuentaContable")) {
				
				jButtonAbrirImportacionProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesProductoCuentaContable")) {
				jComboBoxTiposAccionesProductoCuentaContableActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesProductoCuentaContable")) {
				jComboBoxTiposRelacionesProductoCuentaContableActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioProductoCuentaContable")) {
				jComboBoxTiposAccionesProductoCuentaContableActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarProductoCuentaContable")) {
				
				jComboBoxTiposSeleccionarProductoCuentaContableActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralProductoCuentaContable")) {
				jTextFieldValorCampoGeneralProductoCuentaContableActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByProductoCuentaContable")) {
				jButtonAbrirOrderByProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarProductoCuentaContable")) {
				jButtonAbrirOrderByProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByProductoCuentaContable")) {
				jButtonCerrarOrderByProductoCuentaContableActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idProductoCuentaContableBusqueda")) {
				this.jButtonidProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaProductoCuentaContableUpdate")) {
				this.jButtonid_empresaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaProductoCuentaContableBusqueda")) {
				this.jButtonid_empresaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalProductoCuentaContableUpdate")) {
				this.jButtonid_sucursalProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalProductoCuentaContableBusqueda")) {
				this.jButtonid_sucursalProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaProductoCuentaContableUpdate")) {
				this.jButtonid_bodegaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaProductoCuentaContableBusqueda")) {
				this.jButtonid_bodegaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContable")) {
				this.jButtonid_productoProductoCuentaContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContableUpdate")) {
				this.jButtonid_productoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContableBusqueda")) {
				this.jButtonid_productoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoProductoCuentaContableUpdate")) {
				this.jButtonid_centro_costoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoProductoCuentaContableBusqueda")) {
				this.jButtonid_centro_costoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_costoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_costoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_ventaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_ventaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_debitoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_debitoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_creditoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_creditoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_productoProductoCuentaContable")) {
				this.jButtonid_productoProductoCuentaContableActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaProductoCuentaContable")) {
				this.jButtonFK_IdBodegaProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoProductoCuentaContable")) {
				this.jButtonFK_IdCentroCostoProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCostoProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableCostoProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableCreditoProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableDebitoProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableDebitoProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableDescuentoProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableDescuentoProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableDevolucionProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableDevolucionProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableInventarioProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableInventarioProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableVentaProductoCuentaContable")) {
				this.jButtonFK_IdCuentaContableVentaProductoCuentaContableActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoProductoCuentaContable")) {
				this.jButtonFK_IdProductoProductoCuentaContableActionPerformed(evt);
			}
			
			;
			
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessProductoCuentaContable();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ProductoCuentaContable productocuentacontableLocal=null;
			
			if(!this.getEsControlTabla()) {
				productocuentacontableLocal=this.productocuentacontable;
			} else {
				productocuentacontableLocal=this.productocuentacontableAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
							
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
								
						
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
								
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
							
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
								
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
			
			this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosProductoCuentaContable")) {
					jCheckBoxSeleccionarTodosProductoCuentaContableItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosProductoCuentaContable")) {
					jCheckBoxSeleccionadosProductoCuentaContableItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarProductoCuentaContable")) {
					
				}
				
				


				
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
												
				
				


				
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaProductoCuentaContableActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.productocuentacontable);
				
				this.actualizarInformacion("INFO_PADRE",false,this.productocuentacontable);
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ProductoCuentaContable.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ProductoCuentaContable.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaProductoCuentaContableActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.productocuentacontableAnterior =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarProductoCuentaContable")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosProductoCuentaContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosProductoCuentaContable.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.productocuentacontable =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.productocuentacontable);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarProductoCuentaContable")) {
				
				}
				
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarProductoCuentaContable")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosProductoCuentaContable.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarProductoCuentaContable")) {
			
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessProductoCuentaContable();
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			if(sTipo.equals("NuevoProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarProductoCuentaContable")) {
				jButtonDuplicarProductoCuentaContableActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarProductoCuentaContable")) {
				jButtonCopiarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormProductoCuentaContable")) {
				jButtonVerFormProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesProductoCuentaContable")) {
				jButtonNuevoProductoCuentaContableActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarProductoCuentaContable")) {
				jButtonModificarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarProductoCuentaContable")) {
				jButtonActualizarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarProductoCuentaContable")) {
				jButtonEliminarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarProductoCuentaContable")) {
				jButtonCancelarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarProductoCuentaContable")) {
				jButtonCerrarProductoCuentaContableActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosProductoCuentaContable")) {
				jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosProductoCuentaContable")) {
				jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByProductoCuentaContable")) {
				jButtonAbrirOrderByProductoCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionProductoCuentaContable")) {
				jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresProductoCuentaContable")) {
				jButtonAnterioresProductoCuentaContableActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesProductoCuentaContable")) {
				jButtonSiguientesProductoCuentaContableActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idProductoCuentaContableBusqueda")) {
				this.jButtonidProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaProductoCuentaContableUpdate")) {
				this.jButtonid_empresaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaProductoCuentaContableBusqueda")) {
				this.jButtonid_empresaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalProductoCuentaContableUpdate")) {
				this.jButtonid_sucursalProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalProductoCuentaContableBusqueda")) {
				this.jButtonid_sucursalProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaProductoCuentaContableUpdate")) {
				this.jButtonid_bodegaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaProductoCuentaContableBusqueda")) {
				this.jButtonid_bodegaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContable")) {
				this.jButtonid_productoProductoCuentaContableActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContableUpdate")) {
				this.jButtonid_productoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoProductoCuentaContableBusqueda")) {
				this.jButtonid_productoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoProductoCuentaContableUpdate")) {
				this.jButtonid_centro_costoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoProductoCuentaContableBusqueda")) {
				this.jButtonid_centro_costoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_costoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_costoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_ventaProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_ventaProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_descuentoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_descuentoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_devolucionProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_devolucionProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_debitoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_debitoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_debitoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoProductoCuentaContableUpdate")) {
				this.jButtonid_cuenta_contable_creditoProductoCuentaContableUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoProductoCuentaContableBusqueda")) {
				this.jButtonid_cuenta_contable_creditoProductoCuentaContableBusquedaActionPerformed(evt);
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessProductoCuentaContable();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameProductoCuentaContable")) {
				closingInternalFrameProductoCuentaContable();
				
			} else if(sTipo.equals("jButtonCancelarProductoCuentaContable")) {
				JInternalFrameBase jInternalFrameDetalleFormProductoCuentaContable = (JInternalFrameBase)evt.getSource();
	            	
	            ProductoCuentaContableBeanSwingJInternalFrame jInternalFrameParent=(ProductoCuentaContableBeanSwingJInternalFrame)jInternalFrameDetalleFormProductoCuentaContable.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarProductoCuentaContableActionPerformed(null);
			}
			
			ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.productocuentacontable,new Object(),this.productocuentacontableParameterGeneral,this.productocuentacontableReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormProductoCuentaContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormProductoCuentaContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormProductoCuentaContable(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.productocuentacontable)) {
			if(!esControlTabla) {
				if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);			
				}
				
				if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualProductoCuentaContable(this.productocuentacontable,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.productocuentacontableReturnGeneral=productocuentacontableLogic.procesarEventosProductoCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productocuentacontableLogic.getProductoCuentaContables(),this.productocuentacontable,this.productocuentacontableParameterGeneral,this.isEsNuevoProductoCuentaContable,classes);//this.productocuentacontableLogic.getProductoCuentaContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanProductoCuentaContable(this.productocuentacontableReturnGeneral,this.productocuentacontableBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanProductoCuentaContable(classes,this.productocuentacontableReturnGeneral,this.productocuentacontableBean,false);
					}
						
					if(this.productocuentacontableReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable());	
					}
						
					if(this.productocuentacontableReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable(),classes);//this.productocuentacontableBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioProductoCuentaContable(this.productocuentacontable,classes);//this.productocuentacontableBean);									
				}
			
				if(ProductoCuentaContableJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualProductoCuentaContable(this.productocuentacontable,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysProductoCuentaContable(this.productocuentacontable);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.productocuentacontableAnterior!=null) {
						this.productocuentacontable=this.productocuentacontableAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.productocuentacontableReturnGeneral=productocuentacontableLogic.procesarEventosProductoCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productocuentacontableLogic.getProductoCuentaContables(),this.productocuentacontable,this.productocuentacontableParameterGeneral,this.isEsNuevoProductoCuentaContable,classes);//this.productocuentacontableLogic.getProductoCuentaContable()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.productocuentacontableSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.productocuentacontableSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.productocuentacontableReturnGeneral.getProductoCuentaContable(),productocuentacontableLogic.getProductoCuentaContables());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.productocuentacontableReturnGeneral.getProductoCuentaContable(),this.productocuentacontables);
				}
				//ARCHITECTURE
				
				//this.jTableDatosProductoCuentaContable.repaint();
				
				//((AbstractTableModel) this.jTableDatosProductoCuentaContable.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosProductoCuentaContable();
			}
		}
	}
	
	public void actualizarVisualTableDatosProductoCuentaContable() throws Exception {
		
		ProductoCuentaContableModel productocuentacontableModel=(ProductoCuentaContableModel)this.jTableDatosProductoCuentaContable.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			productocuentacontableModel.productocuentacontables=this.productocuentacontableLogic.getProductoCuentaContables();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			productocuentacontableModel.productocuentacontables=this.productocuentacontables;
		}
		
		
		((ProductoCuentaContableModel) this.jTableDatosProductoCuentaContable.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaProductoCuentaContable() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getproductocuentacontableAnterior(),this.productocuentacontableLogic.getProductoCuentaContables());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getproductocuentacontableAnterior(),this.productocuentacontables);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosProductoCuentaContable();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioProductoCuentaContable(ProductoCuentaContable productocuentacontable,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productocuentacontable,new Object(),generalEntityParameterGeneral,this.productocuentacontableReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.productocuentacontableSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ProductoCuentaContableConstantesFunciones.getClassesRelationshipsOfProductoCuentaContable(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ProductoCuentaContableConstantesFunciones.getClassesRelationshipsFromStringsOfProductoCuentaContable(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormProductoCuentaContable(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ProductoCuentaContableBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.productocuentacontable,new Object(),generalEntityParameterGeneral,this.productocuentacontableReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioProductoCuentaContable(ProductoCuentaContableBean productocuentacontableBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanProductoCuentaContable(ArrayList<Classe> classes,ProductoCuentaContableReturnGeneral productocuentacontableReturnGeneral,ProductoCuentaContableBean productocuentacontableBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualProductoCuentaContable(ProductoCuentaContable productocuentacontable,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.productocuentacontable)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormProductoCuentaContable = new ProductoCuentaContableDetalleFormJInternalFrame(jDesktopPane,this.productocuentacontableSessionBean.getConGuardarRelaciones(),this.productocuentacontableSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.setVisible(false);
		this.jInternalFrameDetalleFormProductoCuentaContable.setSelected(false);						
		
		this.jInternalFrameDetalleFormProductoCuentaContable.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormProductoCuentaContable.productocuentacontableLogic=this.productocuentacontableLogic;
		
		this.cargarCombosFrameForeignKeyProductoCuentaContable("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleProductoCuentaContable();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleProductoCuentaContable();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyProductoCuentaContable("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyProductoCuentaContable();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormProductoCuentaContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarProductoCuentaContable"));
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarProductoCuentaContable"));

		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarProductoCuentaContable"));
					
		this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemModificarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarProductoCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"ActualizarProductoCuentaContable"));
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarProductoCuentaContable"));
						
		this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemActualizarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarProductoCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarProductoCuentaContable"));
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarProductoCuentaContable"));
								
		this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemEliminarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarProductoCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarProductoCuentaContable"));
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarProductoCuentaContable"));
					
		this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemCancelarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarProductoCuentaContable"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemDetalleCerrarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarProductoCuentaContable"));		
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductoCuentaContable"));
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductoCuentaContable"));
		
		
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioProductoCuentaContable"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonidProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableBusqueda"));
		//jButtonid_productoProductoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoProductoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesProductoCuentaContable"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameProductoCuentaContable"));
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarProductoCuentaContable"));
		}
		
		this.jTableDatosProductoCuentaContable.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarProductoCuentaContable"));
		
		this.jTableDatosProductoCuentaContable.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarProductoCuentaContable"));
		
		this.jButtonNuevoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoProductoCuentaContable"));
		
		this.jButtonDuplicarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"DuplicarProductoCuentaContable"));
		
		this.jButtonCopiarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"CopiarProductoCuentaContable"));
		
		this.jButtonVerFormProductoCuentaContable.addActionListener(new ButtonActionListener(this,"VerFormProductoCuentaContable"));
		
		
		this.jButtonNuevoToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoToolBarProductoCuentaContable"));
			
		this.jButtonDuplicarToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"DuplicarToolBarProductoCuentaContable"));
			
		this.jMenuItemNuevoProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoProductoCuentaContable"));
			
		this.jMenuItemDuplicarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarProductoCuentaContable"));		
		
		
		this.jButtonNuevoRelacionesProductoCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoRelacionesProductoCuentaContable"));
		
		
		this.jButtonNuevoRelacionesToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarProductoCuentaContable"));
			
		this.jMenuItemNuevoRelacionesProductoCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesProductoCuentaContable"));		
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarProductoCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonModificarToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ModificarToolBarProductoCuentaContable"));
			
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemModificarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"MenuItemModificarProductoCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"ActualizarProductoCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonActualizarToolBarProductoCuentaContable.addActionListener(new ButtonActionListener(this,"ActualizarToolBarProductoCuentaContable"));
				
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemActualizarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemActualizarProductoCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarProductoCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonEliminarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"EliminarToolBarProductoCuentaContable"));
						
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemEliminarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemEliminarProductoCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarProductoCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonCancelarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CancelarToolBarProductoCuentaContable"));
			
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemCancelarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCancelarProductoCuentaContable"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarProductoCuentaContable"));		
		
		
		this.jButtonCerrarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarProductoCuentaContable"));
		
		
		this.jButtonCerrarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarToolBarProductoCuentaContable"));
			
		this.jMenuItemCerrarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCerrarProductoCuentaContable"));
			
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jMenuItemDetalleCerrarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarProductoCuentaContable"));		
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosProductoCuentaContable"));
		}
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarProductoCuentaContable"));
		}
		
		this.jButtonCopiarToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CopiarToolBarProductoCuentaContable"));
			
		this.jButtonVerFormToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"VerFormToolBarProductoCuentaContable"));
		
		this.jMenuItemGuardarCambiosProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosProductoCuentaContable"));
			
		this.jMenuItemCopiarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemCopiarProductoCuentaContable"));		
		
		this.jMenuItemVerFormProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemVerFormProductoCuentaContable"));		
		
		
		this.jButtonGuardarCambiosTablaProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaProductoCuentaContable"));
		
		
		this.jButtonGuardarCambiosTablaToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarProductoCuentaContable"));
			
		this.jMenuItemGuardarCambiosTablaProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaProductoCuentaContable"));		
		
		
		
		this.jButtonRecargarInformacionProductoCuentaContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionProductoCuentaContable"));
					
		this.jButtonRecargarInformacionToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarProductoCuentaContable"));
		
		this.jMenuItemRecargarInformacionProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionProductoCuentaContable"));		
		
		
		
		this.jButtonAnterioresProductoCuentaContable.addActionListener (new ButtonActionListener(this,"AnterioresProductoCuentaContable"));
		
		
		this.jButtonAnterioresToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"AnterioresToolBarProductoCuentaContable"));
		
		this.jMenuItemAnterioresProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresProductoCuentaContable"));		
		
		
		this.jButtonSiguientesProductoCuentaContable.addActionListener (new ButtonActionListener(this,"SiguientesProductoCuentaContable"));
		
		
		this.jButtonSiguientesToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"SiguientesToolBarProductoCuentaContable"));
			
		this.jMenuItemSiguientesProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesProductoCuentaContable"));
			
		this.jMenuItemAbrirOrderByProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByProductoCuentaContable"));
			
		this.jMenuItemMostrarOcultarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarProductoCuentaContable"));
			
		this.jMenuItemDetalleAbrirOrderByProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByProductoCuentaContable"));
			
		this.jMenuItemDetalleMostarOcultarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarProductoCuentaContable"));		
		
		
		this.jButtonNuevoGuardarCambiosProductoCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosProductoCuentaContable"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarProductoCuentaContable"));
			
		this.jMenuItemNuevoGuardarCambiosProductoCuentaContable.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosProductoCuentaContable"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosProductoCuentaContable.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosProductoCuentaContable"));

		this.jCheckBoxSeleccionadosProductoCuentaContable.addItemListener(new CheckBoxItemListener(this,"SeleccionadosProductoCuentaContable"));
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioProductoCuentaContable"));
		}
		
		
		this.jComboBoxTiposRelacionesProductoCuentaContable.addActionListener (new ButtonActionListener(this,"TiposRelacionesProductoCuentaContable"));
			
		this.jComboBoxTiposAccionesProductoCuentaContable.addActionListener (new ButtonActionListener(this,"TiposAccionesProductoCuentaContable"));
					
		this.jComboBoxTiposSeleccionarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"TiposSeleccionarProductoCuentaContable"));
			
		this.jTextFieldValorCampoGeneralProductoCuentaContable.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralProductoCuentaContable"));		
		
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonidProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableBusqueda"));
		//jButtonid_productoProductoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoProductoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdBodegaProductoCuentaContable"));

			this.jButtonFK_IdCentroCostoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableCostoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableCreditoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableDebitoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDebitoProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableDescuentoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDescuentoProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableDevolucionProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDevolucionProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableInventarioProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioProductoCuentaContable"));

			this.jButtonFK_IdCuentaContableVentaProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaProductoCuentaContable"));

			this.jButtonFK_IdProductoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdProductoProductoCuentaContable"));

			this.jButtonBuscarFK_IdProductoid_productoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContable"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoProductoCuentaContable!=null) {
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductoCuentaContable"));
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductoCuentaContable"));
				this.jInternalFrameReporteDinamicoProductoCuentaContable.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductoCuentaContable"));
			}
			
			//this.jButtonCerrarReporteDinamicoProductoCuentaContable.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoProductoCuentaContable"));				
			//this.jButtonGenerarReporteDinamicoProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoProductoCuentaContable"));
			//this.jButtonGenerarExcelReporteDinamicoProductoCuentaContable.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoProductoCuentaContable"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionProductoCuentaContable!=null) {
				this.jInternalFrameImportacionProductoCuentaContable.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionProductoCuentaContable"));
				this.jInternalFrameImportacionProductoCuentaContable.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionProductoCuentaContable"));
				this.jInternalFrameImportacionProductoCuentaContable.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionProductoCuentaContable"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByProductoCuentaContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByProductoCuentaContable"));
			
			this.jButtonAbrirOrderByToolBarProductoCuentaContable.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarProductoCuentaContable"));			
			
			if(this.jInternalFrameOrderByProductoCuentaContable!=null) {
				this.jInternalFrameOrderByProductoCuentaContable.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByProductoCuentaContable"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormProductoCuentaContable.jTabbedPaneRelacionesProductoCuentaContable.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesProductoCuentaContable"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameProductoCuentaContable();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormProductoCuentaContable.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormProductoCuentaContable = (JInternalFrameBase)event.getSource();
	            	
	            ProductoCuentaContableBeanSwingJInternalFrame jInternalFrameParent=(ProductoCuentaContableBeanSwingJInternalFrame)jInternalFrameDetalleFormProductoCuentaContable.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarProductoCuentaContableActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosProductoCuentaContable.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosProductoCuentaContableListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosProductoCuentaContable.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosProductoCuentaContable.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoProductoCuentaContable";
		inputMap = this.jButtonNuevoProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoProductoCuentaContableActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoProductoCuentaContableActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesProductoCuentaContable";
		inputMap = this.jButtonNuevoRelacionesProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoProductoCuentaContableActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarProductoCuentaContable";
		inputMap = this.jButtonModificarProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarProductoCuentaContable";
		inputMap = this.jButtonActualizarProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarProductoCuentaContable";
		inputMap = this.jButtonEliminarProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarProductoCuentaContable";
		inputMap = this.jButtonCancelarProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarProductoCuentaContable";
		inputMap = this.jButtonCerrarProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosProductoCuentaContable";
		inputMap = this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonGuardarCambiosProductoCuentaContable.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosProductoCuentaContableActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosProductoCuentaContable.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosProductoCuentaContableItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesProductoCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesProductoCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarProductoCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarProductoCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralProductoCuentaContable.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralProductoCuentaContableActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonidProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"idProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_empresaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_sucursalProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_bodegaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaProductoCuentaContableBusqueda"));
		//jButtonid_productoProductoCuentaContable.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoProductoCuentaContableActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContable"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_centro_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_inventarioProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_costoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_ventaProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_descuentoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_descuentoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_devolucionProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_devolucionProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_debitoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_debitoProductoCuentaContableBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_cuenta_contable_creditoProductoCuentaContableBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoProductoCuentaContableBusqueda"));
		
		
		this.jButtonFK_IdBodegaProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdBodegaProductoCuentaContable"));

		this.jButtonFK_IdCentroCostoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableCostoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableCreditoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableDebitoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDebitoProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableDescuentoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDescuentoProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableDevolucionProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDevolucionProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableInventarioProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioProductoCuentaContable"));

		this.jButtonFK_IdCuentaContableVentaProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaProductoCuentaContable"));

		this.jButtonFK_IdProductoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"FK_IdProductoProductoCuentaContable"));

		this.jButtonBuscarFK_IdProductoid_productoProductoCuentaContable.addActionListener(new ButtonActionListener(this,"id_productoProductoCuentaContable"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionProductoCuentaContable.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionProductoCuentaContableActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarProductoCuentaContableActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarProductoCuentaContable.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosProductoCuentaContable(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
					productocuentacontableAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductoCuentaContable productocuentacontableAux:productocuentacontables) {
					productocuentacontableAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosProductoCuentaContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
						productocuentacontableAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductoCuentaContable productocuentacontableAux:productocuentacontables) {
						productocuentacontableAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductoCuentaContable productocuentacontableAux:productocuentacontables) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosProductoCuentaContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosProductoCuentaContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosProductoCuentaContableItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosProductoCuentaContable.getSelectedRows();
			
			ProductoCuentaContable productocuentacontableLocal=new ProductoCuentaContable();
			
			//this.seleccionarTodosProductoCuentaContable(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productocuentacontableLocal =(ProductoCuentaContable) this.productocuentacontableLogic.getProductoCuentaContables().toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					productocuentacontableLocal =(ProductoCuentaContable) this.productocuentacontables.toArray()[this.jTableDatosProductoCuentaContable.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				productocuentacontableLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
						productocuentacontableAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ProductoCuentaContable productocuentacontableAux:productocuentacontables) {
						productocuentacontableAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosProductoCuentaContable.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosProductoCuentaContable.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosProductoCuentaContable,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualProductoCuentaContableItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarProductoCuentaContableParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralProductoCuentaContableActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralProductoCuentaContable.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontableLogic.getProductoCuentaContables()) {
				
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductoCuentaContable productocuentacontableAux:productocuentacontables) {
					
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesProductoCuentaContableActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioProductoCuentaContable=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesProductoCuentaContable.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteProductoCuentaContable) {				
					conSplash=true;//false;										
					
					//this.startProcessProductoCuentaContable(conSplash);
				
					this.generarReporteProductoCuentaContablesSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoProductoCuentaContablesSeleccionados();
				//this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoProductoCuentaContablesSeleccionados(false);
				//this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoProductoCuentaContablesSeleccionados(true);
				//this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessProductoCuentaContable();
				
				this.exportarProductoCuentaContablesSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionProductoCuentaContables();
				//this.importarProductoCuentaContables();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessProductoCuentaContable();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelProductoCuentaContablesSeleccionados();
				//this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Producto Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessProductoCuentaContable();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoProductoCuentaContable)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyProductoCuentaContable(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
				}	
			} 			
			else if(ProductoCuentaContableBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteProductoCuentaContable) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessProductoCuentaContable(conSplash);
					
						//this.actualizarParametrosGeneralProductoCuentaContable();
						
						this.generarReporteProcesoAccionProductoCuentaContablesSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ProductoCuentaContableBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Producto Cuenta ContableS SELECCIONADOS?", "MANTENIMIENTO DE Producto Cuenta Contable", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessProductoCuentaContable();
				
						this.actualizarParametrosGeneralProductoCuentaContable();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.productocuentacontableReturnGeneral=productocuentacontableLogic.procesarAccionProductoCuentaContablesWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.productocuentacontableLogic.getProductoCuentaContables(),this.productocuentacontableParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarProductoCuentaContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralProductoCuentaContable();
					
					ProductoCuentaContableBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarProductoCuentaContableReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesProductoCuentaContable.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxTiposAccionesFormularioProductoCuentaContable.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessProductoCuentaContable(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesProductoCuentaContableActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessProductoCuentaContable();
			
			if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
			ProductoCuentaContable productocuentacontable=new ProductoCuentaContable();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingProductoCuentaContable(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesProductoCuentaContable.getSelectedItem();
			
			
			
			
			productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
			//this.sTipoAccion;
			
			if(productocuentacontablesSeleccionados.size()==1) {
				for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
					productocuentacontable=productocuentacontableAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessProductoCuentaContable();
			
      		//this.finishProcessProductoCuentaContable(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarProductoCuentaContableReturnGeneral() throws Exception {
		if(this.productocuentacontableReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.productocuentacontableReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.productocuentacontableReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.productocuentacontableReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.productocuentacontableReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.productocuentacontableReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingProductoCuentaContable(false);
		}
		
		if(this.productocuentacontableReturnGeneral.getConRetornoLista() || this.productocuentacontableReturnGeneral.getConRetornoObjeto()) {
			if(this.productocuentacontableReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.productocuentacontableLogic.setProductoCuentaContables(this.productocuentacontableReturnGeneral.getProductoCuentaContables());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.productocuentacontableReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.productocuentacontableLogic.setProductoCuentaContable(this.productocuentacontableReturnGeneral.getProductoCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingProductoCuentaContable(false);
		}
	}
	
	public void actualizarParametrosGeneralProductoCuentaContable() throws Exception {
		
		
	}
	
	public ArrayList<ProductoCuentaContable> getProductoCuentaContablesSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioProductoCuentaContable) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ProductoCuentaContable productocuentacontableAux:productocuentacontableLogic.getProductoCuentaContables()) {
					if(productocuentacontableAux.getIsSelected()) {
						productocuentacontablesSeleccionados.add(productocuentacontableAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ProductoCuentaContable productocuentacontableAux:this.productocuentacontables) {
					if(productocuentacontableAux.getIsSelected()) {
						productocuentacontablesSeleccionados.add(productocuentacontableAux);				
					}
				}
			}
			
			if(productocuentacontablesSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						productocuentacontablesSeleccionados.addAll(this.productocuentacontableLogic.getProductoCuentaContables());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						productocuentacontablesSeleccionados.addAll(this.productocuentacontables);				
					}
				}
			}
		} else {
			productocuentacontablesSeleccionados.add(this.productocuentacontable);
		}
		
		return productocuentacontablesSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteProductoCuentaContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalProductoCuentaContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoProductoCuentaContablesSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoProductoCuentaContablesSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoProductoCuentaContablesSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Producto Cuenta Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados);
		
	}	
	
	public void generarReporteNormalProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados);
	}		
	
	public void generarReporteProcesoAccionProductoCuentaContablesSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		
		this.abrirInicializarFrameReporteDinamicoProductoCuentaContable();
		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoProductoCuentaContable();
		
		
		//this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados ,productocuentacontableImplementable,productocuentacontableImplementableHome);
	}
	
	public void mostrarImportacionProductoCuentaContables() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionProductoCuentaContable();
		
		this.abrirFrameImportacionProductoCuentaContable();		
		
			
		//this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados ,productocuentacontableImplementable,productocuentacontableImplementableHome);
	}
	
	public void importarProductoCuentaContables() throws Exception {		
	
	}
	
	public void exportarProductoCuentaContablesSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelProductoCuentaContablesSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoProductoCuentaContablesSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlProductoCuentaContablesSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Producto Cuenta Contable",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarProductoCuentaContable(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarProductoCuentaContable(productocuentacontableAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//productocuentacontableAux.setsDetalleGeneralEntityReporte(productocuentacontableAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarProductoCuentaContable(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarProductoCuentaContable(ProductoCuentaContable productocuentacontable,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=productocuentacontable.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontableinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontablecosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontableventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontabledescuento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontabledevolucion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontabledebito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=productocuentacontable.getcuentacontablecredito_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ProductoCuentaContables");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelProductoCuentaContable(row);				
				iRow++;
			}				
			
			for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelProductoCuentaContable(productocuentacontableAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlProductoCuentaContablesSeleccionados() throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();		
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"productocuentacontable.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("productocuentacontables");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("productocuentacontable");
			//elementRoot.appendChild(element);
		
			for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
				element = document.createElement("productocuentacontable");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlProductoCuentaContable(productocuentacontableAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Producto Cuenta Contable",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelProductoCuentaContable(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO);
		cell = row.createCell(iColumn++);cell.setCellValue(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelProductoCuentaContable(ProductoCuentaContable productocuentacontable,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontableinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontablecosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontableventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontabledescuento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontabledevolucion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontabledebito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(productocuentacontable.getcuentacontablecredito_descripcion());				
	}
	
	public void setFilaDatosExportarXmlProductoCuentaContable(ProductoCuentaContable productocuentacontable,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ProductoCuentaContableConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(productocuentacontable.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ProductoCuentaContableConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(productocuentacontable.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(productocuentacontable.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(productocuentacontable.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbodega_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(productocuentacontable.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(productocuentacontable.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(productocuentacontable.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcuentacontableinventario_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEINVENTARIO);
		elementcuentacontableinventario_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontableinventario_descripcion()));
		element.appendChild(elementcuentacontableinventario_descripcion);

		Element elementcuentacontablecosto_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLECOSTO);
		elementcuentacontablecosto_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontablecosto_descripcion()));
		element.appendChild(elementcuentacontablecosto_descripcion);

		Element elementcuentacontableventa_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEVENTA);
		elementcuentacontableventa_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontableventa_descripcion()));
		element.appendChild(elementcuentacontableventa_descripcion);

		Element elementcuentacontabledescuento_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDESCUENTO);
		elementcuentacontabledescuento_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontabledescuento_descripcion()));
		element.appendChild(elementcuentacontabledescuento_descripcion);

		Element elementcuentacontabledevolucion_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDEVOLUCION);
		elementcuentacontabledevolucion_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontabledevolucion_descripcion()));
		element.appendChild(elementcuentacontabledevolucion_descripcion);

		Element elementcuentacontabledebito_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLEDEBITO);
		elementcuentacontabledebito_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontabledebito_descripcion()));
		element.appendChild(elementcuentacontabledebito_descripcion);

		Element elementcuentacontablecredito_descripcion = document.createElement(ProductoCuentaContableConstantesFunciones.IDCUENTACONTABLECREDITO);
		elementcuentacontablecredito_descripcion.appendChild(document.createTextNode(productocuentacontable.getcuentacontablecredito_descripcion()));
		element.appendChild(elementcuentacontablecredito_descripcion);
	}
	
	public void generarReporteGroupGenericoProductoCuentaContablesSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados=new ArrayList<ProductoCuentaContable>();
		
		productocuentacontablesSeleccionados=this.getProductoCuentaContablesSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoProductoCuentaContable(productocuentacontablesSeleccionados);
		
		this.generarReporteProductoCuentaContables("Todos",productocuentacontablesSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoProductoCuentaContable(ArrayList<ProductoCuentaContable> productocuentacontablesSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ProductoCuentaContable productocuentacontableAux:productocuentacontablesSeleccionados) {
				productocuentacontableAux.setsDetalleGeneralEntityReporte(productocuentacontableAux.toString());
			
				if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontableinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontablecosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontableventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDESCUENTO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontabledescuento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEVOLUCION)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontabledevolucion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLEDEBITO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontabledebito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ProductoCuentaContableConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO)) {
					existe=true;
					productocuentacontableAux.setsDescripcionGeneralEntityReporte1(productocuentacontableAux.getcuentacontablecredito_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ProductoCuentaContableConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesProductoCuentaContable(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoProductoCuentaContable=true;
				this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=true;
				this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=true;
			}
			
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=true;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=true;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=true;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=true;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=true;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=true;
			this.isVisibilidadCeldaModificarProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=true;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
			this.isVisibilidadCeldaModificarProductoCuentaContable=true;
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
			this.isVisibilidadCeldaCancelarProductoCuentaContable=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				} else {
					this.isVisibilidadCeldaGuardarProductoCuentaContable=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ProductoCuentaContableJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoProductoCuentaContable=true;
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=true;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=true;
		} else {
			this.actualizarEstadoPanelsProductoCuentaContable(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarProductoCuentaContable=false;
			//this.isVisibilidadCeldaVerFormProductoCuentaContable=false;
			this.isVisibilidadCeldaDuplicarProductoCuentaContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!productocuentacontableSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
		} else {
			this.isVisibilidadCeldaNuevoProductoCuentaContable=false;
			this.isVisibilidadCeldaGuardarCambiosProductoCuentaContable=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(!productocuentacontableSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;												
			}
			
			this.jButtonCerrarProductoCuentaContable.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesProductoCuentaContable=false;
		}
		
		if(!this.permiteMantenimiento(this.productocuentacontable)) {
			this.isVisibilidadCeldaActualizarProductoCuentaContable=false;
			this.isVisibilidadCeldaEliminarProductoCuentaContable=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesProductoCuentaContable() {
	}
	
	public void actualizarEstadoPanelsProductoCuentaContable(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionProductoCuentaContable!=null) {
				this.jScrollPanelDatosEdicionProductoCuentaContable.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosProductoCuentaContable!=null) {
				this.jScrollPanelDatosProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelPaginacionProductoCuentaContable!=null) {
				this.jPanelPaginacionProductoCuentaContable.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
					this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.productocuentacontableSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasProductoCuentaContable!=null) {
				this.jTabbedPaneBusquedasProductoCuentaContable.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesProductoCuentaContable!=null) {
				this.jPanelParametrosReportesProductoCuentaContable.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventario(Boolean isParaCuentaContableInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioNegation=!isParaCuentaContableInventario;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableInventario;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCosto(Boolean isParaCuentaContableCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoNegation=!isParaCuentaContableCosto;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableCosto;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableVenta(Boolean isParaCuentaContableVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableVentaNegation=!isParaCuentaContableVenta;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableVenta;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDescuento(Boolean isParaCuentaContableDescuento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDescuentoNegation=!isParaCuentaContableDescuento;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableDescuento;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableDescuentoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDevolucion(Boolean isParaCuentaContableDevolucion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDevolucionNegation=!isParaCuentaContableDevolucion;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableDevolucion;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableDevolucionNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDebito(Boolean isParaCuentaContableDebito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDebitoNegation=!isParaCuentaContableDebito;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableDebito;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableDebitoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCredito(Boolean isParaCuentaContableCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoNegation=!isParaCuentaContableCredito;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdBodegaProductoCuentaContable);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCentroCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCostoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableCredito=isParaCuentaContableCredito;
			if(!this.isVisibilidadFK_IdCuentaContableCredito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableCreditoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDebito=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDebito) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDebitoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDescuento=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDescuento) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableDevolucion=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDevolucion) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableInventarioProductoCuentaContable);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdCuentaContableVentaProductoCuentaContable);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasProductoCuentaContable.remove(jPanelFK_IdProductoProductoCuentaContable);}
		}
		
	}
	
	
	
	

	public String registrarSesionProductoCuentaContableParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(productocuentacontableSessionBean==null) {
				productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(productocuentacontableSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.productocuentacontableFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(ProductoCuentaContableConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionProductoCuentaContable(true);
			//productoSessionBean.setlidProductoCuentaContableActual(this.idProductoCuentaContableActual);

			productocuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyProductoCuentaContable(true);
			productocuentacontableSessionBean.setlIdProductoCuentaContableActualForeignKey(this.idProductoCuentaContableActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ProductoCuentaContableSessionBean productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
		
		if(this.productocuentacontableSessionBean==null) {
			this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
		}
		
		this.productocuentacontableSessionBean.setsUltimaBusquedaProductoCuentaContable(this.getsAccionBusqueda());
		this.productocuentacontableSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.productocuentacontableSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			productocuentacontableSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			productocuentacontableSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
			productocuentacontableSessionBean.setid_cuenta_contable_costo(this.getid_cuenta_contable_costoFK_IdCuentaContableCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCredito")) {
			productocuentacontableSessionBean.setid_cuenta_contable_credito(this.getid_cuenta_contable_creditoFK_IdCuentaContableCredito());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDebito")) {
			productocuentacontableSessionBean.setid_cuenta_contable_debito(this.getid_cuenta_contable_debitoFK_IdCuentaContableDebito());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDescuento")) {
			productocuentacontableSessionBean.setid_cuenta_contable_descuento(this.getid_cuenta_contable_descuentoFK_IdCuentaContableDescuento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDevolucion")) {
			productocuentacontableSessionBean.setid_cuenta_contable_devolucion(this.getid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventario")) {
			productocuentacontableSessionBean.setid_cuenta_contable_inventario(this.getid_cuenta_contable_inventarioFK_IdCuentaContableInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVenta")) {
			productocuentacontableSessionBean.setid_cuenta_contable_venta(this.getid_cuenta_contable_ventaFK_IdCuentaContableVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			productocuentacontableSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			productocuentacontableSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			productocuentacontableSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ProductoCuentaContableSessionBean productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
		
		if(this.productocuentacontableSessionBean==null) {
			this.productocuentacontableSessionBean=new ProductoCuentaContableSessionBean();
		}
		
		if(this.productocuentacontableSessionBean.getsUltimaBusquedaProductoCuentaContable()!=null&&!this.productocuentacontableSessionBean.getsUltimaBusquedaProductoCuentaContable().equals("")) {
			this.setsAccionBusqueda(productocuentacontableSessionBean.getsUltimaBusquedaProductoCuentaContable());
			this.setiNumeroPaginacion(productocuentacontableSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(productocuentacontableSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(productocuentacontableSessionBean.getid_bodega());
				productocuentacontableSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(productocuentacontableSessionBean.getid_centro_costo());
				productocuentacontableSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
				this.setid_cuenta_contable_costoFK_IdCuentaContableCosto(productocuentacontableSessionBean.getid_cuenta_contable_costo());
				productocuentacontableSessionBean.setid_cuenta_contable_costo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCredito")) {
				this.setid_cuenta_contable_creditoFK_IdCuentaContableCredito(productocuentacontableSessionBean.getid_cuenta_contable_credito());
				productocuentacontableSessionBean.setid_cuenta_contable_credito(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDebito")) {
				this.setid_cuenta_contable_debitoFK_IdCuentaContableDebito(productocuentacontableSessionBean.getid_cuenta_contable_debito());
				productocuentacontableSessionBean.setid_cuenta_contable_debito(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDescuento")) {
				this.setid_cuenta_contable_descuentoFK_IdCuentaContableDescuento(productocuentacontableSessionBean.getid_cuenta_contable_descuento());
				productocuentacontableSessionBean.setid_cuenta_contable_descuento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDevolucion")) {
				this.setid_cuenta_contable_devolucionFK_IdCuentaContableDevolucion(productocuentacontableSessionBean.getid_cuenta_contable_devolucion());
				productocuentacontableSessionBean.setid_cuenta_contable_devolucion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventario")) {
				this.setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(productocuentacontableSessionBean.getid_cuenta_contable_inventario());
				productocuentacontableSessionBean.setid_cuenta_contable_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVenta")) {
				this.setid_cuenta_contable_ventaFK_IdCuentaContableVenta(productocuentacontableSessionBean.getid_cuenta_contable_venta());
				productocuentacontableSessionBean.setid_cuenta_contable_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(productocuentacontableSessionBean.getid_empresa());
				productocuentacontableSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(productocuentacontableSessionBean.getid_producto());
				productocuentacontableSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(productocuentacontableSessionBean.getid_sucursal());
				productocuentacontableSessionBean.setid_sucursal(-1L);
			}
		}
		
		this.productocuentacontableSessionBean.setsUltimaBusquedaProductoCuentaContable("");
		this.productocuentacontableSessionBean.setiNumeroPaginacion(ProductoCuentaContableConstantesFunciones.INUMEROPAGINACION);
		this.productocuentacontableSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaProductoCuentaContable(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioProductoCuentaContable() {
		this.updateBorderResaltarBusquedasFormularioProductoCuentaContable();
		this.updateVisibilidadBusquedasFormularioProductoCuentaContable();
		this.updateHabilitarBusquedasFormularioProductoCuentaContable();
	}
	
	public void updateBorderResaltarBusquedasFormularioProductoCuentaContable() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasProductoCuentaContable.getComponents().length>0) {
	

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdBodegaProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdBodegaProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdBodegaProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCentroCostoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCentroCostoProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCostoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCostoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCostoProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCreditoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCreditoProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDebitoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDebitoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDebitoProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDescuentoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDescuentoProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDevolucionProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDevolucionProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableInventarioProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableInventarioProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableVentaProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableVentaProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableVentaProductoCuentaContable);
			}
		}

		if(this.productocuentacontableConstantesFunciones.resaltarFK_IdProductoProductoCuentaContable!=null) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdProductoProductoCuentaContable);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdProductoProductoCuentaContable);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioProductoCuentaContable() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasProductoCuentaContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdBodegaProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdBodegaProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdBodegaProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCentroCostoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCentroCostoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCostoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCostoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCostoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCreditoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableCreditoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDebitoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDebitoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDebitoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDescuentoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDescuentoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDevolucionProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableDevolucionProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableInventarioProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableInventarioProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableVentaProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableVentaProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdCuentaContableVentaProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdProductoProductoCuentaContable);
			jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.productocuentacontableConstantesFunciones.mostrarFK_IdProductoProductoCuentaContable);
			if(!this.productocuentacontableConstantesFunciones.mostrarFK_IdProductoProductoCuentaContable && index>-1) {
				this.jTabbedPaneBusquedasProductoCuentaContable.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioProductoCuentaContable() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasProductoCuentaContable.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdBodegaProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdBodegaProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdBodegaProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCentroCostoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCentroCostoProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCostoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableCostoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableCostoProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableCreditoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableCreditoProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDebitoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDebitoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDebitoProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDescuentoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDescuentoProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDevolucionProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableDevolucionProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableInventarioProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableInventarioProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableVentaProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableVentaProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdCuentaContableVentaProductoCuentaContable);
			}

			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdProductoProductoCuentaContable);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.productocuentacontableConstantesFunciones.activarFK_IdProductoProductoCuentaContable);
				this.jTabbedPaneBusquedasProductoCuentaContable.setEnabledAt(index,this.productocuentacontableConstantesFunciones.activarFK_IdProductoProductoCuentaContable);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaProductoCuentaContable(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdBodegaProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdBodegaProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdBodegaProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCentroCostoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCentroCostoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCentroCostoProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCosto")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCostoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableCostoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCostoProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCredito")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableCreditoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableCreditoProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableDebito")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDebitoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableDebitoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDebitoProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableDescuento")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDescuentoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableDescuentoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDescuentoProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableDevolucion")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableDevolucionProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableDevolucionProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableDevolucionProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableInventario")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableInventarioProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableInventarioProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableVenta")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdCuentaContableVentaProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdCuentaContableVentaProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdCuentaContableVentaProductoCuentaContable);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasProductoCuentaContable.indexOfComponent(this.jPanelFK_IdProductoProductoCuentaContable);

			this.jTabbedPaneBusquedasProductoCuentaContable.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasProductoCuentaContable.getComponent(index);

			this.productocuentacontableConstantesFunciones.setResaltarFK_IdProductoProductoCuentaContable(resaltar);

			jPanel.setBorder(this.productocuentacontableConstantesFunciones.resaltarFK_IdProductoProductoCuentaContable);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarProductoCuentaContable.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioProductoCuentaContable() throws Exception {

		if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioProductoCuentaContable();
		this.updateVisibilidadResaltarControlesFormularioProductoCuentaContable();
		this.updateHabilitarResaltarControlesFormularioProductoCuentaContable();
		
	}
	
	public void updateBorderResaltarControlesFormularioProductoCuentaContable() throws Exception {
		if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.productocuentacontableConstantesFunciones.resaltaridProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltaridProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_empresaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_empresaProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_sucursalProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_sucursalProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_bodegaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_bodegaProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_productoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_productoProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_centro_costoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_centro_costoProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_inventarioProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_inventarioProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_costoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_costoProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_ventaProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_ventaProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_descuentoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_descuentoProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_devolucionProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_devolucionProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_debitoProductoCuentaContable);}
		if(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoProductoCuentaContable!=null && this.jInternalFrameDetalleFormProductoCuentaContable!=null) {this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setBorder(this.productocuentacontableConstantesFunciones.resaltarid_cuenta_contable_creditoProductoCuentaContable);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioProductoCuentaContable() throws Exception {		
		if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
	
		//this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostraridProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelidProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostraridProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_empresaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_empresaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_empresaProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_sucursalProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_sucursalProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_sucursalProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_bodegaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_bodegaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_bodegaProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_productoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_productoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_productoProductoCuentaContable);
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_productoProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_centro_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_centro_costoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_centro_costoProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_inventarioProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_inventarioProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_inventarioProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_costoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_costoProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_ventaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_ventaProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_ventaProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_descuentoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_descuentoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_descuentoProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_devolucionProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_devolucionProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_devolucionProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_debitoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_debitoProductoCuentaContable);
		//this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jPanelid_cuenta_contable_creditoProductoCuentaContable.setVisible(this.productocuentacontableConstantesFunciones.mostrarid_cuenta_contable_creditoProductoCuentaContable);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioProductoCuentaContable() throws Exception {
		if(this.jInternalFrameDetalleFormProductoCuentaContable==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormProductoCuentaContable!=null) {
	
		this.jInternalFrameDetalleFormProductoCuentaContable.jLabelidProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activaridProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_empresaProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_empresaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_sucursalProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_sucursalProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_bodegaProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_bodegaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_productoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_productoProductoCuentaContable);
			this.jInternalFrameDetalleFormProductoCuentaContable.jButtonid_productoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_productoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_centro_costoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_centro_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_inventarioProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_inventarioProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_costoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_costoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_ventaProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_ventaProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_descuentoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_descuentoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_devolucionProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_devolucionProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_debitoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_debitoProductoCuentaContable);
		this.jInternalFrameDetalleFormProductoCuentaContable.jComboBoxid_cuenta_contable_creditoProductoCuentaContable.setEnabled(this.productocuentacontableConstantesFunciones.activarid_cuenta_contable_creditoProductoCuentaContable);
		}
	}
	
		
}