/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.DetalleCompraConstantesFunciones;
import com.bydan.erp.inventario.util.DetalleCompraParameterReturnGeneral;
//import com.bydan.erp.inventario.util.DetalleCompraParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.DetalleCompraBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleCompraBeanSwingJInternalFrame extends DetalleCompraJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleCompraBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleCompra> detallecompraValidator = new ClassValidator<DetalleCompra>(DetalleCompra.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleCompra detallecompra;	
	public DetalleCompra detallecompraAux;
	public DetalleCompra detallecompraAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleCompra detallecompraTotales;
	public Long idDetalleCompraActual;
	public Long iIdNuevoDetalleCompra=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboCompra="";

	public List<Compra> comprasForeignKey;

	public List<Compra> getcomprasForeignKey() {
		return comprasForeignKey;
	}

	public void setcomprasForeignKey(List<Compra> comprasForeignKey) {
		this.comprasForeignKey = comprasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Compra compraForeignKey;

	public Compra getcompraForeignKey() {
		return compraForeignKey;
	}

	public void setcompraForeignKey(Compra compraForeignKey) {
		this.compraForeignKey = compraForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboEstadoDetalleInventario="";

	public List<EstadoDetalleInventario> estadodetalleinventariosForeignKey;

	public List<EstadoDetalleInventario> getestadodetalleinventariosForeignKey() {
		return estadodetalleinventariosForeignKey;
	}

	public void setestadodetalleinventariosForeignKey(List<EstadoDetalleInventario> estadodetalleinventariosForeignKey) {
		this.estadodetalleinventariosForeignKey = estadodetalleinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoDetalleInventario estadodetalleinventarioForeignKey;

	public EstadoDetalleInventario getestadodetalleinventarioForeignKey() {
		return estadodetalleinventarioForeignKey;
	}

	public void setestadodetalleinventarioForeignKey(EstadoDetalleInventario estadodetalleinventarioForeignKey) {
		this.estadodetalleinventarioForeignKey = estadodetalleinventarioForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

	public String sFinalQueryComboNovedadProducto="";

	public List<NovedadProducto> novedadproductosForeignKey;

	public List<NovedadProducto> getnovedadproductosForeignKey() {
		return novedadproductosForeignKey;
	}

	public void setnovedadproductosForeignKey(List<NovedadProducto> novedadproductosForeignKey) {
		this.novedadproductosForeignKey = novedadproductosForeignKey;
	}

	//OBJETO FK ACTUAL
	public NovedadProducto novedadproductoForeignKey;

	public NovedadProducto getnovedadproductoForeignKey() {
		return novedadproductoForeignKey;
	}

	public void setnovedadproductoForeignKey(NovedadProducto novedadproductoForeignKey) {
		this.novedadproductoForeignKey = novedadproductoForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCosto="";

	public List<CuentaContable> cuentacontablecostosForeignKey;

	public List<CuentaContable> getcuentacontablecostosForeignKey() {
		return cuentacontablecostosForeignKey;
	}

	public void setcuentacontablecostosForeignKey(List<CuentaContable> cuentacontablecostosForeignKey) {
		this.cuentacontablecostosForeignKey = cuentacontablecostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoForeignKey;

	public CuentaContable getcuentacontablecostoForeignKey() {
		return cuentacontablecostoForeignKey;
	}

	public void setcuentacontablecostoForeignKey(CuentaContable cuentacontablecostoForeignKey) {
		this.cuentacontablecostoForeignKey = cuentacontablecostoForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	public Long idCentroCostoActual=0L;

	public Long getidCentroCostoActual() {
		return idCentroCostoActual;
	}

	public void setidCentroCostoActual(Long idCentroCostoActual) {
		this.idCentroCostoActual= idCentroCostoActual;
	}
	public Long idCuentaContableCostoActual=0L;

	public Long getidCuentaContableCostoActual() {
		return idCuentaContableCostoActual;
	}

	public void setidCuentaContableCostoActual(Long idCuentaContableCostoActual) {
		this.idCuentaContableCostoActual= idCuentaContableCostoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleCompra;
	public Boolean isPermisoNuevoDetalleCompra;
	public Boolean isPermisoActualizarDetalleCompra;
	public Boolean isPermisoActualizarOriginalDetalleCompra;
	public Boolean isPermisoEliminarDetalleCompra;
	public Boolean isPermisoGuardarCambiosDetalleCompra;
	public Boolean isPermisoConsultaDetalleCompra;
	public Boolean isPermisoBusquedaDetalleCompra;
	public Boolean isPermisoReporteDetalleCompra;
	public Boolean isPermisoPaginacionMedioDetalleCompra;
	public Boolean isPermisoPaginacionAltoDetalleCompra;
	public Boolean isPermisoPaginacionTodoDetalleCompra;
	public Boolean isPermisoCopiarDetalleCompra;
	public Boolean isPermisoVerFormDetalleCompra;
	public Boolean isPermisoDuplicarDetalleCompra;
	public Boolean isPermisoOrdenDetalleCompra;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleCompraParameterReturnGeneral detallecompraReturnGeneral;
	public DetalleCompraParameterReturnGeneral detallecompraParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleCompra=false;
	public Boolean esParaAccionDesdeFormularioDetalleCompra=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleCompraSessionBeanAdditional detallecompraSessionBeanAdditional=null;
	
	public DetalleCompraSessionBeanAdditional getDetalleCompraSessionBeanAdditional() {
		return this.detallecompraSessionBeanAdditional;
	}
	
	public void setDetalleCompraSessionBeanAdditional(DetalleCompraSessionBeanAdditional detallecompraSessionBeanAdditional) {
		try {
			this.detallecompraSessionBeanAdditional=detallecompraSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleCompraBeanSwingJInternalFrameAdditional detallecompraBeanSwingJInternalFrameAdditional=null;
	//public class DetalleCompraBeanSwingJInternalFrame
	
	public DetalleCompraBeanSwingJInternalFrameAdditional getDetalleCompraBeanSwingJInternalFrameAdditional() {
		return this.detallecompraBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleCompraBeanSwingJInternalFrameAdditional(DetalleCompraBeanSwingJInternalFrameAdditional detallecompraBeanSwingJInternalFrameAdditional) {
		try {
			this.detallecompraBeanSwingJInternalFrameAdditional=detallecompraBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleCompraLogic detallecompraLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleCompra detallecompraBean;
	public DetalleCompraConstantesFunciones detallecompraConstantesFunciones;
	//public DetalleCompraParameterReturnGeneral detallecompraReturnGeneral;
	
	//FK
	
	public CompraLogic compraLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public EstadoDetalleInventarioLogic estadodetalleinventarioLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	public NovedadProductoLogic novedadproductoLogic;
	public CentroCostoLogic centrocostoLogic;
	public CuentaContableLogic cuentacontablecostoLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleCompra> detallecompras;	
	//public List<DetalleCompra> detallecomprasEliminados;
	//public List<DetalleCompra> detallecomprasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleCompra=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleCompra=true;
	public Boolean isVisibilidadCeldaCopiarDetalleCompra=true;
	public Boolean isVisibilidadCeldaVerFormDetalleCompra=true;
	public Boolean isVisibilidadCeldaOrdenDetalleCompra=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
	public Boolean isVisibilidadCeldaModificarDetalleCompra=false;
	public Boolean isVisibilidadCeldaActualizarDetalleCompra=false;
	public Boolean isVisibilidadCeldaEliminarDetalleCompra=false;
	public Boolean isVisibilidadCeldaCancelarDetalleCompra=false;
	public Boolean isVisibilidadCeldaGuardarDetalleCompra=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleCompra=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCompra=false;
	public Boolean isVisibilidadFK_IdCuentaContableCosto=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoDetalleInventario=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdNovedadProducto=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleCompra() {
		return this.iIdNuevoDetalleCompra;
	}

	public void setiIdNuevoDetalleCompra(Long iIdNuevoDetalleCompra) {
		this.iIdNuevoDetalleCompra = iIdNuevoDetalleCompra;
	}
	
	public Long getidDetalleCompraActual() {
		return this.idDetalleCompraActual;
	}

	public void setidDetalleCompraActual(Long idDetalleCompraActual) {
		this.idDetalleCompraActual = idDetalleCompraActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleCompra getdetallecompra() {
		return this.detallecompra;
	}

	public void setdetallecompra(DetalleCompra detallecompra) {
		this.detallecompra = detallecompra;
	}
	
	public DetalleCompra getdetallecompraAux() {
		return this.detallecompraAux;
	}

	public void setdetallecompraAux(DetalleCompra detallecompraAux) {
		this.detallecompraAux = detallecompraAux;
	}				
	
	public DetalleCompra getdetallecompraAnterior() {
		return this.detallecompraAnterior;
	}

	public void setdetallecompraAnterior(DetalleCompra detallecompraAnterior) {
		this.detallecompraAnterior = detallecompraAnterior;
	}	
	
	public DetalleCompra getdetallecompraTotales() {
		return this.detallecompraTotales;
	}

	public void setdetallecompraTotales(DetalleCompra detallecompraTotales) {
		this.detallecompraTotales = detallecompraTotales;
	}	
	
	public DetalleCompra getdetallecompraBean() {
		return this.detallecompraBean;
	}

	public void setdetallecompraBean(DetalleCompra detallecompraBean) {
		this.detallecompraBean = detallecompraBean;
	}	
	
	public DetalleCompraParameterReturnGeneral getdetallecompraReturnGeneral() {
		return this.detallecompraReturnGeneral;
	}

	public void setdetallecompraReturnGeneral(DetalleCompraParameterReturnGeneral detallecompraReturnGeneral) {
		this.detallecompraReturnGeneral = detallecompraReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_compraFK_IdCompra=-1L;

	public Long getid_compraFK_IdCompra() {
		return this.id_compraFK_IdCompra;
	}

	public void setid_compraFK_IdCompra(Long id_compraFK_IdCompra) {
		this.id_compraFK_IdCompra = id_compraFK_IdCompra;
	}

	public Long id_cuenta_contable_costoFK_IdCuentaContableCosto=null;

	public Long getid_cuenta_contable_costoFK_IdCuentaContableCosto() {
		return this.id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public void setid_cuenta_contable_costoFK_IdCuentaContableCosto(Long id_cuenta_contable_costoFK_IdCuentaContableCosto) {
		this.id_cuenta_contable_costoFK_IdCuentaContableCosto = id_cuenta_contable_costoFK_IdCuentaContableCosto;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_detalle_inventarioFK_IdEstadoDetalleInventario=1L;

	public Long getid_estado_detalle_inventarioFK_IdEstadoDetalleInventario() {
		return this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario;
	}

	public void setid_estado_detalle_inventarioFK_IdEstadoDetalleInventario(Long id_estado_detalle_inventarioFK_IdEstadoDetalleInventario) {
		this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario = id_estado_detalle_inventarioFK_IdEstadoDetalleInventario;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_novedad_productoFK_IdNovedadProducto=null;

	public Long getid_novedad_productoFK_IdNovedadProducto() {
		return this.id_novedad_productoFK_IdNovedadProducto;
	}

	public void setid_novedad_productoFK_IdNovedadProducto(Long id_novedad_productoFK_IdNovedadProducto) {
		this.id_novedad_productoFK_IdNovedadProducto = id_novedad_productoFK_IdNovedadProducto;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleCompraLogic getDetalleCompraLogic()	{		
		return detallecompraLogic;
	}

	public void setDetalleCompraLogic(DetalleCompraLogic detallecompraLogic) {
		this.detallecompraLogic = detallecompraLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleCompra() {
		return isEsNuevoDetalleCompra;
	}

	public void setIsEsNuevoDetalleCompra(Boolean isEsNuevoDetalleCompra) {
		this.isEsNuevoDetalleCompra = isEsNuevoDetalleCompra;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleCompra() {
		return esParaAccionDesdeFormularioDetalleCompra;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleCompra(Boolean esParaAccionDesdeFormularioDetalleCompra) {
		this.esParaAccionDesdeFormularioDetalleCompra = esParaAccionDesdeFormularioDetalleCompra;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosComprasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.comprasForeignKey=new ArrayList<Compra>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CompraLogic compraLogic=new CompraLogic();

			compraLogic.getCompraDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					compraLogic.getCompraDataAccess().setIsForForeingKeyData(true);

					compraLogic.getTodosComprasWithConnection(sFinalQuery,new Pagination());

					this.comprasForeignKey=compraLogic.getCompras();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCompra(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					compraLogic.getEntityWithConnection(detallecompraSessionBean.getlidCompraActual());
					this.comprasForeignKey.add(compraLogic.getCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallecompraSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallecompraSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(detallecompraSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(detallecompraSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(detallecompraSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(detallecompraSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoDetalleInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoDetalleInventarioLogic estadodetalleinventarioLogic=new EstadoDetalleInventarioLogic();

			//estadodetalleinventarioLogic.getEstadoDetalleInventarioDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadodetalleinventarioLogic.getEstadoDetalleInventarioDataAccess().setIsForForeingKeyData(true);

					estadodetalleinventarioLogic.getTodosEstadoDetalleInventariosWithConnection(sFinalQuery,new Pagination());

					this.estadodetalleinventariosForeignKey=estadodetalleinventarioLogic.getEstadoDetalleInventarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoDetalleInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadodetalleinventarioLogic.getEntityWithConnection(detallecompraSessionBean.getlidEstadoDetalleInventarioActual());
					this.estadodetalleinventariosForeignKey.add(estadodetalleinventarioLogic.getEstadoDetalleInventario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallecompraSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallecompraSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallecompraSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNovedadProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NovedadProducto novedadproductoNulo = new NovedadProducto();

			NovedadProductoLogic novedadproductoLogic=new NovedadProductoLogic();

			//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//novedadproductoLogic.getNovedadProductoDataAccess().setIsForForeingKeyData(true);

					novedadproductoLogic.getTodosNovedadProductosWithConnection(sFinalQuery,new Pagination());

					this.novedadproductosForeignKey=novedadproductoLogic.getNovedadProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.novedadproductosForeignKey.add(0, novedadproductoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNovedadProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					novedadproductoLogic.getEntityWithConnection(detallecompraSessionBean.getlidNovedadProductoActual());
					this.novedadproductosForeignKey.add(novedadproductoLogic.getNovedadProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCosto centrocostoNulo = new CentroCosto();

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.centrocostosForeignKey.add(0, centrocostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(detallecompraSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContable cuentacontablecostoNulo = new CuentaContable();

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.cuentacontablecostosForeignKey.add(0, cuentacontablecostoNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(detallecompraSessionBean.getlidCuentaContableCostoActual());
					this.cuentacontablecostosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualCompraForeignKey(Long idCompraSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(compraTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setCompra(compraTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setSelectedItem(compraTemp);
					}
				} else {
					//jComboBoxid_compraDetalleCompra.setSelectedItem(compraTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCompra") || sFormularioTipoBusqueda.equals("Todos")){
					if(compraTemp!=null && jComboBoxid_compraFK_IdCompraDetalleCompra!=null) {
						jComboBoxid_compraFK_IdCompraDetalleCompra.setSelectedItem(compraTemp);
					} else {
						if(jComboBoxid_compraFK_IdCompraDetalleCompra!=null) {
							//jComboBoxid_compraFK_IdCompraDetalleCompra.setSelectedItem(compraTemp);
							if(jComboBoxid_compraFK_IdCompraDetalleCompra.getItemCount()>0) {
								jComboBoxid_compraFK_IdCompraDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCompraForeignKeyDescripcion(Long idCompraSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}


			sDescripcion=CompraConstantesFunciones.getCompraDescripcion(compraTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCompraForeignKeyGenerico(Long idCompraSeleccionado,JComboBox jComboBoxid_compraDetalleCompraGenerico)throws Exception
	{
		try
		{
			Compra  compraTemp=null;

			for(Compra compraAux:comprasForeignKey) {
				if(compraAux.getId()!=null && compraAux.getId().equals(idCompraSeleccionado)) {
					compraTemp=compraAux;
					break;
				}
			}

			if(compraTemp!=null) {
				jComboBoxid_compraDetalleCompraGenerico.setSelectedItem(compraTemp);
			} else {
				if(jComboBoxid_compraDetalleCompraGenerico!=null && jComboBoxid_compraDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_compraDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleCompra.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleCompraGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleCompraGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleCompraGenerico!=null && jComboBoxid_empresaDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleCompra.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleCompraGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleCompraGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleCompraGenerico!=null && jComboBoxid_sucursalDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioDetalleCompra.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioDetalleCompraGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioDetalleCompraGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioDetalleCompraGenerico!=null && jComboBoxid_ejercicioDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoDetalleCompra.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoDetalleCompraGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoDetalleCompraGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoDetalleCompraGenerico!=null && jComboBoxid_periodoDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_periodoDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioDetalleCompra.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioDetalleCompraGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioDetalleCompraGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioDetalleCompraGenerico!=null && jComboBoxid_anioDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_anioDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesDetalleCompra.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesDetalleCompraGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesDetalleCompraGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesDetalleCompraGenerico!=null && jComboBoxid_mesDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_mesDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoDetalleInventarioForeignKey(Long idEstadoDetalleInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadodetalleinventarioTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setEstadoDetalleInventario(estadodetalleinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedItem(estadodetalleinventarioTemp);
					}
				} else {
					//jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedItem(estadodetalleinventarioTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadodetalleinventarioTemp!=null && jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra!=null) {
						jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.setSelectedItem(estadodetalleinventarioTemp);
					} else {
						if(jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra!=null) {
							//jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.setSelectedItem(estadodetalleinventarioTemp);
							if(jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.getItemCount()>0) {
								jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoDetalleInventarioForeignKeyDescripcion(Long idEstadoDetalleInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}


			sDescripcion=EstadoDetalleInventarioConstantesFunciones.getEstadoDetalleInventarioDescripcion(estadodetalleinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoDetalleInventarioForeignKeyGenerico(Long idEstadoDetalleInventarioSeleccionado,JComboBox jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioTemp=null;

			for(EstadoDetalleInventario estadodetalleinventarioAux:estadodetalleinventariosForeignKey) {
				if(estadodetalleinventarioAux.getId()!=null && estadodetalleinventarioAux.getId().equals(idEstadoDetalleInventarioSeleccionado)) {
					estadodetalleinventarioTemp=estadodetalleinventarioAux;
					break;
				}
			}

			if(estadodetalleinventarioTemp!=null) {
				jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico.setSelectedItem(estadodetalleinventarioTemp);
			} else {
				if(jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico!=null && jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleCompra.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleCompra!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleCompra.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleCompra!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleCompra.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleCompra.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleCompraGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleCompraGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleCompraGenerico!=null && jComboBoxid_bodegaDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleCompra.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleCompra!=null) {
						jComboBoxid_productoFK_IdProductoDetalleCompra.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleCompra!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleCompra.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleCompra.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleCompraGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleCompraGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleCompraGenerico!=null && jComboBoxid_productoDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleCompra.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleCompra!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleCompra.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleCompra!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleCompra.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleCompra.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleCompraGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleCompraGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleCompraGenerico!=null && jComboBoxid_unidadDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNovedadProductoForeignKey(Long idNovedadProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(novedadproductoTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setNovedadProducto(novedadproductoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setSelectedItem(novedadproductoTemp);
					}
				} else {
					//jComboBoxid_novedad_productoDetalleCompra.setSelectedItem(novedadproductoTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(novedadproductoTemp!=null && jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra!=null) {
						jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.setSelectedItem(novedadproductoTemp);
					} else {
						if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra!=null) {
							//jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.setSelectedItem(novedadproductoTemp);
							if(jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.getItemCount()>0) {
								jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNovedadProductoForeignKeyDescripcion(Long idNovedadProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}


			sDescripcion=NovedadProductoConstantesFunciones.getNovedadProductoDescripcion(novedadproductoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNovedadProductoForeignKeyGenerico(Long idNovedadProductoSeleccionado,JComboBox jComboBoxid_novedad_productoDetalleCompraGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoTemp=null;

			for(NovedadProducto novedadproductoAux:novedadproductosForeignKey) {
				if(novedadproductoAux.getId()!=null && novedadproductoAux.getId().equals(idNovedadProductoSeleccionado)) {
					novedadproductoTemp=novedadproductoAux;
					break;
				}
			}

			if(novedadproductoTemp!=null) {
				jComboBoxid_novedad_productoDetalleCompraGenerico.setSelectedItem(novedadproductoTemp);
			} else {
				if(jComboBoxid_novedad_productoDetalleCompraGenerico!=null && jComboBoxid_novedad_productoDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_novedad_productoDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoDetalleCompra.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoDetalleCompraGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoDetalleCompraGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoDetalleCompraGenerico!=null && jComboBoxid_centro_costoDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoForeignKey(Long idCuentaContableCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoTemp!=null) {

					if(this.detallecompra!=null) {
						this.detallecompra.setCuentaContableCosto(cuentacontablecostoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedItem(cuentacontablecostoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedItem(cuentacontablecostoTemp);
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
		/*				
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecostoTemp!=null && jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra!=null) {
						jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.setSelectedItem(cuentacontablecostoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra!=null) {
							//jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.setSelectedItem(cuentacontablecostoTemp);
							if(jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.getItemCount()>0) {
								jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.setSelectedIndex(0);
							}
						}
					}
				}

		*/			}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoForeignKeyDescripcion(Long idCuentaContableCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoForeignKeyGenerico(Long idCuentaContableCostoSeleccionado,JComboBox jComboBoxid_cuenta_contable_costoDetalleCompraGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoTemp=null;

			for(CuentaContable cuentacontablecostoAux:cuentacontablecostosForeignKey) {
				if(cuentacontablecostoAux.getId()!=null && cuentacontablecostoAux.getId().equals(idCuentaContableCostoSeleccionado)) {
					cuentacontablecostoTemp=cuentacontablecostoAux;
					break;
				}
			}

			if(cuentacontablecostoTemp!=null) {
				jComboBoxid_cuenta_contable_costoDetalleCompraGenerico.setSelectedItem(cuentacontablecostoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costoDetalleCompraGenerico!=null && jComboBoxid_cuenta_contable_costoDetalleCompraGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costoDetalleCompraGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCompraForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_compraDetalleCompraGenerico)throws Exception
	{
		try
		{
			Compra  compraAux=new Compra();

			if(jComboBoxid_compraDetalleCompraGenerico==null) {
				compraAux=(Compra)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.getSelectedItem();
			} else {
				compraAux=(Compra)jComboBoxid_compraDetalleCompraGenerico.getSelectedItem();
			}

			if(compraAux!=null && compraAux.getId()!=null) {
				detallecompra.setid_compra(compraAux.getId());
				detallecompra.setcompra_descripcion(DetalleCompraConstantesFunciones.getCompraDescripcion(compraAux));
				detallecompra.setCompra(compraAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_empresaDetalleCompraGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleCompraGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleCompraGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallecompra.setid_empresa(empresaAux.getId());
				detallecompra.setempresa_descripcion(DetalleCompraConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallecompra.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_sucursalDetalleCompraGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleCompraGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleCompraGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallecompra.setid_sucursal(sucursalAux.getId());
				detallecompra.setsucursal_descripcion(DetalleCompraConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallecompra.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_ejercicioDetalleCompraGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioDetalleCompraGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioDetalleCompraGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				detallecompra.setid_ejercicio(ejercicioAux.getId());
				detallecompra.setejercicio_descripcion(DetalleCompraConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				detallecompra.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_periodoDetalleCompraGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoDetalleCompraGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoDetalleCompraGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				detallecompra.setid_periodo(periodoAux.getId());
				detallecompra.setperiodo_descripcion(DetalleCompraConstantesFunciones.getPeriodoDescripcion(periodoAux));
				detallecompra.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_anioDetalleCompraGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioDetalleCompraGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioDetalleCompraGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				detallecompra.setid_anio(anioAux.getId());
				detallecompra.setanio_descripcion(DetalleCompraConstantesFunciones.getAnioDescripcion(anioAux));
				detallecompra.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_mesDetalleCompraGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesDetalleCompraGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesDetalleCompraGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				detallecompra.setid_mes(mesAux.getId());
				detallecompra.setmes_descripcion(DetalleCompraConstantesFunciones.getMesDescripcion(mesAux));
				detallecompra.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoDetalleInventarioForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico)throws Exception
	{
		try
		{
			EstadoDetalleInventario  estadodetalleinventarioAux=new EstadoDetalleInventario();

			if(jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico==null) {
				estadodetalleinventarioAux=(EstadoDetalleInventario)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.getSelectedItem();
			} else {
				estadodetalleinventarioAux=(EstadoDetalleInventario)jComboBoxid_estado_detalle_inventarioDetalleCompraGenerico.getSelectedItem();
			}

			if(estadodetalleinventarioAux!=null && estadodetalleinventarioAux.getId()!=null) {
				detallecompra.setid_estado_detalle_inventario(estadodetalleinventarioAux.getId());
				detallecompra.setestadodetalleinventario_descripcion(DetalleCompraConstantesFunciones.getEstadoDetalleInventarioDescripcion(estadodetalleinventarioAux));
				detallecompra.setEstadoDetalleInventario(estadodetalleinventarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_bodegaDetalleCompraGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleCompraGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleCompraGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallecompra.setid_bodega(bodegaAux.getId());
				detallecompra.setbodega_descripcion(DetalleCompraConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallecompra.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_productoDetalleCompraGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleCompraGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleCompraGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallecompra.setid_producto(productoAux.getId());
				detallecompra.setproducto_descripcion(DetalleCompraConstantesFunciones.getProductoDescripcion(productoAux));
				detallecompra.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_unidadDetalleCompraGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleCompraGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleCompraGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallecompra.setid_unidad(unidadAux.getId());
				detallecompra.setunidad_descripcion(DetalleCompraConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallecompra.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNovedadProductoForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_novedad_productoDetalleCompraGenerico)throws Exception
	{
		try
		{
			NovedadProducto  novedadproductoAux=new NovedadProducto();

			if(jComboBoxid_novedad_productoDetalleCompraGenerico==null) {
				novedadproductoAux=(NovedadProducto)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.getSelectedItem();
			} else {
				novedadproductoAux=(NovedadProducto)jComboBoxid_novedad_productoDetalleCompraGenerico.getSelectedItem();
			}

			if(novedadproductoAux!=null) {
				detallecompra.setid_novedad_producto(novedadproductoAux.getId());
				detallecompra.setnovedadproducto_descripcion(DetalleCompraConstantesFunciones.getNovedadProductoDescripcion(novedadproductoAux));
				detallecompra.setNovedadProducto(novedadproductoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_centro_costoDetalleCompraGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoDetalleCompraGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoDetalleCompraGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				detallecompra.setid_centro_costo(centrocostoAux.getId());
				detallecompra.setcentrocosto_descripcion(DetalleCompraConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				detallecompra.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoForeignKey(DetalleCompra detallecompra,JComboBox jComboBoxid_cuenta_contable_costoDetalleCompraGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costoDetalleCompraGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costoDetalleCompraGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				detallecompra.setid_cuenta_contable_costo(cuentacontableAux.getId());
				detallecompra.setcuentacontablecosto_descripcion(DetalleCompraConstantesFunciones.getCuentaContableCostoDescripcion(cuentacontableAux));
				detallecompra.setCuentaContableCosto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameComprasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCompra=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.removeAllItems();

							for(Compra compra:this.comprasForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.addItem(compra);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCompra") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_compraFK_IdCompraDetalleCompra.removeAllItems();

							for(Compra compra:this.comprasForeignKey) {
								this.jComboBoxid_compraFK_IdCompraDetalleCompra.addItem(compra);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoDetalleInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoDetalleInventario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.removeAllItems();

							for(EstadoDetalleInventario estadodetalleinventario:this.estadodetalleinventariosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.addItem(estadodetalleinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoDetalleInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.removeAllItems();

							for(EstadoDetalleInventario estadodetalleinventario:this.estadodetalleinventariosForeignKey) {
								this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.addItem(estadodetalleinventario);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.addItem(bodega);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleCompra.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleCompra.addItem(producto);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.addItem(unidad);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNovedadProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNovedadProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.addItem(novedadproducto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNovedadProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.removeAllItems();

							for(NovedadProducto novedadproducto:this.novedadproductosForeignKey) {
								this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.addItem(novedadproducto);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.addItem(centrocosto);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.addItem(cuentacontablecosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleCompra!=null) { 
					}

					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						/*
						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.removeAllItems();

							for(CuentaContable cuentacontablecosto:this.cuentacontablecostosForeignKey) {
								this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.addItem(cuentacontablecosto);
							}
						}

						if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
						}

						*/
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameCompraForeignKey(Compra compra,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setSelectedItem(compra);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_compraFK_IdCompraDetalleCompra.setSelectedItem(compra);
						} else {
							this.jComboBoxid_compraFK_IdCompraDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoDetalleInventarioForeignKey(EstadoDetalleInventario estadodetalleinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedItem(estadodetalleinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.setSelectedItem(estadodetalleinventario);
						} else {
							this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleCompra.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNovedadProductoForeignKey(NovedadProducto novedadproducto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setSelectedItem(novedadproducto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.setSelectedItem(novedadproducto);
						} else {
							this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoForeignKey(CuentaContable cuentacontablecosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedItem(cuentacontablecosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					/*
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.setSelectedItem(cuentacontablecosto);
						} else {
							this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.setSelectedIndex(iIndexSelected);
						}

					*/					}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleCompra() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleCompraConstantesFunciones.refrescarForeignKeysDescripcionesDetalleCompra(this.detallecompraLogic.getDetalleCompras());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleCompraConstantesFunciones.refrescarForeignKeysDescripcionesDetalleCompra(this.detallecompras);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Compra.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(EstadoDetalleInventario.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
		classes.add(new Classe(NovedadProducto.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallecompraLogic.setDetalleCompras(this.detallecompras);
			detallecompraLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleCompraParameterReturnGeneral getDetalleCompraParameterGeneral() {
		return this.detallecompraParameterGeneral;
	}
	
	public void setDetalleCompraParameterGeneral(DetalleCompraParameterReturnGeneral detallecompraParameterGeneral) {
		this.detallecompraParameterGeneral = detallecompraParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleCompra() {
		return isPermisoTodoDetalleCompra;
	}

	public void setIsPermisoTodoDetalleCompra(Boolean isPermisoTodoDetalleCompra) {
		this.isPermisoTodoDetalleCompra = isPermisoTodoDetalleCompra;
	}

	public Boolean getIsPermisoNuevoDetalleCompra() {
		return isPermisoNuevoDetalleCompra;
	}

	public void setIsPermisoNuevoDetalleCompra(Boolean isPermisoNuevoDetalleCompra) {
		this.isPermisoNuevoDetalleCompra = isPermisoNuevoDetalleCompra;
	}

	public Boolean getIsPermisoActualizarDetalleCompra() {
		return isPermisoActualizarDetalleCompra;
	}

	public void setIsPermisoActualizarDetalleCompra(Boolean isPermisoActualizarDetalleCompra) {
		this.isPermisoActualizarDetalleCompra = isPermisoActualizarDetalleCompra;
	}

	public Boolean getIsPermisoEliminarDetalleCompra() {
		return isPermisoEliminarDetalleCompra;
	}

	public void setIsPermisoEliminarDetalleCompra(Boolean isPermisoEliminarDetalleCompra) {
		this.isPermisoEliminarDetalleCompra = isPermisoEliminarDetalleCompra;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleCompra() {
		return isPermisoGuardarCambiosDetalleCompra;
	}

	public void setIsPermisoGuardarCambiosDetalleCompra(Boolean isPermisoGuardarCambiosDetalleCompra) {
		this.isPermisoGuardarCambiosDetalleCompra = isPermisoGuardarCambiosDetalleCompra;
	}
	
	public Boolean getIsPermisoConsultaDetalleCompra() {
		return isPermisoConsultaDetalleCompra;
	}

	public void setIsPermisoConsultaDetalleCompra(Boolean isPermisoConsultaDetalleCompra) {
		this.isPermisoConsultaDetalleCompra = isPermisoConsultaDetalleCompra;
	}

	public Boolean getIsPermisoBusquedaDetalleCompra() {
		return isPermisoBusquedaDetalleCompra;
	}

	public void setIsPermisoBusquedaDetalleCompra(Boolean isPermisoBusquedaDetalleCompra) {
		this.isPermisoBusquedaDetalleCompra = isPermisoBusquedaDetalleCompra;
	}

	public Boolean getIsPermisoReporteDetalleCompra() {
		return isPermisoReporteDetalleCompra;
	}

	public void setIsPermisoReporteDetalleCompra(Boolean isPermisoReporteDetalleCompra) {
		this.isPermisoReporteDetalleCompra = isPermisoReporteDetalleCompra;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleCompra() {
		return isPermisoPaginacionMedioDetalleCompra;
	}

	public void setIsPermisoPaginacionMedioDetalleCompra(Boolean isPermisoPaginacionMedioDetalleCompra) {
		this.isPermisoPaginacionMedioDetalleCompra = isPermisoPaginacionMedioDetalleCompra;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleCompra() {
		return isPermisoPaginacionTodoDetalleCompra;
	}

	public void setIsPermisoPaginacionTodoDetalleCompra(Boolean isPermisoPaginacionTodoDetalleCompra) {
		this.isPermisoPaginacionTodoDetalleCompra = isPermisoPaginacionTodoDetalleCompra;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleCompra() {
		return isPermisoPaginacionAltoDetalleCompra;
	}

	public void setIsPermisoPaginacionAltoDetalleCompra(Boolean isPermisoPaginacionAltoDetalleCompra) {
		this.isPermisoPaginacionAltoDetalleCompra = isPermisoPaginacionAltoDetalleCompra;
	}
	
	public Boolean getIsPermisoCopiarDetalleCompra() {
		return isPermisoCopiarDetalleCompra;
	}

	public void setIsPermisoCopiarDetalleCompra(Boolean isPermisoCopiarDetalleCompra) {
		this.isPermisoCopiarDetalleCompra = isPermisoCopiarDetalleCompra;
	}
	
	public Boolean getIsPermisoVerFormDetalleCompra() {
		return isPermisoVerFormDetalleCompra;
	}

	public void setIsPermisoVerFormDetalleCompra(Boolean isPermisoVerFormDetalleCompra) {
		this.isPermisoVerFormDetalleCompra = isPermisoVerFormDetalleCompra;
	}
	
	public Boolean getIsPermisoDuplicarDetalleCompra() {
		return isPermisoDuplicarDetalleCompra;
	}

	public void setIsPermisoDuplicarDetalleCompra(Boolean isPermisoDuplicarDetalleCompra) {
		this.isPermisoDuplicarDetalleCompra = isPermisoDuplicarDetalleCompra;
	}
	
	public Boolean getIsPermisoOrdenDetalleCompra() {
		return isPermisoOrdenDetalleCompra;
	}

	public void setIsPermisoOrdenDetalleCompra(Boolean isPermisoOrdenDetalleCompra) {
		this.isPermisoOrdenDetalleCompra = isPermisoOrdenDetalleCompra;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleCompra() {
		return isVisibilidadCeldaNuevoDetalleCompra;
	}

	public void setIsVisibilidadCeldaNuevoDetalleCompra(Boolean isVisibilidadCeldaNuevoDetalleCompra) {
		this.isVisibilidadCeldaNuevoDetalleCompra = isVisibilidadCeldaNuevoDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleCompra() {
		return isVisibilidadCeldaDuplicarDetalleCompra;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleCompra(Boolean isVisibilidadCeldaDuplicarDetalleCompra) {
		this.isVisibilidadCeldaDuplicarDetalleCompra = isVisibilidadCeldaDuplicarDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleCompra() {
		return isVisibilidadCeldaCopiarDetalleCompra;
	}

	public void setIsVisibilidadCeldaCopiarDetalleCompra(Boolean isVisibilidadCeldaCopiarDetalleCompra) {
		this.isVisibilidadCeldaCopiarDetalleCompra = isVisibilidadCeldaCopiarDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleCompra() {
		return isVisibilidadCeldaVerFormDetalleCompra;
	}

	public void setIsVisibilidadCeldaVerFormDetalleCompra(Boolean isVisibilidadCeldaVerFormDetalleCompra) {
		this.isVisibilidadCeldaVerFormDetalleCompra = isVisibilidadCeldaVerFormDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleCompra() {
		return isVisibilidadCeldaOrdenDetalleCompra;
	}

	public void setIsVisibilidadCeldaOrdenDetalleCompra(Boolean isVisibilidadCeldaOrdenDetalleCompra) {
		this.isVisibilidadCeldaOrdenDetalleCompra = isVisibilidadCeldaOrdenDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleCompra() {
		return isVisibilidadCeldaNuevoRelacionesDetalleCompra;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleCompra(Boolean isVisibilidadCeldaNuevoRelacionesDetalleCompra) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleCompra = isVisibilidadCeldaNuevoRelacionesDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleCompra() {
		return isVisibilidadCeldaModificarDetalleCompra;
	}

	public void setIsVisibilidadCeldaModificarDetalleCompra(Boolean isVisibilidadCeldaModificarDetalleCompra) {
		this.isVisibilidadCeldaModificarDetalleCompra = isVisibilidadCeldaModificarDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleCompra() {
		return isVisibilidadCeldaActualizarDetalleCompra;
	}

	public void setIsVisibilidadCeldaActualizarDetalleCompra(Boolean isVisibilidadCeldaActualizarDetalleCompra) {
		this.isVisibilidadCeldaActualizarDetalleCompra = isVisibilidadCeldaActualizarDetalleCompra;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleCompra() {
		return isVisibilidadCeldaEliminarDetalleCompra;
	}

	public void setIsVisibilidadCeldaEliminarDetalleCompra(Boolean isVisibilidadCeldaEliminarDetalleCompra) {
		this.isVisibilidadCeldaEliminarDetalleCompra = isVisibilidadCeldaEliminarDetalleCompra;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleCompra() {
		return isVisibilidadCeldaCancelarDetalleCompra;
	}

	public void setIsVisibilidadCeldaCancelarDetalleCompra(Boolean isVisibilidadCeldaCancelarDetalleCompra) {
		this.isVisibilidadCeldaCancelarDetalleCompra = isVisibilidadCeldaCancelarDetalleCompra;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleCompra() {
		return isVisibilidadCeldaGuardarDetalleCompra;
	}

	public void setIsVisibilidadCeldaGuardarDetalleCompra(Boolean isVisibilidadCeldaGuardarDetalleCompra) {
		this.isVisibilidadCeldaGuardarDetalleCompra = isVisibilidadCeldaGuardarDetalleCompra;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleCompra() {
		return isVisibilidadCeldaGuardarCambiosDetalleCompra;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleCompra(Boolean isVisibilidadCeldaGuardarCambiosDetalleCompra) {
		this.isVisibilidadCeldaGuardarCambiosDetalleCompra = isVisibilidadCeldaGuardarCambiosDetalleCompra;
	}
		
	public DetalleCompraSessionBean getdetallecompraSessionBean() {
		return this.detallecompraSessionBean;
	}
	
	public void setdetallecompraSessionBean(DetalleCompraSessionBean detallecompraSessionBean) {
		this.detallecompraSessionBean=detallecompraSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCompra() {
		return this.isVisibilidadFK_IdCompra;
	}

	public void setisVisibilidadFK_IdCompra(Boolean isVisibilidadFK_IdCompra) {
		this.isVisibilidadFK_IdCompra=isVisibilidadFK_IdCompra;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCosto() {
		return this.isVisibilidadFK_IdCuentaContableCosto;
	}

	public void setisVisibilidadFK_IdCuentaContableCosto(Boolean isVisibilidadFK_IdCuentaContableCosto) {
		this.isVisibilidadFK_IdCuentaContableCosto=isVisibilidadFK_IdCuentaContableCosto;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoDetalleInventario() {
		return this.isVisibilidadFK_IdEstadoDetalleInventario;
	}

	public void setisVisibilidadFK_IdEstadoDetalleInventario(Boolean isVisibilidadFK_IdEstadoDetalleInventario) {
		this.isVisibilidadFK_IdEstadoDetalleInventario=isVisibilidadFK_IdEstadoDetalleInventario;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdNovedadProducto() {
		return this.isVisibilidadFK_IdNovedadProducto;
	}

	public void setisVisibilidadFK_IdNovedadProducto(Boolean isVisibilidadFK_IdNovedadProducto) {
		this.isVisibilidadFK_IdNovedadProducto=isVisibilidadFK_IdNovedadProducto;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(DetalleCompra detallecompra)throws Exception {
		try {
			
				this.setActualParaGuardarCompraForeignKey(detallecompra,null);
				this.setActualParaGuardarEmpresaForeignKey(detallecompra,null);
				this.setActualParaGuardarSucursalForeignKey(detallecompra,null);
				this.setActualParaGuardarEjercicioForeignKey(detallecompra,null);
				this.setActualParaGuardarPeriodoForeignKey(detallecompra,null);
				this.setActualParaGuardarAnioForeignKey(detallecompra,null);
				this.setActualParaGuardarMesForeignKey(detallecompra,null);
				this.setActualParaGuardarEstadoDetalleInventarioForeignKey(detallecompra,null);
				this.setActualParaGuardarBodegaForeignKey(detallecompra,null);
				this.setActualParaGuardarProductoForeignKey(detallecompra,null);
				this.setActualParaGuardarUnidadForeignKey(detallecompra,null);
				this.setActualParaGuardarNovedadProductoForeignKey(detallecompra,null);
				this.setActualParaGuardarCentroCostoForeignKey(detallecompra,null);
				this.setActualParaGuardarCuentaContableCostoForeignKey(detallecompra,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		/*
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		*/
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			/*
			//this.cargarLicenciaCliente(this.datosCliente);
			*/
	}
	
	public void bugActualizarReferenciaActual(DetalleCompra detallecompra,DetalleCompra detallecompraAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleCompra(detallecompra);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallecompraAux.setId(detallecompra.getId());
		detallecompraAux.setVersionRow(detallecompra.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleCompra();
		
			int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallecompraValidator.getInvalidValues(this.detallecompra);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallecompraLogic.setDatosCliente(datosCliente);
			detallecompraLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallecompraAux=new  DetalleCompra();
				
				detallecompraAux.setIsNew(true);
				detallecompraAux.setIsChanged(true);
				
				detallecompraAux.setDetalleCompraOriginal(this.detallecompra);
				
				detallecompraAux.setId(this.detallecompra.getId());	
				detallecompraAux.setVersionRow(this.detallecompra.getVersionRow());	
				detallecompraAux.setid_compra(this.detallecompra.getid_compra());	
				detallecompraAux.setid_empresa(this.detallecompra.getid_empresa());	
				detallecompraAux.setid_sucursal(this.detallecompra.getid_sucursal());	
				detallecompraAux.setid_ejercicio(this.detallecompra.getid_ejercicio());	
				detallecompraAux.setid_periodo(this.detallecompra.getid_periodo());	
				detallecompraAux.setid_anio(this.detallecompra.getid_anio());	
				detallecompraAux.setid_mes(this.detallecompra.getid_mes());	
				detallecompraAux.setid_estado_detalle_inventario(this.detallecompra.getid_estado_detalle_inventario());	
				detallecompraAux.setid_bodega(this.detallecompra.getid_bodega());	
				detallecompraAux.setid_producto(this.detallecompra.getid_producto());	
				detallecompraAux.setid_unidad(this.detallecompra.getid_unidad());	
				detallecompraAux.setdescripcion(this.detallecompra.getdescripcion());	
				
				if(this.detallecompra.getid_novedad_producto()!=null && this.detallecompra.getid_novedad_producto()>0L) {
					detallecompraAux.setid_novedad_producto(this.detallecompra.getid_novedad_producto());
				} else {
					detallecompraAux.setid_novedad_producto(null);
				}	
				detallecompraAux.setcantidad(this.detallecompra.getcantidad());	
				detallecompraAux.setdescuento(this.detallecompra.getdescuento());	
				detallecompraAux.setcosto_unitario(this.detallecompra.getcosto_unitario());	
				detallecompraAux.setiva(this.detallecompra.getiva());	
				detallecompraAux.setiva_valor(this.detallecompra.getiva_valor());	
				detallecompraAux.setcosto_total(this.detallecompra.getcosto_total());	
				detallecompraAux.setdisponible(this.detallecompra.getdisponible());	
				detallecompraAux.setcosto_iva(this.detallecompra.getcosto_iva());	
				detallecompraAux.setice(this.detallecompra.getice());	
				detallecompraAux.setice_valor(this.detallecompra.getice_valor());	
				detallecompraAux.setdescuento1(this.detallecompra.getdescuento1());	
				detallecompraAux.setdescuento2(this.detallecompra.getdescuento2());	
				detallecompraAux.setserie(this.detallecompra.getserie());	
				detallecompraAux.setlote(this.detallecompra.getlote());	
				detallecompraAux.setfecha_elaboracion_lote(this.detallecompra.getfecha_elaboracion_lote());	
				detallecompraAux.setfecha_caducidad_lote(this.detallecompra.getfecha_caducidad_lote());	
				
				if(this.detallecompra.getid_centro_costo()!=null && this.detallecompra.getid_centro_costo()>0L) {
					detallecompraAux.setid_centro_costo(this.detallecompra.getid_centro_costo());
				} else {
					detallecompraAux.setid_centro_costo(null);
				}	
				
				if(this.detallecompra.getid_cuenta_contable_costo()!=null && this.detallecompra.getid_cuenta_contable_costo()>0L) {
					detallecompraAux.setid_cuenta_contable_costo(this.detallecompra.getid_cuenta_contable_costo());
				} else {
					detallecompraAux.setid_cuenta_contable_costo(null);
				}	
				detallecompraAux.setnumero_comprobante(this.detallecompra.getnumero_comprobante());	
				detallecompraAux.setlote_cliente(this.detallecompra.getlote_cliente());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallecompraSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallecompraAux,detallecompras);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallecompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.saveDetalleCompras();//WithConnection
						//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);
					
					this.refrescarForeignKeysDescripcionesDetalleCompra();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallecompraLogic.saveDetalleCompraRelaciones(detallecompraAux);//WithConnection
								//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallecompraSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallecompraAux,detallecompras);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallecompraAux=new  DetalleCompra();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallecompraSessionBean.getEsGuardarRelacionado() 
					|| (this.detallecompraSessionBean.getEsGuardarRelacionado() && this.detallecompra.getId()>=0)) {
						
					detallecompraAux.setIsNew(false);
				}
				
				detallecompraAux.setIsDeleted(false);
			
				detallecompraAux.setId(this.detallecompra.getId());	
				detallecompraAux.setVersionRow(this.detallecompra.getVersionRow());	
				detallecompraAux.setid_compra(this.detallecompra.getid_compra());	
				detallecompraAux.setid_empresa(this.detallecompra.getid_empresa());	
				detallecompraAux.setid_sucursal(this.detallecompra.getid_sucursal());	
				detallecompraAux.setid_ejercicio(this.detallecompra.getid_ejercicio());	
				detallecompraAux.setid_periodo(this.detallecompra.getid_periodo());	
				detallecompraAux.setid_anio(this.detallecompra.getid_anio());	
				detallecompraAux.setid_mes(this.detallecompra.getid_mes());	
				detallecompraAux.setid_estado_detalle_inventario(this.detallecompra.getid_estado_detalle_inventario());	
				detallecompraAux.setid_bodega(this.detallecompra.getid_bodega());	
				detallecompraAux.setid_producto(this.detallecompra.getid_producto());	
				detallecompraAux.setid_unidad(this.detallecompra.getid_unidad());	
				detallecompraAux.setdescripcion(this.detallecompra.getdescripcion());	
				
				if(this.detallecompra.getid_novedad_producto()!=null && this.detallecompra.getid_novedad_producto()>0L) {
					detallecompraAux.setid_novedad_producto(this.detallecompra.getid_novedad_producto());
				} else {
					detallecompraAux.setid_novedad_producto(null);
				}	
				detallecompraAux.setcantidad(this.detallecompra.getcantidad());	
				detallecompraAux.setdescuento(this.detallecompra.getdescuento());	
				detallecompraAux.setcosto_unitario(this.detallecompra.getcosto_unitario());	
				detallecompraAux.setiva(this.detallecompra.getiva());	
				detallecompraAux.setiva_valor(this.detallecompra.getiva_valor());	
				detallecompraAux.setcosto_total(this.detallecompra.getcosto_total());	
				detallecompraAux.setdisponible(this.detallecompra.getdisponible());	
				detallecompraAux.setcosto_iva(this.detallecompra.getcosto_iva());	
				detallecompraAux.setice(this.detallecompra.getice());	
				detallecompraAux.setice_valor(this.detallecompra.getice_valor());	
				detallecompraAux.setdescuento1(this.detallecompra.getdescuento1());	
				detallecompraAux.setdescuento2(this.detallecompra.getdescuento2());	
				detallecompraAux.setserie(this.detallecompra.getserie());	
				detallecompraAux.setlote(this.detallecompra.getlote());	
				detallecompraAux.setfecha_elaboracion_lote(this.detallecompra.getfecha_elaboracion_lote());	
				detallecompraAux.setfecha_caducidad_lote(this.detallecompra.getfecha_caducidad_lote());	
				
				if(this.detallecompra.getid_centro_costo()!=null && this.detallecompra.getid_centro_costo()>0L) {
					detallecompraAux.setid_centro_costo(this.detallecompra.getid_centro_costo());
				} else {
					detallecompraAux.setid_centro_costo(null);
				}	
				
				if(this.detallecompra.getid_cuenta_contable_costo()!=null && this.detallecompra.getid_cuenta_contable_costo()>0L) {
					detallecompraAux.setid_cuenta_contable_costo(this.detallecompra.getid_cuenta_contable_costo());
				} else {
					detallecompraAux.setid_cuenta_contable_costo(null);
				}	
				detallecompraAux.setnumero_comprobante(this.detallecompra.getnumero_comprobante());	
				detallecompraAux.setlote_cliente(this.detallecompra.getlote_cliente());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallecompraAux,detallecompras);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallecompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.saveDetalleCompras();//WithConnection
						//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);
					
					this.refrescarForeignKeysDescripcionesDetalleCompra();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallecompraLogic.saveDetalleCompraRelaciones(detallecompraAux);//WithConnection
								//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallecompraSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallecompraAux,detallecompras);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallecompra,detallecompraAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallecompraAux=new  DetalleCompra();
				
				detallecompraAux.setIsNew(false);
				detallecompraAux.setIsChanged(false);
				
				detallecompraAux.setIsDeleted(true);
				
				detallecompraAux.setId(this.detallecompra.getId());	
				detallecompraAux.setVersionRow(this.detallecompra.getVersionRow());	
				detallecompraAux.setid_compra(this.detallecompra.getid_compra());	
				detallecompraAux.setid_empresa(this.detallecompra.getid_empresa());	
				detallecompraAux.setid_sucursal(this.detallecompra.getid_sucursal());	
				detallecompraAux.setid_ejercicio(this.detallecompra.getid_ejercicio());	
				detallecompraAux.setid_periodo(this.detallecompra.getid_periodo());	
				detallecompraAux.setid_anio(this.detallecompra.getid_anio());	
				detallecompraAux.setid_mes(this.detallecompra.getid_mes());	
				detallecompraAux.setid_estado_detalle_inventario(this.detallecompra.getid_estado_detalle_inventario());	
				detallecompraAux.setid_bodega(this.detallecompra.getid_bodega());	
				detallecompraAux.setid_producto(this.detallecompra.getid_producto());	
				detallecompraAux.setid_unidad(this.detallecompra.getid_unidad());	
				detallecompraAux.setdescripcion(this.detallecompra.getdescripcion());	
				
				if(this.detallecompra.getid_novedad_producto()!=null && this.detallecompra.getid_novedad_producto()>0L) {
					detallecompraAux.setid_novedad_producto(this.detallecompra.getid_novedad_producto());
				} else {
					detallecompraAux.setid_novedad_producto(null);
				}	
				detallecompraAux.setcantidad(this.detallecompra.getcantidad());	
				detallecompraAux.setdescuento(this.detallecompra.getdescuento());	
				detallecompraAux.setcosto_unitario(this.detallecompra.getcosto_unitario());	
				detallecompraAux.setiva(this.detallecompra.getiva());	
				detallecompraAux.setiva_valor(this.detallecompra.getiva_valor());	
				detallecompraAux.setcosto_total(this.detallecompra.getcosto_total());	
				detallecompraAux.setdisponible(this.detallecompra.getdisponible());	
				detallecompraAux.setcosto_iva(this.detallecompra.getcosto_iva());	
				detallecompraAux.setice(this.detallecompra.getice());	
				detallecompraAux.setice_valor(this.detallecompra.getice_valor());	
				detallecompraAux.setdescuento1(this.detallecompra.getdescuento1());	
				detallecompraAux.setdescuento2(this.detallecompra.getdescuento2());	
				detallecompraAux.setserie(this.detallecompra.getserie());	
				detallecompraAux.setlote(this.detallecompra.getlote());	
				detallecompraAux.setfecha_elaboracion_lote(this.detallecompra.getfecha_elaboracion_lote());	
				detallecompraAux.setfecha_caducidad_lote(this.detallecompra.getfecha_caducidad_lote());	
				
				if(this.detallecompra.getid_centro_costo()!=null && this.detallecompra.getid_centro_costo()>0L) {
					detallecompraAux.setid_centro_costo(this.detallecompra.getid_centro_costo());
				} else {
					detallecompraAux.setid_centro_costo(null);
				}	
				
				if(this.detallecompra.getid_cuenta_contable_costo()!=null && this.detallecompra.getid_cuenta_contable_costo()>0L) {
					detallecompraAux.setid_cuenta_contable_costo(this.detallecompra.getid_cuenta_contable_costo());
				} else {
					detallecompraAux.setid_cuenta_contable_costo(null);
				}	
				detallecompraAux.setnumero_comprobante(this.detallecompra.getnumero_comprobante());	
				detallecompraAux.setlote_cliente(this.detallecompra.getlote_cliente());	
				
				if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallecompraAux.getId()>=0) {	
						this.detallecomprasEliminados.add(detallecompraAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallecompraAux,detallecompras);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallecompraSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.saveDetalleCompras();//WithConnection
						//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallecompraLogic.saveDetalleCompraRelaciones(detallecompraAux);//WithConnection
								//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallecompraSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallecompraAux,detallecompraLogic.getDetalleCompras());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallecompraAux,detallecompras);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getDetalleCompras().addAll(this.detallecomprasEliminados);
					
					detallecompraLogic.saveDetalleCompras();//WithConnection
					//detallecompraLogic.getSetVersionRowDetalleCompras();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleCompra();
				
				this.detallecomprasEliminados= new ArrayList<DetalleCompra>();		
			}
			
			if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(detallecompraLogic.getDetalleCompras());							
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(this.detallecompras);
			}
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Compra GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallecompra=detallecompraAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleCompra();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleCompra detallecompraLocal) throws Exception {
		
		if(this.detallecompraSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleCompra detallecompraLocal) throws Exception {	
		if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(CompraDetalleFormJInternalFrame.class)) {
				CompraBeanSwingJInternalFrame compraBeanSwingJInternalFrameLocal=(CompraBeanSwingJInternalFrame) ((CompraDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				compraBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCompra(compraBeanSwingJInternalFrameLocal.getcompra(),true);
				compraBeanSwingJInternalFrameLocal.actualizarLista(compraBeanSwingJInternalFrameLocal.compra,this.comprasForeignKey);

				compraBeanSwingJInternalFrameLocal.actualizarRelaciones(compraBeanSwingJInternalFrameLocal.compra);

				detallecompraLocal.setCompra(compraBeanSwingJInternalFrameLocal.compra);

				this.addItemDefectoCombosForeignKeyCompra();
				this.cargarCombosFrameComprasForeignKey("Formulario");
				this.setActualCompraForeignKey(compraBeanSwingJInternalFrameLocal.compra.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallecompraLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallecompraLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				detallecompraLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				detallecompraLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				detallecompraLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				detallecompraLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoDetalleInventarioDetalleFormJInternalFrame.class)) {
				EstadoDetalleInventarioBeanSwingJInternalFrame estadodetalleinventarioBeanSwingJInternalFrameLocal=(EstadoDetalleInventarioBeanSwingJInternalFrame) ((EstadoDetalleInventarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadodetalleinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoDetalleInventario(estadodetalleinventarioBeanSwingJInternalFrameLocal.getestadodetalleinventario(),true);
				estadodetalleinventarioBeanSwingJInternalFrameLocal.actualizarLista(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario,this.estadodetalleinventariosForeignKey);

				estadodetalleinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario);

				detallecompraLocal.setEstadoDetalleInventario(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario);

				this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
				this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Formulario");
				this.setActualEstadoDetalleInventarioForeignKey(estadodetalleinventarioBeanSwingJInternalFrameLocal.estadodetalleinventario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallecompraLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallecompraLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallecompraLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NovedadProductoDetalleFormJInternalFrame.class)) {
				NovedadProductoBeanSwingJInternalFrame novedadproductoBeanSwingJInternalFrameLocal=(NovedadProductoBeanSwingJInternalFrame) ((NovedadProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				novedadproductoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.getnovedadproducto(),true);
				novedadproductoBeanSwingJInternalFrameLocal.actualizarLista(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto,this.novedadproductosForeignKey);

				novedadproductoBeanSwingJInternalFrameLocal.actualizarRelaciones(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				detallecompraLocal.setNovedadProducto(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto);

				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey("Formulario");
				this.setActualNovedadProductoForeignKey(novedadproductoBeanSwingJInternalFrameLocal.novedadproducto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				detallecompraLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostosForeignKey);

				cuentacontablecostoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				detallecompraLocal.setCuentaContableCosto(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey("Formulario");
				this.setActualCuentaContableCostoForeignKey(cuentacontablecostoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleCompraActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallecompraValidator.getInvalidValues(this.detallecompra);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleCompra detallecompra,List<DetalleCompra> detallecompras) throws Exception {
		try	{		
			DetalleCompraConstantesFunciones.actualizarLista(detallecompra,detallecompras,this.detallecompraSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleCompra detallecompra,List<DetalleCompra> detallecompras) throws Exception {
		try	{			
			DetalleCompraConstantesFunciones.actualizarSelectedLista(detallecompra,detallecompras);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleCompra> detallecomprasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallecomprasLocal=this.detallecompraLogic.getDetalleCompras();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallecomprasLocal=this.detallecompras;
			}
			//ARCHITECTURE
		
			for(DetalleCompra detallecompraLocal:detallecomprasLocal) {
				if(this.permiteMantenimiento(detallecompraLocal) && detallecompraLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleCompraConstantesFunciones.getDetalleCompraLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDCOMPRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_compraDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_empresaDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_sucursalDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_ejercicioDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_periodoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_anioDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_mesDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDESTADODETALLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_estado_detalle_inventarioDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_bodegaDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_productoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_unidadDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescripcionDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDNOVEDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_novedad_productoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcantidadDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuentoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.COSTOUNITARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_unitarioDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelivaDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IVAVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeliva_valorDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.COSTOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_totalDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.DISPONIBLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldisponibleDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.COSTOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_ivaDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeliceDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.ICEVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelice_valorDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.DESCUENTO1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuento1DetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.DESCUENTO2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuento2DetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.SERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelserieDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.LOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelloteDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.FECHAELABORACIONLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_elaboracion_loteDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.FECHACADUCIDADLOTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_caducidad_loteDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_centro_costoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.IDCUENTACONTABLECOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_cuenta_contable_costoDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.NUMEROCOMPROBANTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelnumero_comprobanteDetalleCompra,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleCompraConstantesFunciones.LOTECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabellote_clienteDetalleCompra,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_compraDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_empresaDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_sucursalDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_ejercicioDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_periodoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_anioDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_mesDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_estado_detalle_inventarioDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_bodegaDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_productoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_unidadDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescripcionDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_novedad_productoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelcantidadDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuentoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_unitarioDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelivaDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeliva_valorDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_totalDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeldisponibleDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_ivaDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeliceDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelice_valorDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuento1DetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescuento2DetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelserieDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelloteDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_elaboracion_loteDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_caducidad_loteDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_centro_costoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelid_cuenta_contable_costoDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabelnumero_comprobanteDetalleCompra,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleCompra.jLabellote_clienteDetalleCompra,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleCompra--;	
		
		
		this.detallecompraAux=new DetalleCompra();
		
		this.detallecompraAux.setId(this.iIdNuevoDetalleCompra);
		this.detallecompraAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallecompraLogic.getDetalleCompras().add(this.detallecompraAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallecompras.add(this.detallecompraAux);
		}
		//ARCHITECTURE
		
		this.detallecompra=this.detallecompraAux;
		
		if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleCompra(this.detallecompra);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleCompra(this.detallecompra);
		}
				
		//this.setDefaultControlesDetalleCompra();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleCompra();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleCompra();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleCompra();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleCompra(this.detallecompraBean,this.detallecompra,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleCompraConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
			classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallecompraReturnGeneral=detallecompraLogic.procesarEventosDetalleComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallecompraLogic.getDetalleCompras(),this.detallecompra,this.detallecompraParameterGeneral,this.isEsNuevoDetalleCompra,classes);//this.detallecompraLogic.getDetalleCompra()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleCompra(this.detallecompraReturnGeneral,this.detallecompraBean,false);
		
		if(this.detallecompraReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra());
		}
		
		if(this.detallecompraReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra(),classes);//this.detallecompraBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleCompra();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleCompra();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleCompraBeanSwingJInternalFrameAdditional.RecargarFormDetalleCompra(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleCompra(false);
						
			if(detallecompraSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleCompra();
			}
			
			this.actualizarVisualTableDatosDetalleCompra();
			
			this.jTableDatosDetalleCompra.setRowSelectionInterval(this.getIndiceNuevoDetalleCompra(), this.getIndiceNuevoDetalleCompra());
			
			this.seleccionarFilaTablaDetalleCompraActual();
						
			this.actualizarEstadoCeldasBotonesDetalleCompra("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleCompra(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activardescripcionDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarcantidadDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuentoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activardescuentoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarcosto_unitarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarivaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activariva_valorDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarcosto_totalDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activardisponibleDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxcosto_ivaDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarcosto_ivaDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiceDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activariceDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldice_valorDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarice_valorDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento1DetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activardescuento1DetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento2DetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activardescuento2DetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarserieDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarloteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarfecha_elaboracion_loteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarfecha_caducidad_loteDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldnumero_comprobanteDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarnumero_comprobanteDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldlote_clienteDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarlote_clienteDetalleCompra);	
		
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_compraDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_empresaDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_sucursalDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_ejercicioDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_periodoDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_anioDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_mesDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_estado_detalle_inventarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_bodegaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_productoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_unidadDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_novedad_productoDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_centro_costoDetalleCompra);//
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setEnabled(isHabilitar && this.detallecompraConstantesFunciones.activarid_cuenta_contable_costoDetalleCompra);
	};
	
	public void setDefaultControlesDetalleCompra() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleCompra(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallecompraSessionBean.setConGuardarRelaciones(true);			
			this.detallecompraSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.setVisible(true);
			
					
		} else {
			//this.detallecompraSessionBean.setConGuardarRelaciones(false);			
			this.detallecompraSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleCompra() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
				if(detallecompraAux.getId().equals(this.iIdNuevoDetalleCompra)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleCompra detallecompraAux:this.detallecompras) {
				if(detallecompraAux.getId().equals(this.iIdNuevoDetalleCompra)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleCompra(DetalleCompra detallecompra,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
				if(detallecompraAux.getId().equals(detallecompra.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleCompra detallecompraAux:this.detallecompras) {
				if(detallecompraAux.getId().equals(detallecompra.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleCompra(DetalleCompra detallecompraOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
				if(detallecompraAux.getDetalleCompraOriginal().getId().equals(detallecompraOriginal.getId())) {
					existe=true;
					detallecompraOriginal.setId(detallecompraAux.getId());
					detallecompraOriginal.setVersionRow(detallecompraAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleCompra detallecompraAux:this.detallecompras) {
				if(detallecompraAux.getDetalleCompraOriginal().getId().equals(detallecompraOriginal.getId())) {
					existe=true;
					detallecompraOriginal.setId(detallecompraAux.getId());
					detallecompraOriginal.setVersionRow(detallecompraAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleCompra(Boolean esParaCancelar) throws Exception {
		detallecomprasAux=new ArrayList<DetalleCompra>();
		detallecompraAux=new DetalleCompra();
		
		if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
					if(detallecompraAux.getId()<0) {
						detallecomprasAux.add(detallecompraAux);
					}		
				}
				this.iIdNuevoDetalleCompra=0L;
				this.detallecompraLogic.getDetalleCompras().removeAll(detallecomprasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleCompra detallecompraAux:this.detallecompras) {
					if(detallecompraAux.getId()<0) {
						detallecomprasAux.add(detallecompraAux);
					}		
				}
				this.iIdNuevoDetalleCompra=0L;
				this.detallecompras.removeAll(detallecomprasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleCompra 
					&& this.detallecompraLogic.getDetalleCompras().size()>0
					) {
					detallecompraAux=this.detallecompraLogic.getDetalleCompras().get(this.detallecompraLogic.getDetalleCompras().size() - 1);
				
					if(detallecompraAux.getId()<0) {
						this.detallecompraLogic.getDetalleCompras().remove(detallecompraAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleCompra && this.detallecompras.size()>0) {
					detallecompraAux=this.detallecompras.get(this.detallecompras.size() - 1);
				
					if(detallecompraAux.getId()<0) {
						this.detallecompras.remove(detallecompraAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleCompra(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallecompra.getId()<0) {
				this.detallecompraLogic.getDetalleCompras().remove(this.detallecompra);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallecompra.getId()<0) {
				this.detallecompras.remove(this.detallecompra);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleCompra(List<DetalleCompra> detallecomprasAux) throws Exception {
		DetalleCompraConstantesFunciones.setEstadosInicialesDetalleCompra(detallecomprasAux);
	}
	
	public void setEstadosInicialesDetalleCompra(DetalleCompra detallecompraAux) throws Exception {
		DetalleCompraConstantesFunciones.setEstadosInicialesDetalleCompra(detallecompraAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleCompraActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleCompraActual()) {
				if(!this.isEsNuevoDetalleCompra) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleCompra=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleCompraActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Compra ?", "MANTENIMIENTO DE Detalle Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleCompra detallecompra) throws Exception {
		DetalleCompraConstantesFunciones.seleccionarAsignar(this.detallecompra,detallecompra);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleCompra=this.isPermisoActualizarOriginalDetalleCompra;
			
			
			this.seleccionarAsignar(detallecompra);
			
			

			idProductoActual=detallecompra.getid_producto();
			this.seleccionarProductoActual();

			idCentroCostoActual=detallecompra.getid_centro_costo();
			this.seleccionarCentroCostoActual();

			idCuentaContableCostoActual=detallecompra.getid_cuenta_contable_costo();
			this.seleccionarCuentaContableCostoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleCompraConstantesFunciones.quitarEspaciosDetalleCompra(this.detallecompra,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallecompraSessionBean.setsFuncionBusquedaRapida(this.detallecompraSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCentroCostoActual() throws Exception {
		try	{
			CentroCosto centrocostoAux=new CentroCosto();

			if(this.idCentroCostoActual != null && this.idCentroCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(this.idCentroCostoActual);
					centrocostoAux= centrocostoLogic.getCentroCosto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				centrocostosForeignKey=new ArrayList<CentroCosto>();
				centrocostosForeignKey.add(centrocostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostoAux=new CuentaContable();

			if(this.idCuentaContableCostoActual != null && this.idCuentaContableCostoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostoLogic.getEntityWithConnection(this.idCuentaContableCostoActual);
					cuentacontablecostoAux= cuentacontablecostoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostosForeignKey.add(cuentacontablecostoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleCompra) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleCompra(esParaCancelar);				
				this.cancelarNuevoDetalleCompra(esParaCancelar);								
			}
			
			this.detallecompra=new DetalleCompra();
			
			this.inicializarDetalleCompra();
			
			this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleCompra() throws Exception {
		try {
			DetalleCompraConstantesFunciones.inicializarDetalleCompra(this.detallecompra);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallecompraLogic.getDetalleCompras().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleCompras(String sAccionBusqueda,List<DetalleCompra> detallecomprasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleCompra"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleCompraMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleCompraMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleCompra"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Compras");		
		parameters.put("busquedapor", DetalleCompraConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleCompra=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleCompraConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleCompraConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleCompra=new JRBeanArrayDataSource(DetalleCompraJInternalFrame.TraerDetalleCompraBeans(detallecomprasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleCompra);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleCompraConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleCompraConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleCompraBean.TraerDetalleCompraBeans(detallecomprasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					/*
					this.jButtonGenerarExcelReporteDinamicoDetalleCompraActionPerformed(null);
					//this.generarExcelReporteDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes);
					*/
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleCompras(sAccionBusqueda,sTipoArchivoReporte,detallecomprasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleCompra> detallecomprasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleCompras");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleCompra("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleCompra detallecompra : detallecomprasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleCompraConstantesFunciones.generarExcelReporteDataDetalleCompra("NORMAL",row,workbook,detallecompra,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleCompra(String sTipo,Row row,Workbook workbook) {
		
		DetalleCompraConstantesFunciones.generarExcelReporteHeaderDetalleCompra(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleCompra> detallecomprasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleCompras");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleCompra detallecompra : detallecomprasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleCompraConstantesFunciones.getDetalleCompraDescripcion(detallecompra));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDCOMPRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCOMPRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcompra_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getestadodetalleinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getnovedadproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcosto_unitario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IVAVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVAVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getiva_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcosto_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getdisponible());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_COSTOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(detallecompra.getcosto_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_ICEVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICEVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getice_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getdescuento1());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getdescuento2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_SERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_SERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getserie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_LOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getlote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getfecha_elaboracion_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getfecha_caducidad_lote());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getcuentacontablecosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getnumero_comprobante());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallecompra.getlote_cliente());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleCompras(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleCompra> detallecomprasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleCompra> detallecomprasRespaldo=null;
		
		classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallecompraLogic.setDatosCliente(this.datosCliente);
		this.detallecompraLogic.setDatosDeep(this.datosDeep);
		this.detallecompraLogic.setIsConDeep(true);
		
		detallecomprasRespaldo=this.detallecompraLogic.getDetalleCompras();
		
		this.detallecompraLogic.setDetalleCompras(detallecomprasParaReportes);	
		this.detallecompraLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallecomprasParaReportes=this.detallecompraLogic.getDetalleCompras();
		this.detallecompraLogic.setDetalleCompras(detallecomprasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleCompras");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleCompra("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleCompra detallecompra : detallecomprasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleCompra("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleCompraConstantesFunciones.generarExcelReporteDataDetalleCompra("NORMAL",row,workbook,detallecompra,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleCompraConstantesFunciones.getDetalleCompraDescripcion(detallecompra));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		/*
		for(int index:this.jInternalFrameReporteDinamicoDetalleCompra.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		*/
		
		return existe;
	}
	
	public void startProcessDetalleCompra() throws Exception {		
		this.startProcessDetalleCompra(true);
	}
	
	public void startProcessDetalleCompra(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleCompra ,this.jPanelParametrosReportesDetalleCompra, this.jScrollPanelDatosDetalleCompra,this.jPanelPaginacionDetalleCompra, this.jScrollPanelDatosEdicionDetalleCompra, this.jPanelAccionesDetalleCompra,this.jPanelAccionesFormularioDetalleCompra,this.jmenuBarDetalleCompra,this.jmenuBarDetalleDetalleCompra,this.jTtoolBarDetalleCompra,this.jTtoolBarDetalleDetalleCompra);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleCompra=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleCompra=this.jPanelParametrosReportesDetalleCompra;
		//final JScrollPane jScrollPanelDatosDetalleCompra=this.jScrollPanelDatosDetalleCompra;
		final JTable jTableDatosDetalleCompra=this.jTableDatosDetalleCompra;		
		final JPanel jPanelPaginacionDetalleCompra=this.jPanelPaginacionDetalleCompra;
		//final JScrollPane jScrollPanelDatosEdicionDetalleCompra=this.jScrollPanelDatosEdicionDetalleCompra;
		final JPanel jPanelAccionesDetalleCompra=this.jPanelAccionesDetalleCompra;
		
		JPanel jPanelCamposAuxiliarDetalleCompra=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleCompra=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			jPanelCamposAuxiliarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jPanelCamposDetalleCompra;
			jPanelAccionesFormularioAuxiliarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jPanelAccionesFormularioDetalleCompra;
		}
		
		final JPanel jPanelCamposDetalleCompra=jPanelCamposAuxiliarDetalleCompra;
		final JPanel jPanelAccionesFormularioDetalleCompra=jPanelAccionesFormularioAuxiliarDetalleCompra;
		
		
		final JMenuBar jmenuBarDetalleCompra=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleCompra=new JMenuBar();
		final JToolBar jTtoolBarDetalleCompra=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleCompra=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleCompra;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleCompra;
			processRunnable.jTableDatos=jTableDatosDetalleCompra;
			processRunnable.jPanelCampos=jPanelCamposDetalleCompra;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleCompra;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleCompra;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleCompra;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleCompra;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleCompra;
			processRunnable.jTtoolBar=jTtoolBarDetalleCompra;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleCompra;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleCompra ,jPanelParametrosReportesDetalleCompra,jTableDatosDetalleCompra, /*jScrollPanelDatosDetalleCompra,*/jPanelCamposDetalleCompra,jPanelPaginacionDetalleCompra, /*jScrollPanelDatosEdicionDetalleCompra,*/ jPanelAccionesDetalleCompra,jPanelAccionesFormularioDetalleCompra,jmenuBarDetalleCompra,jmenuBarDetalleDetalleCompra,jTtoolBarDetalleCompra,jTtoolBarDetalleDetalleCompra);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleCompra ,jPanelParametrosReportesDetalleCompra, jScrollPanelDatosDetalleCompra,jPanelPaginacionDetalleCompra, jScrollPanelDatosEdicionDetalleCompra, jPanelAccionesDetalleCompra,jPanelAccionesFormularioDetalleCompra,jmenuBarDetalleCompra,jmenuBarDetalleDetalleCompra,jTtoolBarDetalleCompra,jTtoolBarDetalleDetalleCompra);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleCompra() {// throws Exception 
		this.finishProcessDetalleCompra(true);
	}
	
	public void finishProcessDetalleCompra(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleCompra ,this.jPanelParametrosReportesDetalleCompra, this.jScrollPanelDatosDetalleCompra,this.jPanelPaginacionDetalleCompra, this.jScrollPanelDatosEdicionDetalleCompra, this.jPanelAccionesDetalleCompra,this.jPanelAccionesFormularioDetalleCompra,this.jmenuBarDetalleCompra,this.jmenuBarDetalleDetalleCompra,this.jTtoolBarDetalleCompra,this.jTtoolBarDetalleDetalleCompra);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleCompra=new JTabbedPane();
		
		final JPanel jPanelParametrosReportesDetalleCompra=this.jPanelParametrosReportesDetalleCompra;
		//final JScrollPane jScrollPanelDatosDetalleCompra=this.jScrollPanelDatosDetalleCompra;
		final JTable jTableDatosDetalleCompra=this.jTableDatosDetalleCompra;		
		final JPanel jPanelPaginacionDetalleCompra=this.jPanelPaginacionDetalleCompra;
		//final JScrollPane jScrollPanelDatosEdicionDetalleCompra=this.jScrollPanelDatosEdicionDetalleCompra;
		final JPanel jPanelAccionesDetalleCompra=this.jPanelAccionesDetalleCompra;
		
		JPanel jPanelCamposAuxiliarDetalleCompra=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleCompra=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			jPanelCamposAuxiliarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jPanelCamposDetalleCompra;
			jPanelAccionesFormularioAuxiliarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jPanelAccionesFormularioDetalleCompra;
		}
		
		final JPanel jPanelCamposDetalleCompra=jPanelCamposAuxiliarDetalleCompra;
		final JPanel jPanelAccionesFormularioDetalleCompra=jPanelAccionesFormularioAuxiliarDetalleCompra;
		
		
		final JMenuBar jmenuBarDetalleCompra=new JMenuBar();
		final JMenuBar jmenuBarDetalleDetalleCompra=new JMenuBar();
		final JToolBar jTtoolBarDetalleCompra=new JToolBar();
		final JToolBar jTtoolBarDetalleDetalleCompra=new JToolBar();		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleCompra;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleCompra;
			processRunnable.jTableDatos=jTableDatosDetalleCompra;
			processRunnable.jPanelCampos=jPanelCamposDetalleCompra;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleCompra;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleCompra;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleCompra;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleCompra;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleCompra;
			processRunnable.jTtoolBar=jTtoolBarDetalleCompra;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleCompra;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleCompra ,jPanelParametrosReportesDetalleCompra, jTableDatosDetalleCompra,/*jScrollPanelDatosDetalleCompra,*/jPanelCamposDetalleCompra,jPanelPaginacionDetalleCompra, /*jScrollPanelDatosEdicionDetalleCompra,*/ jPanelAccionesDetalleCompra,jPanelAccionesFormularioDetalleCompra,jmenuBarDetalleCompra,jmenuBarDetalleDetalleCompra,jTtoolBarDetalleCompra,jTtoolBarDetalleDetalleCompra));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleCompra(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleCompra(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleCompra(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleCompra(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleCompra,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleCompra,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleCompra(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleCompra,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleCompra,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallecompraConstantesFunciones.getsFinalQueryDetalleCompra();
		String  finalQueryPaginacionTodos=this.detallecompraConstantesFunciones.getsFinalQueryDetalleCompra();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleCompraConstantesFunciones.getArrayColumnasGlobalesNoDetalleCompra(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleCompraConstantesFunciones.getArrayColumnasGlobalesDetalleCompra(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleCompraConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		/*
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		*/
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallecomprasEliminados= new ArrayList<DetalleCompra>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleCompra();
		
				///*DetalleCompraSessionBean*/this.detallecompraSessionBean=new DetalleCompraSessionBean();
			
			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleCompraConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleCompraConstantesFunciones.getClassesForeignKeysOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallecompra."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallecomprasAux= new ArrayList<DetalleCompra>();
			
				
			detallecompraLogic.setDatosCliente(this.datosCliente);
			detallecompraLogic.setDatosDeep(this.datosDeep);
			detallecompraLogic.setIsConDeep(true);
			
			
			detallecompraLogic.getDetalleCompraDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallecompraLogic.getTodosDetalleCompras(finalQueryGlobal,pagination);
					
					//detallecompraLogic.getTodosDetalleComprasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallecompraLogic.getDetalleCompras()==null|| detallecompraLogic.getDetalleCompras().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallecomprasAux= new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux= new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallecompraLogic.getTodosDetalleCompras(finalQueryGlobal+"",this.pagination);												
							
							//detallecompraLogic.getTodosDetalleComprasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleCompras("Todos",detallecompraLogic.getDetalleCompras() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());					
							detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleCompra=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleCompra=this.idActual;
				
				} else if(this.idDetalleCompraActual!=null && this.idDetalleCompraActual!=0L) {
					idDetalleCompra=idDetalleCompraActual;
				}
				
					
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndicePorId(idDetalleCompra);
				
				this.detallecompras=new ArrayList<DetalleCompra>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallecompraLogic.getEntity(idDetalleCompra);
					
					//detallecompraLogic.getEntityWithConnection(idDetalleCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
					detallecompraLogic.getDetalleCompras().add(detallecompraLogic.getDetalleCompra());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompras=new ArrayList<DetalleCompra>();
					this.detallecompras.add(detallecompra);
				}
				
				if(detallecompraLogic.getDetalleCompra()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdBodega",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdBodega",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdCentroCosto",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdCentroCosto",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCompra")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdCompra(finalQueryGlobal,pagination,id_compraFK_IdCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdCompra(finalQueryGlobal,pagination,id_compraFK_IdCompra);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCompra(id_compraFK_IdCompra);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdCompra",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdCompra",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCosto")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdCuentaContableCosto(finalQueryGlobal,pagination,id_cuenta_contable_costoFK_IdCuentaContableCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCosto(id_cuenta_contable_costoFK_IdCuentaContableCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdCuentaContableCosto",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdCuentaContableCosto",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdEjercicio",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdEjercicio",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdEmpresa",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdEmpresa",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoDetalleInventario")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdEstadoDetalleInventario(finalQueryGlobal,pagination,id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdEstadoDetalleInventario(finalQueryGlobal,pagination,id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdEstadoDetalleInventario(id_estado_detalle_inventarioFK_IdEstadoDetalleInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdEstadoDetalleInventario",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdEstadoDetalleInventario",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNovedadProducto")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdNovedadProducto(finalQueryGlobal,pagination,id_novedad_productoFK_IdNovedadProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdNovedadProducto(id_novedad_productoFK_IdNovedadProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdNovedadProducto",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdNovedadProducto",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdPeriodo",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdPeriodo",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdProducto",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdProducto",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdSucursal",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdSucursal",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallecompraLogic.getDetalleComprasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallecompraLogic.getDetalleCompras()==null||detallecompraLogic.getDetalleCompras().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallecompras==null|| detallecompras.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecomprasAux=new ArrayList<DetalleCompra>();
						detallecomprasAux.addAll(detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecomprasAux=new ArrayList<DetalleCompra>();
							detallecomprasAux.addAll(detallecompras);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallecompraLogic.getDetalleComprasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleCompraConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleCompras("FK_IdUnidad",detallecompraLogic.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleCompras("FK_IdUnidad",detallecompras);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraLogic.setDetalleCompras(new ArrayList<DetalleCompra>());
						detallecompraLogic.getDetalleCompras().addAll(detallecomprasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompras=new ArrayList<DetalleCompra>();
							detallecompras.addAll(detallecomprasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleCompra();
		
		this.traerValoresTablaTotales();	
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(detallecompraLogic.getDetalleCompras());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(this.detallecompras);
		}
		*/
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleCompra();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallecompraLogic.getDetalleCompras().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallecompras.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallecompraLogic.getDetalleCompras().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallecompras.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleCompra detallecompra) {
		Boolean permite=true;
		
		if(this.detallecompra.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(detallecompraLogic.getDetalleCompras());							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrDatoGeneralTotales=DetalleCompraConstantesFunciones.getTotalesListaDetalleCompra(this.detallecompras);
		}
	}
	
	/*
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleCompraConstantesFunciones.getOrderByListaDetalleCompra();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleCompraConstantesFunciones.getOrderByListaDetalleCompra();
		}		
	}
	*/
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleCompra detallecompra:detallecompraLogic.getDetalleCompras()) {
				if(detallecompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallecompraTotales=detallecompra;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleCompra detallecompra:this.detallecompras) {
				if(detallecompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallecompraTotales=detallecompra;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallecompraAux=new DetalleCompra();
			this.detallecompraAux.setsType(Constantes2.S_TOTALES);
			this.detallecompraAux.setIsNew(false);
			this.detallecompraAux.setIsChanged(false);
			this.detallecompraAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleCompraConstantesFunciones.TotalizarValoresFilaDetalleCompra(this.detallecompraLogic.getDetalleCompras(),this.detallecompraAux);
				
				this.detallecompraLogic.getDetalleCompras().add(this.detallecompraAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleCompraConstantesFunciones.TotalizarValoresFilaDetalleCompra(this.detallecompras,this.detallecompraAux);
				
				this.detallecompras.add(this.detallecompraAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallecompraTotales=new DetalleCompra();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallecompraLogic.getDetalleCompras().remove(detallecompraTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallecompras.remove(detallecompraTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallecompraTotales=new DetalleCompra();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleCompra detallecompra:detallecompraLogic.getDetalleCompras()) {
				if(detallecompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallecompraTotales=detallecompra;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleCompraConstantesFunciones.TotalizarValoresFilaDetalleCompra(this.detallecompraLogic.getDetalleCompras(),detallecompraTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleCompra detallecompra:this.detallecompras) {
				if(detallecompra.getsType().equals(Constantes2.S_TOTALES)) {
					detallecompraTotales=detallecompra;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleCompraConstantesFunciones.TotalizarValoresFilaDetalleCompra(this.detallecompras,detallecompraTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleCompra() {
		this.isPermisoTodoDetalleCompra=false;
		this.isPermisoNuevoDetalleCompra=false;
		this.isPermisoActualizarDetalleCompra=false;
		this.isPermisoActualizarOriginalDetalleCompra=false;
		this.isPermisoEliminarDetalleCompra=false;
		this.isPermisoGuardarCambiosDetalleCompra=false;
		this.isPermisoConsultaDetalleCompra=false;
		this.isPermisoBusquedaDetalleCompra=false;
		this.isPermisoReporteDetalleCompra=false;		
		this.isPermisoOrdenDetalleCompra=false;		
		this.isPermisoPaginacionMedioDetalleCompra=false;		
		this.isPermisoPaginacionAltoDetalleCompra=false;
		this.isPermisoPaginacionTodoDetalleCompra=false;
		this.isPermisoCopiarDetalleCompra=false;		
		this.isPermisoVerFormDetalleCompra=false;		
		this.isPermisoDuplicarDetalleCompra=false;		
		this.isPermisoOrdenDetalleCompra=false;		
	}
	
	public void setPermisosUsuarioDetalleCompra(Boolean isPermiso) {
		this.isPermisoTodoDetalleCompra=isPermiso;
		this.isPermisoNuevoDetalleCompra=isPermiso;
		this.isPermisoActualizarDetalleCompra=isPermiso;
		this.isPermisoActualizarOriginalDetalleCompra=isPermiso;
		this.isPermisoEliminarDetalleCompra=isPermiso;
		this.isPermisoGuardarCambiosDetalleCompra=isPermiso;
		this.isPermisoConsultaDetalleCompra=isPermiso;
		this.isPermisoBusquedaDetalleCompra=isPermiso;
		this.isPermisoReporteDetalleCompra=isPermiso;
		this.isPermisoOrdenDetalleCompra=isPermiso;		
		this.isPermisoPaginacionMedioDetalleCompra=isPermiso;		
		this.isPermisoPaginacionAltoDetalleCompra=isPermiso;		
		this.isPermisoPaginacionTodoDetalleCompra=isPermiso;		
		this.isPermisoCopiarDetalleCompra=isPermiso;		
		this.isPermisoVerFormDetalleCompra=isPermiso;		
		this.isPermisoDuplicarDetalleCompra=isPermiso;
		this.isPermisoOrdenDetalleCompra=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleCompra(Boolean isPermiso) {
		//this.isPermisoTodoDetalleCompra=isPermiso;
		this.isPermisoNuevoDetalleCompra=isPermiso;
		this.isPermisoActualizarDetalleCompra=isPermiso;
		this.isPermisoActualizarOriginalDetalleCompra=isPermiso;
		this.isPermisoEliminarDetalleCompra=isPermiso;
		this.isPermisoGuardarCambiosDetalleCompra=isPermiso;
		//this.isPermisoConsultaDetalleCompra=isPermiso;
		//this.isPermisoBusquedaDetalleCompra=isPermiso;
		//this.isPermisoReporteDetalleCompra=isPermiso;
		//this.isPermisoOrdenDetalleCompra=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleCompra=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleCompra=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleCompra=isPermiso;		
		//this.isPermisoCopiarDetalleCompra=isPermiso;		
		//this.isPermisoDuplicarDetalleCompra=isPermiso;
		//this.isPermisoOrdenDetalleCompra=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleCompraClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleCompra(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleCompraClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleCompraClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleCompraClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleCompraClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleCompra() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleCompraConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleCompra=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleCompra=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleCompra=this.isPermisoActualizarDetalleCompra;
			this.isPermisoEliminarDetalleCompra=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleCompra=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleCompra=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleCompra=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleCompra=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleCompra=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleCompra=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleCompra=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleCompra=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleCompra=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleCompra=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleCompra=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleCompra=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleCompra=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleCompra.setToolTipText(this.jTableDatosDetalleCompra.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleCompra(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleCompra(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleCompra() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleCompraListas()throws Exception {
		try	{						
			
				this.comprasForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.estadodetalleinventariosForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
				this.novedadproductosForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.cuentacontablecostosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleCompraListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleCompraJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleCompraListas(false);
			} else {
			
				this.cargarCombosForeignKeyCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoDetalleInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyCompraListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.comprasForeignKey==null||this.comprasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CompraConstantesFunciones.getArrayColumnasGlobalesCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CompraConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CompraConstantesFunciones.SFINALQUERY;

				this.cargarCombosComprasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadodetalleinventariosForeignKey==null||this.estadodetalleinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoDetalleInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleInventarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoDetalleInventarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoDetalleInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NovedadProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleCompraListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleCompraParameterReturnGeneral detallecompraReturnGeneral=new DetalleCompraParameterReturnGeneral();
						
			


				String finalQueryGlobalCompra="";

				if(((this.comprasForeignKey==null||this.comprasForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_compraDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_compraDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CompraConstantesFunciones.getArrayColumnasGlobalesCompra(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCompra=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CompraConstantesFunciones.TABLENAME);

						finalQueryGlobalCompra=Funciones.GetFinalQueryAppend(finalQueryGlobalCompra, "");
						finalQueryGlobalCompra+=CompraConstantesFunciones.SFINALQUERY;

						//this.cargarCombosComprasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCompra=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidCompraActual();
					}
				} else {
					finalQueryGlobalCompra="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_empresaDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_empresaDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_sucursalDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_sucursalDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_ejercicioDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_ejercicioDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_periodoDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_periodoDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_anioDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_anioDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_mesDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_mesDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalEstadoDetalleInventario="";

				if(((this.estadodetalleinventariosForeignKey==null||this.estadodetalleinventariosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_estado_detalle_inventarioDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_estado_detalle_inventarioDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoDetalleInventarioConstantesFunciones.getArrayColumnasGlobalesEstadoDetalleInventario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoDetalleInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoDetalleInventarioConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoDetalleInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoDetalleInventario, "");
						finalQueryGlobalEstadoDetalleInventario+=EstadoDetalleInventarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoDetalleInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoDetalleInventario=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidEstadoDetalleInventarioActual();
					}
				} else {
					finalQueryGlobalEstadoDetalleInventario="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_bodegaDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_bodegaDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_productoDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_productoDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_unidadDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_unidadDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}


				String finalQueryGlobalNovedadProducto="";

				if(((this.novedadproductosForeignKey==null||this.novedadproductosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_novedad_productoDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_novedad_productoDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NovedadProductoConstantesFunciones.getArrayColumnasGlobalesNovedadProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNovedadProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NovedadProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalNovedadProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalNovedadProducto, "");
						finalQueryGlobalNovedadProducto+=NovedadProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNovedadProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNovedadProducto=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidNovedadProductoActual();
					}
				} else {
					finalQueryGlobalNovedadProducto="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_centro_costoDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_centro_costoDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCuentaContableCosto="";

				if(((this.cuentacontablecostosForeignKey==null||this.cuentacontablecostosForeignKey.size()<=0) && this.detallecompraConstantesFunciones.cargarid_cuenta_contable_costoDetalleCompra)
					 || (this.esRecargarFks && this.detallecompraConstantesFunciones.cargarid_cuenta_contable_costoDetalleCompra)) {

					if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCosto, "");
						finalQueryGlobalCuentaContableCosto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCosto=" WHERE " + ConstantesSql.ID + "="+detallecompraSessionBean.getlidCuentaContableCostoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCosto="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallecompraReturnGeneral=detallecompraLogic.cargarCombosLoteForeignKeyDetalleCompra(finalQueryGlobalCompra,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalEstadoDetalleInventario,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad,finalQueryGlobalNovedadProducto,finalQueryGlobalCentroCosto,finalQueryGlobalCuentaContableCosto);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalCompra.equals("NONE")) {
				this.comprasForeignKey=detallecompraReturnGeneral.getcomprasForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallecompraReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallecompraReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=detallecompraReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=detallecompraReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=detallecompraReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=detallecompraReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalEstadoDetalleInventario.equals("NONE")) {
				this.estadodetalleinventariosForeignKey=detallecompraReturnGeneral.getestadodetalleinventariosForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallecompraReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallecompraReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallecompraReturnGeneral.getunidadsForeignKey();
			}

			if(!finalQueryGlobalNovedadProducto.equals("NONE")) {
				this.novedadproductosForeignKey=detallecompraReturnGeneral.getnovedadproductosForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=detallecompraReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCosto.equals("NONE")) {
				this.cuentacontablecostosForeignKey=detallecompraReturnGeneral.getcuentacontablecostosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleCompra()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyCompra();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
			this.addItemDefectoCombosForeignKeyNovedadProducto();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCuentaContableCosto();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyCompra()throws Exception {
		try {
			if(this.detallecompraSessionBean==null) {
				this.detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCompra()) {
				Compra compra=new Compra();
				CompraConstantesFunciones.setCompraDescripcion(compra,Constantes.SMENSAJE_ESCOJA_OPCION);
				compra.setId(null);

				if(!CompraConstantesFunciones.ExisteEnLista(this.comprasForeignKey,compra,true)) {

					this.comprasForeignKey.add(0,compra);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoDetalleInventario()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionEstadoDetalleInventario()) {
				EstadoDetalleInventario estadodetalleinventario=new EstadoDetalleInventario();
				EstadoDetalleInventarioConstantesFunciones.setEstadoDetalleInventarioDescripcion(estadodetalleinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadodetalleinventario.setId(null);

				if(!EstadoDetalleInventarioConstantesFunciones.ExisteEnLista(this.estadodetalleinventariosForeignKey,estadodetalleinventario,true)) {

					this.estadodetalleinventariosForeignKey.add(0,estadodetalleinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNovedadProducto()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionNovedadProducto()) {
				NovedadProducto novedadproducto=new NovedadProducto();
				NovedadProductoConstantesFunciones.setNovedadProductoDescripcion(novedadproducto,Constantes.SMENSAJE_ESCOJA_OPCION);
				novedadproducto.setId(null);

				if(!NovedadProductoConstantesFunciones.ExisteEnLista(this.novedadproductosForeignKey,novedadproducto,true)) {

					this.novedadproductosForeignKey.add(0,novedadproducto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCosto()throws Exception {
		try {

			if(!this.detallecompraSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCosto()) {
				CuentaContable cuentacontablecosto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecosto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostosForeignKey,cuentacontablecosto,true)) {

					this.cuentacontablecostosForeignKey.add(0,cuentacontablecosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleCompra()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleCompra(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallecompra.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleCompra"));
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleCompra"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleCompra"));
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleCompra"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleCompra"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleCompra"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleCompra"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleCompra"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleCompra"));
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleCompra"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleCompra"));
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleCompra"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleCompra.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleCompra"));

						this.jComboBoxid_productoFK_IdProductoDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleCompra"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleCompra.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleCompra"));

						this.jComboBoxid_productoFK_IdProductoDetalleCompra.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleCompra"));

					}
			*/
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleCompra()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.detallecompra.setfecha_elaboracion_lote(this.parametroGeneralUsuario.getfecha_sistema());
				this.detallecompra.setfecha_caducidad_lote(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleCompra();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleCompra(DetalleCompra detallecompra)throws Exception {	
		try {
			
			this.setActualCompraForeignKey(detallecompra.getid_compra(),false,"Formulario");
			this.setActualEstadoDetalleInventarioForeignKey(detallecompra.getid_estado_detalle_inventario(),false,"Formulario");
			this.setActualBodegaForeignKey(detallecompra.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallecompra.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallecompra.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(detallecompra.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(detallecompra.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(detallecompra.getid_cuenta_contable_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleCompra(DetalleCompra detallecompra,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallecompra.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleCompra")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallecompra.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				if(detallecompra.getCentroCosto()!=null && !sTipoEvento.equals("id_centro_costoDetalleCompra")) { //sTipoEvento Evita Bucle Infinito

					this.centrocostosForeignKey=new ArrayList<CentroCosto>();
					this.centrocostosForeignKey.add(detallecompra.getCentroCosto());

					this.addItemDefectoCombosForeignKeyCentroCosto();
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				if(detallecompra.getCuentaContableCosto()!=null && !sTipoEvento.equals("id_cuenta_contable_costoDetalleCompra")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostosForeignKey.add(detallecompra.getCuentaContableCosto());

					this.addItemDefectoCombosForeignKeyCuentaContableCosto();
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleCompra()throws Exception {	
		try {
			
			this.setActualCompraForeignKey(this.detallecompraConstantesFunciones.getid_compra(),false,"Formulario");
			this.setActualEstadoDetalleInventarioForeignKey(this.detallecompraConstantesFunciones.getid_estado_detalle_inventario(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallecompraConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallecompraConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallecompraConstantesFunciones.getid_unidad(),false,"Formulario");
			this.setActualNovedadProductoForeignKey(this.detallecompraConstantesFunciones.getid_novedad_producto(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.detallecompraConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCuentaContableCostoForeignKey(this.detallecompraConstantesFunciones.getid_cuenta_contable_costo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleCompra()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleCompra()throws Exception {	
		try {
			
				this.setActualEstadoDetalleInventarioForeignKey(1L,false,"Formulario");
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleCompra()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleCompra()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleCompra()throws Exception {
		try {
			

			this.cargarCombosFrameComprasForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");
			this.cargarCombosFrameNovedadProductosForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleCompra(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameComprasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoDetalleInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleCompra()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.getItemCount()>0) {
				//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

















	public void recargarFormDetalleCompraBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleCompraid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleCompraProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleCompraid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}








	
	



	public void recargarFormDetalleCompraid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallecompra,jComboBoxGenericoProducto);
			}

			if(this.detallecompra.getid_bodega()!=null && this.detallecompra.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallecompra.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallecompra.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleCompraid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallecompra,jComboBoxGenericoUnidad);
			}

			if(this.detallecompra.getid_producto()!=null && this.detallecompra.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallecompra.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallecompra.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleCompraBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleCompraBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleCompraBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallecompraSessionBean=new DetalleCompraSessionBean(); 
		this.detallecompraConstantesFunciones=new DetalleCompraConstantesFunciones(); 
		this.detallecompraBean=new DetalleCompra();//(this.detallecompraConstantesFunciones); 		
		this.detallecompraReturnGeneral=new DetalleCompraParameterReturnGeneral(); 
		
		this.detallecompraSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallecompraSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleCompraBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleCompra(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallecompraConstantesFunciones=new DetalleCompraConstantesFunciones(); 
			this.detallecompraBean=new DetalleCompra();//this.detallecompraConstantesFunciones); 			
			this.detallecompraReturnGeneral=new DetalleCompraParameterReturnGeneral(); 
		
			DetalleCompraBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Compra Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallecompra=new DetalleCompra();
			this.detallecompras = new ArrayList<DetalleCompra>();
			this.detallecomprasAux = new ArrayList<DetalleCompra>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic=new DetalleCompraLogic();
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			//this.detallecompraSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallecompraSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleCompra);
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleCompra);	
					}
					
					if(this.jInternalFrameImportacionDetalleCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleCompra);							
					}
					*/
				}
				
				if(this.jInternalFrameTotalesDetalleCompra!=null) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleCompra);
				}
				
				if(!this.conCargarMinimo) {
					/*
					if(this.jInternalFrameOrderByDetalleCompra!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleCompra);					
					}
					*/
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleCompra);
				this.jInternalFrameDetalleFormDetalleCompra.setVisible(false);
				this.jInternalFrameDetalleFormDetalleCompra.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				/*
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleCompra);
					this.jInternalFrameReporteDinamicoDetalleCompra.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleCompra.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleCompra);
					this.jInternalFrameImportacionDetalleCompra.setVisible(false);
					this.jInternalFrameImportacionDetalleCompra.setSelected(false);
				}
				
				*/
			}
			
			if(this.jInternalFrameTotalesDetalleCompra!=null) {
				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleCompra);
				this.jInternalFrameTotalesDetalleCompra.setVisible(false);
				this.jInternalFrameTotalesDetalleCompra.setSelected(false);
			}
			
			if(!this.conCargarMinimo) {
				/*
				if(this.jInternalFrameOrderByDetalleCompra!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleCompra);
					this.jInternalFrameOrderByDetalleCompra.setVisible(false);
					this.jInternalFrameOrderByDetalleCompra.setSelected(false);				
				}
				*/
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleCompraActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleCompraConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallecompraReturnGeneral=new DetalleCompraParameterReturnGeneral();
			
			this.detallecompraParameterGeneral=new DetalleCompraParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallecompraLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			/*
			if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			*/
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleCompraJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleCompraConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallecompraSessionBean.getEsGuardarRelacionado(),this.detallecompraSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleCompraConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallecompraSessionBean.getEsGuardarRelacionado(),this.detallecompraSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaDuplicarDetalleCompra=true;
			this.isVisibilidadCeldaCopiarDetalleCompra=true;
			this.isVisibilidadCeldaVerFormDetalleCompra=true;
			this.isVisibilidadCeldaOrdenDetalleCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=false;
			this.isVisibilidadCeldaGuardarDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCompra=true;
			this.isVisibilidadFK_IdCuentaContableCosto=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoDetalleInventario=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdNovedadProducto=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleCompra();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleCompra(false);
			
			this.setPermisosUsuarioDetalleCompra();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallecompraSessionBean.getEsGuardarRelacionado() 
				|| (this.detallecompraSessionBean.getEsGuardarRelacionado() && this.detallecompraSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleCompraClasesRelacionadas();
			}
			
			if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleCompraClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleCompra();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleCompra();
			}
			
			if(!this.isPermisoBusquedaDetalleCompra) {
				//BYDAN_BUSQUEDAS
				/*
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(false);				
				*/
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleCompra,this.isPermisoPaginacionMedioDetalleCompra,this.isPermisoPaginacionTodoDetalleCompra);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleCompraConstantesFunciones.getTiposSeleccionarDetalleCompra());
				
				this.tiposColumnasSelect=DetalleCompraConstantesFunciones.getTiposSeleccionarDetalleCompra(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleCompra();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleCompra(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleCompra(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleCompra() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			this.arrDatoGeneralTotales= new  ArrayList<DatoGeneral>();
			
			/*
			this.arrOrderBy= new  ArrayList<OrderBy>();
			*/
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			/*
			this.traerValoresTablaOrderBy();			
			*/
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.compraLogic=new CompraLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.estadodetalleinventarioLogic=new EstadoDetalleInventarioLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			this.novedadproductoLogic=new NovedadProductoLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.cuentacontablecostoLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallecompraImplementable= (DetalleCompraImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleCompraConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallecompraImplementableHome= (DetalleCompraImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleCompraConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallecompras= new ArrayList<DetalleCompra>();
			this.detallecomprasEliminados= new ArrayList<DetalleCompra>();
						
			this.isEsNuevoDetalleCompra=false;
			this.esParaAccionDesdeFormularioDetalleCompra=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			this.idCentroCostoActual=0L;
			this.idCuentaContableCostoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.comprasForeignKey=new ArrayList<Compra>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			this.novedadproductosForeignKey=new ArrayList<NovedadProducto>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleCompra(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleCompra();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleCompraBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleCompraConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleCompra("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleCompra(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleCompra();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleCompra();
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleCompra.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(0);
				}	
				
				*/
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleCompra(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleCompra: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleCompra() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleCompra")) {
				iIndex=this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleCompra();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleCompra(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleCompra(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleCompraListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleCompra();
		
		this.cargarCombosFrameForeignKeyDetalleCompra();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleCompra();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleCompra();
		}
	}
	
	

	public void cargarCombosForeignKeyCompra(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCompraListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCompra();
				this.cargarCombosFrameComprasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCompra(this.comprasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoDetalleInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoDetalleInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
				this.cargarCombosFrameEstadoDetalleInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoDetalleInventario(this.estadodetalleinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNovedadProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNovedadProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNovedadProducto();
				this.cargarCombosFrameNovedadProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaNovedadProducto(this.novedadproductosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCosto();
				this.cargarCombosFrameCuentaContableCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleCompraActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			
			if(jTableDatosDetalleCompra.getRowCount()>=1) {
				jTableDatosDetalleCompra.removeRowSelectionInterval(0, jTableDatosDetalleCompra.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleCompra=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleCompra(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleCompra(true);			
			//this.detallecompra=new DetalleCompra();
			//this.detallecompra.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleCompra(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleCompra() ;
			
			if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleCompra(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallecompra);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);				
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleCompra: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleCompraActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleCompra.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleCompra.getSelectedRows().length;			
			}
			
			detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleCompra--;			
				//DetalleCompra detallecompraAux= new DetalleCompra();			
				//detallecompraAux.setId(this.iIdNuevoDetalleCompra);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleCompra detallecompraOrigen=new DetalleCompra();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleCompra detallecompraOrigen : detallecomprasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallecompraOrigen =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallecompraOrigen =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleCompra();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallecompra.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleCompra(detallecompraOrigen,this.detallecompra,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallecompraLogic.getDetalleCompras().add(this.detallecompraAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallecompras.add(this.detallecompraAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleCompra(false);
				
				this.jTableDatosDetalleCompra.setRowSelectionInterval(this.getIndiceNuevoDetalleCompra(), this.getIndiceNuevoDetalleCompra());
				
				int iLastRow =  this.jTableDatosDetalleCompra.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleCompra.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleCompra.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleCompra(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();									
		
			DetalleCompra detallecompraOrigen=new DetalleCompra();
			DetalleCompra detallecompraDestino=new DetalleCompra();
				
			detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleCompra.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallecomprasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleCompra.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraOrigen =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallecompraOrigen =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallecompraDestino =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallecompraDestino =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallecompraOrigen =detallecomprasSeleccionados.get(0);
				detallecompraDestino =detallecomprasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleCompra(detallecompraOrigen,detallecompraDestino,true,false);
				
				detallecompraDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallecompraDestino,detallecompraLogic.getDetalleCompras());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallecompraDestino,detallecompras);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleCompra(false);
				
				//this.jTableDatosDetalleCompra.setRowSelectionInterval(this.getIndiceNuevoDetalleCompra(), this.getIndiceNuevoDetalleCompra());
				
				int iLastRow =  this.jTableDatosDetalleCompra.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleCompra.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleCompra.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleCompra(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleCompra.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleCompra.isVisible();
			
			//BYDAN_BUSQUEDAS
			/*
			this.jTabbedPaneBusquedasDetalleCompra.setVisible(!isVisible);			
			*/
			
			this.jPanelParametrosReportesDetalleCompra.setVisible(!isVisible);
			this.jPanelPaginacionDetalleCompra.setVisible(!isVisible);
			this.jPanelAccionesDetalleCompra.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleCompra();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameReporteDinamicoDetalleCompra();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameImportacionDetalleCompra();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirTotalesDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.abrirInicializarFrameTotalesDetalleCompra();
			
			this.abrirFrameTotalesDetalleCompra();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTotalesDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.cerrarFrameTotalesDetalleCompra();
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonAbrirOrderByDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			
			this.abrirInicializarFrameOrderByDetalleCompra();
			
			this.abrirFrameOrderByDetalleCompra();
			*/
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			/*
			this.cerrarFrameOrderByDetalleCompra();
			*/
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleCompra(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleCompra);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleCompra.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleCompra.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleCompra.setSize(this.jInternalFrameDetalleFormDetalleCompra.iWidthFormulario,this.jInternalFrameDetalleFormDetalleCompra.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleCompra.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleCompra.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleCompra.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleCompra.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleCompra.jContentPaneDetalleDetalleCompra.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleCompra.jContentPaneDetalleDetalleCompra.getWidth(),DetalleCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleCompra.jContentPaneDetalleDetalleCompra.getWidth(),DetalleCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleCompra.jContentPaneDetalleDetalleCompra.getWidth(),DetalleCompraConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleCompra.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleCompra.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirInicializarFrameOrderByDetalleCompra() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleCompra==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleCompra=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleCompra,false,this);
				} else {
					this.jInternalFrameOrderByDetalleCompra=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleCompra,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleCompra);
				this.jInternalFrameOrderByDetalleCompra.setVisible(false);
				this.jInternalFrameOrderByDetalleCompra.setSelected(false);
				
				this.jInternalFrameOrderByDetalleCompra.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleCompra"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleCompra();
			}
		} catch (final Exception e) {
			
		}
	}
	*/
	
	/*
	public void abrirInicializarFrameImportacionDetalleCompra() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleCompra==null) {
				
				this.jInternalFrameImportacionDetalleCompra=new ImportacionJInternalFrame(DetalleCompraConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleCompra);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleCompra);
				this.jInternalFrameImportacionDetalleCompra.setVisible(false);
				this.jInternalFrameImportacionDetalleCompra.setSelected(false);


				this.jInternalFrameImportacionDetalleCompra.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleCompra"));
				this.jInternalFrameImportacionDetalleCompra.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleCompra"));
				this.jInternalFrameImportacionDetalleCompra.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleCompra"));


			}
		} catch (final Exception e) {
			
		}
	}		
	*/
	
	/*
	public void abrirInicializarFrameReporteDinamicoDetalleCompra() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleCompra==null) {
				this.jInternalFrameReporteDinamicoDetalleCompra=new ReporteDinamicoJInternalFrame(DetalleCompraConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleCompra);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleCompra);
				this.jInternalFrameReporteDinamicoDetalleCompra.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleCompra.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleCompra"));
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleCompra"));
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleCompra"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleCompra();
			}

		} catch (final Exception e) {
			
		}
	}	
	*/
	
	public void abrirInicializarFrameTotalesDetalleCompra() throws Exception {	    	        
	    try {			
			if(this.jInternalFrameTotalesDetalleCompra==null) {
				this.jInternalFrameTotalesDetalleCompra=new TotalesJInternalFrame(this.jButtonAbrirTotalesDetalleCompra,STIPO_TAMANIO_GENERAL,this);
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameTotalesDetalleCompra);

				//TOTALES
				this.jDesktopPane.add(this.jInternalFrameTotalesDetalleCompra);
				this.jInternalFrameTotalesDetalleCompra.setVisible(false);
				this.jInternalFrameTotalesDetalleCompra.setSelected(false);


				this.jInternalFrameTotalesDetalleCompra.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleCompra"));
								
				this.inicializarActualizarBindingTablaTotalesDetalleCompra();
				
				this.redimensionarTablaTotales();
			}			
		} catch (final Exception e) {
			
		}
	}	
	
		
					
	public void cerrarFrameDetalleDetalleCompra() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleCompra);
			
	       	this.jInternalFrameDetalleFormDetalleCompra.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleCompra.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleCompra.dispose();
			//this.jInternalFrameDetalleFormDetalleCompra=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	/*
	public void abrirFrameReporteDinamicoDetalleCompra() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleCompra.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void abrirFrameImportacionDetalleCompra() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleCompra.setVisible(true);
	        this.jInternalFrameImportacionDetalleCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}	
	*/
	
	public void abrirFrameTotalesDetalleCompra() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleCompra.setVisible(true);
	        this.jInternalFrameTotalesDetalleCompra.setSelected(true);
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	public void cerrarFrameTotalesDetalleCompra() throws Exception {	    	        
	    try {
			this.jInternalFrameTotalesDetalleCompra.setVisible(false);
	        this.jInternalFrameTotalesDetalleCompra.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	/*
	public void abrirFrameOrderByDetalleCompra() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleCompra.setVisible(true);
	        this.jInternalFrameOrderByDetalleCompra.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameOrderByDetalleCompra() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleCompra.setVisible(false);
	        this.jInternalFrameOrderByDetalleCompra.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameReporteDinamicoDetalleCompra() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleCompra.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleCompra.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	/*
	public void cerrarFrameImportacionDetalleCompra() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleCompra.setVisible(false);
	        this.jInternalFrameImportacionDetalleCompra.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
	    }		
	}
	*/
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCosto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
						TitledBorder titledBorderCuentaContableCosto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCosto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleCompra(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleCompra(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleCompra(true);
			//this.isEsNuevoDetalleCompra=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleCompra(false) ;
			
			if(detallecompraSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleCompra(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleCompra(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleCompraActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleCompra(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleCompra(true);
			//this.isEsNuevoDetalleCompra=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallecompra.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleCompra("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleCompra(false) ;
			
			if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleCompra(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleCompra(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detallecompraConstantesFunciones.cargarid_productoDetalleCompra) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleCompra(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
			
			if(sType.equals("CentroCosto")) {
				if(!this.detallecompraConstantesFunciones.cargarid_centro_costoDetalleCompra) {
					this.cargarCombosCentroCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleCompra(false,false);
					this.cargarCombosFrameCentroCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_centro_costo (id);

				this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

			}
			
			if(sType.equals("CuentaContableCosto")) {
				if(!this.detallecompraConstantesFunciones.cargarid_cuenta_contable_costoDetalleCompra) {
					this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleCompra(false,false);
					this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (id);

				this.recargarComboTablaCuentaContableCosto(this.cuentacontablecostosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaCompra(List<Compra> comprasForeignKey)throws Exception{
		TableColumn tableColumnCompra=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDCOMPRA));
		TableCellEditor tableCellEditorCompra =tableColumnCompra.getCellEditor();

		CompraTableCell compraTableCellFk=(CompraTableCell)tableCellEditorCompra;

		if(compraTableCellFk!=null) {
			compraTableCellFk.setcomprasForeignKey(comprasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//compraTableCellFk.setRowActual(intSelectedRow);
			//compraTableCellFk.setcomprasForeignKeyActual(comprasForeignKey);
		//}


		if(compraTableCellFk!=null) {
			compraTableCellFk.RecargarComprasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoDetalleInventario(List<EstadoDetalleInventario> estadodetalleinventariosForeignKey)throws Exception{
		TableColumn tableColumnEstadoDetalleInventario=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO));
		TableCellEditor tableCellEditorEstadoDetalleInventario =tableColumnEstadoDetalleInventario.getCellEditor();

		EstadoDetalleInventarioTableCell estadodetalleinventarioTableCellFk=(EstadoDetalleInventarioTableCell)tableCellEditorEstadoDetalleInventario;

		if(estadodetalleinventarioTableCellFk!=null) {
			estadodetalleinventarioTableCellFk.setestadodetalleinventariosForeignKey(estadodetalleinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadodetalleinventarioTableCellFk.setRowActual(intSelectedRow);
			//estadodetalleinventarioTableCellFk.setestadodetalleinventariosForeignKeyActual(estadodetalleinventariosForeignKey);
		//}


		if(estadodetalleinventarioTableCellFk!=null) {
			estadodetalleinventarioTableCellFk.RecargarEstadoDetalleInventariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaNovedadProducto(List<NovedadProducto> novedadproductosForeignKey)throws Exception{
		TableColumn tableColumnNovedadProducto=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));
		TableCellEditor tableCellEditorNovedadProducto =tableColumnNovedadProducto.getCellEditor();

		NovedadProductoTableCell novedadproductoTableCellFk=(NovedadProductoTableCell)tableCellEditorNovedadProducto;

		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.setnovedadproductosForeignKey(novedadproductosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//novedadproductoTableCellFk.setRowActual(intSelectedRow);
			//novedadproductoTableCellFk.setnovedadproductosForeignKeyActual(novedadproductosForeignKey);
		//}


		if(novedadproductoTableCellFk!=null) {
			novedadproductoTableCellFk.RecargarNovedadProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCosto(List<CuentaContable> cuentacontablecostosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCosto=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO));
		TableCellEditor tableCellEditorCuentaContableCosto =tableColumnCuentaContableCosto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCosto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_centro_costo (Long id) throws Exception {
		this.setActualCentroCostoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo (Long id) throws Exception {
		this.setActualCuentaContableCostoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleCompra(false);
			
			//if(!this.isEsNuevoDetalleCompra) {								
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				
			}
			
			if(this.permiteMantenimiento(this.detallecompra)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleCompra=true;
					this.inicializarActualizarBindingTablaDetalleCompra(false);
					this.isEsNuevoDetalleCompra=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleCompra=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleCompra=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleCompra(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleCompra(false);
				
				this.habilitarDeshabilitarControlesDetalleCompra(false);
			
												
				
				if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleCompra();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleCompraActionPerformed(evt,detallecompraSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleCompra(this.detallecompra,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallecompraSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallecompra.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				this.detallecompra.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				this.detallecompra.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallecompra)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleCompraModel) this.jTableDatosDetalleCompra.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleCompra=true;
				this.inicializarActualizarBindingTablaDetalleCompra(false);
				this.isEsNuevoDetalleCompra=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleCompra(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleCompra(false);
				
				this.habilitarDeshabilitarControlesDetalleCompra(false);
				
				
				
				if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleCompra();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleCompraActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleCompra.getRowCount()>=1) {
				jTableDatosDetalleCompra.removeRowSelectionInterval(0, jTableDatosDetalleCompra.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleCompra(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleCompra(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleCompra(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleCompra(false) ;
			
			this.isEsNuevoDetalleCompra=false;
			
			if(DetalleCompraJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleCompra();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleCompra(false);
				
				//SI ES MANUAL
				if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleCompra();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleCompra--;			
			//DetalleCompra detallecompraAux= new DetalleCompra();			
			//detallecompraAux.setId(this.iIdNuevoDetalleCompra);
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleCompra();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
			
			this.detallecompra.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallecompraLogic.getDetalleCompras().add(this.detallecompraAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallecompras.add(this.detallecompraAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleCompra(false);
			
			this.jTableDatosDetalleCompra.setRowSelectionInterval(this.getIndiceNuevoDetalleCompra(), this.getIndiceNuevoDetalleCompra());
			
			int iLastRow =  this.jTableDatosDetalleCompra.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleCompra.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleCompra.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleCompra(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleCompra(false);
			
			//SI ES MANUAL
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleCompra();
			}
			
			//this.abrirFrameTreeDetalleCompra();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	/*
	public void jButtonGenerarImportacionDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle CompraS ?", "MANTENIMIENTO DE Detalle Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleCompra.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleCompra();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallecompraReturnGeneral=detallecompraLogic.procesarImportacionDetalleComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallecompraParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleCompraReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	*/
	
	/*
	public void jButtonAbrirImportacionDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleCompra.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleCompra.setFileImportacion(this.jInternalFrameImportacionDetalleCompra.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleCompra.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleCompra.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleCompra.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleCompra.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	*/
	
	public void jButtonGenerarReporteDinamicoDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		

		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		/*
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		*/
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleCompraBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleCompraBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			/*
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			*/
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	/*
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleCompraConstantesFunciones.LABEL_IDCOMPRA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Compra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Compra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Compra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Compra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoDetalleInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoDetalleInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoDetalleInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoDetalleInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NovedadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NovedadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NovedadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NovedadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoUnitario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoUnitario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoUnitario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoUnitario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IVAVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_DISPONIBLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sponible_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sponible_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sponible_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sponible_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_ICEVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO1:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_SERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_te_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_te_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_te_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_te_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaElaboracionLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaElaboracionLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaElaboracionLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaElaboracionLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducidadLote_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducidadLote_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducidadLote_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducidadLote_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroComprobante_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroComprobante_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroComprobante_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroComprobante_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_teCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_teCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_teCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_teCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleCompra.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	*/
	
	/*
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleCompraConstantesFunciones.LABEL_IDCOMPRA:
					sNombreCampoCategoria="id_compra";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					sNombreCampoCategoria="id_estado_detalle_inventario";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoria="id_novedad_producto";
					break;

				case DetalleCompraConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoria="costo_unitario";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoria="iva_valor";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoria="costo_total";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoria="disponible";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoria="costo_iva";
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoria="ice_valor";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoria="descuento1";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoria="descuento2";
					break;

				case DetalleCompraConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoria="serie";
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoria="lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoria="fecha_elaboracion_lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoria="fecha_caducidad_lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoria="id_cuenta_contable_costo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoria="numero_comprobante";
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoria="lote_cliente";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleCompraConstantesFunciones.LABEL_IDCOMPRA:
					sNombreCampoCategoriaValor="id_compra";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					sNombreCampoCategoriaValor="id_estado_detalle_inventario";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					sNombreCampoCategoriaValor="id_novedad_producto";
					break;

				case DetalleCompraConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					sNombreCampoCategoriaValor="costo_unitario";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoriaValor="iva_valor";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL:
					sNombreCampoCategoriaValor="costo_total";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DISPONIBLE:
					sNombreCampoCategoriaValor="disponible";
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOIVA:
					sNombreCampoCategoriaValor="costo_iva";
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoriaValor="ice_valor";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO1:
					sNombreCampoCategoriaValor="descuento1";
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO2:
					sNombreCampoCategoriaValor="descuento2";
					break;

				case DetalleCompraConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoriaValor="serie";
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTE:
					sNombreCampoCategoriaValor="lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					sNombreCampoCategoriaValor="fecha_elaboracion_lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					sNombreCampoCategoriaValor="fecha_caducidad_lote";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo";
					break;

				case DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					sNombreCampoCategoriaValor="numero_comprobante";
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE:
					sNombreCampoCategoriaValor="lote_cliente";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleCompraConstantesFunciones.LABEL_IDCOMPRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Compra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_compra");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_detalle_inventario");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Novedad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_novedad_producto");
					break;

				case DetalleCompraConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Unitario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_unitario");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVAVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_valor");
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_total");
					break;

				case DetalleCompraConstantesFunciones.LABEL_DISPONIBLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Disponible",sNombreCampoCategoria,sNombreCampoCategoriaValor,"disponible");
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_iva");
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICEVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice Valor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice_valor");
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento 1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento1");
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento2");
					break;

				case DetalleCompraConstantesFunciones.LABEL_SERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie");
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote");
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Elaboracion Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_elaboracion_lote");
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F Caducidad Lote",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caducidad_lote");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta Contable Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo");
					break;

				case DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nro Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_comprobante");
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"lote_cliente");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	*/
	
	//@SuppressWarnings("deprecation")
	/*
	public void jButtonGenerarExcelReporteDinamicoDetalleCompraActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleCompras");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleCompraConstantesFunciones.LABEL_IDCOMPRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCOMPRA);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcompra_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getestadodetalleinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getnovedadproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcosto_unitario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IVAVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVAVALOR);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getiva_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcosto_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_DISPONIBLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getdisponible());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_COSTOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOIVA);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcosto_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_ICEVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICEVALOR);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getice_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getdescuento1());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_DESCUENTO2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getdescuento2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_SERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_SERIE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getserie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getlote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getfecha_elaboracion_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getfecha_caducidad_lote());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getcuentacontablecosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getnumero_comprobante());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE);
					iRow++;

					for(DetalleCompra detallecompra:detallecomprasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallecompra.getlote_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleCompra(row);				
			//	iRow++;
			//}				
			
			//for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleCompra(detallecompraAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	*/
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleCompra(false);
			
			//SI ES MANUAL
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleCompra();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleCompra(false);
			
			//SI ES MANUAL
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleCompra();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleCompraActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleCompra(false);
			
			//SI ES MANUAL
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleCompra();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleCompra() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleCompra.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleCompra.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleCompra.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleCompra.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleCompra.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleCompra.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleCompra.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleCompra(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleCompra(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleCompra(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleCompra(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleCompra(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleCompra(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleCompra(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleCompra(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleCompra() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleCompra();
		
		this.inicializarActualizarBindingBotonesManualDetalleCompra(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleCompra();			
			*/
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleCompra() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleCompra(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleCompra(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleCompra.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleCompra.isSelected();
				
				/*
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleCompra.isSelected();															
				*/
				
				if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionNuevoDetalleCompra.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionSinCerrarDetalleCompra.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionSinMensajeDetalleCompra.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleCompra.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleCompra.setSelected(this.isSeleccionados);
				
				/*
				this.jCheckBoxConGraficoReporteDetalleCompra.setSelected(this.conGraficoReporte);				
				*/
				
				if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
				this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionNuevoDetalleCompra.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionSinCerrarDetalleCompra.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxPostAccionSinMensajeDetalleCompra.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			/*
			if(this.jComboBoxTiposPaginacionDetalleCompra.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleCompra.getSelectedItem()).getsCodigo();			
			}
			*/
			
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.getSelectedItem()).getsCodigo();
			}
			
			
			/*
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleCompra.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleCompra.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleCompra.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleCompra.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleCompra.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleCompra.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleCompra.getText();						
			
			*/
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleCompra(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleCompra(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleCompra() throws Exception {
		try	{
			if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleCompra();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleCompra() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleCompra() throws Exception {
		try	{
			/*
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleCompra.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleCompra.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleCompra.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleCompra.addItem(reporte);
			}
			
			
			if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleCompra.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleCompra.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleCompra.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleCompra.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			*/
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			/*
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleCompra.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleCompra.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleCompra.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleCompra();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			*/
		} catch(Exception e) {
			throw e;
		}
	}		
	
	/*
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleCompra() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
				this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
				this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleCompraConstantesFunciones.getTiposSeleccionarDetalleCompra(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleCompraConstantesFunciones.getTiposSeleccionarDetalleCompra(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleCompraConstantesFunciones.getTiposSeleccionarDetalleCompra(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleCompra.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleCompra.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	*/
	
	/*
	public void inicializarActualizarBindingBusquedasManualDetalleCompra()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_compraFK_IdCompraDetalleCompra.getSelectedItem()!=null){this.id_compraFK_IdCompra=((Compra)this.jComboBoxid_compraFK_IdCompraDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.getSelectedItem()!=null){this.id_cuenta_contable_costoFK_IdCuentaContableCosto=((CuentaContable)this.jComboBoxid_cuenta_contable_costoFK_IdCuentaContableCostoDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.getSelectedItem()!=null){this.id_estado_detalle_inventarioFK_IdEstadoDetalleInventario=((EstadoDetalleInventario)this.jComboBoxid_estado_detalle_inventarioFK_IdEstadoDetalleInventarioDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.getSelectedItem()!=null){this.id_novedad_productoFK_IdNovedadProducto=((NovedadProducto)this.jComboBoxid_novedad_productoFK_IdNovedadProductoDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleCompra.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleCompra.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleCompra.getSelectedItem()).getId();}
		
	}
	*/
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleCompra(Boolean esInicializar) throws Exception {				
		if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
			/*
			this.inicializarActualizarBindingBusquedasManualDetalleCompra();			
			*/
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleCompra() throws Exception {
		this.inicializarActualizarBindingTablaDetalleCompra(false);
	}
	
	/*
	public void inicializarActualizarBindingTablaOrderByDetalleCompra() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleCompraOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompraOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	*/
	
	public void inicializarActualizarBindingTablaTotalesDetalleCompra() {		
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		
		//TABLA TOTALES
		this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
		//DEFINIR RENDERERS TOTALES
		tableColumn=this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales(),Constantes2.S_TIPO));			
		//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
				
				
		tableColumn=this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales(),Constantes2.S_TOTAL));
		//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());		
	}
	
	public void inicializarActualizarBindingTablaDetalleCompra(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallecompraLogic.getDetalleCompras().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallecompras.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleCompra.setModel(new DetalleCompraModel(this.detallecompraLogic.getDetalleCompras(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleCompra.setModel(new DetalleCompraModel(this.detallecompras,this));
			}
			//ARCHITECTURE
			
			if(this.jInternalFrameTotalesDetalleCompra!=null) {
				//TABLA TOTALES
				this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().setModel(new TablaGeneralTotalModel(this.arrDatoGeneralTotales));
				
				//DEFINIR RENDERERS TOTALES
				tableColumn=this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales(),Constantes2.S_TIPO));			
				//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
				
				
				tableColumn=this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameTotalesDetalleCompra.getjTableDatosTotales(),Constantes2.S_TOTAL));
				//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
			}
							
			/*
			
			if(this.jInternalFrameOrderByDetalleCompra!=null && this.jInternalFrameOrderByDetalleCompra.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleCompra();
			}
			*/
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleCompraConstantesFunciones.SCLASSWEBTITULO,detallecompraConstantesFunciones.resaltarSeleccionarDetalleCompra,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleCompraConstantesFunciones.SCLASSWEBTITULO,detallecompraConstantesFunciones.resaltarSeleccionarDetalleCompra,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_ID));

		if(this.detallecompraConstantesFunciones.mostraridDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltaridDetalleCompra,this.detallecompraConstantesFunciones.activaridDetalleCompra,iSizeTabla,this,true,"idDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltaridDetalleCompra,this.detallecompraConstantesFunciones.activaridDetalleCompra,this,true,"idDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDCOMPRA));

		if(this.detallecompraConstantesFunciones.mostrarid_compraDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDCOMPRA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CompraTableCell(this.comprasForeignKey,this.detallecompraConstantesFunciones.resaltarid_compraDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_compraDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new CompraTableCell(this.comprasForeignKey,this.detallecompraConstantesFunciones.resaltarid_compraDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_compraDetalleCompra,true,"id_compraDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallecompraConstantesFunciones.mostrarid_empresaDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallecompraConstantesFunciones.resaltarid_empresaDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_empresaDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallecompraConstantesFunciones.resaltarid_empresaDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_empresaDetalleCompra,false,"id_empresaDetalleCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallecompraConstantesFunciones.mostrarid_sucursalDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallecompraConstantesFunciones.resaltarid_sucursalDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_sucursalDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallecompraConstantesFunciones.resaltarid_sucursalDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_sucursalDetalleCompra,false,"id_sucursalDetalleCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.detallecompraConstantesFunciones.mostrarid_ejercicioDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallecompraConstantesFunciones.resaltarid_ejercicioDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_ejercicioDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.detallecompraConstantesFunciones.resaltarid_ejercicioDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_ejercicioDetalleCompra,false,"id_ejercicioDetalleCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDPERIODO));

		if(this.detallecompraConstantesFunciones.mostrarid_periodoDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.detallecompraConstantesFunciones.resaltarid_periodoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_periodoDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.detallecompraConstantesFunciones.resaltarid_periodoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_periodoDetalleCompra,false,"id_periodoDetalleCompra","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDANIO));

		if(this.detallecompraConstantesFunciones.mostrarid_anioDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.detallecompraConstantesFunciones.resaltarid_anioDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_anioDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.detallecompraConstantesFunciones.resaltarid_anioDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_anioDetalleCompra,true,"id_anioDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDMES));

		if(this.detallecompraConstantesFunciones.mostrarid_mesDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.detallecompraConstantesFunciones.resaltarid_mesDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_mesDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.detallecompraConstantesFunciones.resaltarid_mesDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_mesDetalleCompra,true,"id_mesDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallecompraConstantesFunciones.mostrarid_bodegaDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallecompraConstantesFunciones.resaltarid_bodegaDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_bodegaDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallecompraConstantesFunciones.resaltarid_bodegaDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_bodegaDetalleCompra,true,"id_bodegaDetalleCompra","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallecompraConstantesFunciones.mostrarid_productoDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallecompraConstantesFunciones.resaltarid_productoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_productoDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallecompraConstantesFunciones.resaltarid_productoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_productoDetalleCompra,true,"id_productoDetalleCompra","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallecompraConstantesFunciones.mostrarid_unidadDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallecompraConstantesFunciones.resaltarid_unidadDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_unidadDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallecompraConstantesFunciones.resaltarid_unidadDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_unidadDetalleCompra,true,"id_unidadDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallecompraConstantesFunciones.mostrardescripcionDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallecompraConstantesFunciones.resaltardescripcionDetalleCompra,this.detallecompraConstantesFunciones.activardescripcionDetalleCompra,iSizeTabla,this,true,"descripcionDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltardescripcionDetalleCompra,this.detallecompraConstantesFunciones.activardescripcionDetalleCompra,this,true,"descripcionDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO));

		if(this.detallecompraConstantesFunciones.mostrarid_novedad_productoDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallecompraConstantesFunciones.resaltarid_novedad_productoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_novedad_productoDetalleCompra,iSizeTabla));
			tableColumn.setCellEditor(new NovedadProductoTableCell(this.novedadproductosForeignKey,this.detallecompraConstantesFunciones.resaltarid_novedad_productoDetalleCompra,this,this.detallecompraConstantesFunciones.activarid_novedad_productoDetalleCompra,true,"id_novedad_productoDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_CANTIDAD));

		if(this.detallecompraConstantesFunciones.mostrarcantidadDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltarcantidadDetalleCompra,this.detallecompraConstantesFunciones.activarcantidadDetalleCompra,iSizeTabla,this,true,"cantidadDetalleCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarcantidadDetalleCompra,this.detallecompraConstantesFunciones.activarcantidadDetalleCompra,this,true,"cantidadDetalleCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO));

		if(this.detallecompraConstantesFunciones.mostrarcosto_unitarioDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltarcosto_unitarioDetalleCompra,this.detallecompraConstantesFunciones.activarcosto_unitarioDetalleCompra,iSizeTabla,this,true,"costo_unitarioDetalleCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarcosto_unitarioDetalleCompra,this.detallecompraConstantesFunciones.activarcosto_unitarioDetalleCompra,this,true,"costo_unitarioDetalleCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IVA));

		if(this.detallecompraConstantesFunciones.mostrarivaDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltarivaDetalleCompra,this.detallecompraConstantesFunciones.activarivaDetalleCompra,iSizeTabla,this,true,"ivaDetalleCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarivaDetalleCompra,this.detallecompraConstantesFunciones.activarivaDetalleCompra,this,true,"ivaDetalleCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_IVAVALOR));

		if(this.detallecompraConstantesFunciones.mostrariva_valorDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_IVAVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltariva_valorDetalleCompra,this.detallecompraConstantesFunciones.activariva_valorDetalleCompra,iSizeTabla,this,true,"iva_valorDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltariva_valorDetalleCompra,this.detallecompraConstantesFunciones.activariva_valorDetalleCompra,this,true,"iva_valorDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL));

		if(this.detallecompraConstantesFunciones.mostrarcosto_totalDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltarcosto_totalDetalleCompra,this.detallecompraConstantesFunciones.activarcosto_totalDetalleCompra,iSizeTabla,this,true,"costo_totalDetalleCompra","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarcosto_totalDetalleCompra,this.detallecompraConstantesFunciones.activarcosto_totalDetalleCompra,this,true,"costo_totalDetalleCompra","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_DISPONIBLE));

		if(this.detallecompraConstantesFunciones.mostrardisponibleDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_DISPONIBLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallecompraConstantesFunciones.resaltardisponibleDetalleCompra,this.detallecompraConstantesFunciones.activardisponibleDetalleCompra,iSizeTabla,this,true,"disponibleDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltardisponibleDetalleCompra,this.detallecompraConstantesFunciones.activardisponibleDetalleCompra,this,true,"disponibleDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_SERIE));

		if(this.detallecompraConstantesFunciones.mostrarserieDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_SERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallecompraConstantesFunciones.resaltarserieDetalleCompra,this.detallecompraConstantesFunciones.activarserieDetalleCompra,iSizeTabla,this,true,"serieDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarserieDetalleCompra,this.detallecompraConstantesFunciones.activarserieDetalleCompra,this,true,"serieDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_LOTE));

		if(this.detallecompraConstantesFunciones.mostrarloteDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_LOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallecompraConstantesFunciones.resaltarloteDetalleCompra,this.detallecompraConstantesFunciones.activarloteDetalleCompra,iSizeTabla,this,true,"loteDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallecompraConstantesFunciones.resaltarloteDetalleCompra,this.detallecompraConstantesFunciones.activarloteDetalleCompra,this,true,"loteDetalleCompra","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE));

		if(this.detallecompraConstantesFunciones.mostrarfecha_elaboracion_loteDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detallecompraConstantesFunciones.resaltarfecha_elaboracion_loteDetalleCompra,this.detallecompraConstantesFunciones.activarfecha_elaboracion_loteDetalleCompra,iSizeTabla,this,true,"fecha_elaboracion_loteDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detallecompraConstantesFunciones.resaltarfecha_elaboracion_loteDetalleCompra,this.detallecompraConstantesFunciones.activarfecha_elaboracion_loteDetalleCompra,this,true,"fecha_elaboracion_loteDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE));

		if(this.detallecompraConstantesFunciones.mostrarfecha_caducidad_loteDetalleCompra && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.detallecompraConstantesFunciones.resaltarfecha_caducidad_loteDetalleCompra,this.detallecompraConstantesFunciones.activarfecha_caducidad_loteDetalleCompra,iSizeTabla,this,true,"fecha_caducidad_loteDetalleCompra","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.detallecompraConstantesFunciones.resaltarfecha_caducidad_loteDetalleCompra,this.detallecompraConstantesFunciones.activarfecha_caducidad_loteDetalleCompra,this,true,"fecha_caducidad_loteDetalleCompra","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DetalleCompraPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallecompraSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleCompra.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleCompra.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallecompraSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleCompra.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleCompra.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleCompra.moveColumn(this.jTableDatosDetalleCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleCompra.moveColumn(this.jTableDatosDetalleCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleCompra.moveColumn(this.jTableDatosDetalleCompra.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleCompra.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleCompra.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleCompra,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleCompra.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleCompra.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleCompra.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleCompra.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleCompra.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallecompraLogic.getDetalleCompras().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallecompras.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleCompra.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleCompra.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleCompra();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleCompra=false;
					
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleCompra==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleCompra.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallecompra.getsType().equals("DUPLICADO")
				   || this.detallecompra.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleCompra=true;
				
				} else {
					this.isEsNuevoDetalleCompra=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					if(this.detallecompra.getId()>=0 && !this.detallecompra.getIsNew()) {						
						this.isEsNuevoDetalleCompra=false;
						
					} else {
						this.isEsNuevoDetalleCompra=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleCompra(esRelaciones);						
				
				this.seleccionarDetalleCompra(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallecompra.getId()<0) {
					this.isEsNuevoDetalleCompra=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleCompra(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleCompra(evt,rowIndex);
				}	
				
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleCompra: " + this.dDif); 
					}
				}								
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleCompra(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallecompra)) {
					if(this.detallecompra.getId()>0) {
						this.detallecompra.setIsDeleted(true);
						
						this.detallecomprasEliminados.add(this.detallecompra);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallecompraLogic.getDetalleCompras().remove(this.detallecompra);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallecompras.remove(this.detallecompra);				
					}
					
					
					((DetalleCompraModel) this.jTableDatosDetalleCompra.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleCompra(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleCompra(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleCompra) {
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleCompra.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleCompra.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleCompra(this.detallecompra);
				}
				
				//ARCHITECTURE
				try {
					

					//Compra
					if(!this.detallecompraConstantesFunciones.cargarid_compraDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_compraDetalleCompra) {
						//this.cargarCombosComprasForeignKeyLista(" where id="+this.detallecompra.getid_compra());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.comprasForeignKey=new ArrayList<Compra>();

						if(detallecompra.getCompra()!=null) {
							this.comprasForeignKey.add(detallecompra.getCompra());
						}

						this.addItemDefectoCombosForeignKeyCompra();
						this.cargarCombosFrameComprasForeignKey("Todos");
					}
					this.setActualCompraForeignKey(this.detallecompra.getid_compra(),false,"Formulario");

					//Empresa
					if(!this.detallecompraConstantesFunciones.cargarid_empresaDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_empresaDetalleCompra) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallecompra.getid_empresa());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallecompra.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallecompra.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallecompra.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallecompraConstantesFunciones.cargarid_sucursalDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_sucursalDetalleCompra) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallecompra.getid_sucursal());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallecompra.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallecompra.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallecompra.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.detallecompraConstantesFunciones.cargarid_ejercicioDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_ejercicioDetalleCompra) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.detallecompra.getid_ejercicio());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(detallecompra.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(detallecompra.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.detallecompra.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.detallecompraConstantesFunciones.cargarid_periodoDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_periodoDetalleCompra) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.detallecompra.getid_periodo());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(detallecompra.getPeriodo()!=null) {
							this.periodosForeignKey.add(detallecompra.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.detallecompra.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.detallecompraConstantesFunciones.cargarid_anioDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_anioDetalleCompra) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.detallecompra.getid_anio());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(detallecompra.getAnio()!=null) {
							this.aniosForeignKey.add(detallecompra.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.detallecompra.getid_anio(),false,"Formulario");

					//Mes
					if(!this.detallecompraConstantesFunciones.cargarid_mesDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_mesDetalleCompra) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.detallecompra.getid_mes());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(detallecompra.getMes()!=null) {
							this.messForeignKey.add(detallecompra.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.detallecompra.getid_mes(),false,"Formulario");

					//EstadoDetalleInventario
					if(!this.detallecompraConstantesFunciones.cargarid_estado_detalle_inventarioDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_estado_detalle_inventarioDetalleCompra) {
						//this.cargarCombosEstadoDetalleInventariosForeignKeyLista(" where id="+this.detallecompra.getid_estado_detalle_inventario());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.estadodetalleinventariosForeignKey=new ArrayList<EstadoDetalleInventario>();

						if(detallecompra.getEstadoDetalleInventario()!=null) {
							this.estadodetalleinventariosForeignKey.add(detallecompra.getEstadoDetalleInventario());
						}

						this.addItemDefectoCombosForeignKeyEstadoDetalleInventario();
						this.cargarCombosFrameEstadoDetalleInventariosForeignKey("Todos");
					}
					this.setActualEstadoDetalleInventarioForeignKey(this.detallecompra.getid_estado_detalle_inventario(),false,"Formulario");

					//Bodega
					if(!this.detallecompraConstantesFunciones.cargarid_bodegaDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_bodegaDetalleCompra) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallecompra.getid_bodega());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallecompra.getBodega()!=null) {
							this.bodegasForeignKey.add(detallecompra.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallecompra.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallecompraConstantesFunciones.cargarid_productoDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_productoDetalleCompra) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallecompra.getid_producto());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallecompra.getProducto()!=null) {
							this.productosForeignKey.add(detallecompra.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallecompra.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallecompraConstantesFunciones.cargarid_unidadDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_unidadDetalleCompra) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallecompra.getid_unidad());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallecompra.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallecompra.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallecompra.getid_unidad(),false,"Formulario");

					//NovedadProducto
					if(!this.detallecompraConstantesFunciones.cargarid_novedad_productoDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_novedad_productoDetalleCompra) {
						//this.cargarCombosNovedadProductosForeignKeyLista(" where id="+this.detallecompra.getid_novedad_producto());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.novedadproductosForeignKey=new ArrayList<NovedadProducto>();

						if(detallecompra.getNovedadProducto()!=null) {
							this.novedadproductosForeignKey.add(detallecompra.getNovedadProducto());
						}

						this.addItemDefectoCombosForeignKeyNovedadProducto();
						this.cargarCombosFrameNovedadProductosForeignKey("Todos");
					}
					this.setActualNovedadProductoForeignKey(this.detallecompra.getid_novedad_producto(),false,"Formulario");

					//CentroCosto
					if(!this.detallecompraConstantesFunciones.cargarid_centro_costoDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_centro_costoDetalleCompra) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.detallecompra.getid_centro_costo());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(detallecompra.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(detallecompra.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.detallecompra.getid_centro_costo(),false,"Formulario");

					//CuentaContableCosto
					if(!this.detallecompraConstantesFunciones.cargarid_cuenta_contable_costoDetalleCompra || this.detallecompraConstantesFunciones.event_dependid_cuenta_contable_costoDetalleCompra) {
						//this.cargarCombosCuentaContableCostosForeignKeyLista(" where id="+this.detallecompra.getid_cuenta_contable_costo());
									//this.inicializarActualizarBindingDetalleCompra(false,false);
						this.cuentacontablecostosForeignKey=new ArrayList<CuentaContable>();

						if(detallecompra.getCuentaContableCosto()!=null) {
							this.cuentacontablecostosForeignKey.add(detallecompra.getCuentaContableCosto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCosto();
						this.cargarCombosFrameCuentaContableCostosForeignKey("Todos");
					}
					this.setActualCuentaContableCostoForeignKey(this.detallecompra.getid_cuenta_contable_costo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleCompra("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleCompra(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleCompra() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleCompra(DetalleCompra detallecompra) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleCompra(detallecompra,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleCompra(DetalleCompra detallecompra,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleCompra(detallecompra);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleCompra(detallecompra,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleCompra(detallecompra);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleCompra(DetalleCompra detallecompra) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setText(detallecompra.getId().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setText(detallecompra.getdescripcion());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setText(detallecompra.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setText(detallecompra.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setText(detallecompra.getiva().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setText(detallecompra.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setText(detallecompra.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setText(detallecompra.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setText(detallecompra.getserie());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setText(detallecompra.getlote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setDate(detallecompra.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setDate(detallecompra.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleCompra detallecompraLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallecompraLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleCompra detallecompraLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallecompraLocal=this.detallecompra;
			} else {
				detallecompraLocal=this.detallecompraAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallecompraLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleCompra(detallecompraLocal,true);
					
					if(detallecompraSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallecompraLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallecompraLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleCompra(DetalleCompra detallecompra,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleCompra(detallecompra,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(detallecompra);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleCompra(DetalleCompra detallecompra,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleCompra(detallecompra,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleCompra(DetalleCompra detallecompra,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.getText()==null || this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.getText()=="" || this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setText("0");
			}

			if(conColumnasBase) {detallecompra.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelIdDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setdescripcion(this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldescripcionDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcantidadDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setcosto_unitario(Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_unitarioDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setiva(Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelivaDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setiva_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_IVAVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeliva_valorDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setcosto_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelcosto_totalDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setdisponible(Integer.parseInt(this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_DISPONIBLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabeldisponibleDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setserie(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_SERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelserieDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setlote(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_LOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelloteDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setfecha_elaboracion_lote(this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_elaboracion_loteDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallecompra.setfecha_caducidad_lote(this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleCompra.jLabelfecha_caducidad_loteDetalleCompra,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleCompra(DetalleCompra detallecompraBean,DetalleCompra detallecompra,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleCompra(DetalleCompra detallecompraOrigen,DetalleCompra detallecompra,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallecompraOrigen.getId()!=null && !detallecompraOrigen.getId().equals(0L))) {detallecompra.setId(detallecompraOrigen.getId());}}
			if(conDefault || (!conDefault && detallecompraOrigen.getdescripcion()!=null && !detallecompraOrigen.getdescripcion().equals(""))) {detallecompra.setdescripcion(detallecompraOrigen.getdescripcion());}
			if(conDefault || (!conDefault && detallecompraOrigen.getcantidad()!=null && !detallecompraOrigen.getcantidad().equals(0))) {detallecompra.setcantidad(detallecompraOrigen.getcantidad());}
			if(conDefault || (!conDefault && detallecompraOrigen.getdescuento()!=null && !detallecompraOrigen.getdescuento().equals(0.0))) {detallecompra.setdescuento(detallecompraOrigen.getdescuento());}
			if(conDefault || (!conDefault && detallecompraOrigen.getcosto_unitario()!=null && !detallecompraOrigen.getcosto_unitario().equals(0.0))) {detallecompra.setcosto_unitario(detallecompraOrigen.getcosto_unitario());}
			if(conDefault || (!conDefault && detallecompraOrigen.getiva()!=null && !detallecompraOrigen.getiva().equals(0.0))) {detallecompra.setiva(detallecompraOrigen.getiva());}
			if(conDefault || (!conDefault && detallecompraOrigen.getiva_valor()!=null && !detallecompraOrigen.getiva_valor().equals(0.0))) {detallecompra.setiva_valor(detallecompraOrigen.getiva_valor());}
			if(conDefault || (!conDefault && detallecompraOrigen.getcosto_total()!=null && !detallecompraOrigen.getcosto_total().equals(0.0))) {detallecompra.setcosto_total(detallecompraOrigen.getcosto_total());}
			if(conDefault || (!conDefault && detallecompraOrigen.getdisponible()!=null && !detallecompraOrigen.getdisponible().equals(0))) {detallecompra.setdisponible(detallecompraOrigen.getdisponible());}
			if(conDefault || (!conDefault && detallecompraOrigen.getcosto_iva()!=null && !detallecompraOrigen.getcosto_iva().equals(false))) {detallecompra.setcosto_iva(detallecompraOrigen.getcosto_iva());}
			if(conDefault || (!conDefault && detallecompraOrigen.getice()!=null && !detallecompraOrigen.getice().equals(0.0))) {detallecompra.setice(detallecompraOrigen.getice());}
			if(conDefault || (!conDefault && detallecompraOrigen.getice_valor()!=null && !detallecompraOrigen.getice_valor().equals(0.0))) {detallecompra.setice_valor(detallecompraOrigen.getice_valor());}
			if(conDefault || (!conDefault && detallecompraOrigen.getdescuento1()!=null && !detallecompraOrigen.getdescuento1().equals(0.0))) {detallecompra.setdescuento1(detallecompraOrigen.getdescuento1());}
			if(conDefault || (!conDefault && detallecompraOrigen.getdescuento2()!=null && !detallecompraOrigen.getdescuento2().equals(0.0))) {detallecompra.setdescuento2(detallecompraOrigen.getdescuento2());}
			if(conDefault || (!conDefault && detallecompraOrigen.getserie()!=null && !detallecompraOrigen.getserie().equals(""))) {detallecompra.setserie(detallecompraOrigen.getserie());}
			if(conDefault || (!conDefault && detallecompraOrigen.getlote()!=null && !detallecompraOrigen.getlote().equals(""))) {detallecompra.setlote(detallecompraOrigen.getlote());}
			if(conDefault || (!conDefault && detallecompraOrigen.getfecha_elaboracion_lote()!=null && !detallecompraOrigen.getfecha_elaboracion_lote().equals(new Date()))) {detallecompra.setfecha_elaboracion_lote(detallecompraOrigen.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detallecompraOrigen.getfecha_caducidad_lote()!=null && !detallecompraOrigen.getfecha_caducidad_lote().equals(new Date()))) {detallecompra.setfecha_caducidad_lote(detallecompraOrigen.getfecha_caducidad_lote());}
			if(conDefault || (!conDefault && detallecompraOrigen.getnumero_comprobante()!=null && !detallecompraOrigen.getnumero_comprobante().equals(""))) {detallecompra.setnumero_comprobante(detallecompraOrigen.getnumero_comprobante());}
			if(conDefault || (!conDefault && detallecompraOrigen.getlote_cliente()!=null && !detallecompraOrigen.getlote_cliente().equals(""))) {detallecompra.setlote_cliente(detallecompraOrigen.getlote_cliente());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleCompra(DetalleCompra detallecompra) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setText(detallecompra.getId().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setText(detallecompra.getdescripcion());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setText(detallecompra.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setText(detallecompra.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setText(detallecompra.getiva().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setText(detallecompra.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setText(detallecompra.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setText(detallecompra.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setText(detallecompra.getserie());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setText(detallecompra.getlote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setDate(detallecompra.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setDate(detallecompra.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleCompra(DetalleCompraBean detallecompraBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setText(detallecompraBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setText(detallecompraBean.getdescripcion());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setText(detallecompraBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setText(detallecompraBean.getcosto_unitario().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setText(detallecompraBean.getiva().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setText(detallecompraBean.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setText(detallecompraBean.getcosto_total().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setText(detallecompraBean.getdisponible().toString());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setText(detallecompraBean.getserie());
			this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setText(detallecompraBean.getlote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setDate(detallecompraBean.getfecha_elaboracion_lote());
			this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setDate(detallecompraBean.getfecha_caducidad_lote());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleCompra(DetalleCompraParameterReturnGeneral detallecompraReturnGeneral,DetalleCompraBean detallecompraBean,Boolean conDefault) throws Exception { 
		try {
			DetalleCompra detallecompraLocal=new DetalleCompra();
			
			detallecompraLocal=detallecompraReturnGeneral.getDetalleCompra();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallecompraLocal.getId()!=null && !detallecompraLocal.getId().equals(0L))) {detallecompraBean.setId(detallecompraLocal.getId());}}
			if(conDefault || (!conDefault && detallecompraLocal.getdescripcion()!=null && !detallecompraLocal.getdescripcion().equals(""))) {detallecompraBean.setdescripcion(detallecompraLocal.getdescripcion());}
			if(conDefault || (!conDefault && detallecompraLocal.getcantidad()!=null && !detallecompraLocal.getcantidad().equals(0))) {detallecompraBean.setcantidad(detallecompraLocal.getcantidad());}
			if(conDefault || (!conDefault && detallecompraLocal.getcosto_unitario()!=null && !detallecompraLocal.getcosto_unitario().equals(0.0))) {detallecompraBean.setcosto_unitario(detallecompraLocal.getcosto_unitario());}
			if(conDefault || (!conDefault && detallecompraLocal.getiva()!=null && !detallecompraLocal.getiva().equals(0.0))) {detallecompraBean.setiva(detallecompraLocal.getiva());}
			if(conDefault || (!conDefault && detallecompraLocal.getiva_valor()!=null && !detallecompraLocal.getiva_valor().equals(0.0))) {detallecompraBean.setiva_valor(detallecompraLocal.getiva_valor());}
			if(conDefault || (!conDefault && detallecompraLocal.getcosto_total()!=null && !detallecompraLocal.getcosto_total().equals(0.0))) {detallecompraBean.setcosto_total(detallecompraLocal.getcosto_total());}
			if(conDefault || (!conDefault && detallecompraLocal.getdisponible()!=null && !detallecompraLocal.getdisponible().equals(0))) {detallecompraBean.setdisponible(detallecompraLocal.getdisponible());}
			if(conDefault || (!conDefault && detallecompraLocal.getserie()!=null && !detallecompraLocal.getserie().equals(""))) {detallecompraBean.setserie(detallecompraLocal.getserie());}
			if(conDefault || (!conDefault && detallecompraLocal.getlote()!=null && !detallecompraLocal.getlote().equals(""))) {detallecompraBean.setlote(detallecompraLocal.getlote());}
			if(conDefault || (!conDefault && detallecompraLocal.getfecha_elaboracion_lote()!=null && !detallecompraLocal.getfecha_elaboracion_lote().equals(new Date()))) {detallecompraBean.setfecha_elaboracion_lote(detallecompraLocal.getfecha_elaboracion_lote());}
			if(conDefault || (!conDefault && detallecompraLocal.getfecha_caducidad_lote()!=null && !detallecompraLocal.getfecha_caducidad_lote().equals(new Date()))) {detallecompraBean.setfecha_caducidad_lote(detallecompraLocal.getfecha_caducidad_lote());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleCompraGenerico(Long idDetalleCompraSeleccionado,JComboBox jComboBoxDetalleCompra,List<DetalleCompra> detallecomprasLocal)throws Exception {
		try {
			DetalleCompra  detallecompraTemp=null;

			for(DetalleCompra detallecompraAux:detallecomprasLocal) {
				if(detallecompraAux.getId()!=null && detallecompraAux.getId().equals(idDetalleCompraSeleccionado)) {
					detallecompraTemp=detallecompraAux;
					break;
				}
			}

			jComboBoxDetalleCompra.setSelectedItem(detallecompraTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleCompraGenerico(JComboBox jComboBoxDetalleCompra,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleCompra.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleCompra.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleCompra.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleCompra.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleCompra.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleCompra.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallecompra=(DetalleCompra) detallecompraLogic.getDetalleCompras().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallecompra =(DetalleCompra) detallecompras.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Compra")) {
			//sDescripcion=this.getActualCompraForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getcompra_descripcion();
			} else {
				//sDescripcion=this.getActualCompraForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getcompra_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getmes_descripcion();
			}
		}

		if(sTipo.equals("EstadoDetalleInventario")) {
			//sDescripcion=this.getActualEstadoDetalleInventarioForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getestadodetalleinventario_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoDetalleInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getestadodetalleinventario_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallecompra.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallecompra.getunidad_descripcion();
			}
		}

		if(sTipo.equals("NovedadProducto")) {
			//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getnovedadproducto_descripcion();
			} else {
				//sDescripcion=this.getActualNovedadProductoForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getnovedadproducto_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCosto")) {
			//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
			if(!detallecompra.getIsNew() && !detallecompra.getIsChanged() && !detallecompra.getIsDeleted()) {
				sDescripcion=detallecompra.getcuentacontablecosto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoForeignKeyDescripcion((Long)value);
				sDescripcion=detallecompra.getcuentacontablecosto_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleCompra detallecompraRow=new DetalleCompra();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallecompraRow=(DetalleCompra) detallecompraLogic.getDetalleCompras().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallecompraRow=(DetalleCompra) detallecompras.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleCompra(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra));			
			this.jButtonDuplicarDetalleCompra.setVisible((this.isVisibilidadCeldaDuplicarDetalleCompra && this.isPermisoDuplicarDetalleCompra));			
			this.jButtonCopiarDetalleCompra.setVisible((this.isVisibilidadCeldaCopiarDetalleCompra && this.isPermisoCopiarDetalleCompra));
			this.jButtonVerFormDetalleCompra.setVisible((this.isVisibilidadCeldaVerFormDetalleCompra && this.isPermisoVerFormDetalleCompra));
			/*
			this.jButtonAbrirOrderByDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));			
			*/
			this.jButtonNuevoRelacionesDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleCompra && this.isPermisoNuevoDetalleCompra));			
			this.jButtonNuevoGuardarCambiosDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarDetalleCompra.setVisible((this.isVisibilidadCeldaModificarDetalleCompra && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.setVisible((this.isVisibilidadCeldaActualizarDetalleCompra && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.setVisible((this.isVisibilidadCeldaEliminarDetalleCompra && this.isPermisoEliminarDetalleCompra));
			this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.setVisible(this.isVisibilidadCeldaCancelarDetalleCompra);							
			this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));							
			
			//TOOLBAR
			/*
			this.jButtonNuevoToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra));						
			this.jButtonDuplicarToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaDuplicarDetalleCompra && this.isPermisoDuplicarDetalleCompra));						
			this.jButtonCopiarToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaCopiarDetalleCompra && this.isPermisoCopiarDetalleCompra));			
			this.jButtonVerFormToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaVerFormDetalleCompra && this.isPermisoVerFormDetalleCompra));			
			this.jButtonAbrirOrderByToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));
			this.jButtonNuevoRelacionesToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleCompra && this.isPermisoNuevoDetalleCompra));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));			
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaModificarDetalleCompra && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaActualizarDetalleCompra  && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaEliminarDetalleCompra && this.isPermisoEliminarDetalleCompra));
			this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarToolBarDetalleCompra.setVisible(this.isVisibilidadCeldaCancelarDetalleCompra);				
			this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));									
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.jMenuItemNuevoDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra));			
			this.jMenuItemDuplicarDetalleCompra.setVisible((this.isVisibilidadCeldaDuplicarDetalleCompra && this.isPermisoDuplicarDetalleCompra));			
			this.jMenuItemCopiarDetalleCompra.setVisible((this.isVisibilidadCeldaCopiarDetalleCompra && this.isPermisoCopiarDetalleCompra));			
			this.jMenuItemVerFormDetalleCompra.setVisible((this.isVisibilidadCeldaVerFormDetalleCompra && this.isPermisoVerFormDetalleCompra));			
			this.jMenuItemAbrirOrderByDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));			
			//this.jMenuItemMostrarOcultarDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));
			this.jMenuItemDetalleAbrirOrderByDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));			
			//this.jMenuItemDetalleMostrarOcultarDetalleCompra.setVisible((this.isVisibilidadCeldaOrdenDetalleCompra && this.isPermisoOrdenDetalleCompra));			
			this.jMenuItemNuevoRelacionesDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleCompra && this.isPermisoNuevoDetalleCompra));			
			this.jMenuItemNuevoGuardarCambiosDetalleCompra.setVisible((this.isVisibilidadCeldaNuevoDetalleCompra && this.isPermisoNuevoDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));									
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemModificarDetalleCompra.setVisible((this.isVisibilidadCeldaModificarDetalleCompra && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemActualizarDetalleCompra.setVisible((this.isVisibilidadCeldaActualizarDetalleCompra && this.isPermisoActualizarDetalleCompra));	
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemEliminarDetalleCompra.setVisible((this.isVisibilidadCeldaEliminarDetalleCompra && this.isPermisoEliminarDetalleCompra));
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemCancelarDetalleCompra.setVisible(this.isVisibilidadCeldaCancelarDetalleCompra);				
			}
			
			this.jMenuItemGuardarCambiosDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));						
			this.jMenuItemGuardarCambiosTablaDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));						
			*/
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleCompra=this.jButtonNuevoDetalleCompra.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleCompra=this.jButtonDuplicarDetalleCompra.isVisible();
			this.isVisibilidadCeldaCopiarDetalleCompra=this.jButtonCopiarDetalleCompra.isVisible();
			this.isVisibilidadCeldaVerFormDetalleCompra=this.jButtonVerFormDetalleCompra.isVisible();
			/*
			this.isVisibilidadCeldaOrdenDetalleCompra=this.jButtonAbrirOrderByDetalleCompra.isVisible();			
			*/
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=this.jButtonNuevoRelacionesDetalleCompra.isVisible();
			this.isVisibilidadCeldaModificarDetalleCompra=this.jButtonModificarDetalleCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.isVisibilidadCeldaActualizarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.isVisible();
			this.isVisibilidadCeldaGuardarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=this.jButtonGuardarCambiosTablaDetalleCompra.isVisible();
			
			//TOOLBAR
			/*
			this.isVisibilidadCeldaNuevoDetalleCompra=this.jButtonNuevoToolBarDetalleCompra.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=this.jButtonNuevoRelacionesToolBarDetalleCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.isVisibilidadCeldaModificarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarToolBarDetalleCompra.isVisible();
			this.isVisibilidadCeldaActualizarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarToolBarDetalleCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarToolBarDetalleCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarToolBarDetalleCompra.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleCompra=this.jButtonGuardarCambiosToolBarDetalleCompra.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=this.jButtonGuardarCambiosTablaToolBarDetalleCompra.isVisible();						
			*/
			//TOOLBAR
			
			//MENUS
			/*
			this.isVisibilidadCeldaNuevoDetalleCompra=this.jMenuItemNuevoDetalleCompra.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=this.jMenuItemNuevoRelacionesDetalleCompra.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.isVisibilidadCeldaModificarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jMenuItemModificarDetalleCompra.isVisible();
			this.isVisibilidadCeldaActualizarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jMenuItemActualizarDetalleCompra.isVisible();
			this.isVisibilidadCeldaEliminarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jMenuItemEliminarDetalleCompra.isVisible();
			this.isVisibilidadCeldaCancelarDetalleCompra=this.jInternalFrameDetalleFormDetalleCompra.jMenuItemCancelarDetalleCompra.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleCompra=this.jMenuItemGuardarCambiosDetalleCompra.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=this.jMenuItemGuardarCambiosTablaDetalleCompra.isVisible();						
			*/
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleCompra(Boolean esInicializar) {
		if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
				//if(this.detallecompraSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleCompra();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleCompra(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleCompra() {
		this.jButtonNuevoDetalleCompra.setVisible(this.isPermisoNuevoDetalleCompra);			
		this.jButtonDuplicarDetalleCompra.setVisible(this.isPermisoDuplicarDetalleCompra);			
		this.jButtonCopiarDetalleCompra.setVisible(this.isPermisoCopiarDetalleCompra);			
		this.jButtonVerFormDetalleCompra.setVisible(this.isPermisoVerFormDetalleCompra);			
		/*
		this.jButtonAbrirOrderByDetalleCompra.setVisible(this.isPermisoOrdenDetalleCompra);					
		*/
		this.jButtonNuevoRelacionesDetalleCompra.setVisible(this.isPermisoNuevoDetalleCompra);			
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarDetalleCompra.setVisible(this.isPermisoActualizarDetalleCompra);	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.setVisible(this.isPermisoActualizarDetalleCompra);	
			this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.setVisible(this.isPermisoEliminarDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.setVisible(this.isVisibilidadCeldaCancelarDetalleCompra);						
			this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.setVisible(this.isPermisoGuardarCambiosDetalleCompra);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleCompra.setVisible(this.isPermisoActualizarDetalleCompra);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleCompra() {
		this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarDetalleCompra.setVisible(this.isPermisoActualizarDetalleCompra);	
		this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.setVisible(this.isPermisoActualizarDetalleCompra);	
		this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.setVisible(this.isPermisoEliminarDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.setVisible(this.isVisibilidadCeldaCancelarDetalleCompra);							
		this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.setVisible((this.isVisibilidadCeldaGuardarDetalleCompra && this.isPermisoGuardarCambiosDetalleCompra));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleCompra() {
		if(DetalleCompraJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleCompra();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleCompra() {
	}
	
	public void jTableDatosDetalleCompraListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleCompra(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallecompra.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_compraDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocompra=true;

			idTienePermisocompra=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(CompraConstantesFunciones.CLASSNAME);

			if(idTienePermisocompra) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.compraBeanSwingJInternalFrame=new CompraBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.compraBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.compraBeanSwingJInternalFrame.getCompraLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_compra()!=null) {
					this.compraBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.compraBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_compra());
					this.compraBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.compraBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.compraBeanSwingJInternalFrame.inicializarActualizarBindingTablaCompra();
				}

				JInternalFrameBase jinternalFrame =this.compraBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordercompra=(TitledBorder)this.compraBeanSwingJInternalFrame.jScrollPanelDatosCompra.getBorder();

				titledBordercompra.setTitle(titledBorderDetalleCompra.getTitle() + " -> Compra");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_compraDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_compra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_compra = "+this.detallecompra.getid_compra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleCompra.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallecompra.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleCompra.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallecompra.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderDetalleCompra.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.detallecompra.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderDetalleCompra.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.detallecompra.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderDetalleCompra.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.detallecompra.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderDetalleCompra.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.detallecompra.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_detalle_inventarioDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadodetalleinventario=true;

			idTienePermisoestadodetalleinventario=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(EstadoDetalleInventarioConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadodetalleinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.estadodetalleinventarioBeanSwingJInternalFrame=new EstadoDetalleInventarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadodetalleinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadodetalleinventarioBeanSwingJInternalFrame.getEstadoDetalleInventarioLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_estado_detalle_inventario()!=null) {
					this.estadodetalleinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadodetalleinventarioBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_estado_detalle_inventario());
					this.estadodetalleinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadodetalleinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadodetalleinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoDetalleInventario();
				}

				JInternalFrameBase jinternalFrame =this.estadodetalleinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderestadodetalleinventario=(TitledBorder)this.estadodetalleinventarioBeanSwingJInternalFrame.jScrollPanelDatosEstadoDetalleInventario.getBorder();

				titledBorderestadodetalleinventario.setTitle(titledBorderDetalleCompra.getTitle() + " -> Estado Detalle Inventario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_detalle_inventarioDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_estado_detalle_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_detalle_inventario = "+this.detallecompra.getid_estado_detalle_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleCompra.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallecompra.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleCompraActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {

				//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND
				this.productoBeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryComboProducto;
				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleCompra=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleCompra.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallecompra.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleCompra.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallecompra.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallecompra.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_novedad_productoDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonovedadproducto=true;

			idTienePermisonovedadproducto=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(NovedadProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisonovedadproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.novedadproductoBeanSwingJInternalFrame=new NovedadProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.novedadproductoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.novedadproductoBeanSwingJInternalFrame.getNovedadProductoLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_novedad_producto()!=null) {
					this.novedadproductoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.novedadproductoBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_novedad_producto());
					this.novedadproductoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.novedadproductoBeanSwingJInternalFrame.inicializarActualizarBindingTablaNovedadProducto();
				}

				JInternalFrameBase jinternalFrame =this.novedadproductoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordernovedadproducto=(TitledBorder)this.novedadproductoBeanSwingJInternalFrame.jScrollPanelDatosNovedadProducto.getBorder();

				titledBordernovedadproducto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Novedad Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_novedad_productoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_novedad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_novedad_producto = "+this.detallecompra.getid_novedad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detallecompra.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detallecompra.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_unitarioDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getcosto_unitario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_unitario = "+this.detallecompra.getcosto_unitario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detallecompra.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_valorDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getiva_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_valor = "+this.detallecompra.getiva_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_totalDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getcosto_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_total = "+this.detallecompra.getcosto_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondisponibleDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getdisponible()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where disponible = "+this.detallecompra.getdisponible().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_ivaDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getcosto_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_iva = "+this.detallecompra.getcosto_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detallecompra.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonice_valorDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getice_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice_valor = "+this.detallecompra.getice_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento1DetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getdescuento1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento1 = "+this.detallecompra.getdescuento1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento2DetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getdescuento2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento2 = "+this.detallecompra.getdescuento2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserieDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getserie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie like '%"+this.detallecompra.getserie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonloteDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getlote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote like '%"+this.detallecompra.getlote()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_elaboracion_loteDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getfecha_elaboracion_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_elaboracion_lote = '"+Funciones2.getStringPostgresDate(this.detallecompra.getfecha_elaboracion_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caducidad_loteDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getfecha_caducidad_lote()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caducidad_lote = '"+Funciones2.getStringPostgresDate(this.detallecompra.getfecha_caducidad_lote())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoDetalleCompraActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="CentroCosto";

			if(!this.sFinalQueryGeneral_centrocosto.equals("")) {
				this.centrocostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_centrocosto);
				this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.centrocostoBeanSwingJInternalFrame.procesarBusqueda(this.centrocostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingCentroCosto(false);
			}

			if(!this.sFinalQueryComboCentroCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleCompra=null;
			TitledBorder titledBordercentrocosto=null;

			if(!this.jScrollPanelDatosDetalleCompra.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Centro Costo");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_centro_costoDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.detallecompra.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCosto";

			if(!this.sFinalQueryGeneral_cuentacontablecosto.equals("")) {
				this.cuentacontablecostoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecosto);
				this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCosto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleCompra=null;
			TitledBorder titledBordercuentacontablecosto=null;

			if(!this.jScrollPanelDatosDetalleCompra.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costoDetalleCompraUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecosto=true;

			idTienePermisocuentacontablecosto=this.tienePermisosUsuarioEnPaginaWebDetalleCompra(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleCompra.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleCompra.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);

				this.cuentacontablecostoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.detallecompraLogic.getConnexion());

				if(this.detallecompra.getid_cuenta_contable_costo()!=null) {
					this.cuentacontablecostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoBeanSwingJInternalFrame.setIdActual(this.detallecompra.getid_cuenta_contable_costo());
					this.cuentacontablecostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleCompra=(TitledBorder)this.jScrollPanelDatosDetalleCompra.getBorder();
				TitledBorder titledBordercuentacontablecosto=(TitledBorder)this.cuentacontablecostoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecosto.setTitle(titledBorderDetalleCompra.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallecompraLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costoDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getid_cuenta_contable_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo = "+this.detallecompra.getid_cuenta_contable_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_comprobanteDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getnumero_comprobante()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_comprobante like '%"+this.detallecompra.getnumero_comprobante()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlote_clienteDetalleCompraBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.getdetallecompra(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallecompra==null) {
						this.detallecompra = new DetalleCompra();
					}

					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);
				}

				if(this.detallecompra.getlote_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where lote_cliente like '%"+this.detallecompra.getlote_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleCompra(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void closingInternalFrameDetalleCompra() {
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
			this.jInternalFrameDetalleFormDetalleCompra.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleCompra.dispose();
			this.jInternalFrameDetalleFormDetalleCompra=null;
		}
		
		/*
		if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
			this.jInternalFrameReporteDinamicoDetalleCompra.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleCompra.dispose();
			this.jInternalFrameReporteDinamicoDetalleCompra=null;
		}
		
		if(this.jInternalFrameImportacionDetalleCompra!=null) {
			this.jInternalFrameImportacionDetalleCompra.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleCompra.dispose();
			this.jInternalFrameImportacionDetalleCompra=null;
		}		
		*/
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleCompra();
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleCompra")) {
				jButtonDuplicarDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleCompra")) {
				jButtonCopiarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleCompra")) {
				jButtonVerFormDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleCompra")) {
				jButtonDuplicarDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleCompra")) {
				jButtonDuplicarDetalleCompraActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleCompra")) {
				jButtonModificarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleCompra")) {
				jButtonModificarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleCompra")) {
				jButtonModificarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleCompra")) {
				jButtonActualizarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleCompra")) {
				jButtonActualizarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleCompra")) {
				jButtonActualizarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleCompra")) {
				jButtonEliminarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleCompra")) {
				jButtonEliminarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleCompra")) {
				jButtonEliminarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleCompra")) {
				jButtonCancelarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleCompra")) {
				jButtonCancelarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleCompra")) {
				jButtonCancelarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleCompra")) {
				jButtonCerrarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleCompra")) {
				jButtonCerrarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleCompra")) {
				jButtonCerrarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleCompra")) {
				jButtonMostrarOcultarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleCompra")) {
				jButtonCancelarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleCompra")) {
				jButtonCopiarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleCompra")) {
				jButtonVerFormDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleCompra")) {
				jButtonCopiarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleCompra")) {
				jButtonVerFormDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleCompra")) {
				jButtonRecargarInformacionDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleCompra")) {
				jButtonRecargarInformacionDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleCompra")) {
				jButtonRecargarInformacionDetalleCompraActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleCompra")) {
				jButtonAnterioresDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleCompra")) {
				jButtonAnterioresDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleCompra")) {
				jButtonAnterioresDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleCompra")) {
				jButtonSiguientesDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleCompra")) {
				jButtonSiguientesDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleCompra")) {
				jButtonSiguientesDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleCompra") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleCompra")) {
				jButtonAbrirOrderByDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleCompra") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleCompra")) {
				jButtonMostrarOcultarDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleCompra")) {
				jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleCompra")) {
				jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleCompra")) {
				jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleCompra")) {
				jButtonCerrarReporteDinamicoDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleCompra")) {
				jButtonGenerarReporteDinamicoDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleCompra")) {
				/*
				jButtonGenerarExcelReporteDinamicoDetalleCompraActionPerformed(evt);
				*/
			} else if(sTipo.equals("CerrarImportacionDetalleCompra")) {
				jButtonCerrarImportacionDetalleCompraActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleCompra")) {
				/*
				jButtonGenerarImportacionDetalleCompraActionPerformed(evt);
				*/
			} else if(sTipo.equals("AbrirImportacionDetalleCompra")) {
				/*
				jButtonAbrirImportacionDetalleCompraActionPerformed(evt);
				*/
			} else if(sTipo.equals("TiposAccionesDetalleCompra")) {
				jComboBoxTiposAccionesDetalleCompraActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleCompra")) {
				jComboBoxTiposRelacionesDetalleCompraActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleCompra")) {
				jComboBoxTiposAccionesDetalleCompraActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleCompra")) {
				/*
				jComboBoxTiposSeleccionarDetalleCompraActionListener(evt);
				*/
			} else if(sTipo.equals("ValorCampoGeneralDetalleCompra")) {
				jTextFieldValorCampoGeneralDetalleCompraActionListener(evt);
			}
			
			else if(sTipo.equals("AbrirTotalesDetalleCompra")) {
				jButtonAbrirTotalesDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTotalesDetalleCompra")) {
				jButtonCerrarTotalesDetalleCompraActionPerformed(evt);
			} 
			
			else if(sTipo.equals("AbrirOrderByDetalleCompra")) {
				jButtonAbrirOrderByDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleCompra")) {
				jButtonAbrirOrderByDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleCompra")) {
				jButtonCerrarOrderByDetalleCompraActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleCompraBusqueda")) {
				this.jButtonidDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_compraDetalleCompraUpdate")) {
				this.jButtonid_compraDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_compraDetalleCompraBusqueda")) {
				this.jButtonid_compraDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleCompraUpdate")) {
				this.jButtonid_empresaDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleCompraBusqueda")) {
				this.jButtonid_empresaDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleCompraUpdate")) {
				this.jButtonid_sucursalDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleCompraBusqueda")) {
				this.jButtonid_sucursalDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleCompraUpdate")) {
				this.jButtonid_ejercicioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleCompraBusqueda")) {
				this.jButtonid_ejercicioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleCompraUpdate")) {
				this.jButtonid_periodoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleCompraBusqueda")) {
				this.jButtonid_periodoDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleCompraUpdate")) {
				this.jButtonid_anioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleCompraBusqueda")) {
				this.jButtonid_anioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleCompraUpdate")) {
				this.jButtonid_mesDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleCompraBusqueda")) {
				this.jButtonid_mesDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleCompraUpdate")) {
				this.jButtonid_estado_detalle_inventarioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleCompraBusqueda")) {
				this.jButtonid_estado_detalle_inventarioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleCompraUpdate")) {
				this.jButtonid_bodegaDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleCompraBusqueda")) {
				this.jButtonid_bodegaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleCompra")) {
				this.jButtonid_productoDetalleCompraActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleCompraUpdate")) {
				this.jButtonid_productoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleCompraBusqueda")) {
				this.jButtonid_productoDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleCompraUpdate")) {
				this.jButtonid_unidadDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleCompraBusqueda")) {
				this.jButtonid_unidadDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleCompraBusqueda")) {
				this.jButtondescripcionDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleCompraUpdate")) {
				this.jButtonid_novedad_productoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleCompraBusqueda")) {
				this.jButtonid_novedad_productoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleCompraBusqueda")) {
				this.jButtoncantidadDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleCompraBusqueda")) {
				this.jButtondescuentoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleCompraBusqueda")) {
				this.jButtoncosto_unitarioDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleCompraBusqueda")) {
				this.jButtonivaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleCompraBusqueda")) {
				this.jButtoniva_valorDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleCompraBusqueda")) {
				this.jButtoncosto_totalDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleCompraBusqueda")) {
				this.jButtondisponibleDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleCompraBusqueda")) {
				this.jButtoncosto_ivaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleCompraBusqueda")) {
				this.jButtoniceDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleCompraBusqueda")) {
				this.jButtonice_valorDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleCompraBusqueda")) {
				this.jButtondescuento1DetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleCompraBusqueda")) {
				this.jButtondescuento2DetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleCompraBusqueda")) {
				this.jButtonserieDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleCompraBusqueda")) {
				this.jButtonloteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleCompraBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleCompraBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompra")) {
				this.jButtonid_centro_costoDetalleCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraUpdate")) {
				this.jButtonid_centro_costoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraBusqueda")) {
				this.jButtonid_centro_costoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompra")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleCompraBusqueda")) {
				this.jButtonnumero_comprobanteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleCompraBusqueda")) {
				this.jButtonlote_clienteDetalleCompraBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_centro_costoDetalleCompra")) {
				this.jButtonid_centro_costoDetalleCompraActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompra")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
			}
			else if(sTipo.equals("id_productoDetalleCompra")) {
				this.jButtonid_productoDetalleCompraActionPerformed(evt);
			}
			
			
			;
			
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleCompra();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				


			if(sTipo.equals("cantidadDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("ivaDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleCompra detallecompraLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallecompraLocal=this.detallecompra;
			} else {
				detallecompraLocal=this.detallecompraAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("cantidadDetalleCompra")) {
					if(detallecompraLocal.getcantidad()==Integer.parseInt(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_unitarioDetalleCompra")) {
					if(detallecompraLocal.getcosto_unitario()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("ivaDetalleCompra")) {
					if(detallecompraLocal.getiva()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("costo_totalDetalleCompra")) {
					if(detallecompraLocal.getcosto_total()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
							
				
				


			if(sTipo.equals("cantidadDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("ivaDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("cantidadDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("ivaDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
								
						
				


				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
								
				
				


				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
							
				
				


				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
								
				
				


			if(sTipo.equals("cantidadDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_unitarioDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("ivaDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
			 else if(sTipo.equals("costo_totalDetalleCompra")) {
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);

				esUsoDesdeHijoLocal=true;
			}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleCompra")) {
					jCheckBoxSeleccionarTodosDetalleCompraItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleCompra")) {
					jCheckBoxSeleccionadosDetalleCompraItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleCompra")) {
					
				}
				
				


				
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
												
				
				


				
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
				//recargarFormDetalleCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
				//recargarFormDetalleCompraProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleCompraActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
				//recargarFormDetalleCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
				//recargarFormDetalleCompraProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
			}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallecompra);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallecompra);
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
				//recargarFormDetalleCompraBodega(jComboBoxid_bodegaFK_IdBodegaDetalleCompra,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleCompra")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra;
				}

				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleCompra(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleCompra")) {
				//this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
				//recargarFormDetalleCompraProducto(jComboBoxid_productoFK_IdProductoDetalleCompra,"FK_IdProducto");
			}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleCompra.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleCompra.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleCompraActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallecompraAnterior =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleCompra")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleCompraListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleCompra.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallecompra =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallecompra =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallecompra);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleCompra")) {
				
				}
				
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleCompra")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleCompra.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleCompra")) {
			
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleCompra();
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleCompra")) {
				jButtonDuplicarDetalleCompraActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleCompra")) {
				jButtonCopiarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleCompra")) {
				jButtonVerFormDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleCompra")) {
				jButtonNuevoDetalleCompraActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleCompra")) {
				jButtonModificarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleCompra")) {
				jButtonActualizarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleCompra")) {
				jButtonEliminarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleCompra")) {
				jButtonCancelarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleCompra")) {
				jButtonCerrarDetalleCompraActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleCompra")) {
				jButtonGuardarCambiosDetalleCompraActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleCompra")) {
				jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleCompra")) {
				jButtonAbrirOrderByDetalleCompraActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleCompra")) {
				jButtonRecargarInformacionDetalleCompraActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleCompra")) {
				jButtonAnterioresDetalleCompraActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleCompra")) {
				jButtonSiguientesDetalleCompraActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleCompraBusqueda")) {
				this.jButtonidDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_compraDetalleCompraUpdate")) {
				this.jButtonid_compraDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_compraDetalleCompraBusqueda")) {
				this.jButtonid_compraDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleCompraUpdate")) {
				this.jButtonid_empresaDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleCompraBusqueda")) {
				this.jButtonid_empresaDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleCompraUpdate")) {
				this.jButtonid_sucursalDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleCompraBusqueda")) {
				this.jButtonid_sucursalDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioDetalleCompraUpdate")) {
				this.jButtonid_ejercicioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioDetalleCompraBusqueda")) {
				this.jButtonid_ejercicioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoDetalleCompraUpdate")) {
				this.jButtonid_periodoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoDetalleCompraBusqueda")) {
				this.jButtonid_periodoDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioDetalleCompraUpdate")) {
				this.jButtonid_anioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioDetalleCompraBusqueda")) {
				this.jButtonid_anioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesDetalleCompraUpdate")) {
				this.jButtonid_mesDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesDetalleCompraBusqueda")) {
				this.jButtonid_mesDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleCompraUpdate")) {
				this.jButtonid_estado_detalle_inventarioDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_detalle_inventarioDetalleCompraBusqueda")) {
				this.jButtonid_estado_detalle_inventarioDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleCompraUpdate")) {
				this.jButtonid_bodegaDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleCompraBusqueda")) {
				this.jButtonid_bodegaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleCompra")) {
				this.jButtonid_productoDetalleCompraActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleCompraUpdate")) {
				this.jButtonid_productoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleCompraBusqueda")) {
				this.jButtonid_productoDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleCompraUpdate")) {
				this.jButtonid_unidadDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleCompraBusqueda")) {
				this.jButtonid_unidadDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleCompraBusqueda")) {
				this.jButtondescripcionDetalleCompraBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleCompraUpdate")) {
				this.jButtonid_novedad_productoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_novedad_productoDetalleCompraBusqueda")) {
				this.jButtonid_novedad_productoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleCompraBusqueda")) {
				this.jButtoncantidadDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleCompraBusqueda")) {
				this.jButtondescuentoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_unitarioDetalleCompraBusqueda")) {
				this.jButtoncosto_unitarioDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleCompraBusqueda")) {
				this.jButtonivaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleCompraBusqueda")) {
				this.jButtoniva_valorDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_totalDetalleCompraBusqueda")) {
				this.jButtoncosto_totalDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("disponibleDetalleCompraBusqueda")) {
				this.jButtondisponibleDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_ivaDetalleCompraBusqueda")) {
				this.jButtoncosto_ivaDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleCompraBusqueda")) {
				this.jButtoniceDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleCompraBusqueda")) {
				this.jButtonice_valorDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento1DetalleCompraBusqueda")) {
				this.jButtondescuento1DetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento2DetalleCompraBusqueda")) {
				this.jButtondescuento2DetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleCompraBusqueda")) {
				this.jButtonserieDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("loteDetalleCompraBusqueda")) {
				this.jButtonloteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_elaboracion_loteDetalleCompraBusqueda")) {
				this.jButtonfecha_elaboracion_loteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caducidad_loteDetalleCompraBusqueda")) {
				this.jButtonfecha_caducidad_loteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompra")) {
				this.jButtonid_centro_costoDetalleCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraArbol")) {
				this.abrirFrameTreeCentroCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraUpdate")) {
				this.jButtonid_centro_costoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoDetalleCompraBusqueda")) {
				this.jButtonid_centro_costoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompra")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraArbol")) {
				this.abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraUpdate")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costoDetalleCompraBusqueda")) {
				this.jButtonid_cuenta_contable_costoDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_comprobanteDetalleCompraBusqueda")) {
				this.jButtonnumero_comprobanteDetalleCompraBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("lote_clienteDetalleCompraBusqueda")) {
				this.jButtonlote_clienteDetalleCompraBusquedaActionPerformed(evt);
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleCompra();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleCompra")) {
				closingInternalFrameDetalleCompra();
				
			} else if(sTipo.equals("jButtonCancelarDetalleCompra")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleCompra = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleCompraBeanSwingJInternalFrame jInternalFrameParent=(DetalleCompraBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleCompra.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleCompraActionPerformed(null);
			}
			
			DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallecompra,new Object(),this.detallecompraParameterGeneral,this.detallecompraReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleCompra(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleCompra(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleCompra(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallecompra)) {
			if(!esControlTabla) {
				if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);			
				}
				
				if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleCompra(this.detallecompra,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallecompraReturnGeneral=detallecompraLogic.procesarEventosDetalleComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallecompraLogic.getDetalleCompras(),this.detallecompra,this.detallecompraParameterGeneral,this.isEsNuevoDetalleCompra,classes);//this.detallecompraLogic.getDetalleCompra()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleCompra(this.detallecompraReturnGeneral,this.detallecompraBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleCompra(classes,this.detallecompraReturnGeneral,this.detallecompraBean,false);
					}
						
					if(this.detallecompraReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra());	
					}
						
					if(this.detallecompraReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra(),classes);//this.detallecompraBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleCompra(this.detallecompra,classes);//this.detallecompraBean);									
				}
			
				if(DetalleCompraJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleCompra(this.detallecompra,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleCompra(this.detallecompra);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallecompraAnterior!=null) {
						this.detallecompra=this.detallecompraAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallecompraReturnGeneral=detallecompraLogic.procesarEventosDetalleComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallecompraLogic.getDetalleCompras(),this.detallecompra,this.detallecompraParameterGeneral,this.isEsNuevoDetalleCompra,classes);//this.detallecompraLogic.getDetalleCompra()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallecompraSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallecompraSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallecompraReturnGeneral.getDetalleCompra(),detallecompraLogic.getDetalleCompras());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallecompraReturnGeneral.getDetalleCompra(),this.detallecompras);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleCompra.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleCompra.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleCompra();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleCompra() throws Exception {
		
		DetalleCompraModel detallecompraModel=(DetalleCompraModel)this.jTableDatosDetalleCompra.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallecompraModel.detallecompras=this.detallecompraLogic.getDetalleCompras();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallecompraModel.detallecompras=this.detallecompras;
		}
		
		
		((DetalleCompraModel) this.jTableDatosDetalleCompra.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleCompra() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallecompraAnterior(),this.detallecompraLogic.getDetalleCompras());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallecompraAnterior(),this.detallecompras);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleCompra();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleCompra(DetalleCompra detallecompra,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallecompra,new Object(),generalEntityParameterGeneral,this.detallecompraReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallecompraSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleCompraConstantesFunciones.getClassesRelationshipsOfDetalleCompra(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleCompraConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleCompra(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleCompra(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleCompraBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallecompra,new Object(),generalEntityParameterGeneral,this.detallecompraReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleCompra(DetalleCompraBean detallecompraBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleCompra(ArrayList<Classe> classes,DetalleCompraReturnGeneral detallecompraReturnGeneral,DetalleCompraBean detallecompraBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleCompra(DetalleCompra detallecompra,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallecompra)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleCompra = new DetalleCompraDetalleFormJInternalFrame(jDesktopPane,this.detallecompraSessionBean.getConGuardarRelaciones(),this.detallecompraSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.setVisible(false);
		this.jInternalFrameDetalleFormDetalleCompra.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleCompra.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleCompra.detallecompraLogic=this.detallecompraLogic;
		
		this.cargarCombosFrameForeignKeyDetalleCompra("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleCompra();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleCompra();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleCompra("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleCompra();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleCompra.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleCompra"));
		
		this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarDetalleCompra.addActionListener(new ButtonActionListener(this,"ModificarDetalleCompra"));

		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleCompra"));
					
		this.jInternalFrameDetalleFormDetalleCompra.jMenuItemModificarDetalleCompra.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleCompra"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.addActionListener (new ButtonActionListener(this,"ActualizarDetalleCompra"));
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleCompra"));
						
		this.jInternalFrameDetalleFormDetalleCompra.jMenuItemActualizarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleCompra"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.addActionListener (new ButtonActionListener(this,"EliminarDetalleCompra"));
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleCompra"));
								
		this.jInternalFrameDetalleFormDetalleCompra.jMenuItemEliminarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleCompra"));		
		
		*/
		
		this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.addActionListener (new ButtonActionListener(this,"CancelarDetalleCompra"));
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleCompra"));
					
		this.jInternalFrameDetalleFormDetalleCompra.jMenuItemCancelarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleCompra"));		
		
		*/
		
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jMenuItemDetalleCerrarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleCompra"));		
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleCompra"));
		*/
		
		/*
		this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleCompra"));
		*/
		
		
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleCompra"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.addActionListener(new TextFieldActionListener(this,"cantidadDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleCompra,"cantidadDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleCompra,"costo_unitarioDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"ivaDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.addActionListener(new TextFieldActionListener(this,"ivaDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldivaDetalleCompra,"ivaDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"costo_totalDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.addActionListener(new TextFieldActionListener(this,"costo_totalDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_totalDetalleCompra,"costo_totalDetalleCompra"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonidDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraBusqueda"));
		//jButtonid_productoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescripcionDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncantidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuentoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_unitarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniva_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_totalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondisponibleDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_ivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniceDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonice_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento1DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento2DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonserieDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonloteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_elaboracion_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_caducidad_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleCompraBusqueda"));
		//jButtonid_centro_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompra"));
		//jButtonid_centro_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompra"));
		//jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonnumero_comprobanteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonlote_clienteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleCompraBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleCompra"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleCompra"));
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleCompra"));
		}
		
		this.jTableDatosDetalleCompra.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleCompra"));
		
		this.jTableDatosDetalleCompra.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleCompra"));
		
		this.jButtonNuevoDetalleCompra.addActionListener(new ButtonActionListener(this,"NuevoDetalleCompra"));
		
		this.jButtonDuplicarDetalleCompra.addActionListener(new ButtonActionListener(this,"DuplicarDetalleCompra"));
		
		this.jButtonCopiarDetalleCompra.addActionListener(new ButtonActionListener(this,"CopiarDetalleCompra"));
		
		this.jButtonVerFormDetalleCompra.addActionListener(new ButtonActionListener(this,"VerFormDetalleCompra"));
		
		/*
		this.jButtonNuevoToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleCompra"));
			
		this.jButtonDuplicarToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleCompra"));
			
		this.jMenuItemNuevoDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleCompra"));
			
		this.jMenuItemDuplicarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleCompra"));		
		*/
		
		this.jButtonNuevoRelacionesDetalleCompra.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleCompra"));
		
		/*
		this.jButtonNuevoRelacionesToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleCompra"));
			
		this.jMenuItemNuevoRelacionesDetalleCompra.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleCompra"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarDetalleCompra.addActionListener(new ButtonActionListener(this,"ModificarDetalleCompra"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonModificarToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleCompra"));
			
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemModificarDetalleCompra.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleCompra"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarDetalleCompra.addActionListener (new ButtonActionListener(this,"ActualizarDetalleCompra"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonActualizarToolBarDetalleCompra.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleCompra"));
				
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemActualizarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleCompra"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarDetalleCompra.addActionListener (new ButtonActionListener(this,"EliminarDetalleCompra"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonEliminarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleCompra"));
						
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemEliminarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleCompra"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarDetalleCompra.addActionListener (new ButtonActionListener(this,"CancelarDetalleCompra"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonCancelarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleCompra"));
			
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemCancelarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleCompra"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleCompra"));		
		*/
		
		this.jButtonCerrarDetalleCompra.addActionListener (new ButtonActionListener(this,"CerrarDetalleCompra"));
		
		/*
		this.jButtonCerrarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleCompra"));
			
		this.jMenuItemCerrarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleCompra"));
			
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jMenuItemDetalleCerrarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleCompra"));		
		}
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleCompra"));
		}
		
		/*
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleCompra"));
		}
		
		this.jButtonCopiarToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleCompra"));
			
		this.jButtonVerFormToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleCompra"));
		
		this.jMenuItemGuardarCambiosDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleCompra"));
			
		this.jMenuItemCopiarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleCompra"));		
		
		this.jMenuItemVerFormDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleCompra"));		
		*/
		
		this.jButtonGuardarCambiosTablaDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleCompra"));
		
		/*
		this.jButtonGuardarCambiosTablaToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleCompra"));
			
		this.jMenuItemGuardarCambiosTablaDetalleCompra.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleCompra"));		
		*/
		
		/*
		this.jButtonRecargarInformacionDetalleCompra.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleCompra"));
					
		this.jButtonRecargarInformacionToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleCompra"));
		
		this.jMenuItemRecargarInformacionDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleCompra"));		
		*/
		
		
		this.jButtonAnterioresDetalleCompra.addActionListener (new ButtonActionListener(this,"AnterioresDetalleCompra"));
		
		/*
		this.jButtonAnterioresToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleCompra"));
		
		this.jMenuItemAnterioresDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleCompra"));		
		*/
		
		this.jButtonSiguientesDetalleCompra.addActionListener (new ButtonActionListener(this,"SiguientesDetalleCompra"));
		
		/*
		this.jButtonSiguientesToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleCompra"));
			
		this.jMenuItemSiguientesDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleCompra"));
			
		this.jMenuItemAbrirOrderByDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleCompra"));
			
		this.jMenuItemMostrarOcultarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleCompra"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleCompra"));
			
		this.jMenuItemDetalleMostarOcultarDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleCompra"));		
		*/
		
		this.jButtonNuevoGuardarCambiosDetalleCompra.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleCompra"));
		
		/*
		this.jButtonNuevoGuardarCambiosToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleCompra"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleCompra.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleCompra"));		
		*/
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleCompra.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleCompra"));

		this.jCheckBoxSeleccionadosDetalleCompra.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleCompra"));
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleCompra"));
		}
		
		/*
		this.jComboBoxTiposRelacionesDetalleCompra.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleCompra"));
			
		this.jComboBoxTiposAccionesDetalleCompra.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleCompra"));
					
		this.jComboBoxTiposSeleccionarDetalleCompra.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleCompra"));
			
		this.jTextFieldValorCampoGeneralDetalleCompra.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleCompra"));		
		*/
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.addActionListener(new TextFieldActionListener(this,"cantidadDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleCompra,"cantidadDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"costo_unitarioDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.addActionListener(new TextFieldActionListener(this,"costo_unitarioDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_unitarioDetalleCompra,"costo_unitarioDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"ivaDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.addActionListener(new TextFieldActionListener(this,"ivaDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldivaDetalleCompra,"ivaDetalleCompra"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.addFocusListener(new TextFieldFocusListener(this,"costo_totalDetalleCompra"));
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.addActionListener(new TextFieldActionListener(this,"costo_totalDetalleCompra"));
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcosto_totalDetalleCompra,"costo_totalDetalleCompra"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonidDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraBusqueda"));
		//jButtonid_productoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescripcionDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncantidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuentoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_unitarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniva_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_totalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondisponibleDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_ivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniceDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonice_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento1DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento2DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonserieDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonloteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_elaboracion_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_caducidad_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleCompraBusqueda"));
		//jButtonid_centro_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompra"));
		//jButtonid_centro_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompra"));
		//jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonnumero_comprobanteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonlote_clienteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleCompraBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		/*
		
			this.jButtonFK_IdBodegaDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleCompra"));

			this.jButtonFK_IdCentroCostoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleCompra"));

			this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompra"));

			this.jButtonFK_IdCompraDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCompraDetalleCompra"));

			this.jButtonFK_IdCuentaContableCostoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleCompra"));

			this.jButtonBuscarFK_IdCuentaContableCostoid_cuenta_contable_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompra"));

			this.jButtonFK_IdEstadoDetalleInventarioDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleInventarioDetalleCompra"));

			this.jButtonFK_IdNovedadProductoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleCompra"));

			this.jButtonFK_IdProductoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleCompra"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompra"));

			this.jButtonFK_IdUnidadDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleCompra"));
		
		*/
		
			//REPORTE DINAMICO
			/*
			if(this.jInternalFrameReporteDinamicoDetalleCompra!=null) {
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleCompra"));
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleCompra"));
				this.jInternalFrameReporteDinamicoDetalleCompra.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleCompra"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleCompra.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleCompra"));				
			//this.jButtonGenerarReporteDinamicoDetalleCompra.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleCompra"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleCompra.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleCompra"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleCompra!=null) {
				this.jInternalFrameImportacionDetalleCompra.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleCompra"));
				this.jInternalFrameImportacionDetalleCompra.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleCompra"));
				this.jInternalFrameImportacionDetalleCompra.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleCompra"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleCompra.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleCompra"));
			
			this.jButtonAbrirOrderByToolBarDetalleCompra.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleCompra"));			
			
			if(this.jInternalFrameOrderByDetalleCompra!=null) {
				this.jInternalFrameOrderByDetalleCompra.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleCompra"));				
			}
			*/
			
		}
		
		this.jButtonAbrirTotalesDetalleCompra.addActionListener (new ButtonActionListener(this,"AbrirTotalesDetalleCompra"));
		
		if(this.jInternalFrameTotalesDetalleCompra!=null) {
			this.jInternalFrameTotalesDetalleCompra.getjButtonCerrarTotales().addActionListener (new ButtonActionListener(this,"CerrarTotalesDetalleCompra"));
		}
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleCompra.jTabbedPaneRelacionesDetalleCompra.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleCompra"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleCompra();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleCompra.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleCompra = (JInternalFrameBase)event.getSource();
	            	
	            DetalleCompraBeanSwingJInternalFrame jInternalFrameParent=(DetalleCompraBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleCompra.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleCompraActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleCompra.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleCompraListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleCompra.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleCompra.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleCompra";
		inputMap = this.jButtonNuevoDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleCompraActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleCompraActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleCompra";
		inputMap = this.jButtonNuevoRelacionesDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleCompraActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleCompra";
		inputMap = this.jButtonModificarDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleCompra";
		inputMap = this.jButtonActualizarDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleCompra";
		inputMap = this.jButtonEliminarDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleCompra";
		inputMap = this.jButtonCancelarDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleCompra";
		inputMap = this.jButtonCerrarDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleCompra";
		inputMap = this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleCompra.jButtonGuardarCambiosDetalleCompra.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleCompraActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleCompra.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleCompraItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleCompra.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleCompraActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonidDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_compraDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_compraDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_empresaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_sucursalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_ejercicioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_periodoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_anioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_anioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_mesDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_mesDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_estado_detalle_inventarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_detalle_inventarioDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_bodegaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleCompraBusqueda"));
		//jButtonid_productoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompra"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_unidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescripcionDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleCompraBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_novedad_productoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_novedad_productoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncantidadDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuentoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_unitarioDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_unitarioDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniva_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_totalDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_totalDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondisponibleDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"disponibleDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoncosto_ivaDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"costo_ivaDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtoniceDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonice_valorDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento1DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento1DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtondescuento2DetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"descuento2DetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonserieDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonloteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_elaboracion_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_elaboracion_loteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonfecha_caducidad_loteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caducidad_loteDetalleCompraBusqueda"));
		//jButtonid_centro_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_centro_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompra"));
		//jButtonid_centro_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCentroCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompraBusqueda"));
		//jButtonid_cuenta_contable_costoDetalleCompra.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costoDetalleCompraActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompra"));
		//jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCosto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonnumero_comprobanteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"numero_comprobanteDetalleCompraBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleCompra.jButtonlote_clienteDetalleCompraBusqueda.addActionListener(new ButtonActionListener(this,"lote_clienteDetalleCompraBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleCompra"));

		this.jButtonFK_IdCentroCostoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoDetalleCompra"));

		this.jButtonBuscarFK_IdCentroCostoid_centro_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_centro_costoDetalleCompra"));

		this.jButtonFK_IdCompraDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCompraDetalleCompra"));

		this.jButtonFK_IdCuentaContableCostoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoDetalleCompra"));

		this.jButtonBuscarFK_IdCuentaContableCostoid_cuenta_contable_costoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costoDetalleCompra"));

		this.jButtonFK_IdEstadoDetalleInventarioDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdEstadoDetalleInventarioDetalleCompra"));

		this.jButtonFK_IdNovedadProductoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdNovedadProductoDetalleCompra"));

		this.jButtonFK_IdProductoDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleCompra"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleCompra.addActionListener(new ButtonActionListener(this,"id_productoDetalleCompra"));

		this.jButtonFK_IdUnidadDetalleCompra.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleCompra"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleCompra.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleCompraActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	/*
	public void jComboBoxTiposSeleccionarDetalleCompraActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleCompra.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}	
	*/
	
	
	public void seleccionarTodosDetalleCompra(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
					detallecompraAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleCompra detallecompraAux:detallecompras) {
					detallecompraAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleCompraItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
						detallecompraAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleCompra detallecompraAux:detallecompras) {
						detallecompraAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
					
						if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallecompraAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleCompra detallecompraAux:detallecompras) {
						
						if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOIVA)) {
							existe=true;
							detallecompraAux.setcosto_iva(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleCompra(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleCompra.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleCompra.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleCompraItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleCompra.getSelectedRows();
			
			DetalleCompra detallecompraLocal=new DetalleCompra();
			
			//this.seleccionarTodosDetalleCompra(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallecompraLocal =(DetalleCompra) this.detallecompraLogic.getDetalleCompras().toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallecompraLocal =(DetalleCompra) this.detallecompras.toArray()[this.jTableDatosDetalleCompra.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallecompraLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
						detallecompraAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleCompra detallecompraAux:detallecompras) {
						detallecompraAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleCompra(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleCompra.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleCompra.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleCompra,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleCompraItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleCompraParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleCompraActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleCompra.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleCompra detallecompraAux:this.detallecompraLogic.getDetalleCompras()) {
				
						if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallecompraAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallecompraAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallecompraAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallecompraAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallecompraAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallecompraAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallecompraAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallecompraAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallecompraAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallecompraAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallecompraAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallecompraAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallecompraAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallecompraAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallecompraAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallecompraAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallecompraAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallecompraAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleCompra detallecompraAux:detallecompras) {
					
						if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallecompraAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallecompraAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallecompraAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO)) {
							existe=true;
							detallecompraAux.setcosto_unitario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallecompraAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallecompraAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL)) {
							existe=true;
							detallecompraAux.setcosto_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE)) {
							existe=true;
							detallecompraAux.setdisponible(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallecompraAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallecompraAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1)) {
							existe=true;
							detallecompraAux.setdescuento1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2)) {
							existe=true;
							detallecompraAux.setdescuento2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallecompraAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTE)) {
							existe=true;
							detallecompraAux.setlote(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
							existe=true;
							detallecompraAux.setfecha_elaboracion_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
							existe=true;
							detallecompraAux.setfecha_caducidad_lote(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
							existe=true;
							detallecompraAux.setnumero_comprobante(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE)) {
							existe=true;
							detallecompraAux.setlote_cliente(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleCompra(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleCompraActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleCompra=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				/*
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleCompra.getSelectedItem();
				*/
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleCompra) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleCompra(conSplash);
				
					this.generarReporteDetalleComprasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleComprasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleComprasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleComprasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleCompra();
				
				this.exportarDetalleComprasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleCompras();
				//this.importarDetalleCompras();
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleCompra();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleComprasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleCompra();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleCompra)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleCompra(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					/*
					this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
					*/
				} else {
					this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleCompraBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleCompra) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleCompra(conSplash);
					
						//this.actualizarParametrosGeneralDetalleCompra();
						
						this.generarReporteProcesoAccionDetalleComprasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							/*
							this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
							*/
						} else {
							this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleCompraBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle CompraS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Compra", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleCompra();
				
						this.actualizarParametrosGeneralDetalleCompra();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallecompraReturnGeneral=detallecompraLogic.procesarAccionDetalleComprasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallecompraLogic.getDetalleCompras(),this.detallecompraParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleCompraReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleCompra();
					
					DetalleCompraBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleCompraReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						/*
						this.jComboBoxTiposAccionesDetalleCompra.setSelectedIndex(0);					
						*/
					} else {
						this.jInternalFrameDetalleFormDetalleCompra.jComboBoxTiposAccionesFormularioDetalleCompra.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleCompra(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleCompraActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleCompra();
			
			if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
			DetalleCompra detallecompra=new DetalleCompra();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleCompra(false,false);
			
			Reporte reporte=new Reporte();
			
			/*
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleCompra.getSelectedItem();
			*/
			
			
			
			detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallecomprasSeleccionados.size()==1) {
				for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
					detallecompra=detallecompraAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleCompra();
			
      		//this.finishProcessDetalleCompra(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleCompraReturnGeneral() throws Exception {
		if(this.detallecompraReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallecompraReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallecompraReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallecompraReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallecompraReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallecompraReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleCompra(false);
		}
		
		if(this.detallecompraReturnGeneral.getConRetornoLista() || this.detallecompraReturnGeneral.getConRetornoObjeto()) {
			if(this.detallecompraReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallecompraLogic.setDetalleCompras(this.detallecompraReturnGeneral.getDetalleCompras());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallecompraReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallecompraLogic.setDetalleCompra(this.detallecompraReturnGeneral.getDetalleCompra());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleCompra(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleCompra() throws Exception {
		
		
	}
	
	public ArrayList<DetalleCompra> getDetalleComprasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleCompra) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleCompra detallecompraAux:detallecompraLogic.getDetalleCompras()) {
					if(detallecompraAux.getIsSelected()) {
						detallecomprasSeleccionados.add(detallecompraAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleCompra detallecompraAux:this.detallecompras) {
					if(detallecompraAux.getIsSelected()) {
						detallecomprasSeleccionados.add(detallecompraAux);				
					}
				}
			}
			
			if(detallecomprasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallecomprasSeleccionados.addAll(this.detallecompraLogic.getDetalleCompras());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallecomprasSeleccionados.addAll(this.detallecompras);				
					}
				}
			}
		} else {
			detallecomprasSeleccionados.add(this.detallecompra);
		}
		
		return detallecomprasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleComprasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleComprasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleComprasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleComprasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleComprasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Compra",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleComprasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		/*
		this.abrirInicializarFrameReporteDinamicoDetalleCompra();
		*/
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirFrameReporteDinamicoDetalleCompra();
		*/
		
		//this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados ,detallecompraImplementable,detallecompraImplementableHome);
	}
	
	public void mostrarImportacionDetalleCompras() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.abrirInicializarFrameImportacionDetalleCompra();
		
		this.abrirFrameImportacionDetalleCompra();		
		*/
			
		//this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados ,detallecompraImplementable,detallecompraImplementableHome);
	}
	
	public void importarDetalleCompras() throws Exception {		
	
	}
	
	public void exportarDetalleComprasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleComprasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleComprasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleComprasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Compra",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleCompra(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleCompra(detallecompraAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallecompraAux.setsDetalleGeneralEntityReporte(detallecompraAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleCompra(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDCOMPRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IVAVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_DISPONIBLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_COSTOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_ICEVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_DESCUENTO1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_DESCUENTO2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_SERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_LOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleCompra(DetalleCompra detallecompra,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallecompra.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcompra_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getestadodetalleinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getnovedadproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcosto_unitario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getiva_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcosto_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getdisponible().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcosto_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getice_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getdescuento1().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getdescuento2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getserie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getlote();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getfecha_elaboracion_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getfecha_caducidad_lote().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getcuentacontablecosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getnumero_comprobante();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallecompra.getlote_cliente();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleCompras");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleCompra(row);				
				iRow++;
			}				
			
			for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleCompra(detallecompraAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleComprasSeleccionados() throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();		
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallecompra.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallecompras");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallecompra");
			//elementRoot.appendChild(element);
		
			for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
				element = document.createElement("detallecompra");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleCompra(detallecompraAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Compra",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleCompra(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCOMPRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOUNITARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IVAVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_COSTOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_ICEVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO1);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_DESCUENTO2);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_SERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleCompra(DetalleCompra detallecompra,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcompra_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getestadodetalleinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getnovedadproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcosto_unitario());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getiva_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcosto_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getdisponible());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcosto_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getice_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getdescuento1());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getdescuento2());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getserie());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getlote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getfecha_elaboracion_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getfecha_caducidad_lote());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getcuentacontablecosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getnumero_comprobante());
		cell = row.createCell(iColumn++);cell.setCellValue(detallecompra.getlote_cliente());				
	}
	
	public void setFilaDatosExportarXmlDetalleCompra(DetalleCompra detallecompra,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleCompraConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallecompra.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleCompraConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallecompra.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementcompra_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDCOMPRA);
		elementcompra_descripcion.appendChild(document.createTextNode(detallecompra.getcompra_descripcion()));
		element.appendChild(elementcompra_descripcion);

		Element elementempresa_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallecompra.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallecompra.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(detallecompra.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(detallecompra.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(detallecompra.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(detallecompra.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementestadodetalleinventario_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDESTADODETALLEINVENTARIO);
		elementestadodetalleinventario_descripcion.appendChild(document.createTextNode(detallecompra.getestadodetalleinventario_descripcion()));
		element.appendChild(elementestadodetalleinventario_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallecompra.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallecompra.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallecompra.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementdescripcion = document.createElement(DetalleCompraConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallecompra.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementnovedadproducto_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDNOVEDADPRODUCTO);
		elementnovedadproducto_descripcion.appendChild(document.createTextNode(detallecompra.getnovedadproducto_descripcion()));
		element.appendChild(elementnovedadproducto_descripcion);

		Element elementcantidad = document.createElement(DetalleCompraConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detallecompra.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementdescuento = document.createElement(DetalleCompraConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detallecompra.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementcosto_unitario = document.createElement(DetalleCompraConstantesFunciones.COSTOUNITARIO);
		elementcosto_unitario.appendChild(document.createTextNode(detallecompra.getcosto_unitario().toString().trim()));
		element.appendChild(elementcosto_unitario);

		Element elementiva = document.createElement(DetalleCompraConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detallecompra.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementiva_valor = document.createElement(DetalleCompraConstantesFunciones.IVAVALOR);
		elementiva_valor.appendChild(document.createTextNode(detallecompra.getiva_valor().toString().trim()));
		element.appendChild(elementiva_valor);

		Element elementcosto_total = document.createElement(DetalleCompraConstantesFunciones.COSTOTOTAL);
		elementcosto_total.appendChild(document.createTextNode(detallecompra.getcosto_total().toString().trim()));
		element.appendChild(elementcosto_total);

		Element elementdisponible = document.createElement(DetalleCompraConstantesFunciones.DISPONIBLE);
		elementdisponible.appendChild(document.createTextNode(detallecompra.getdisponible().toString().trim()));
		element.appendChild(elementdisponible);

		Element elementcosto_iva = document.createElement(DetalleCompraConstantesFunciones.COSTOIVA);
		elementcosto_iva.appendChild(document.createTextNode(detallecompra.getcosto_iva().toString().trim()));
		element.appendChild(elementcosto_iva);

		Element elementice = document.createElement(DetalleCompraConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detallecompra.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementice_valor = document.createElement(DetalleCompraConstantesFunciones.ICEVALOR);
		elementice_valor.appendChild(document.createTextNode(detallecompra.getice_valor().toString().trim()));
		element.appendChild(elementice_valor);

		Element elementdescuento1 = document.createElement(DetalleCompraConstantesFunciones.DESCUENTO1);
		elementdescuento1.appendChild(document.createTextNode(detallecompra.getdescuento1().toString().trim()));
		element.appendChild(elementdescuento1);

		Element elementdescuento2 = document.createElement(DetalleCompraConstantesFunciones.DESCUENTO2);
		elementdescuento2.appendChild(document.createTextNode(detallecompra.getdescuento2().toString().trim()));
		element.appendChild(elementdescuento2);

		Element elementserie = document.createElement(DetalleCompraConstantesFunciones.SERIE);
		elementserie.appendChild(document.createTextNode(detallecompra.getserie().trim()));
		element.appendChild(elementserie);

		Element elementlote = document.createElement(DetalleCompraConstantesFunciones.LOTE);
		elementlote.appendChild(document.createTextNode(detallecompra.getlote().trim()));
		element.appendChild(elementlote);

		Element elementfecha_elaboracion_lote = document.createElement(DetalleCompraConstantesFunciones.FECHAELABORACIONLOTE);
		elementfecha_elaboracion_lote.appendChild(document.createTextNode(detallecompra.getfecha_elaboracion_lote().toString().trim()));
		element.appendChild(elementfecha_elaboracion_lote);

		Element elementfecha_caducidad_lote = document.createElement(DetalleCompraConstantesFunciones.FECHACADUCIDADLOTE);
		elementfecha_caducidad_lote.appendChild(document.createTextNode(detallecompra.getfecha_caducidad_lote().toString().trim()));
		element.appendChild(elementfecha_caducidad_lote);

		Element elementcentrocosto_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(detallecompra.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcuentacontablecosto_descripcion = document.createElement(DetalleCompraConstantesFunciones.IDCUENTACONTABLECOSTO);
		elementcuentacontablecosto_descripcion.appendChild(document.createTextNode(detallecompra.getcuentacontablecosto_descripcion()));
		element.appendChild(elementcuentacontablecosto_descripcion);

		Element elementnumero_comprobante = document.createElement(DetalleCompraConstantesFunciones.NUMEROCOMPROBANTE);
		elementnumero_comprobante.appendChild(document.createTextNode(detallecompra.getnumero_comprobante().trim()));
		element.appendChild(elementnumero_comprobante);

		Element elementlote_cliente = document.createElement(DetalleCompraConstantesFunciones.LOTECLIENTE);
		elementlote_cliente.appendChild(document.createTextNode(detallecompra.getlote_cliente().trim()));
		element.appendChild(elementlote_cliente);
	}
	
	public void generarReporteGroupGenericoDetalleComprasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleCompra> detallecomprasSeleccionados=new ArrayList<DetalleCompra>();
		
		detallecomprasSeleccionados=this.getDetalleComprasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleCompra(detallecomprasSeleccionados);
		
		this.generarReporteDetalleCompras("Todos",detallecomprasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleCompra(ArrayList<DetalleCompra> detallecomprasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleCompra detallecompraAux:detallecomprasSeleccionados) {
				detallecompraAux.setsDetalleGeneralEntityReporte(detallecompraAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDCOMPRA)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getcompra_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDESTADODETALLEINVENTARIO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getestadodetalleinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDNOVEDADPRODUCTO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getnovedadproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_DISPONIBLE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getdisponible().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_COSTOIVA)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(detallecompraAux.getcosto_iva()));
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_SERIE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getserie());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getlote());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHAELABORACIONLOTE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallecompraAux.getfecha_elaboracion_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_FECHACADUCIDADLOTE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(detallecompraAux.getfecha_caducidad_lote()));
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_IDCUENTACONTABLECOSTO)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getcuentacontablecosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_NUMEROCOMPROBANTE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getnumero_comprobante());
				}
				 else if(sTipoSeleccionar.equals(DetalleCompraConstantesFunciones.LABEL_LOTECLIENTE)) {
					existe=true;
					detallecompraAux.setsDescripcionGeneralEntityReporte1(detallecompraAux.getlote_cliente());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleCompraConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleCompra(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleCompra=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleCompra=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=true;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=true;
			this.isVisibilidadCeldaEliminarDetalleCompra=true;
			this.isVisibilidadCeldaCancelarDetalleCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=true;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=true;
			this.isVisibilidadCeldaModificarDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
			this.isVisibilidadCeldaModificarDetalleCompra=true;
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
			this.isVisibilidadCeldaCancelarDetalleCompra=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleCompra=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleCompraJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleCompra=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=true;
		} else {
			this.actualizarEstadoPanelsDetalleCompra(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleCompra=false;
			//this.isVisibilidadCeldaVerFormDetalleCompra=false;
			this.isVisibilidadCeldaDuplicarDetalleCompra=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallecompraSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleCompra=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleCompra=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallecompraSessionBean.getEsGuardarRelacionado()) {
			if(!detallecompraSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;												
			}
			
			this.jButtonCerrarDetalleCompra.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleCompra=false;
		}
		
		if(!this.permiteMantenimiento(this.detallecompra)) {
			this.isVisibilidadCeldaActualizarDetalleCompra=false;
			this.isVisibilidadCeldaEliminarDetalleCompra=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleCompra() {
	}
	
	public void actualizarEstadoPanelsDetalleCompra(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(false);			
			}
			*/
			
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(false);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleCompra!=null) {
				this.jScrollPanelDatosEdicionDetalleCompra.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(true);			
			}
			*/
			
			if(this.jScrollPanelDatosDetalleCompra!=null) {
				this.jScrollPanelDatosDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleCompra!=null) {
				this.jPanelPaginacionDetalleCompra.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallecompraSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				/*
				if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
					this.jTabbedPaneBusquedasDetalleCompra.setVisible(false);				
				}
				*/
			}
			
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallecompraSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			/*
			if(this.jTabbedPaneBusquedasDetalleCompra!=null) {
				this.jTabbedPaneBusquedasDetalleCompra.setVisible(true);			
			}
			*/
			if(this.jPanelParametrosReportesDetalleCompra!=null) {
				this.jPanelParametrosReportesDetalleCompra.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaCompra(Boolean isParaCompra){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCompraNegation=!isParaCompra;

			this.isVisibilidadFK_IdBodega=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaCompra;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaCompraNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdBodega=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdBodega=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdBodega=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdBodega=isParaMesNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaMesNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaEstadoDetalleInventario(Boolean isParaEstadoDetalleInventario){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoDetalleInventarioNegation=!isParaEstadoDetalleInventario;

			this.isVisibilidadFK_IdBodega=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaEstadoDetalleInventario;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaEstadoDetalleInventarioNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaNovedadProducto(Boolean isParaNovedadProducto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaNovedadProductoNegation=!isParaNovedadProducto;

			this.isVisibilidadFK_IdBodega=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaNovedadProducto;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaNovedadProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdBodega=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}

	public void setVisibilidadBusquedasParaCuentaContableCosto(Boolean isParaCuentaContableCosto){
		//BYDAN_BUSQUEDAS
		/*
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoNegation=!isParaCuentaContableCosto;

			this.isVisibilidadFK_IdBodega=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdBodegaDetalleCompra);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCentroCostoDetalleCompra);}

			this.isVisibilidadFK_IdCompra=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdCompra) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCompraDetalleCompra);}

			this.isVisibilidadFK_IdCuentaContableCosto=isParaCuentaContableCosto;
			if(!this.isVisibilidadFK_IdCuentaContableCosto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdCuentaContableCostoDetalleCompra);}

			this.isVisibilidadFK_IdEstadoDetalleInventario=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdEstadoDetalleInventario) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdEstadoDetalleInventarioDetalleCompra);}

			this.isVisibilidadFK_IdNovedadProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdNovedadProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdNovedadProductoDetalleCompra);}

			this.isVisibilidadFK_IdProducto=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdProductoDetalleCompra);}

			this.isVisibilidadFK_IdUnidad=isParaCuentaContableCostoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleCompra.remove(jPanelFK_IdUnidadDetalleCompra);}
		}
		*/
	}
	
	
	
	

	public String registrarSesionDetalleCompraParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallecompraSessionBean==null) {
				detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallecompraSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallecompraFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleCompraConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleCompra(true);
			//productoSessionBean.setlidDetalleCompraActual(this.idDetalleCompraActual);

			detallecompraSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleCompra(true);
			detallecompraSessionBean.setlIdDetalleCompraActualForeignKey(this.idDetalleCompraActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleCompraParaBusquedaCentroCostos() throws Exception {
		Boolean isPaginaPopupCentroCosto=false;

		try {

			if(detallecompraSessionBean==null) {
				detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(centrocostoSessionBean==null) {
				centrocostoSessionBean=new CentroCostoSessionBean();
			}

			centrocostoSessionBean.setsPathNavegacionActual(detallecompraSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CentroCostoConstantesFunciones.SCLASSWEBTITULO);
			centrocostoSessionBean.setisPermiteRecargarInformacion(false);
			centrocostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCentroCosto=centrocostoSessionBean.getisPaginaPopup();
			centrocostoSessionBean.setisPaginaPopup(false);
			centrocostoSessionBean.setEstaModoBusqueda(true);
			centrocostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallecompraFuncionGeneral.setCombosCodigoDesdeBusquedaid_centro_costo(TO_REPLACE);");
			centrocostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCentroCosto(true);
			centrocostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCentroCosto(DetalleCompraConstantesFunciones.SNOMBREOPCION);
			//centrocostoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleCompra(true);
			//centrocostoSessionBean.setlidDetalleCompraActual(this.idDetalleCompraActual);

			detallecompraSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleCompra(true);
			detallecompraSessionBean.setlIdDetalleCompraActualForeignKey(this.idDetalleCompraActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionDetalleCompraParaBusquedaCuentaContableCostos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(detallecompraSessionBean==null) {
				detallecompraSessionBean=new DetalleCompraSessionBean();
			}

			if(cuentacontablecostoSessionBean==null) {
				cuentacontablecostoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostoSessionBean.setsPathNavegacionActual(detallecompraSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostoSessionBean.getisPaginaPopup();
			cuentacontablecostoSessionBean.setisPaginaPopup(false);
			cuentacontablecostoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostoSessionBean.setsFuncionBusquedaRapida("window.opener.detallecompraFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo(TO_REPLACE);");
			cuentacontablecostoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(DetalleCompraConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionDetalleCompra(true);
			//cuentacontableSessionBean.setlidDetalleCompraActual(this.idDetalleCompraActual);

			detallecompraSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleCompra(true);
			detallecompraSessionBean.setlIdDetalleCompraActualForeignKey(this.idDetalleCompraActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleCompraSessionBean detallecompraSessionBean=new DetalleCompraSessionBean();
		
		if(this.detallecompraSessionBean==null) {
			this.detallecompraSessionBean=new DetalleCompraSessionBean();
		}
		
		this.detallecompraSessionBean.setsUltimaBusquedaDetalleCompra(this.getsAccionBusqueda());
		this.detallecompraSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallecompraSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallecompraSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			detallecompraSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCompra")) {
			detallecompraSessionBean.setid_compra(this.getid_compraFK_IdCompra());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
			detallecompraSessionBean.setid_cuenta_contable_costo(this.getid_cuenta_contable_costoFK_IdCuentaContableCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			detallecompraSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallecompraSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleInventario")) {
			detallecompraSessionBean.setid_estado_detalle_inventario(this.getid_estado_detalle_inventarioFK_IdEstadoDetalleInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
			detallecompraSessionBean.setid_novedad_producto(this.getid_novedad_productoFK_IdNovedadProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			detallecompraSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallecompraSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallecompraSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallecompraSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleCompraSessionBean detallecompraSessionBean=new DetalleCompraSessionBean();
		
		if(this.detallecompraSessionBean==null) {
			this.detallecompraSessionBean=new DetalleCompraSessionBean();
		}
		
		if(this.detallecompraSessionBean.getsUltimaBusquedaDetalleCompra()!=null&&!this.detallecompraSessionBean.getsUltimaBusquedaDetalleCompra().equals("")) {
			this.setsAccionBusqueda(detallecompraSessionBean.getsUltimaBusquedaDetalleCompra());
			this.setiNumeroPaginacion(detallecompraSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallecompraSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallecompraSessionBean.getid_bodega());
				detallecompraSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(detallecompraSessionBean.getid_centro_costo());
				detallecompraSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCompra")) {
				this.setid_compraFK_IdCompra(detallecompraSessionBean.getid_compra());
				detallecompraSessionBean.setid_compra(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCosto")) {
				this.setid_cuenta_contable_costoFK_IdCuentaContableCosto(detallecompraSessionBean.getid_cuenta_contable_costo());
				detallecompraSessionBean.setid_cuenta_contable_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(detallecompraSessionBean.getid_ejercicio());
				detallecompraSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallecompraSessionBean.getid_empresa());
				detallecompraSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoDetalleInventario")) {
				this.setid_estado_detalle_inventarioFK_IdEstadoDetalleInventario(detallecompraSessionBean.getid_estado_detalle_inventario());
				detallecompraSessionBean.setid_estado_detalle_inventario(1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNovedadProducto")) {
				this.setid_novedad_productoFK_IdNovedadProducto(detallecompraSessionBean.getid_novedad_producto());
				detallecompraSessionBean.setid_novedad_producto(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(detallecompraSessionBean.getid_periodo());
				detallecompraSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallecompraSessionBean.getid_producto());
				detallecompraSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallecompraSessionBean.getid_sucursal());
				detallecompraSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallecompraSessionBean.getid_unidad());
				detallecompraSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallecompraSessionBean.setsUltimaBusquedaDetalleCompra("");
		this.detallecompraSessionBean.setiNumeroPaginacion(DetalleCompraConstantesFunciones.INUMEROPAGINACION);
		this.detallecompraSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleCompra(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleCompra() {
		this.updateBorderResaltarBusquedasFormularioDetalleCompra();
		this.updateVisibilidadBusquedasFormularioDetalleCompra();
		this.updateHabilitarBusquedasFormularioDetalleCompra();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleCompra() {					
	//BYDAN_BUSQUEDAS
	/*	
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleCompra.getComponents().length>0) {
	

		if(this.detallecompraConstantesFunciones.resaltarFK_IdBodegaDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdBodegaDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdBodegaDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdCentroCostoDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCentroCostoDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdCompraDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCompraDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCompraDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdNovedadProductoDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdNovedadProductoDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdProductoDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdProductoDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdProductoDetalleCompra);
			}
		}

		if(this.detallecompraConstantesFunciones.resaltarFK_IdUnidadDetalleCompra!=null) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdUnidadDetalleCompra);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdUnidadDetalleCompra);
			}
		}
	}	
	*/
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleCompra() {
	//BYDAN_BUSQUEDAS
	/*
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleCompra.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdBodegaDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdBodegaDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdBodegaDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdCentroCostoDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdCentroCostoDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCompraDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdCompraDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdCompraDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdCuentaContableCostoDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdEstadoDetalleInventarioDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdEstadoDetalleInventarioDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdNovedadProductoDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdNovedadProductoDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdProductoDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdProductoDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdProductoDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdUnidadDetalleCompra);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallecompraConstantesFunciones.mostrarFK_IdUnidadDetalleCompra);
			if(!this.detallecompraConstantesFunciones.mostrarFK_IdUnidadDetalleCompra && index>-1) {
				this.jTabbedPaneBusquedasDetalleCompra.remove(index);
			}
	}	
	*/
	}
	
	public void updateHabilitarBusquedasFormularioDetalleCompra() {
	/*
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleCompra.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdBodegaDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdBodegaDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdBodegaDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdCentroCostoDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdCentroCostoDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCompraDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdCompraDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdCompraDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdCuentaContableCostoDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdCuentaContableCostoDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdEstadoDetalleInventarioDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdEstadoDetalleInventarioDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdNovedadProductoDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdNovedadProductoDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdProductoDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdProductoDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdProductoDetalleCompra);
			}

			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdUnidadDetalleCompra);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallecompraConstantesFunciones.activarFK_IdUnidadDetalleCompra);
				this.jTabbedPaneBusquedasDetalleCompra.setEnabledAt(index,this.detallecompraConstantesFunciones.activarFK_IdUnidadDetalleCompra);
			}
		}	
	*/
	}
	
	
	public void resaltarPanelBusquedaDetalleCompra(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		/*
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdBodegaDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdBodegaDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdBodegaDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCentroCostoDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdCentroCostoDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCentroCostoDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCompra")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCompraDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdCompraDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCompraDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCosto")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdCuentaContableCostoDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdCuentaContableCostoDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdCuentaContableCostoDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoDetalleInventario")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdEstadoDetalleInventarioDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdEstadoDetalleInventarioDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdEstadoDetalleInventarioDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNovedadProducto")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdNovedadProductoDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdNovedadProductoDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdNovedadProductoDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdProductoDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdProductoDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdProductoDetalleCompra);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleCompra.indexOfComponent(this.jPanelFK_IdUnidadDetalleCompra);

			this.jTabbedPaneBusquedasDetalleCompra.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleCompra.getComponent(index);

			this.detallecompraConstantesFunciones.setResaltarFK_IdUnidadDetalleCompra(resaltar);

			jPanel.setBorder(this.detallecompraConstantesFunciones.resaltarFK_IdUnidadDetalleCompra);
			existe=true;
		}
		*/

		if(existe) {
			/*
			this.jTtoolBarDetalleCompra.setBorder(resaltar);
			*/
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleCompra() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleCompra();
		this.updateVisibilidadResaltarControlesFormularioDetalleCompra();
		this.updateHabilitarResaltarControlesFormularioDetalleCompra();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleCompra() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallecompraConstantesFunciones.resaltaridDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltaridDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_compraDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_compraDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_empresaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_empresaDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_sucursalDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_sucursalDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_ejercicioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_ejercicioDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_periodoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_periodoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_anioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_anioDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_mesDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_mesDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_estado_detalle_inventarioDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_bodegaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_bodegaDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_productoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_productoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_unidadDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_unidadDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltardescripcionDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltardescripcionDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_novedad_productoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_novedad_productoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarcantidadDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarcantidadDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltardescuentoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuentoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltardescuentoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarcosto_unitarioDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarcosto_unitarioDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarivaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarivaDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltariva_valorDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltariva_valorDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarcosto_totalDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarcosto_totalDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltardisponibleDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltardisponibleDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarcosto_ivaDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxcosto_ivaDetalleCompra.setBorderPainted(true);this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxcosto_ivaDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarcosto_ivaDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltariceDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiceDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltariceDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarice_valorDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldice_valorDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarice_valorDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltardescuento1DetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento1DetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltardescuento1DetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltardescuento2DetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento2DetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltardescuento2DetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarserieDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarserieDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarloteDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarloteDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarfecha_elaboracion_loteDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarfecha_elaboracion_loteDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarfecha_caducidad_loteDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarfecha_caducidad_loteDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_centro_costoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_centro_costoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarid_cuenta_contable_costoDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarid_cuenta_contable_costoDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarnumero_comprobanteDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldnumero_comprobanteDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarnumero_comprobanteDetalleCompra);}
		if(this.detallecompraConstantesFunciones.resaltarlote_clienteDetalleCompra!=null && this.jInternalFrameDetalleFormDetalleCompra!=null) {this.jInternalFrameDetalleFormDetalleCompra.jTextFieldlote_clienteDetalleCompra.setBorder(this.detallecompraConstantesFunciones.resaltarlote_clienteDetalleCompra);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleCompra() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
	
		//this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostraridDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelidDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostraridDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_compraDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_compraDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_compraDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_empresaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_empresaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_empresaDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_sucursalDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_sucursalDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_sucursalDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_ejercicioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_ejercicioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_ejercicioDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_periodoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_periodoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_periodoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_anioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_anioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_anioDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_mesDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_mesDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_mesDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_estado_detalle_inventarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_estado_detalle_inventarioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_estado_detalle_inventarioDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_bodegaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_bodegaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_bodegaDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_productoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_productoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_productoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_productoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_unidadDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_unidadDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_unidadDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescripcionDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneldescripcionDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescripcionDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_novedad_productoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_novedad_productoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_novedad_productoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcantidadDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelcantidadDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcantidadDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuentoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuentoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneldescuentoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuentoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_unitarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelcosto_unitarioDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_unitarioDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarivaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelivaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarivaDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrariva_valorDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneliva_valorDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrariva_valorDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_totalDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelcosto_totalDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_totalDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardisponibleDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneldisponibleDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardisponibleDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxcosto_ivaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_ivaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelcosto_ivaDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarcosto_ivaDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiceDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrariceDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneliceDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrariceDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldice_valorDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarice_valorDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelice_valorDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarice_valorDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento1DetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuento1DetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneldescuento1DetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuento1DetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento2DetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuento2DetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPaneldescuento2DetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrardescuento2DetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarserieDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelserieDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarserieDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarloteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelloteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarloteDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarfecha_elaboracion_loteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelfecha_elaboracion_loteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarfecha_elaboracion_loteDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarfecha_caducidad_loteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelfecha_caducidad_loteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarfecha_caducidad_loteDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_centro_costoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_centro_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_centro_costoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_centro_costoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_cuenta_contable_costoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelid_cuenta_contable_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_cuenta_contable_costoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarid_cuenta_contable_costoDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldnumero_comprobanteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarnumero_comprobanteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanelnumero_comprobanteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarnumero_comprobanteDetalleCompra);
		//this.jInternalFrameDetalleFormDetalleCompra.jTextFieldlote_clienteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarlote_clienteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jPanellote_clienteDetalleCompra.setVisible(this.detallecompraConstantesFunciones.mostrarlote_clienteDetalleCompra);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleCompra() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleCompra==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleCompra!=null) {
	
		this.jInternalFrameDetalleFormDetalleCompra.jLabelidDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activaridDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_compraDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_compraDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_empresaDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_empresaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_sucursalDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_sucursalDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_ejercicioDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_ejercicioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_periodoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_periodoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_anioDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_anioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_mesDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_mesDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_estado_detalle_inventarioDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_estado_detalle_inventarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_bodegaDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_bodegaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_productoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_productoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_productoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_productoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_unidadDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_unidadDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextAreadescripcionDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activardescripcionDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_novedad_productoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_novedad_productoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcantidadDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarcantidadDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuentoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activardescuentoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_unitarioDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarcosto_unitarioDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldivaDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarivaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiva_valorDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activariva_valorDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldcosto_totalDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarcosto_totalDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddisponibleDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activardisponibleDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jCheckBoxcosto_ivaDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarcosto_ivaDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldiceDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activariceDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldice_valorDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarice_valorDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento1DetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activardescuento1DetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFielddescuento2DetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activardescuento2DetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldserieDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarserieDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldloteDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarloteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_elaboracion_loteDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarfecha_elaboracion_loteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jDateChooserfecha_caducidad_loteDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarfecha_caducidad_loteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_centro_costoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_centro_costoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_centro_costoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_centro_costoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jComboBoxid_cuenta_contable_costoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_cuenta_contable_costoDetalleCompra);
			this.jInternalFrameDetalleFormDetalleCompra.jButtonid_cuenta_contable_costoDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarid_cuenta_contable_costoDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldnumero_comprobanteDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarnumero_comprobanteDetalleCompra);
		this.jInternalFrameDetalleFormDetalleCompra.jTextFieldlote_clienteDetalleCompra.setEnabled(this.detallecompraConstantesFunciones.activarlote_clienteDetalleCompra);
		}
	}
	
		
}