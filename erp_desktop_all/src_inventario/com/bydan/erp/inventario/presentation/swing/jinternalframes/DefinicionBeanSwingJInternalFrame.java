/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.inventario.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.inventario.util.DefinicionConstantesFunciones;
import com.bydan.erp.inventario.util.DefinicionParameterReturnGeneral;
//import com.bydan.erp.inventario.util.DefinicionParameterGeneral;
//import com.bydan.erp.inventario.presentation.report.source.DefinicionBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.inventario.resources.reportes.AuxiliarReportes;


import com.bydan.erp.inventario.util.*;
import com.bydan.erp.inventario.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.inventario.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DefinicionBeanSwingJInternalFrame extends DefinicionJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DefinicionBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Definicion> definicionValidator = new ClassValidator<Definicion>(Definicion.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Definicion definicion;	
	public Definicion definicionAux;
	public Definicion definicionAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Definicion definicionTotales;
	public Long idDefinicionActual;
	public Long iIdNuevoDefinicion=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboTipoDefinicion="";

	public List<TipoDefinicion> tipodefinicionsForeignKey;

	public List<TipoDefinicion> gettipodefinicionsForeignKey() {
		return tipodefinicionsForeignKey;
	}

	public void settipodefinicionsForeignKey(List<TipoDefinicion> tipodefinicionsForeignKey) {
		this.tipodefinicionsForeignKey = tipodefinicionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDefinicion tipodefinicionForeignKey;

	public TipoDefinicion gettipodefinicionForeignKey() {
		return tipodefinicionForeignKey;
	}

	public void settipodefinicionForeignKey(TipoDefinicion tipodefinicionForeignKey) {
		this.tipodefinicionForeignKey = tipodefinicionForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboTipoIvaItem="";

	public List<TipoIvaItem> tipoivaitemsForeignKey;

	public List<TipoIvaItem> gettipoivaitemsForeignKey() {
		return tipoivaitemsForeignKey;
	}

	public void settipoivaitemsForeignKey(List<TipoIvaItem> tipoivaitemsForeignKey) {
		this.tipoivaitemsForeignKey = tipoivaitemsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoIvaItem tipoivaitemForeignKey;

	public TipoIvaItem gettipoivaitemForeignKey() {
		return tipoivaitemForeignKey;
	}

	public void settipoivaitemForeignKey(TipoIvaItem tipoivaitemForeignKey) {
		this.tipoivaitemForeignKey = tipoivaitemForeignKey;
	}

	public String sFinalQueryComboTipoGlobalCliente="";

	public List<TipoGlobalCliente> tipoglobalclientesForeignKey;

	public List<TipoGlobalCliente> gettipoglobalclientesForeignKey() {
		return tipoglobalclientesForeignKey;
	}

	public void settipoglobalclientesForeignKey(List<TipoGlobalCliente> tipoglobalclientesForeignKey) {
		this.tipoglobalclientesForeignKey = tipoglobalclientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoGlobalCliente tipoglobalclienteForeignKey;

	public TipoGlobalCliente gettipoglobalclienteForeignKey() {
		return tipoglobalclienteForeignKey;
	}

	public void settipoglobalclienteForeignKey(TipoGlobalCliente tipoglobalclienteForeignKey) {
		this.tipoglobalclienteForeignKey = tipoglobalclienteForeignKey;
	}

	public String sFinalQueryComboTipoCosteoDefinicion="";

	public List<TipoCosteoDefinicion> tipocosteodefinicionsForeignKey;

	public List<TipoCosteoDefinicion> gettipocosteodefinicionsForeignKey() {
		return tipocosteodefinicionsForeignKey;
	}

	public void settipocosteodefinicionsForeignKey(List<TipoCosteoDefinicion> tipocosteodefinicionsForeignKey) {
		this.tipocosteodefinicionsForeignKey = tipocosteodefinicionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCosteoDefinicion tipocosteodefinicionForeignKey;

	public TipoCosteoDefinicion gettipocosteodefinicionForeignKey() {
		return tipocosteodefinicionForeignKey;
	}

	public void settipocosteodefinicionForeignKey(TipoCosteoDefinicion tipocosteodefinicionForeignKey) {
		this.tipocosteodefinicionForeignKey = tipocosteodefinicionForeignKey;
	}

	public String sFinalQueryComboTipoCostoDefinicion="";

	public List<TipoCostoDefinicion> tipocostodefinicionsForeignKey;

	public List<TipoCostoDefinicion> gettipocostodefinicionsForeignKey() {
		return tipocostodefinicionsForeignKey;
	}

	public void settipocostodefinicionsForeignKey(List<TipoCostoDefinicion> tipocostodefinicionsForeignKey) {
		this.tipocostodefinicionsForeignKey = tipocostodefinicionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCostoDefinicion tipocostodefinicionForeignKey;

	public TipoCostoDefinicion gettipocostodefinicionForeignKey() {
		return tipocostodefinicionForeignKey;
	}

	public void settipocostodefinicionForeignKey(TipoCostoDefinicion tipocostodefinicionForeignKey) {
		this.tipocostodefinicionForeignKey = tipocostodefinicionForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTipoTributario="";

	public List<TipoTributario> tipotributariosForeignKey;

	public List<TipoTributario> gettipotributariosForeignKey() {
		return tipotributariosForeignKey;
	}

	public void settipotributariosForeignKey(List<TipoTributario> tipotributariosForeignKey) {
		this.tipotributariosForeignKey = tipotributariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTributario tipotributarioForeignKey;

	public TipoTributario gettipotributarioForeignKey() {
		return tipotributarioForeignKey;
	}

	public void settipotributarioForeignKey(TipoTributario tipotributarioForeignKey) {
		this.tipotributarioForeignKey = tipotributarioForeignKey;
	}

	public String sFinalQueryComboTipoRetencion="";

	public List<TipoRetencion> tiporetencionsForeignKey;

	public List<TipoRetencion> gettiporetencionsForeignKey() {
		return tiporetencionsForeignKey;
	}

	public void settiporetencionsForeignKey(List<TipoRetencion> tiporetencionsForeignKey) {
		this.tiporetencionsForeignKey = tiporetencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionForeignKey;

	public TipoRetencion gettiporetencionForeignKey() {
		return tiporetencionForeignKey;
	}

	public void settiporetencionForeignKey(TipoRetencion tiporetencionForeignKey) {
		this.tiporetencionForeignKey = tiporetencionForeignKey;
	}

	public String sFinalQueryComboTipoDocumento="";

	public List<TipoDocumento> tipodocumentosForeignKey;

	public List<TipoDocumento> gettipodocumentosForeignKey() {
		return tipodocumentosForeignKey;
	}

	public void settipodocumentosForeignKey(List<TipoDocumento> tipodocumentosForeignKey) {
		this.tipodocumentosForeignKey = tipodocumentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDocumento tipodocumentoForeignKey;

	public TipoDocumento gettipodocumentoForeignKey() {
		return tipodocumentoForeignKey;
	}

	public void settipodocumentoForeignKey(TipoDocumento tipodocumentoForeignKey) {
		this.tipodocumentoForeignKey = tipodocumentoForeignKey;
	}

	public String sFinalQueryComboLibroContable="";

	public List<LibroContable> librocontablesForeignKey;

	public List<LibroContable> getlibrocontablesForeignKey() {
		return librocontablesForeignKey;
	}

	public void setlibrocontablesForeignKey(List<LibroContable> librocontablesForeignKey) {
		this.librocontablesForeignKey = librocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public LibroContable librocontableForeignKey;

	public LibroContable getlibrocontableForeignKey() {
		return librocontableForeignKey;
	}

	public void setlibrocontableForeignKey(LibroContable librocontableForeignKey) {
		this.librocontableForeignKey = librocontableForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDefinicion;
	public Boolean isPermisoNuevoDefinicion;
	public Boolean isPermisoActualizarDefinicion;
	public Boolean isPermisoActualizarOriginalDefinicion;
	public Boolean isPermisoEliminarDefinicion;
	public Boolean isPermisoGuardarCambiosDefinicion;
	public Boolean isPermisoConsultaDefinicion;
	public Boolean isPermisoBusquedaDefinicion;
	public Boolean isPermisoReporteDefinicion;
	public Boolean isPermisoPaginacionMedioDefinicion;
	public Boolean isPermisoPaginacionAltoDefinicion;
	public Boolean isPermisoPaginacionTodoDefinicion;
	public Boolean isPermisoCopiarDefinicion;
	public Boolean isPermisoVerFormDefinicion;
	public Boolean isPermisoDuplicarDefinicion;
	public Boolean isPermisoOrdenDefinicion;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DefinicionParameterReturnGeneral definicionReturnGeneral;
	public DefinicionParameterReturnGeneral definicionParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDefinicion=false;
	public Boolean esParaAccionDesdeFormularioDefinicion=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DefinicionSessionBeanAdditional definicionSessionBeanAdditional=null;
	
	public DefinicionSessionBeanAdditional getDefinicionSessionBeanAdditional() {
		return this.definicionSessionBeanAdditional;
	}
	
	public void setDefinicionSessionBeanAdditional(DefinicionSessionBeanAdditional definicionSessionBeanAdditional) {
		try {
			this.definicionSessionBeanAdditional=definicionSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DefinicionBeanSwingJInternalFrameAdditional definicionBeanSwingJInternalFrameAdditional=null;
	//public class DefinicionBeanSwingJInternalFrame
	
	public DefinicionBeanSwingJInternalFrameAdditional getDefinicionBeanSwingJInternalFrameAdditional() {
		return this.definicionBeanSwingJInternalFrameAdditional;
	}
	
	public void setDefinicionBeanSwingJInternalFrameAdditional(DefinicionBeanSwingJInternalFrameAdditional definicionBeanSwingJInternalFrameAdditional) {
		try {
			this.definicionBeanSwingJInternalFrameAdditional=definicionBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DefinicionLogic definicionLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Definicion definicionBean;
	public DefinicionConstantesFunciones definicionConstantesFunciones;
	//public DefinicionParameterReturnGeneral definicionReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public ModuloLogic moduloLogic;
	public TipoDefinicionLogic tipodefinicionLogic;
	public TransaccionLogic transaccionLogic;
	public SucursalLogic sucursalLogic;
	public TipoIvaItemLogic tipoivaitemLogic;
	public TipoGlobalClienteLogic tipoglobalclienteLogic;
	public TipoCosteoDefinicionLogic tipocosteodefinicionLogic;
	public TipoCostoDefinicionLogic tipocostodefinicionLogic;
	public FormatoLogic formatoLogic;
	public TipoTributarioLogic tipotributarioLogic;
	public TipoRetencionLogic tiporetencionLogic;
	public TipoDocumentoLogic tipodocumentoLogic;
	public LibroContableLogic librocontableLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	public CuentaContableLogic cuentacontableLogic;
	
	//PARAMETROS
	
	
	//public List<Definicion> definicions;	
	//public List<Definicion> definicionsEliminados;
	//public List<Definicion> definicionsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDefinicion=false;
	public Boolean isVisibilidadCeldaDuplicarDefinicion=true;
	public Boolean isVisibilidadCeldaCopiarDefinicion=true;
	public Boolean isVisibilidadCeldaVerFormDefinicion=true;
	public Boolean isVisibilidadCeldaOrdenDefinicion=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDefinicion=false;
	public Boolean isVisibilidadCeldaModificarDefinicion=false;
	public Boolean isVisibilidadCeldaActualizarDefinicion=false;
	public Boolean isVisibilidadCeldaEliminarDefinicion=false;
	public Boolean isVisibilidadCeldaCancelarDefinicion=false;
	public Boolean isVisibilidadCeldaGuardarDefinicion=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDefinicion=false;	
	
	
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdLibroContable=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCosteoDefinicion=false;
	public Boolean isVisibilidadFK_IdTipoCostoDefinicion=false;
	public Boolean isVisibilidadFK_IdTipoDefinicion=false;
	public Boolean isVisibilidadFK_IdTipoDocumento=false;
	public Boolean isVisibilidadFK_IdTipoGlobalCliente=false;
	public Boolean isVisibilidadFK_IdTipoIvaItem=false;
	public Boolean isVisibilidadFK_IdTipoRetencion=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTipoTributario=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	
	public Long getiIdNuevoDefinicion() {
		return this.iIdNuevoDefinicion;
	}

	public void setiIdNuevoDefinicion(Long iIdNuevoDefinicion) {
		this.iIdNuevoDefinicion = iIdNuevoDefinicion;
	}
	
	public Long getidDefinicionActual() {
		return this.idDefinicionActual;
	}

	public void setidDefinicionActual(Long idDefinicionActual) {
		this.idDefinicionActual = idDefinicionActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Definicion getdefinicion() {
		return this.definicion;
	}

	public void setdefinicion(Definicion definicion) {
		this.definicion = definicion;
	}
	
	public Definicion getdefinicionAux() {
		return this.definicionAux;
	}

	public void setdefinicionAux(Definicion definicionAux) {
		this.definicionAux = definicionAux;
	}				
	
	public Definicion getdefinicionAnterior() {
		return this.definicionAnterior;
	}

	public void setdefinicionAnterior(Definicion definicionAnterior) {
		this.definicionAnterior = definicionAnterior;
	}	
	
	public Definicion getdefinicionTotales() {
		return this.definicionTotales;
	}

	public void setdefinicionTotales(Definicion definicionTotales) {
		this.definicionTotales = definicionTotales;
	}	
	
	public Definicion getdefinicionBean() {
		return this.definicionBean;
	}

	public void setdefinicionBean(Definicion definicionBean) {
		this.definicionBean = definicionBean;
	}	
	
	public DefinicionParameterReturnGeneral getdefinicionReturnGeneral() {
		return this.definicionReturnGeneral;
	}

	public void setdefinicionReturnGeneral(DefinicionParameterReturnGeneral definicionReturnGeneral) {
		this.definicionReturnGeneral = definicionReturnGeneral;
	}	
	
	
	public Long id_cuenta_contableFK_IdCuentaContable=null;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_formatoFK_IdFormato=null;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_libro_contableFK_IdLibroContable=null;

	public Long getid_libro_contableFK_IdLibroContable() {
		return this.id_libro_contableFK_IdLibroContable;
	}

	public void setid_libro_contableFK_IdLibroContable(Long id_libro_contableFK_IdLibroContable) {
		this.id_libro_contableFK_IdLibroContable = id_libro_contableFK_IdLibroContable;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion=-1L;

	public Long getid_tipo_costeo_definicionFK_IdTipoCosteoDefinicion() {
		return this.id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion;
	}

	public void setid_tipo_costeo_definicionFK_IdTipoCosteoDefinicion(Long id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion) {
		this.id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion = id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion;
	}

	public Long id_tipo_costo_definicionFK_IdTipoCostoDefinicion=-1L;

	public Long getid_tipo_costo_definicionFK_IdTipoCostoDefinicion() {
		return this.id_tipo_costo_definicionFK_IdTipoCostoDefinicion;
	}

	public void setid_tipo_costo_definicionFK_IdTipoCostoDefinicion(Long id_tipo_costo_definicionFK_IdTipoCostoDefinicion) {
		this.id_tipo_costo_definicionFK_IdTipoCostoDefinicion = id_tipo_costo_definicionFK_IdTipoCostoDefinicion;
	}

	public Long id_tipo_definicionFK_IdTipoDefinicion=-1L;

	public Long getid_tipo_definicionFK_IdTipoDefinicion() {
		return this.id_tipo_definicionFK_IdTipoDefinicion;
	}

	public void setid_tipo_definicionFK_IdTipoDefinicion(Long id_tipo_definicionFK_IdTipoDefinicion) {
		this.id_tipo_definicionFK_IdTipoDefinicion = id_tipo_definicionFK_IdTipoDefinicion;
	}

	public Long id_tipo_documentoFK_IdTipoDocumento=null;

	public Long getid_tipo_documentoFK_IdTipoDocumento() {
		return this.id_tipo_documentoFK_IdTipoDocumento;
	}

	public void setid_tipo_documentoFK_IdTipoDocumento(Long id_tipo_documentoFK_IdTipoDocumento) {
		this.id_tipo_documentoFK_IdTipoDocumento = id_tipo_documentoFK_IdTipoDocumento;
	}

	public Long id_tipo_global_clienteFK_IdTipoGlobalCliente=-1L;

	public Long getid_tipo_global_clienteFK_IdTipoGlobalCliente() {
		return this.id_tipo_global_clienteFK_IdTipoGlobalCliente;
	}

	public void setid_tipo_global_clienteFK_IdTipoGlobalCliente(Long id_tipo_global_clienteFK_IdTipoGlobalCliente) {
		this.id_tipo_global_clienteFK_IdTipoGlobalCliente = id_tipo_global_clienteFK_IdTipoGlobalCliente;
	}

	public Long id_tipo_iva_itemFK_IdTipoIvaItem=-1L;

	public Long getid_tipo_iva_itemFK_IdTipoIvaItem() {
		return this.id_tipo_iva_itemFK_IdTipoIvaItem;
	}

	public void setid_tipo_iva_itemFK_IdTipoIvaItem(Long id_tipo_iva_itemFK_IdTipoIvaItem) {
		this.id_tipo_iva_itemFK_IdTipoIvaItem = id_tipo_iva_itemFK_IdTipoIvaItem;
	}

	public Long id_tipo_retencionFK_IdTipoRetencion=null;

	public Long getid_tipo_retencionFK_IdTipoRetencion() {
		return this.id_tipo_retencionFK_IdTipoRetencion;
	}

	public void setid_tipo_retencionFK_IdTipoRetencion(Long id_tipo_retencionFK_IdTipoRetencion) {
		this.id_tipo_retencionFK_IdTipoRetencion = id_tipo_retencionFK_IdTipoRetencion;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_tipo_tributarioFK_IdTipoTributario=null;

	public Long getid_tipo_tributarioFK_IdTipoTributario() {
		return this.id_tipo_tributarioFK_IdTipoTributario;
	}

	public void setid_tipo_tributarioFK_IdTipoTributario(Long id_tipo_tributarioFK_IdTipoTributario) {
		this.id_tipo_tributarioFK_IdTipoTributario = id_tipo_tributarioFK_IdTipoTributario;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DefinicionLogic getDefinicionLogic()	{		
		return definicionLogic;
	}

	public void setDefinicionLogic(DefinicionLogic definicionLogic) {
		this.definicionLogic = definicionLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDefinicion() {
		return isEsNuevoDefinicion;
	}

	public void setIsEsNuevoDefinicion(Boolean isEsNuevoDefinicion) {
		this.isEsNuevoDefinicion = isEsNuevoDefinicion;
	}

	public Boolean getEsParaAccionDesdeFormularioDefinicion() {
		return esParaAccionDesdeFormularioDefinicion;
	}
	
	public void setEsParaAccionDesdeFormularioDefinicion(Boolean esParaAccionDesdeFormularioDefinicion) {
		this.esParaAccionDesdeFormularioDefinicion = esParaAccionDesdeFormularioDefinicion;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(definicionSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(definicionSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDefinicionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodefinicionsForeignKey=new ArrayList<TipoDefinicion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDefinicionLogic tipodefinicionLogic=new TipoDefinicionLogic();

			//tipodefinicionLogic.getTipoDefinicionDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDefinicion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodefinicionLogic.getTipoDefinicionDataAccess().setIsForForeingKeyData(true);

					tipodefinicionLogic.getTodosTipoDefinicionsWithConnection(sFinalQuery,new Pagination());

					this.tipodefinicionsForeignKey=tipodefinicionLogic.getTipoDefinicions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDefinicion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodefinicionLogic.getEntityWithConnection(definicionSessionBean.getlidTipoDefinicionActual());
					this.tipodefinicionsForeignKey.add(tipodefinicionLogic.getTipoDefinicion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(definicionSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(definicionSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoIvaItemsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoivaitemsForeignKey=new ArrayList<TipoIvaItem>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoIvaItemLogic tipoivaitemLogic=new TipoIvaItemLogic();

			//tipoivaitemLogic.getTipoIvaItemDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoIvaItem()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoivaitemLogic.getTipoIvaItemDataAccess().setIsForForeingKeyData(true);

					tipoivaitemLogic.getTodosTipoIvaItemsWithConnection(sFinalQuery,new Pagination());

					this.tipoivaitemsForeignKey=tipoivaitemLogic.getTipoIvaItems();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoIvaItem(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoivaitemLogic.getEntityWithConnection(definicionSessionBean.getlidTipoIvaItemActual());
					this.tipoivaitemsForeignKey.add(tipoivaitemLogic.getTipoIvaItem());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoGlobalClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoglobalclientesForeignKey=new ArrayList<TipoGlobalCliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoGlobalClienteLogic tipoglobalclienteLogic=new TipoGlobalClienteLogic();

			//tipoglobalclienteLogic.getTipoGlobalClienteDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoGlobalCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoglobalclienteLogic.getTipoGlobalClienteDataAccess().setIsForForeingKeyData(true);

					tipoglobalclienteLogic.getTodosTipoGlobalClientesWithConnection(sFinalQuery,new Pagination());

					this.tipoglobalclientesForeignKey=tipoglobalclienteLogic.getTipoGlobalClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoGlobalCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoglobalclienteLogic.getEntityWithConnection(definicionSessionBean.getlidTipoGlobalClienteActual());
					this.tipoglobalclientesForeignKey.add(tipoglobalclienteLogic.getTipoGlobalCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCosteoDefinicionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocosteodefinicionsForeignKey=new ArrayList<TipoCosteoDefinicion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCosteoDefinicionLogic tipocosteodefinicionLogic=new TipoCosteoDefinicionLogic();

			//tipocosteodefinicionLogic.getTipoCosteoDefinicionDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteoDefinicion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocosteodefinicionLogic.getTipoCosteoDefinicionDataAccess().setIsForForeingKeyData(true);

					tipocosteodefinicionLogic.getTodosTipoCosteoDefinicionsWithConnection(sFinalQuery,new Pagination());

					this.tipocosteodefinicionsForeignKey=tipocosteodefinicionLogic.getTipoCosteoDefinicions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCosteoDefinicion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocosteodefinicionLogic.getEntityWithConnection(definicionSessionBean.getlidTipoCosteoDefinicionActual());
					this.tipocosteodefinicionsForeignKey.add(tipocosteodefinicionLogic.getTipoCosteoDefinicion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCostoDefinicionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocostodefinicionsForeignKey=new ArrayList<TipoCostoDefinicion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCostoDefinicionLogic tipocostodefinicionLogic=new TipoCostoDefinicionLogic();

			//tipocostodefinicionLogic.getTipoCostoDefinicionDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCostoDefinicion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocostodefinicionLogic.getTipoCostoDefinicionDataAccess().setIsForForeingKeyData(true);

					tipocostodefinicionLogic.getTodosTipoCostoDefinicionsWithConnection(sFinalQuery,new Pagination());

					this.tipocostodefinicionsForeignKey=tipocostodefinicionLogic.getTipoCostoDefinicions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCostoDefinicion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocostodefinicionLogic.getEntityWithConnection(definicionSessionBean.getlidTipoCostoDefinicionActual());
					this.tipocostodefinicionsForeignKey.add(tipocostodefinicionLogic.getTipoCostoDefinicion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(definicionSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTributariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTributarioLogic tipotributarioLogic=new TipoTributarioLogic();

			//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

					tipotributarioLogic.getTodosTipoTributariosWithConnection(sFinalQuery,new Pagination());

					this.tipotributariosForeignKey=tipotributarioLogic.getTipoTributarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTributario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotributarioLogic.getEntityWithConnection(definicionSessionBean.getlidTipoTributarioActual());
					this.tipotributariosForeignKey.add(tipotributarioLogic.getTipoTributario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionsForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(definicionSessionBean.getlidTipoRetencionActual());
					this.tiporetencionsForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDocumentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDocumentoLogic tipodocumentoLogic=new TipoDocumentoLogic();

			//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

					tipodocumentoLogic.getTodosTipoDocumentosWithConnection(sFinalQuery,new Pagination());

					this.tipodocumentosForeignKey=tipodocumentoLogic.getTipoDocumentos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDocumento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodocumentoLogic.getEntityWithConnection(definicionSessionBean.getlidTipoDocumentoActual());
					this.tipodocumentosForeignKey.add(tipodocumentoLogic.getTipoDocumento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosLibroContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.librocontablesForeignKey=new ArrayList<LibroContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			LibroContableLogic librocontableLogic=new LibroContableLogic();

			//librocontableLogic.getLibroContableDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionLibroContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//librocontableLogic.getLibroContableDataAccess().setIsForForeingKeyData(true);

					librocontableLogic.getTodosLibroContablesWithConnection(sFinalQuery,new Pagination());

					this.librocontablesForeignKey=librocontableLogic.getLibroContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaLibroContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					librocontableLogic.getEntityWithConnection(definicionSessionBean.getlidLibroContableActual());
					this.librocontablesForeignKey.add(librocontableLogic.getLibroContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(definicionSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(definicionSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDefinicion.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDefinicionGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDefinicionGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDefinicionGenerico!=null && jComboBoxid_empresaDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_empresaDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloDefinicion.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloDefinicionGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloDefinicionGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloDefinicionGenerico!=null && jComboBoxid_moduloDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_moduloDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDefinicionForeignKey(Long idTipoDefinicionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDefinicion  tipodefinicionTemp=null;

			for(TipoDefinicion tipodefinicionAux:tipodefinicionsForeignKey) {
				if(tipodefinicionAux.getId()!=null && tipodefinicionAux.getId().equals(idTipoDefinicionSeleccionado)) {
					tipodefinicionTemp=tipodefinicionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodefinicionTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoDefinicion(tipodefinicionTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setSelectedItem(tipodefinicionTemp);
					}
				} else {
					//jComboBoxid_tipo_definicionDefinicion.setSelectedItem(tipodefinicionTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodefinicionTemp!=null && jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion!=null) {
						jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.setSelectedItem(tipodefinicionTemp);
					} else {
						if(jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion!=null) {
							//jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.setSelectedItem(tipodefinicionTemp);
							if(jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDefinicionForeignKeyDescripcion(Long idTipoDefinicionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDefinicion  tipodefinicionTemp=null;

			for(TipoDefinicion tipodefinicionAux:tipodefinicionsForeignKey) {
				if(tipodefinicionAux.getId()!=null && tipodefinicionAux.getId().equals(idTipoDefinicionSeleccionado)) {
					tipodefinicionTemp=tipodefinicionAux;
					break;
				}
			}


			sDescripcion=TipoDefinicionConstantesFunciones.getTipoDefinicionDescripcion(tipodefinicionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDefinicionForeignKeyGenerico(Long idTipoDefinicionSeleccionado,JComboBox jComboBoxid_tipo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoDefinicion  tipodefinicionTemp=null;

			for(TipoDefinicion tipodefinicionAux:tipodefinicionsForeignKey) {
				if(tipodefinicionAux.getId()!=null && tipodefinicionAux.getId().equals(idTipoDefinicionSeleccionado)) {
					tipodefinicionTemp=tipodefinicionAux;
					break;
				}
			}

			if(tipodefinicionTemp!=null) {
				jComboBoxid_tipo_definicionDefinicionGenerico.setSelectedItem(tipodefinicionTemp);
			} else {
				if(jComboBoxid_tipo_definicionDefinicionGenerico!=null && jComboBoxid_tipo_definicionDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_definicionDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionDefinicion.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionDefinicion!=null) {
						jComboBoxid_transaccionFK_IdTransaccionDefinicion.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionDefinicion!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionDefinicion.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionDefinicion.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionDefinicionGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionDefinicionGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionDefinicionGenerico!=null && jComboBoxid_transaccionDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_transaccionDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDefinicion.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdSucursal") || sFormularioTipoBusqueda.equals("Todos")){
					if(sucursalTemp!=null && jComboBoxid_sucursalFK_IdSucursalDefinicion!=null) {
						jComboBoxid_sucursalFK_IdSucursalDefinicion.setSelectedItem(sucursalTemp);
					} else {
						if(jComboBoxid_sucursalFK_IdSucursalDefinicion!=null) {
							//jComboBoxid_sucursalFK_IdSucursalDefinicion.setSelectedItem(sucursalTemp);
							if(jComboBoxid_sucursalFK_IdSucursalDefinicion.getItemCount()>0) {
								jComboBoxid_sucursalFK_IdSucursalDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDefinicionGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDefinicionGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDefinicionGenerico!=null && jComboBoxid_sucursalDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoIvaItemForeignKey(Long idTipoIvaItemSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoIvaItem  tipoivaitemTemp=null;

			for(TipoIvaItem tipoivaitemAux:tipoivaitemsForeignKey) {
				if(tipoivaitemAux.getId()!=null && tipoivaitemAux.getId().equals(idTipoIvaItemSeleccionado)) {
					tipoivaitemTemp=tipoivaitemAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoivaitemTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoIvaItem(tipoivaitemTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setSelectedItem(tipoivaitemTemp);
					}
				} else {
					//jComboBoxid_tipo_iva_itemDefinicion.setSelectedItem(tipoivaitemTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoIvaItem") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoivaitemTemp!=null && jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion!=null) {
						jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.setSelectedItem(tipoivaitemTemp);
					} else {
						if(jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion!=null) {
							//jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.setSelectedItem(tipoivaitemTemp);
							if(jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoIvaItemForeignKeyDescripcion(Long idTipoIvaItemSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoIvaItem  tipoivaitemTemp=null;

			for(TipoIvaItem tipoivaitemAux:tipoivaitemsForeignKey) {
				if(tipoivaitemAux.getId()!=null && tipoivaitemAux.getId().equals(idTipoIvaItemSeleccionado)) {
					tipoivaitemTemp=tipoivaitemAux;
					break;
				}
			}


			sDescripcion=TipoIvaItemConstantesFunciones.getTipoIvaItemDescripcion(tipoivaitemTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoIvaItemForeignKeyGenerico(Long idTipoIvaItemSeleccionado,JComboBox jComboBoxid_tipo_iva_itemDefinicionGenerico)throws Exception
	{
		try
		{
			TipoIvaItem  tipoivaitemTemp=null;

			for(TipoIvaItem tipoivaitemAux:tipoivaitemsForeignKey) {
				if(tipoivaitemAux.getId()!=null && tipoivaitemAux.getId().equals(idTipoIvaItemSeleccionado)) {
					tipoivaitemTemp=tipoivaitemAux;
					break;
				}
			}

			if(tipoivaitemTemp!=null) {
				jComboBoxid_tipo_iva_itemDefinicionGenerico.setSelectedItem(tipoivaitemTemp);
			} else {
				if(jComboBoxid_tipo_iva_itemDefinicionGenerico!=null && jComboBoxid_tipo_iva_itemDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_iva_itemDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoGlobalClienteForeignKey(Long idTipoGlobalClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoGlobalCliente  tipoglobalclienteTemp=null;

			for(TipoGlobalCliente tipoglobalclienteAux:tipoglobalclientesForeignKey) {
				if(tipoglobalclienteAux.getId()!=null && tipoglobalclienteAux.getId().equals(idTipoGlobalClienteSeleccionado)) {
					tipoglobalclienteTemp=tipoglobalclienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoglobalclienteTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoGlobalCliente(tipoglobalclienteTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setSelectedItem(tipoglobalclienteTemp);
					}
				} else {
					//jComboBoxid_tipo_global_clienteDefinicion.setSelectedItem(tipoglobalclienteTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoGlobalCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoglobalclienteTemp!=null && jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion!=null) {
						jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.setSelectedItem(tipoglobalclienteTemp);
					} else {
						if(jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion!=null) {
							//jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.setSelectedItem(tipoglobalclienteTemp);
							if(jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoGlobalClienteForeignKeyDescripcion(Long idTipoGlobalClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoGlobalCliente  tipoglobalclienteTemp=null;

			for(TipoGlobalCliente tipoglobalclienteAux:tipoglobalclientesForeignKey) {
				if(tipoglobalclienteAux.getId()!=null && tipoglobalclienteAux.getId().equals(idTipoGlobalClienteSeleccionado)) {
					tipoglobalclienteTemp=tipoglobalclienteAux;
					break;
				}
			}


			sDescripcion=TipoGlobalClienteConstantesFunciones.getTipoGlobalClienteDescripcion(tipoglobalclienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoGlobalClienteForeignKeyGenerico(Long idTipoGlobalClienteSeleccionado,JComboBox jComboBoxid_tipo_global_clienteDefinicionGenerico)throws Exception
	{
		try
		{
			TipoGlobalCliente  tipoglobalclienteTemp=null;

			for(TipoGlobalCliente tipoglobalclienteAux:tipoglobalclientesForeignKey) {
				if(tipoglobalclienteAux.getId()!=null && tipoglobalclienteAux.getId().equals(idTipoGlobalClienteSeleccionado)) {
					tipoglobalclienteTemp=tipoglobalclienteAux;
					break;
				}
			}

			if(tipoglobalclienteTemp!=null) {
				jComboBoxid_tipo_global_clienteDefinicionGenerico.setSelectedItem(tipoglobalclienteTemp);
			} else {
				if(jComboBoxid_tipo_global_clienteDefinicionGenerico!=null && jComboBoxid_tipo_global_clienteDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_global_clienteDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCosteoDefinicionForeignKey(Long idTipoCosteoDefinicionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCosteoDefinicion  tipocosteodefinicionTemp=null;

			for(TipoCosteoDefinicion tipocosteodefinicionAux:tipocosteodefinicionsForeignKey) {
				if(tipocosteodefinicionAux.getId()!=null && tipocosteodefinicionAux.getId().equals(idTipoCosteoDefinicionSeleccionado)) {
					tipocosteodefinicionTemp=tipocosteodefinicionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocosteodefinicionTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoCosteoDefinicion(tipocosteodefinicionTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedItem(tipocosteodefinicionTemp);
					}
				} else {
					//jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedItem(tipocosteodefinicionTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCosteoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocosteodefinicionTemp!=null && jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion!=null) {
						jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.setSelectedItem(tipocosteodefinicionTemp);
					} else {
						if(jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion!=null) {
							//jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.setSelectedItem(tipocosteodefinicionTemp);
							if(jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCosteoDefinicionForeignKeyDescripcion(Long idTipoCosteoDefinicionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCosteoDefinicion  tipocosteodefinicionTemp=null;

			for(TipoCosteoDefinicion tipocosteodefinicionAux:tipocosteodefinicionsForeignKey) {
				if(tipocosteodefinicionAux.getId()!=null && tipocosteodefinicionAux.getId().equals(idTipoCosteoDefinicionSeleccionado)) {
					tipocosteodefinicionTemp=tipocosteodefinicionAux;
					break;
				}
			}


			sDescripcion=TipoCosteoDefinicionConstantesFunciones.getTipoCosteoDefinicionDescripcion(tipocosteodefinicionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCosteoDefinicionForeignKeyGenerico(Long idTipoCosteoDefinicionSeleccionado,JComboBox jComboBoxid_tipo_costeo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoCosteoDefinicion  tipocosteodefinicionTemp=null;

			for(TipoCosteoDefinicion tipocosteodefinicionAux:tipocosteodefinicionsForeignKey) {
				if(tipocosteodefinicionAux.getId()!=null && tipocosteodefinicionAux.getId().equals(idTipoCosteoDefinicionSeleccionado)) {
					tipocosteodefinicionTemp=tipocosteodefinicionAux;
					break;
				}
			}

			if(tipocosteodefinicionTemp!=null) {
				jComboBoxid_tipo_costeo_definicionDefinicionGenerico.setSelectedItem(tipocosteodefinicionTemp);
			} else {
				if(jComboBoxid_tipo_costeo_definicionDefinicionGenerico!=null && jComboBoxid_tipo_costeo_definicionDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_costeo_definicionDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCostoDefinicionForeignKey(Long idTipoCostoDefinicionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCostoDefinicion  tipocostodefinicionTemp=null;

			for(TipoCostoDefinicion tipocostodefinicionAux:tipocostodefinicionsForeignKey) {
				if(tipocostodefinicionAux.getId()!=null && tipocostodefinicionAux.getId().equals(idTipoCostoDefinicionSeleccionado)) {
					tipocostodefinicionTemp=tipocostodefinicionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocostodefinicionTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoCostoDefinicion(tipocostodefinicionTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setSelectedItem(tipocostodefinicionTemp);
					}
				} else {
					//jComboBoxid_tipo_costo_definicionDefinicion.setSelectedItem(tipocostodefinicionTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCostoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocostodefinicionTemp!=null && jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion!=null) {
						jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.setSelectedItem(tipocostodefinicionTemp);
					} else {
						if(jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion!=null) {
							//jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.setSelectedItem(tipocostodefinicionTemp);
							if(jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCostoDefinicionForeignKeyDescripcion(Long idTipoCostoDefinicionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCostoDefinicion  tipocostodefinicionTemp=null;

			for(TipoCostoDefinicion tipocostodefinicionAux:tipocostodefinicionsForeignKey) {
				if(tipocostodefinicionAux.getId()!=null && tipocostodefinicionAux.getId().equals(idTipoCostoDefinicionSeleccionado)) {
					tipocostodefinicionTemp=tipocostodefinicionAux;
					break;
				}
			}


			sDescripcion=TipoCostoDefinicionConstantesFunciones.getTipoCostoDefinicionDescripcion(tipocostodefinicionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCostoDefinicionForeignKeyGenerico(Long idTipoCostoDefinicionSeleccionado,JComboBox jComboBoxid_tipo_costo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoCostoDefinicion  tipocostodefinicionTemp=null;

			for(TipoCostoDefinicion tipocostodefinicionAux:tipocostodefinicionsForeignKey) {
				if(tipocostodefinicionAux.getId()!=null && tipocostodefinicionAux.getId().equals(idTipoCostoDefinicionSeleccionado)) {
					tipocostodefinicionTemp=tipocostodefinicionAux;
					break;
				}
			}

			if(tipocostodefinicionTemp!=null) {
				jComboBoxid_tipo_costo_definicionDefinicionGenerico.setSelectedItem(tipocostodefinicionTemp);
			} else {
				if(jComboBoxid_tipo_costo_definicionDefinicionGenerico!=null && jComboBoxid_tipo_costo_definicionDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_costo_definicionDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoDefinicion.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoDefinicionGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoDefinicionGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoDefinicionGenerico!=null && jComboBoxid_formatoDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_formatoDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTributarioForeignKey(Long idTipoTributarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotributarioTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoTributario(tipotributarioTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setSelectedItem(tipotributarioTemp);
					}
				} else {
					//jComboBoxid_tipo_tributarioDefinicion.setSelectedItem(tipotributarioTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotributarioTemp!=null && jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion!=null) {
						jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.setSelectedItem(tipotributarioTemp);
					} else {
						if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion!=null) {
							//jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.setSelectedItem(tipotributarioTemp);
							if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTributarioForeignKeyDescripcion(Long idTipoTributarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}


			sDescripcion=TipoTributarioConstantesFunciones.getTipoTributarioDescripcion(tipotributarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTributarioForeignKeyGenerico(Long idTipoTributarioSeleccionado,JComboBox jComboBoxid_tipo_tributarioDefinicionGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(tipotributarioTemp!=null) {
				jComboBoxid_tipo_tributarioDefinicionGenerico.setSelectedItem(tipotributarioTemp);
			} else {
				if(jComboBoxid_tipo_tributarioDefinicionGenerico!=null && jComboBoxid_tipo_tributarioDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_tributarioDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionForeignKey(Long idTipoRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoRetencion(tiporetencionTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setSelectedItem(tiporetencionTemp);
					}
				} else {
					//jComboBoxid_tipo_retencionDefinicion.setSelectedItem(tiporetencionTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionTemp!=null && jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion!=null) {
						jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.setSelectedItem(tiporetencionTemp);
					} else {
						if(jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion!=null) {
							//jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.setSelectedItem(tiporetencionTemp);
							if(jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionForeignKeyDescripcion(Long idTipoRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionForeignKeyGenerico(Long idTipoRetencionSeleccionado,JComboBox jComboBoxid_tipo_retencionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(tiporetencionTemp!=null) {
				jComboBoxid_tipo_retencionDefinicionGenerico.setSelectedItem(tiporetencionTemp);
			} else {
				if(jComboBoxid_tipo_retencionDefinicionGenerico!=null && jComboBoxid_tipo_retencionDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencionDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDocumentoForeignKey(Long idTipoDocumentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodocumentoTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoDocumento(tipodocumentoTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setSelectedItem(tipodocumentoTemp);
					}
				} else {
					//jComboBoxid_tipo_documentoDefinicion.setSelectedItem(tipodocumentoTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodocumentoTemp!=null && jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion!=null) {
						jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.setSelectedItem(tipodocumentoTemp);
					} else {
						if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion!=null) {
							//jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.setSelectedItem(tipodocumentoTemp);
							if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDocumentoForeignKeyDescripcion(Long idTipoDocumentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}


			sDescripcion=TipoDocumentoConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDocumentoForeignKeyGenerico(Long idTipoDocumentoSeleccionado,JComboBox jComboBoxid_tipo_documentoDefinicionGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(tipodocumentoTemp!=null) {
				jComboBoxid_tipo_documentoDefinicionGenerico.setSelectedItem(tipodocumentoTemp);
			} else {
				if(jComboBoxid_tipo_documentoDefinicionGenerico!=null && jComboBoxid_tipo_documentoDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_documentoDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualLibroContableForeignKey(Long idLibroContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			LibroContable  librocontableTemp=null;

			for(LibroContable librocontableAux:librocontablesForeignKey) {
				if(librocontableAux.getId()!=null && librocontableAux.getId().equals(idLibroContableSeleccionado)) {
					librocontableTemp=librocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(librocontableTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setLibroContable(librocontableTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setSelectedItem(librocontableTemp);
					}
				} else {
					//jComboBoxid_libro_contableDefinicion.setSelectedItem(librocontableTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdLibroContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(librocontableTemp!=null && jComboBoxid_libro_contableFK_IdLibroContableDefinicion!=null) {
						jComboBoxid_libro_contableFK_IdLibroContableDefinicion.setSelectedItem(librocontableTemp);
					} else {
						if(jComboBoxid_libro_contableFK_IdLibroContableDefinicion!=null) {
							//jComboBoxid_libro_contableFK_IdLibroContableDefinicion.setSelectedItem(librocontableTemp);
							if(jComboBoxid_libro_contableFK_IdLibroContableDefinicion.getItemCount()>0) {
								jComboBoxid_libro_contableFK_IdLibroContableDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualLibroContableForeignKeyDescripcion(Long idLibroContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			LibroContable  librocontableTemp=null;

			for(LibroContable librocontableAux:librocontablesForeignKey) {
				if(librocontableAux.getId()!=null && librocontableAux.getId().equals(idLibroContableSeleccionado)) {
					librocontableTemp=librocontableAux;
					break;
				}
			}


			sDescripcion=LibroContableConstantesFunciones.getLibroContableDescripcion(librocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualLibroContableForeignKeyGenerico(Long idLibroContableSeleccionado,JComboBox jComboBoxid_libro_contableDefinicionGenerico)throws Exception
	{
		try
		{
			LibroContable  librocontableTemp=null;

			for(LibroContable librocontableAux:librocontablesForeignKey) {
				if(librocontableAux.getId()!=null && librocontableAux.getId().equals(idLibroContableSeleccionado)) {
					librocontableTemp=librocontableAux;
					break;
				}
			}

			if(librocontableTemp!=null) {
				jComboBoxid_libro_contableDefinicionGenerico.setSelectedItem(librocontableTemp);
			} else {
				if(jComboBoxid_libro_contableDefinicionGenerico!=null && jComboBoxid_libro_contableDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_libro_contableDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloDefinicionGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloDefinicionGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloDefinicionGenerico!=null && jComboBoxid_tipo_transaccion_moduloDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.definicion!=null) {
						this.definicion.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableDefinicion.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.getItemCount()>0) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableTemp!=null && jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion!=null) {
						jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.setSelectedItem(cuentacontableTemp);
					} else {
						if(jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion!=null) {
							//jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.setSelectedItem(cuentacontableTemp);
							if(jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.getItemCount()>0) {
								jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableDefinicionGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableDefinicionGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableDefinicionGenerico!=null && jComboBoxid_cuenta_contableDefinicionGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableDefinicionGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Definicion definicion,JComboBox jComboBoxid_empresaDefinicionGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDefinicionGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDefinicionGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				definicion.setid_empresa(empresaAux.getId());
				definicion.setempresa_descripcion(DefinicionConstantesFunciones.getEmpresaDescripcion(empresaAux));
				definicion.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(Definicion definicion,JComboBox jComboBoxid_moduloDefinicionGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloDefinicionGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloDefinicionGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				definicion.setid_modulo(moduloAux.getId());
				definicion.setmodulo_descripcion(DefinicionConstantesFunciones.getModuloDescripcion(moduloAux));
				definicion.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDefinicionForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoDefinicion  tipodefinicionAux=new TipoDefinicion();

			if(jComboBoxid_tipo_definicionDefinicionGenerico==null) {
				tipodefinicionAux=(TipoDefinicion)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.getSelectedItem();
			} else {
				tipodefinicionAux=(TipoDefinicion)jComboBoxid_tipo_definicionDefinicionGenerico.getSelectedItem();
			}

			if(tipodefinicionAux!=null && tipodefinicionAux.getId()!=null) {
				definicion.setid_tipo_definicion(tipodefinicionAux.getId());
				definicion.settipodefinicion_descripcion(DefinicionConstantesFunciones.getTipoDefinicionDescripcion(tipodefinicionAux));
				definicion.setTipoDefinicion(tipodefinicionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(Definicion definicion,JComboBox jComboBoxid_transaccionDefinicionGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionDefinicionGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionDefinicionGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				definicion.setid_transaccion(transaccionAux.getId());
				definicion.settransaccion_descripcion(DefinicionConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				definicion.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Definicion definicion,JComboBox jComboBoxid_sucursalDefinicionGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDefinicionGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDefinicionGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				definicion.setid_sucursal(sucursalAux.getId());
				definicion.setsucursal_descripcion(DefinicionConstantesFunciones.getSucursalDescripcion(sucursalAux));
				definicion.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoIvaItemForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_iva_itemDefinicionGenerico)throws Exception
	{
		try
		{
			TipoIvaItem  tipoivaitemAux=new TipoIvaItem();

			if(jComboBoxid_tipo_iva_itemDefinicionGenerico==null) {
				tipoivaitemAux=(TipoIvaItem)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.getSelectedItem();
			} else {
				tipoivaitemAux=(TipoIvaItem)jComboBoxid_tipo_iva_itemDefinicionGenerico.getSelectedItem();
			}

			if(tipoivaitemAux!=null && tipoivaitemAux.getId()!=null) {
				definicion.setid_tipo_iva_item(tipoivaitemAux.getId());
				definicion.settipoivaitem_descripcion(DefinicionConstantesFunciones.getTipoIvaItemDescripcion(tipoivaitemAux));
				definicion.setTipoIvaItem(tipoivaitemAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoGlobalClienteForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_global_clienteDefinicionGenerico)throws Exception
	{
		try
		{
			TipoGlobalCliente  tipoglobalclienteAux=new TipoGlobalCliente();

			if(jComboBoxid_tipo_global_clienteDefinicionGenerico==null) {
				tipoglobalclienteAux=(TipoGlobalCliente)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.getSelectedItem();
			} else {
				tipoglobalclienteAux=(TipoGlobalCliente)jComboBoxid_tipo_global_clienteDefinicionGenerico.getSelectedItem();
			}

			if(tipoglobalclienteAux!=null && tipoglobalclienteAux.getId()!=null) {
				definicion.setid_tipo_global_cliente(tipoglobalclienteAux.getId());
				definicion.settipoglobalcliente_descripcion(DefinicionConstantesFunciones.getTipoGlobalClienteDescripcion(tipoglobalclienteAux));
				definicion.setTipoGlobalCliente(tipoglobalclienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCosteoDefinicionForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_costeo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoCosteoDefinicion  tipocosteodefinicionAux=new TipoCosteoDefinicion();

			if(jComboBoxid_tipo_costeo_definicionDefinicionGenerico==null) {
				tipocosteodefinicionAux=(TipoCosteoDefinicion)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.getSelectedItem();
			} else {
				tipocosteodefinicionAux=(TipoCosteoDefinicion)jComboBoxid_tipo_costeo_definicionDefinicionGenerico.getSelectedItem();
			}

			if(tipocosteodefinicionAux!=null && tipocosteodefinicionAux.getId()!=null) {
				definicion.setid_tipo_costeo_definicion(tipocosteodefinicionAux.getId());
				definicion.settipocosteodefinicion_descripcion(DefinicionConstantesFunciones.getTipoCosteoDefinicionDescripcion(tipocosteodefinicionAux));
				definicion.setTipoCosteoDefinicion(tipocosteodefinicionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCostoDefinicionForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_costo_definicionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoCostoDefinicion  tipocostodefinicionAux=new TipoCostoDefinicion();

			if(jComboBoxid_tipo_costo_definicionDefinicionGenerico==null) {
				tipocostodefinicionAux=(TipoCostoDefinicion)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.getSelectedItem();
			} else {
				tipocostodefinicionAux=(TipoCostoDefinicion)jComboBoxid_tipo_costo_definicionDefinicionGenerico.getSelectedItem();
			}

			if(tipocostodefinicionAux!=null && tipocostodefinicionAux.getId()!=null) {
				definicion.setid_tipo_costo_definicion(tipocostodefinicionAux.getId());
				definicion.settipocostodefinicion_descripcion(DefinicionConstantesFunciones.getTipoCostoDefinicionDescripcion(tipocostodefinicionAux));
				definicion.setTipoCostoDefinicion(tipocostodefinicionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(Definicion definicion,JComboBox jComboBoxid_formatoDefinicionGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoDefinicionGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoDefinicionGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				definicion.setid_formato(formatoAux.getId());
				definicion.setformato_descripcion(DefinicionConstantesFunciones.getFormatoDescripcion(formatoAux));
				definicion.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTributarioForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_tributarioDefinicionGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioAux=new TipoTributario();

			if(jComboBoxid_tipo_tributarioDefinicionGenerico==null) {
				tipotributarioAux=(TipoTributario)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.getSelectedItem();
			} else {
				tipotributarioAux=(TipoTributario)jComboBoxid_tipo_tributarioDefinicionGenerico.getSelectedItem();
			}

			if(tipotributarioAux!=null) {
				definicion.setid_tipo_tributario(tipotributarioAux.getId());
				definicion.settipotributario_descripcion(DefinicionConstantesFunciones.getTipoTributarioDescripcion(tipotributarioAux));
				definicion.setTipoTributario(tipotributarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_retencionDefinicionGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencionDefinicionGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencionDefinicionGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null) {
				definicion.setid_tipo_retencion(tiporetencionAux.getId());
				definicion.settiporetencion_descripcion(DefinicionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionAux));
				definicion.setTipoRetencion(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDocumentoForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_documentoDefinicionGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoAux=new TipoDocumento();

			if(jComboBoxid_tipo_documentoDefinicionGenerico==null) {
				tipodocumentoAux=(TipoDocumento)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.getSelectedItem();
			} else {
				tipodocumentoAux=(TipoDocumento)jComboBoxid_tipo_documentoDefinicionGenerico.getSelectedItem();
			}

			if(tipodocumentoAux!=null) {
				definicion.setid_tipo_documento(tipodocumentoAux.getId());
				definicion.settipodocumento_descripcion(DefinicionConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoAux));
				definicion.setTipoDocumento(tipodocumentoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarLibroContableForeignKey(Definicion definicion,JComboBox jComboBoxid_libro_contableDefinicionGenerico)throws Exception
	{
		try
		{
			LibroContable  librocontableAux=new LibroContable();

			if(jComboBoxid_libro_contableDefinicionGenerico==null) {
				librocontableAux=(LibroContable)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.getSelectedItem();
			} else {
				librocontableAux=(LibroContable)jComboBoxid_libro_contableDefinicionGenerico.getSelectedItem();
			}

			if(librocontableAux!=null) {
				definicion.setid_libro_contable(librocontableAux.getId());
				definicion.setlibrocontable_descripcion(DefinicionConstantesFunciones.getLibroContableDescripcion(librocontableAux));
				definicion.setLibroContable(librocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(Definicion definicion,JComboBox jComboBoxid_tipo_transaccion_moduloDefinicionGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloDefinicionGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloDefinicionGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				definicion.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				definicion.settipotransaccionmodulo_descripcion(DefinicionConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				definicion.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(Definicion definicion,JComboBox jComboBoxid_cuenta_contableDefinicionGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableDefinicionGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableDefinicionGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				definicion.setid_cuenta_contable(cuentacontableAux.getId());
				definicion.setcuentacontable_descripcion(DefinicionConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				definicion.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDefinicionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDefinicion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.removeAllItems();

							for(TipoDefinicion tipodefinicion:this.tipodefinicionsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.addItem(tipodefinicion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.removeAllItems();

							for(TipoDefinicion tipodefinicion:this.tipodefinicionsForeignKey) {
								this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.addItem(tipodefinicion);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.addItem(transaccion);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdSucursal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_sucursalFK_IdSucursalDefinicion.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jComboBoxid_sucursalFK_IdSucursalDefinicion.addItem(sucursal);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoIvaItemsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoIvaItem=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.removeAllItems();

							for(TipoIvaItem tipoivaitem:this.tipoivaitemsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.addItem(tipoivaitem);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoIvaItem") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.removeAllItems();

							for(TipoIvaItem tipoivaitem:this.tipoivaitemsForeignKey) {
								this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.addItem(tipoivaitem);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoGlobalClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoGlobalCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.removeAllItems();

							for(TipoGlobalCliente tipoglobalcliente:this.tipoglobalclientesForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.addItem(tipoglobalcliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoGlobalCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.removeAllItems();

							for(TipoGlobalCliente tipoglobalcliente:this.tipoglobalclientesForeignKey) {
								this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.addItem(tipoglobalcliente);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCosteoDefinicionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCosteoDefinicion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.removeAllItems();

							for(TipoCosteoDefinicion tipocosteodefinicion:this.tipocosteodefinicionsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.addItem(tipocosteodefinicion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCosteoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.removeAllItems();

							for(TipoCosteoDefinicion tipocosteodefinicion:this.tipocosteodefinicionsForeignKey) {
								this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.addItem(tipocosteodefinicion);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCostoDefinicionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCostoDefinicion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.removeAllItems();

							for(TipoCostoDefinicion tipocostodefinicion:this.tipocostodefinicionsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.addItem(tipocostodefinicion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCostoDefinicion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.removeAllItems();

							for(TipoCostoDefinicion tipocostodefinicion:this.tipocostodefinicionsForeignKey) {
								this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.addItem(tipocostodefinicion);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTributariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTributario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.addItem(tipotributario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.addItem(tipotributario);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.addItem(tiporetencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.addItem(tiporetencion);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDocumentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDocumento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.addItem(tipodocumento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.addItem(tipodocumento);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameLibroContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingLibroContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.removeAllItems();

							for(LibroContable librocontable:this.librocontablesForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.addItem(librocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdLibroContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.removeAllItems();

							for(LibroContable librocontable:this.librocontablesForeignKey) {
								this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.addItem(librocontable);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.addItem(tipotransaccionmodulo);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) { 
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDefinicion!=null) { 
					}

					if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.addItem(cuentacontable);
							}
						}

						if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDefinicionForeignKey(TipoDefinicion tipodefinicion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setSelectedItem(tipodefinicion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.setSelectedItem(tipodefinicion);
						} else {
							this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_sucursalFK_IdSucursalDefinicion.setSelectedItem(sucursal);
						} else {
							this.jComboBoxid_sucursalFK_IdSucursalDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoIvaItemForeignKey(TipoIvaItem tipoivaitem,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setSelectedItem(tipoivaitem);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.setSelectedItem(tipoivaitem);
						} else {
							this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoGlobalClienteForeignKey(TipoGlobalCliente tipoglobalcliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setSelectedItem(tipoglobalcliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.setSelectedItem(tipoglobalcliente);
						} else {
							this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCosteoDefinicionForeignKey(TipoCosteoDefinicion tipocosteodefinicion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedItem(tipocosteodefinicion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.setSelectedItem(tipocosteodefinicion);
						} else {
							this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCostoDefinicionForeignKey(TipoCostoDefinicion tipocostodefinicion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setSelectedItem(tipocostodefinicion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.setSelectedItem(tipocostodefinicion);
						} else {
							this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTributarioForeignKey(TipoTributario tipotributario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setSelectedItem(tipotributario);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.setSelectedItem(tipotributario);
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionForeignKey(TipoRetencion tiporetencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setSelectedItem(tiporetencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.setSelectedItem(tiporetencion);
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDocumentoForeignKey(TipoDocumento tipodocumento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setSelectedItem(tipodocumento);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.setSelectedItem(tipodocumento);
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameLibroContableForeignKey(LibroContable librocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setSelectedItem(librocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.setSelectedItem(librocontable);
						} else {
							this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormDefinicion!=null) {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.setSelectedItem(cuentacontable);
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDefinicion() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DefinicionConstantesFunciones.refrescarForeignKeysDescripcionesDefinicion(this.definicionLogic.getDefinicions());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DefinicionConstantesFunciones.refrescarForeignKeysDescripcionesDefinicion(this.definicions);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(TipoDefinicion.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(TipoIvaItem.class));
		classes.add(new Classe(TipoGlobalCliente.class));
		classes.add(new Classe(TipoCosteoDefinicion.class));
		classes.add(new Classe(TipoCostoDefinicion.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(TipoTributario.class));
		classes.add(new Classe(TipoRetencion.class));
		classes.add(new Classe(TipoDocumento.class));
		classes.add(new Classe(LibroContable.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//definicionLogic.setDefinicions(this.definicions);
			definicionLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DefinicionParameterReturnGeneral getDefinicionParameterGeneral() {
		return this.definicionParameterGeneral;
	}
	
	public void setDefinicionParameterGeneral(DefinicionParameterReturnGeneral definicionParameterGeneral) {
		this.definicionParameterGeneral = definicionParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDefinicion() {
		return isPermisoTodoDefinicion;
	}

	public void setIsPermisoTodoDefinicion(Boolean isPermisoTodoDefinicion) {
		this.isPermisoTodoDefinicion = isPermisoTodoDefinicion;
	}

	public Boolean getIsPermisoNuevoDefinicion() {
		return isPermisoNuevoDefinicion;
	}

	public void setIsPermisoNuevoDefinicion(Boolean isPermisoNuevoDefinicion) {
		this.isPermisoNuevoDefinicion = isPermisoNuevoDefinicion;
	}

	public Boolean getIsPermisoActualizarDefinicion() {
		return isPermisoActualizarDefinicion;
	}

	public void setIsPermisoActualizarDefinicion(Boolean isPermisoActualizarDefinicion) {
		this.isPermisoActualizarDefinicion = isPermisoActualizarDefinicion;
	}

	public Boolean getIsPermisoEliminarDefinicion() {
		return isPermisoEliminarDefinicion;
	}

	public void setIsPermisoEliminarDefinicion(Boolean isPermisoEliminarDefinicion) {
		this.isPermisoEliminarDefinicion = isPermisoEliminarDefinicion;
	}

	public Boolean getIsPermisoGuardarCambiosDefinicion() {
		return isPermisoGuardarCambiosDefinicion;
	}

	public void setIsPermisoGuardarCambiosDefinicion(Boolean isPermisoGuardarCambiosDefinicion) {
		this.isPermisoGuardarCambiosDefinicion = isPermisoGuardarCambiosDefinicion;
	}
	
	public Boolean getIsPermisoConsultaDefinicion() {
		return isPermisoConsultaDefinicion;
	}

	public void setIsPermisoConsultaDefinicion(Boolean isPermisoConsultaDefinicion) {
		this.isPermisoConsultaDefinicion = isPermisoConsultaDefinicion;
	}

	public Boolean getIsPermisoBusquedaDefinicion() {
		return isPermisoBusquedaDefinicion;
	}

	public void setIsPermisoBusquedaDefinicion(Boolean isPermisoBusquedaDefinicion) {
		this.isPermisoBusquedaDefinicion = isPermisoBusquedaDefinicion;
	}

	public Boolean getIsPermisoReporteDefinicion() {
		return isPermisoReporteDefinicion;
	}

	public void setIsPermisoReporteDefinicion(Boolean isPermisoReporteDefinicion) {
		this.isPermisoReporteDefinicion = isPermisoReporteDefinicion;
	}
	
	public Boolean getIsPermisoPaginacionMedioDefinicion() {
		return isPermisoPaginacionMedioDefinicion;
	}

	public void setIsPermisoPaginacionMedioDefinicion(Boolean isPermisoPaginacionMedioDefinicion) {
		this.isPermisoPaginacionMedioDefinicion = isPermisoPaginacionMedioDefinicion;
	}
	
	public Boolean getIsPermisoPaginacionTodoDefinicion() {
		return isPermisoPaginacionTodoDefinicion;
	}

	public void setIsPermisoPaginacionTodoDefinicion(Boolean isPermisoPaginacionTodoDefinicion) {
		this.isPermisoPaginacionTodoDefinicion = isPermisoPaginacionTodoDefinicion;
	}
	
	public Boolean getIsPermisoPaginacionAltoDefinicion() {
		return isPermisoPaginacionAltoDefinicion;
	}

	public void setIsPermisoPaginacionAltoDefinicion(Boolean isPermisoPaginacionAltoDefinicion) {
		this.isPermisoPaginacionAltoDefinicion = isPermisoPaginacionAltoDefinicion;
	}
	
	public Boolean getIsPermisoCopiarDefinicion() {
		return isPermisoCopiarDefinicion;
	}

	public void setIsPermisoCopiarDefinicion(Boolean isPermisoCopiarDefinicion) {
		this.isPermisoCopiarDefinicion = isPermisoCopiarDefinicion;
	}
	
	public Boolean getIsPermisoVerFormDefinicion() {
		return isPermisoVerFormDefinicion;
	}

	public void setIsPermisoVerFormDefinicion(Boolean isPermisoVerFormDefinicion) {
		this.isPermisoVerFormDefinicion = isPermisoVerFormDefinicion;
	}
	
	public Boolean getIsPermisoDuplicarDefinicion() {
		return isPermisoDuplicarDefinicion;
	}

	public void setIsPermisoDuplicarDefinicion(Boolean isPermisoDuplicarDefinicion) {
		this.isPermisoDuplicarDefinicion = isPermisoDuplicarDefinicion;
	}
	
	public Boolean getIsPermisoOrdenDefinicion() {
		return isPermisoOrdenDefinicion;
	}

	public void setIsPermisoOrdenDefinicion(Boolean isPermisoOrdenDefinicion) {
		this.isPermisoOrdenDefinicion = isPermisoOrdenDefinicion;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDefinicion() {
		return isVisibilidadCeldaNuevoDefinicion;
	}

	public void setIsVisibilidadCeldaNuevoDefinicion(Boolean isVisibilidadCeldaNuevoDefinicion) {
		this.isVisibilidadCeldaNuevoDefinicion = isVisibilidadCeldaNuevoDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDefinicion() {
		return isVisibilidadCeldaDuplicarDefinicion;
	}

	public void setIsVisibilidadCeldaDuplicarDefinicion(Boolean isVisibilidadCeldaDuplicarDefinicion) {
		this.isVisibilidadCeldaDuplicarDefinicion = isVisibilidadCeldaDuplicarDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDefinicion() {
		return isVisibilidadCeldaCopiarDefinicion;
	}

	public void setIsVisibilidadCeldaCopiarDefinicion(Boolean isVisibilidadCeldaCopiarDefinicion) {
		this.isVisibilidadCeldaCopiarDefinicion = isVisibilidadCeldaCopiarDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDefinicion() {
		return isVisibilidadCeldaVerFormDefinicion;
	}

	public void setIsVisibilidadCeldaVerFormDefinicion(Boolean isVisibilidadCeldaVerFormDefinicion) {
		this.isVisibilidadCeldaVerFormDefinicion = isVisibilidadCeldaVerFormDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDefinicion() {
		return isVisibilidadCeldaOrdenDefinicion;
	}

	public void setIsVisibilidadCeldaOrdenDefinicion(Boolean isVisibilidadCeldaOrdenDefinicion) {
		this.isVisibilidadCeldaOrdenDefinicion = isVisibilidadCeldaOrdenDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDefinicion() {
		return isVisibilidadCeldaNuevoRelacionesDefinicion;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDefinicion(Boolean isVisibilidadCeldaNuevoRelacionesDefinicion) {
		this.isVisibilidadCeldaNuevoRelacionesDefinicion = isVisibilidadCeldaNuevoRelacionesDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDefinicion() {
		return isVisibilidadCeldaModificarDefinicion;
	}

	public void setIsVisibilidadCeldaModificarDefinicion(Boolean isVisibilidadCeldaModificarDefinicion) {
		this.isVisibilidadCeldaModificarDefinicion = isVisibilidadCeldaModificarDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDefinicion() {
		return isVisibilidadCeldaActualizarDefinicion;
	}

	public void setIsVisibilidadCeldaActualizarDefinicion(Boolean isVisibilidadCeldaActualizarDefinicion) {
		this.isVisibilidadCeldaActualizarDefinicion = isVisibilidadCeldaActualizarDefinicion;
	}

	public Boolean getIsVisibilidadCeldaEliminarDefinicion() {
		return isVisibilidadCeldaEliminarDefinicion;
	}

	public void setIsVisibilidadCeldaEliminarDefinicion(Boolean isVisibilidadCeldaEliminarDefinicion) {
		this.isVisibilidadCeldaEliminarDefinicion = isVisibilidadCeldaEliminarDefinicion;
	}

	public Boolean getIsVisibilidadCeldaCancelarDefinicion() {
		return isVisibilidadCeldaCancelarDefinicion;
	}

	public void setIsVisibilidadCeldaCancelarDefinicion(Boolean isVisibilidadCeldaCancelarDefinicion) {
		this.isVisibilidadCeldaCancelarDefinicion = isVisibilidadCeldaCancelarDefinicion;
	}

	public Boolean getIsVisibilidadCeldaGuardarDefinicion() {
		return isVisibilidadCeldaGuardarDefinicion;
	}

	public void setIsVisibilidadCeldaGuardarDefinicion(Boolean isVisibilidadCeldaGuardarDefinicion) {
		this.isVisibilidadCeldaGuardarDefinicion = isVisibilidadCeldaGuardarDefinicion;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDefinicion() {
		return isVisibilidadCeldaGuardarCambiosDefinicion;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDefinicion(Boolean isVisibilidadCeldaGuardarCambiosDefinicion) {
		this.isVisibilidadCeldaGuardarCambiosDefinicion = isVisibilidadCeldaGuardarCambiosDefinicion;
	}
		
	public DefinicionSessionBean getdefinicionSessionBean() {
		return this.definicionSessionBean;
	}
	
	public void setdefinicionSessionBean(DefinicionSessionBean definicionSessionBean) {
		this.definicionSessionBean=definicionSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdLibroContable() {
		return this.isVisibilidadFK_IdLibroContable;
	}

	public void setisVisibilidadFK_IdLibroContable(Boolean isVisibilidadFK_IdLibroContable) {
		this.isVisibilidadFK_IdLibroContable=isVisibilidadFK_IdLibroContable;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCosteoDefinicion() {
		return this.isVisibilidadFK_IdTipoCosteoDefinicion;
	}

	public void setisVisibilidadFK_IdTipoCosteoDefinicion(Boolean isVisibilidadFK_IdTipoCosteoDefinicion) {
		this.isVisibilidadFK_IdTipoCosteoDefinicion=isVisibilidadFK_IdTipoCosteoDefinicion;
	}

	public Boolean getisVisibilidadFK_IdTipoCostoDefinicion() {
		return this.isVisibilidadFK_IdTipoCostoDefinicion;
	}

	public void setisVisibilidadFK_IdTipoCostoDefinicion(Boolean isVisibilidadFK_IdTipoCostoDefinicion) {
		this.isVisibilidadFK_IdTipoCostoDefinicion=isVisibilidadFK_IdTipoCostoDefinicion;
	}

	public Boolean getisVisibilidadFK_IdTipoDefinicion() {
		return this.isVisibilidadFK_IdTipoDefinicion;
	}

	public void setisVisibilidadFK_IdTipoDefinicion(Boolean isVisibilidadFK_IdTipoDefinicion) {
		this.isVisibilidadFK_IdTipoDefinicion=isVisibilidadFK_IdTipoDefinicion;
	}

	public Boolean getisVisibilidadFK_IdTipoDocumento() {
		return this.isVisibilidadFK_IdTipoDocumento;
	}

	public void setisVisibilidadFK_IdTipoDocumento(Boolean isVisibilidadFK_IdTipoDocumento) {
		this.isVisibilidadFK_IdTipoDocumento=isVisibilidadFK_IdTipoDocumento;
	}

	public Boolean getisVisibilidadFK_IdTipoGlobalCliente() {
		return this.isVisibilidadFK_IdTipoGlobalCliente;
	}

	public void setisVisibilidadFK_IdTipoGlobalCliente(Boolean isVisibilidadFK_IdTipoGlobalCliente) {
		this.isVisibilidadFK_IdTipoGlobalCliente=isVisibilidadFK_IdTipoGlobalCliente;
	}

	public Boolean getisVisibilidadFK_IdTipoIvaItem() {
		return this.isVisibilidadFK_IdTipoIvaItem;
	}

	public void setisVisibilidadFK_IdTipoIvaItem(Boolean isVisibilidadFK_IdTipoIvaItem) {
		this.isVisibilidadFK_IdTipoIvaItem=isVisibilidadFK_IdTipoIvaItem;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencion() {
		return this.isVisibilidadFK_IdTipoRetencion;
	}

	public void setisVisibilidadFK_IdTipoRetencion(Boolean isVisibilidadFK_IdTipoRetencion) {
		this.isVisibilidadFK_IdTipoRetencion=isVisibilidadFK_IdTipoRetencion;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTipoTributario() {
		return this.isVisibilidadFK_IdTipoTributario;
	}

	public void setisVisibilidadFK_IdTipoTributario(Boolean isVisibilidadFK_IdTipoTributario) {
		this.isVisibilidadFK_IdTipoTributario=isVisibilidadFK_IdTipoTributario;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDefinicion(Definicion definicion)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(definicion,null);
				this.setActualParaGuardarModuloForeignKey(definicion,null);
				this.setActualParaGuardarTipoDefinicionForeignKey(definicion,null);
				this.setActualParaGuardarTransaccionForeignKey(definicion,null);
				this.setActualParaGuardarSucursalForeignKey(definicion,null);
				this.setActualParaGuardarTipoIvaItemForeignKey(definicion,null);
				this.setActualParaGuardarTipoGlobalClienteForeignKey(definicion,null);
				this.setActualParaGuardarTipoCosteoDefinicionForeignKey(definicion,null);
				this.setActualParaGuardarTipoCostoDefinicionForeignKey(definicion,null);
				this.setActualParaGuardarFormatoForeignKey(definicion,null);
				this.setActualParaGuardarTipoTributarioForeignKey(definicion,null);
				this.setActualParaGuardarTipoRetencionForeignKey(definicion,null);
				this.setActualParaGuardarTipoDocumentoForeignKey(definicion,null);
				this.setActualParaGuardarLibroContableForeignKey(definicion,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(definicion,null);
				this.setActualParaGuardarCuentaContableForeignKey(definicion,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Definicion definicion,Definicion definicionAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDefinicion(definicion);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		definicionAux.setId(definicion.getId());
		definicionAux.setVersionRow(definicion.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDefinicion();
		
			int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = definicionValidator.getInvalidValues(this.definicion);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			definicionLogic.setDatosCliente(datosCliente);
			definicionLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				definicionAux=new  Definicion();
				
				definicionAux.setIsNew(true);
				definicionAux.setIsChanged(true);
				
				definicionAux.setDefinicionOriginal(this.definicion);
				
				definicionAux.setId(this.definicion.getId());	
				definicionAux.setVersionRow(this.definicion.getVersionRow());	
				definicionAux.setid_empresa(this.definicion.getid_empresa());	
				definicionAux.setid_modulo(this.definicion.getid_modulo());	
				definicionAux.setsecuencial_formato(this.definicion.getsecuencial_formato());	
				definicionAux.setsecuencial(this.definicion.getsecuencial());	
				definicionAux.setid_tipo_definicion(this.definicion.getid_tipo_definicion());	
				definicionAux.setid_transaccion(this.definicion.getid_transaccion());	
				definicionAux.setid_sucursal(this.definicion.getid_sucursal());	
				definicionAux.setid_tipo_iva_item(this.definicion.getid_tipo_iva_item());	
				definicionAux.setcon_mostrar_bodega(this.definicion.getcon_mostrar_bodega());	
				definicionAux.setfactor(this.definicion.getfactor());	
				definicionAux.setcon_otro_recargo(this.definicion.getcon_otro_recargo());	
				definicionAux.setid_tipo_global_cliente(this.definicion.getid_tipo_global_cliente());	
				definicionAux.setcon_coa(this.definicion.getcon_coa());	
				definicionAux.setid_tipo_costeo_definicion(this.definicion.getid_tipo_costeo_definicion());	
				definicionAux.setcon_retencion(this.definicion.getcon_retencion());	
				definicionAux.setid_tipo_costo_definicion(this.definicion.getid_tipo_costo_definicion());	
				definicionAux.setcon_novedad_producto(this.definicion.getcon_novedad_producto());	
				definicionAux.setcon_ice(this.definicion.getcon_ice());	
				definicionAux.setcon_cantidad(this.definicion.getcon_cantidad());	
				definicionAux.setcon_producto_por_proveedor(this.definicion.getcon_producto_por_proveedor());	
				definicionAux.setcon_lote_cliente(this.definicion.getcon_lote_cliente());	
				definicionAux.setcon_cuenta_contable(this.definicion.getcon_cuenta_contable());	
				definicionAux.setcon_detalle(this.definicion.getcon_detalle());	
				definicionAux.setcon_iva_incluido(this.definicion.getcon_iva_incluido());	
				definicionAux.setcon_lotes(this.definicion.getcon_lotes());	
				definicionAux.setnumero_descuentos(this.definicion.getnumero_descuentos());	
				definicionAux.setcon_precio(this.definicion.getcon_precio());	
				definicionAux.setnumero_registros(this.definicion.getnumero_registros());	
				definicionAux.setcon_centro_costo(this.definicion.getcon_centro_costo());	
				definicionAux.setcon_orden_iva(this.definicion.getcon_orden_iva());	
				definicionAux.setcon_multi_empresa(this.definicion.getcon_multi_empresa());	
				definicionAux.setid_formato(this.definicion.getid_formato());	
				definicionAux.setcon_en_linea(this.definicion.getcon_en_linea());	
				definicionAux.setid_tipo_tributario(this.definicion.getid_tipo_tributario());	
				definicionAux.setid_tipo_retencion(this.definicion.getid_tipo_retencion());	
				definicionAux.setcon_evaluacion(this.definicion.getcon_evaluacion());	
				definicionAux.setcon_ot(this.definicion.getcon_ot());	
				definicionAux.setcon_anticipo(this.definicion.getcon_anticipo());	
				definicionAux.setcon_cierre(this.definicion.getcon_cierre());	
				definicionAux.setcon_general(this.definicion.getcon_general());	
				definicionAux.setcon_por_producto(this.definicion.getcon_por_producto());	
				definicionAux.setcon_descuento(this.definicion.getcon_descuento());	
				definicionAux.setcon_series(this.definicion.getcon_series());	
				definicionAux.setcantidad(this.definicion.getcantidad());	
				definicionAux.setid_tipo_documento(this.definicion.getid_tipo_documento());	
				definicionAux.setid_libro_contable(this.definicion.getid_libro_contable());	
				definicionAux.setcon_interno(this.definicion.getcon_interno());	
				definicionAux.setcon_reserva(this.definicion.getcon_reserva());	
				definicionAux.setcon_precio_proveedor(this.definicion.getcon_precio_proveedor());	
				definicionAux.setcon_produccion(this.definicion.getcon_produccion());	
				definicionAux.setcon_codigo_barra(this.definicion.getcon_codigo_barra());	
				definicionAux.setcon_romaneos(this.definicion.getcon_romaneos());	
				definicionAux.setid_tipo_transaccion_modulo(this.definicion.getid_tipo_transaccion_modulo());	
				definicionAux.setid_cuenta_contable(this.definicion.getid_cuenta_contable());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.definicionSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.definicionSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(definicionAux,definicionLogic.getDefinicions());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(definicionAux,definicions);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.definicionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.definicionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.saveDefinicions();//WithConnection
						//definicionLogic.getSetVersionRowDefinicions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.definicion,definicionAux);
					
					this.refrescarForeignKeysDescripcionesDefinicion();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.definicionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								definicionLogic.saveDefinicionRelaciones(definicionAux);//WithConnection
								//definicionLogic.getSetVersionRowDefinicions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.definicion,definicionAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.definicionSessionBean.getEstaModoGuardarRelaciones() 
									|| this.definicionSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(definicionAux,definicionLogic.getDefinicions());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(definicionAux,definicions);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.definicion,definicionAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				definicionAux=new  Definicion();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.definicionSessionBean.getEsGuardarRelacionado() 
					|| (this.definicionSessionBean.getEsGuardarRelacionado() && this.definicion.getId()>=0)) {
						
					definicionAux.setIsNew(false);
				}
				
				definicionAux.setIsDeleted(false);
			
				definicionAux.setId(this.definicion.getId());	
				definicionAux.setVersionRow(this.definicion.getVersionRow());	
				definicionAux.setid_empresa(this.definicion.getid_empresa());	
				definicionAux.setid_modulo(this.definicion.getid_modulo());	
				definicionAux.setsecuencial_formato(this.definicion.getsecuencial_formato());	
				definicionAux.setsecuencial(this.definicion.getsecuencial());	
				definicionAux.setid_tipo_definicion(this.definicion.getid_tipo_definicion());	
				definicionAux.setid_transaccion(this.definicion.getid_transaccion());	
				definicionAux.setid_sucursal(this.definicion.getid_sucursal());	
				definicionAux.setid_tipo_iva_item(this.definicion.getid_tipo_iva_item());	
				definicionAux.setcon_mostrar_bodega(this.definicion.getcon_mostrar_bodega());	
				definicionAux.setfactor(this.definicion.getfactor());	
				definicionAux.setcon_otro_recargo(this.definicion.getcon_otro_recargo());	
				definicionAux.setid_tipo_global_cliente(this.definicion.getid_tipo_global_cliente());	
				definicionAux.setcon_coa(this.definicion.getcon_coa());	
				definicionAux.setid_tipo_costeo_definicion(this.definicion.getid_tipo_costeo_definicion());	
				definicionAux.setcon_retencion(this.definicion.getcon_retencion());	
				definicionAux.setid_tipo_costo_definicion(this.definicion.getid_tipo_costo_definicion());	
				definicionAux.setcon_novedad_producto(this.definicion.getcon_novedad_producto());	
				definicionAux.setcon_ice(this.definicion.getcon_ice());	
				definicionAux.setcon_cantidad(this.definicion.getcon_cantidad());	
				definicionAux.setcon_producto_por_proveedor(this.definicion.getcon_producto_por_proveedor());	
				definicionAux.setcon_lote_cliente(this.definicion.getcon_lote_cliente());	
				definicionAux.setcon_cuenta_contable(this.definicion.getcon_cuenta_contable());	
				definicionAux.setcon_detalle(this.definicion.getcon_detalle());	
				definicionAux.setcon_iva_incluido(this.definicion.getcon_iva_incluido());	
				definicionAux.setcon_lotes(this.definicion.getcon_lotes());	
				definicionAux.setnumero_descuentos(this.definicion.getnumero_descuentos());	
				definicionAux.setcon_precio(this.definicion.getcon_precio());	
				definicionAux.setnumero_registros(this.definicion.getnumero_registros());	
				definicionAux.setcon_centro_costo(this.definicion.getcon_centro_costo());	
				definicionAux.setcon_orden_iva(this.definicion.getcon_orden_iva());	
				definicionAux.setcon_multi_empresa(this.definicion.getcon_multi_empresa());	
				definicionAux.setid_formato(this.definicion.getid_formato());	
				definicionAux.setcon_en_linea(this.definicion.getcon_en_linea());	
				definicionAux.setid_tipo_tributario(this.definicion.getid_tipo_tributario());	
				definicionAux.setid_tipo_retencion(this.definicion.getid_tipo_retencion());	
				definicionAux.setcon_evaluacion(this.definicion.getcon_evaluacion());	
				definicionAux.setcon_ot(this.definicion.getcon_ot());	
				definicionAux.setcon_anticipo(this.definicion.getcon_anticipo());	
				definicionAux.setcon_cierre(this.definicion.getcon_cierre());	
				definicionAux.setcon_general(this.definicion.getcon_general());	
				definicionAux.setcon_por_producto(this.definicion.getcon_por_producto());	
				definicionAux.setcon_descuento(this.definicion.getcon_descuento());	
				definicionAux.setcon_series(this.definicion.getcon_series());	
				definicionAux.setcantidad(this.definicion.getcantidad());	
				definicionAux.setid_tipo_documento(this.definicion.getid_tipo_documento());	
				definicionAux.setid_libro_contable(this.definicion.getid_libro_contable());	
				definicionAux.setcon_interno(this.definicion.getcon_interno());	
				definicionAux.setcon_reserva(this.definicion.getcon_reserva());	
				definicionAux.setcon_precio_proveedor(this.definicion.getcon_precio_proveedor());	
				definicionAux.setcon_produccion(this.definicion.getcon_produccion());	
				definicionAux.setcon_codigo_barra(this.definicion.getcon_codigo_barra());	
				definicionAux.setcon_romaneos(this.definicion.getcon_romaneos());	
				definicionAux.setid_tipo_transaccion_modulo(this.definicion.getid_tipo_transaccion_modulo());	
				definicionAux.setid_cuenta_contable(this.definicion.getid_cuenta_contable());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(definicionAux,definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(definicionAux,definicions);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.definicionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.definicionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.saveDefinicions();//WithConnection
						//definicionLogic.getSetVersionRowDefinicions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.definicion,definicionAux);
					
					this.refrescarForeignKeysDescripcionesDefinicion();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.definicionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								definicionLogic.saveDefinicionRelaciones(definicionAux);//WithConnection
								//definicionLogic.getSetVersionRowDefinicions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.definicion,definicionAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.definicionSessionBean.getEstaModoGuardarRelaciones() 
									|| this.definicionSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(definicionAux,definicionLogic.getDefinicions());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(definicionAux,definicions);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.definicion,definicionAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				definicionAux=new  Definicion();
				
				definicionAux.setIsNew(false);
				definicionAux.setIsChanged(false);
				
				definicionAux.setIsDeleted(true);
				
				definicionAux.setId(this.definicion.getId());	
				definicionAux.setVersionRow(this.definicion.getVersionRow());	
				definicionAux.setid_empresa(this.definicion.getid_empresa());	
				definicionAux.setid_modulo(this.definicion.getid_modulo());	
				definicionAux.setsecuencial_formato(this.definicion.getsecuencial_formato());	
				definicionAux.setsecuencial(this.definicion.getsecuencial());	
				definicionAux.setid_tipo_definicion(this.definicion.getid_tipo_definicion());	
				definicionAux.setid_transaccion(this.definicion.getid_transaccion());	
				definicionAux.setid_sucursal(this.definicion.getid_sucursal());	
				definicionAux.setid_tipo_iva_item(this.definicion.getid_tipo_iva_item());	
				definicionAux.setcon_mostrar_bodega(this.definicion.getcon_mostrar_bodega());	
				definicionAux.setfactor(this.definicion.getfactor());	
				definicionAux.setcon_otro_recargo(this.definicion.getcon_otro_recargo());	
				definicionAux.setid_tipo_global_cliente(this.definicion.getid_tipo_global_cliente());	
				definicionAux.setcon_coa(this.definicion.getcon_coa());	
				definicionAux.setid_tipo_costeo_definicion(this.definicion.getid_tipo_costeo_definicion());	
				definicionAux.setcon_retencion(this.definicion.getcon_retencion());	
				definicionAux.setid_tipo_costo_definicion(this.definicion.getid_tipo_costo_definicion());	
				definicionAux.setcon_novedad_producto(this.definicion.getcon_novedad_producto());	
				definicionAux.setcon_ice(this.definicion.getcon_ice());	
				definicionAux.setcon_cantidad(this.definicion.getcon_cantidad());	
				definicionAux.setcon_producto_por_proveedor(this.definicion.getcon_producto_por_proveedor());	
				definicionAux.setcon_lote_cliente(this.definicion.getcon_lote_cliente());	
				definicionAux.setcon_cuenta_contable(this.definicion.getcon_cuenta_contable());	
				definicionAux.setcon_detalle(this.definicion.getcon_detalle());	
				definicionAux.setcon_iva_incluido(this.definicion.getcon_iva_incluido());	
				definicionAux.setcon_lotes(this.definicion.getcon_lotes());	
				definicionAux.setnumero_descuentos(this.definicion.getnumero_descuentos());	
				definicionAux.setcon_precio(this.definicion.getcon_precio());	
				definicionAux.setnumero_registros(this.definicion.getnumero_registros());	
				definicionAux.setcon_centro_costo(this.definicion.getcon_centro_costo());	
				definicionAux.setcon_orden_iva(this.definicion.getcon_orden_iva());	
				definicionAux.setcon_multi_empresa(this.definicion.getcon_multi_empresa());	
				definicionAux.setid_formato(this.definicion.getid_formato());	
				definicionAux.setcon_en_linea(this.definicion.getcon_en_linea());	
				definicionAux.setid_tipo_tributario(this.definicion.getid_tipo_tributario());	
				definicionAux.setid_tipo_retencion(this.definicion.getid_tipo_retencion());	
				definicionAux.setcon_evaluacion(this.definicion.getcon_evaluacion());	
				definicionAux.setcon_ot(this.definicion.getcon_ot());	
				definicionAux.setcon_anticipo(this.definicion.getcon_anticipo());	
				definicionAux.setcon_cierre(this.definicion.getcon_cierre());	
				definicionAux.setcon_general(this.definicion.getcon_general());	
				definicionAux.setcon_por_producto(this.definicion.getcon_por_producto());	
				definicionAux.setcon_descuento(this.definicion.getcon_descuento());	
				definicionAux.setcon_series(this.definicion.getcon_series());	
				definicionAux.setcantidad(this.definicion.getcantidad());	
				definicionAux.setid_tipo_documento(this.definicion.getid_tipo_documento());	
				definicionAux.setid_libro_contable(this.definicion.getid_libro_contable());	
				definicionAux.setcon_interno(this.definicion.getcon_interno());	
				definicionAux.setcon_reserva(this.definicion.getcon_reserva());	
				definicionAux.setcon_precio_proveedor(this.definicion.getcon_precio_proveedor());	
				definicionAux.setcon_produccion(this.definicion.getcon_produccion());	
				definicionAux.setcon_codigo_barra(this.definicion.getcon_codigo_barra());	
				definicionAux.setcon_romaneos(this.definicion.getcon_romaneos());	
				definicionAux.setid_tipo_transaccion_modulo(this.definicion.getid_tipo_transaccion_modulo());	
				definicionAux.setid_cuenta_contable(this.definicion.getid_cuenta_contable());	
				
				if(this.definicionSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.definicionAux.getId()>=0) {	
						this.definicionsEliminados.add(definicionAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(definicionAux,definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(definicionAux,definicions);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.definicionSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.definicionSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.saveDefinicions();//WithConnection
						//definicionLogic.getSetVersionRowDefinicions();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.definicionSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								definicionLogic.saveDefinicionRelaciones(definicionAux);//WithConnection
								//definicionLogic.getSetVersionRowDefinicions();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.definicionSessionBean.getEstaModoGuardarRelaciones() 
								|| this.definicionSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(definicionAux,definicionLogic.getDefinicions());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(definicionAux,definicions);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getDefinicions().addAll(this.definicionsEliminados);
					
					definicionLogic.saveDefinicions();//WithConnection
					//definicionLogic.getSetVersionRowDefinicions();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDefinicion();
				
				this.definicionsEliminados= new ArrayList<Definicion>();		
			}
			
			if(this.definicionSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Definicion GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.definicion=definicionAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDefinicion();
      	}
		
	}	
	
	public void actualizarRelaciones(Definicion definicionLocal) throws Exception {
		
		if(this.definicionSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Definicion definicionLocal) throws Exception {	
		if(this.definicionSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				definicionLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				definicionLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDefinicionDetalleFormJInternalFrame.class)) {
				TipoDefinicionBeanSwingJInternalFrame tipodefinicionBeanSwingJInternalFrameLocal=(TipoDefinicionBeanSwingJInternalFrame) ((TipoDefinicionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodefinicionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDefinicion(tipodefinicionBeanSwingJInternalFrameLocal.gettipodefinicion(),true);
				tipodefinicionBeanSwingJInternalFrameLocal.actualizarLista(tipodefinicionBeanSwingJInternalFrameLocal.tipodefinicion,this.tipodefinicionsForeignKey);

				tipodefinicionBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodefinicionBeanSwingJInternalFrameLocal.tipodefinicion);

				definicionLocal.setTipoDefinicion(tipodefinicionBeanSwingJInternalFrameLocal.tipodefinicion);

				this.addItemDefectoCombosForeignKeyTipoDefinicion();
				this.cargarCombosFrameTipoDefinicionsForeignKey("Formulario");
				this.setActualTipoDefinicionForeignKey(tipodefinicionBeanSwingJInternalFrameLocal.tipodefinicion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				definicionLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				definicionLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoIvaItemDetalleFormJInternalFrame.class)) {
				TipoIvaItemBeanSwingJInternalFrame tipoivaitemBeanSwingJInternalFrameLocal=(TipoIvaItemBeanSwingJInternalFrame) ((TipoIvaItemDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoivaitemBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoIvaItem(tipoivaitemBeanSwingJInternalFrameLocal.gettipoivaitem(),true);
				tipoivaitemBeanSwingJInternalFrameLocal.actualizarLista(tipoivaitemBeanSwingJInternalFrameLocal.tipoivaitem,this.tipoivaitemsForeignKey);

				tipoivaitemBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoivaitemBeanSwingJInternalFrameLocal.tipoivaitem);

				definicionLocal.setTipoIvaItem(tipoivaitemBeanSwingJInternalFrameLocal.tipoivaitem);

				this.addItemDefectoCombosForeignKeyTipoIvaItem();
				this.cargarCombosFrameTipoIvaItemsForeignKey("Formulario");
				this.setActualTipoIvaItemForeignKey(tipoivaitemBeanSwingJInternalFrameLocal.tipoivaitem.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoGlobalClienteDetalleFormJInternalFrame.class)) {
				TipoGlobalClienteBeanSwingJInternalFrame tipoglobalclienteBeanSwingJInternalFrameLocal=(TipoGlobalClienteBeanSwingJInternalFrame) ((TipoGlobalClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoglobalclienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoGlobalCliente(tipoglobalclienteBeanSwingJInternalFrameLocal.gettipoglobalcliente(),true);
				tipoglobalclienteBeanSwingJInternalFrameLocal.actualizarLista(tipoglobalclienteBeanSwingJInternalFrameLocal.tipoglobalcliente,this.tipoglobalclientesForeignKey);

				tipoglobalclienteBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoglobalclienteBeanSwingJInternalFrameLocal.tipoglobalcliente);

				definicionLocal.setTipoGlobalCliente(tipoglobalclienteBeanSwingJInternalFrameLocal.tipoglobalcliente);

				this.addItemDefectoCombosForeignKeyTipoGlobalCliente();
				this.cargarCombosFrameTipoGlobalClientesForeignKey("Formulario");
				this.setActualTipoGlobalClienteForeignKey(tipoglobalclienteBeanSwingJInternalFrameLocal.tipoglobalcliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCosteoDefinicionDetalleFormJInternalFrame.class)) {
				TipoCosteoDefinicionBeanSwingJInternalFrame tipocosteodefinicionBeanSwingJInternalFrameLocal=(TipoCosteoDefinicionBeanSwingJInternalFrame) ((TipoCosteoDefinicionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocosteodefinicionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCosteoDefinicion(tipocosteodefinicionBeanSwingJInternalFrameLocal.gettipocosteodefinicion(),true);
				tipocosteodefinicionBeanSwingJInternalFrameLocal.actualizarLista(tipocosteodefinicionBeanSwingJInternalFrameLocal.tipocosteodefinicion,this.tipocosteodefinicionsForeignKey);

				tipocosteodefinicionBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocosteodefinicionBeanSwingJInternalFrameLocal.tipocosteodefinicion);

				definicionLocal.setTipoCosteoDefinicion(tipocosteodefinicionBeanSwingJInternalFrameLocal.tipocosteodefinicion);

				this.addItemDefectoCombosForeignKeyTipoCosteoDefinicion();
				this.cargarCombosFrameTipoCosteoDefinicionsForeignKey("Formulario");
				this.setActualTipoCosteoDefinicionForeignKey(tipocosteodefinicionBeanSwingJInternalFrameLocal.tipocosteodefinicion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCostoDefinicionDetalleFormJInternalFrame.class)) {
				TipoCostoDefinicionBeanSwingJInternalFrame tipocostodefinicionBeanSwingJInternalFrameLocal=(TipoCostoDefinicionBeanSwingJInternalFrame) ((TipoCostoDefinicionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocostodefinicionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCostoDefinicion(tipocostodefinicionBeanSwingJInternalFrameLocal.gettipocostodefinicion(),true);
				tipocostodefinicionBeanSwingJInternalFrameLocal.actualizarLista(tipocostodefinicionBeanSwingJInternalFrameLocal.tipocostodefinicion,this.tipocostodefinicionsForeignKey);

				tipocostodefinicionBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocostodefinicionBeanSwingJInternalFrameLocal.tipocostodefinicion);

				definicionLocal.setTipoCostoDefinicion(tipocostodefinicionBeanSwingJInternalFrameLocal.tipocostodefinicion);

				this.addItemDefectoCombosForeignKeyTipoCostoDefinicion();
				this.cargarCombosFrameTipoCostoDefinicionsForeignKey("Formulario");
				this.setActualTipoCostoDefinicionForeignKey(tipocostodefinicionBeanSwingJInternalFrameLocal.tipocostodefinicion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				definicionLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTributarioDetalleFormJInternalFrame.class)) {
				TipoTributarioBeanSwingJInternalFrame tipotributarioBeanSwingJInternalFrameLocal=(TipoTributarioBeanSwingJInternalFrame) ((TipoTributarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotributarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.gettipotributario(),true);
				tipotributarioBeanSwingJInternalFrameLocal.actualizarLista(tipotributarioBeanSwingJInternalFrameLocal.tipotributario,this.tipotributariosForeignKey);

				tipotributarioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				definicionLocal.setTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey("Formulario");
				this.setActualTipoTributarioForeignKey(tipotributarioBeanSwingJInternalFrameLocal.tipotributario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionsForeignKey);

				tiporetencionBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				definicionLocal.setTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey("Formulario");
				this.setActualTipoRetencionForeignKey(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDocumentoDetalleFormJInternalFrame.class)) {
				TipoDocumentoBeanSwingJInternalFrame tipodocumentoBeanSwingJInternalFrameLocal=(TipoDocumentoBeanSwingJInternalFrame) ((TipoDocumentoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodocumentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.gettipodocumento(),true);
				tipodocumentoBeanSwingJInternalFrameLocal.actualizarLista(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento,this.tipodocumentosForeignKey);

				tipodocumentoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				definicionLocal.setTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey("Formulario");
				this.setActualTipoDocumentoForeignKey(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(LibroContableDetalleFormJInternalFrame.class)) {
				LibroContableBeanSwingJInternalFrame librocontableBeanSwingJInternalFrameLocal=(LibroContableBeanSwingJInternalFrame) ((LibroContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				librocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoLibroContable(librocontableBeanSwingJInternalFrameLocal.getlibrocontable(),true);
				librocontableBeanSwingJInternalFrameLocal.actualizarLista(librocontableBeanSwingJInternalFrameLocal.librocontable,this.librocontablesForeignKey);

				librocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(librocontableBeanSwingJInternalFrameLocal.librocontable);

				definicionLocal.setLibroContable(librocontableBeanSwingJInternalFrameLocal.librocontable);

				this.addItemDefectoCombosForeignKeyLibroContable();
				this.cargarCombosFrameLibroContablesForeignKey("Formulario");
				this.setActualLibroContableForeignKey(librocontableBeanSwingJInternalFrameLocal.librocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				definicionLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				definicionLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDefinicionActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = definicionValidator.getInvalidValues(this.definicion);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Definicion definicion,List<Definicion> definicions) throws Exception {
		try	{		
			DefinicionConstantesFunciones.actualizarLista(definicion,definicions,this.definicionSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Definicion definicion,List<Definicion> definicions) throws Exception {
		try	{			
			DefinicionConstantesFunciones.actualizarSelectedLista(definicion,definicions);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Definicion> definicionsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				definicionsLocal=this.definicionLogic.getDefinicions();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				definicionsLocal=this.definicions;
			}
			//ARCHITECTURE
		
			for(Definicion definicionLocal:definicionsLocal) {
				if(this.permiteMantenimiento(definicionLocal) && definicionLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DefinicionConstantesFunciones.getDefinicionLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_empresaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_moduloDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.SECUENCIALFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencial_formatoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.SECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencialDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPODEFINICION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_definicionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_transaccionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_sucursalDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOIVAITEM)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_iva_itemDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONMOSTRARBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_mostrar_bodegaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.FACTOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelfactorDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONOTRORECARGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otro_recargoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOGLOBALCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_global_clienteDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCOA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_coaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOCOSTEODEFINICION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_costeo_definicionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONRETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_retencionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOCOSTODEFINICION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_costo_definicionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONNOVEDADPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_novedad_productoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iceDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cantidadDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONPRODUCTOPORPROVEEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_producto_por_proveedorDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONLOTECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lote_clienteDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cuenta_contableDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONDETALLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_detalleDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONIVAINCLUIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iva_incluidoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONLOTES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lotesDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.NUMERODESCUENTOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_descuentosDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precioDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.NUMEROREGISTROS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_registrosDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_centro_costoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONORDENIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_orden_ivaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONMULTIEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_multi_empresaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_formatoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONENLINEA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_en_lineaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOTRIBUTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_tributarioDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_retencionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONEVALUACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_evaluacionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONOT)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONANTICIPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_anticipoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCIERRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cierreDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONGENERAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_generalDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONPORPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_por_productoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONDESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_descuentoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONSERIES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_seriesDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcantidadDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_documentoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDLIBROCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_libro_contableDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONINTERNO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_internoDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONRESERVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_reservaDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONPRECIOPROVEEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precio_proveedorDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONPRODUCCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_produccionDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONCODIGOBARRA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_codigo_barraDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.CONROMANEOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_romaneosDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_transaccion_moduloDefinicion,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DefinicionConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelid_cuenta_contableDefinicion,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_empresaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_moduloDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencial_formatoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencialDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_definicionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_transaccionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_sucursalDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_iva_itemDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_mostrar_bodegaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelfactorDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otro_recargoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_global_clienteDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_coaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_costeo_definicionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_retencionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_costo_definicionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_novedad_productoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iceDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cantidadDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_producto_por_proveedorDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lote_clienteDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cuenta_contableDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_detalleDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iva_incluidoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lotesDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_descuentosDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precioDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_registrosDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_centro_costoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_orden_ivaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_multi_empresaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_formatoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_en_lineaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_tributarioDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_retencionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_evaluacionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_anticipoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cierreDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_generalDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_por_productoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_descuentoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_seriesDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcantidadDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_documentoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_libro_contableDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_internoDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_reservaDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precio_proveedorDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_produccionDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_codigo_barraDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelcon_romaneosDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_tipo_transaccion_moduloDefinicion,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDefinicion.jLabelid_cuenta_contableDefinicion,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDefinicion--;	
		
		
		this.definicionAux=new Definicion();
		
		this.definicionAux.setId(this.iIdNuevoDefinicion);
		this.definicionAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.definicionLogic.getDefinicions().add(this.definicionAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.definicions.add(this.definicionAux);
		}
		//ARCHITECTURE
		
		this.definicion=this.definicionAux;
		
		if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDefinicion(this.definicion);
			this.setVariablesObjetoActualToFormularioForeignKeyDefinicion(this.definicion);
		}
				
		//this.setDefaultControlesDefinicion();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDefinicion();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDefinicion();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDefinicion();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDefinicion(this.definicionBean,this.definicion,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DefinicionConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.definicionSessionBean.getConGuardarRelaciones()) {
			classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.definicionReturnGeneral=definicionLogic.procesarEventosDefinicionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.definicionLogic.getDefinicions(),this.definicion,this.definicionParameterGeneral,this.isEsNuevoDefinicion,classes);//this.definicionLogic.getDefinicion()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDefinicion(this.definicionReturnGeneral,this.definicionBean,false);
		
		if(this.definicionReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDefinicion(this.definicionReturnGeneral.getDefinicion());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDefinicion(this.definicionReturnGeneral.getDefinicion());
		}
		
		if(this.definicionReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDefinicion(this.definicionReturnGeneral.getDefinicion(),classes);//this.definicionBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDefinicion();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDefinicion();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DefinicionBeanSwingJInternalFrameAdditional.RecargarFormDefinicion(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDefinicion(false);
						
			if(definicionSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDefinicion();
			}
			
			this.actualizarVisualTableDatosDefinicion();
			
			this.jTableDatosDefinicion.setRowSelectionInterval(this.getIndiceNuevoDefinicion(), this.getIndiceNuevoDefinicion());
			
			this.seleccionarFilaTablaDefinicionActual();
						
			this.actualizarEstadoCeldasBotonesDefinicion("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDefinicion(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarsecuencial_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarsecuencialDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_mostrar_bodegaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarfactorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_otro_recargoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_coaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_novedad_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_iceDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_cantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_producto_por_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_lote_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_cuenta_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_detalleDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_iva_incluidoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_lotesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarnumero_descuentosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_precioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarnumero_registrosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_centro_costoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_orden_ivaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_multi_empresaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_en_lineaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_evaluacionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_otDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_anticipoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_cierreDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_generalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_por_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_descuentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_seriesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_internoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_reservaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_precio_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_produccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_codigo_barraDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarcon_romaneosDefinicion);	
		//
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_empresaDefinicion);//
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_moduloDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_transaccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_sucursalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_iva_itemDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_global_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_costeo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_costo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_tributarioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_documentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_libro_contableDefinicion);//
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_tipo_transaccion_moduloDefinicion);//
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setEnabled(isHabilitar && this.definicionConstantesFunciones.activarid_cuenta_contableDefinicion);
	};
	
	public void setDefaultControlesDefinicion() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDefinicion(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.definicionSessionBean.setConGuardarRelaciones(true);			
			this.definicionSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.setVisible(true);
			
					
		} else {
			//this.definicionSessionBean.setConGuardarRelaciones(false);			
			this.definicionSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDefinicion() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
				if(definicionAux.getId().equals(this.iIdNuevoDefinicion)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Definicion definicionAux:this.definicions) {
				if(definicionAux.getId().equals(this.iIdNuevoDefinicion)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDefinicion(Definicion definicion,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
				if(definicionAux.getId().equals(definicion.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Definicion definicionAux:this.definicions) {
				if(definicionAux.getId().equals(definicion.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDefinicion(Definicion definicionOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
				if(definicionAux.getDefinicionOriginal().getId().equals(definicionOriginal.getId())) {
					existe=true;
					definicionOriginal.setId(definicionAux.getId());
					definicionOriginal.setVersionRow(definicionAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Definicion definicionAux:this.definicions) {
				if(definicionAux.getDefinicionOriginal().getId().equals(definicionOriginal.getId())) {
					existe=true;
					definicionOriginal.setId(definicionAux.getId());
					definicionOriginal.setVersionRow(definicionAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDefinicion(Boolean esParaCancelar) throws Exception {
		definicionsAux=new ArrayList<Definicion>();
		definicionAux=new Definicion();
		
		if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
					if(definicionAux.getId()<0) {
						definicionsAux.add(definicionAux);
					}		
				}
				this.iIdNuevoDefinicion=0L;
				this.definicionLogic.getDefinicions().removeAll(definicionsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Definicion definicionAux:this.definicions) {
					if(definicionAux.getId()<0) {
						definicionsAux.add(definicionAux);
					}		
				}
				this.iIdNuevoDefinicion=0L;
				this.definicions.removeAll(definicionsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDefinicion 
					&& this.definicionLogic.getDefinicions().size()>0
					) {
					definicionAux=this.definicionLogic.getDefinicions().get(this.definicionLogic.getDefinicions().size() - 1);
				
					if(definicionAux.getId()<0) {
						this.definicionLogic.getDefinicions().remove(definicionAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDefinicion && this.definicions.size()>0) {
					definicionAux=this.definicions.get(this.definicions.size() - 1);
				
					if(definicionAux.getId()<0) {
						this.definicions.remove(definicionAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDefinicion(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(definicion.getId()<0) {
				this.definicionLogic.getDefinicions().remove(this.definicion);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(definicion.getId()<0) {
				this.definicions.remove(this.definicion);
			}
		}			
	}
	
	public void setEstadosInicialesDefinicion(List<Definicion> definicionsAux) throws Exception {
		DefinicionConstantesFunciones.setEstadosInicialesDefinicion(definicionsAux);
	}
	
	public void setEstadosInicialesDefinicion(Definicion definicionAux) throws Exception {
		DefinicionConstantesFunciones.setEstadosInicialesDefinicion(definicionAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDefinicionActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDefinicionActual()) {
				if(!this.isEsNuevoDefinicion) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDefinicion=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDefinicionActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Definicion ?", "MANTENIMIENTO DE Definicion", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Definicion definicion) throws Exception {
		DefinicionConstantesFunciones.seleccionarAsignar(this.definicion,definicion);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDefinicion=this.isPermisoActualizarOriginalDefinicion;
			
			
			this.seleccionarAsignar(definicion);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DefinicionConstantesFunciones.quitarEspaciosDefinicion(this.definicion,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDefinicion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.definicionSessionBean.setsFuncionBusquedaRapida(this.definicionSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDefinicion) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDefinicion(esParaCancelar);				
				this.cancelarNuevoDefinicion(esParaCancelar);								
			}
			
			this.definicion=new Definicion();
			
			this.inicializarDefinicion();
			
			this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDefinicion() throws Exception {
		try {
			DefinicionConstantesFunciones.inicializarDefinicion(this.definicion);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.definicionLogic.getDefinicions().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDefinicions(String sAccionBusqueda,List<Definicion> definicionsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Definicion"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DefinicionMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DefinicionMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Definicion"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Definiciones");		
		parameters.put("busquedapor", DefinicionConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDefinicion=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DefinicionConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DefinicionConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDefinicion=new JRBeanArrayDataSource(DefinicionJInternalFrame.TraerDefinicionBeans(definicionsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDefinicion);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DefinicionConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DefinicionConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DefinicionBean.TraerDefinicionBeans(definicionsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDefinicionActionPerformed(null);
					//this.generarExcelReporteDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDefinicions(sAccionBusqueda,sTipoArchivoReporte,definicionsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDefinicions(String sAccionBusqueda,String sTipoArchivoReporte,List<Definicion> definicionsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Definicions");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDefinicion("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Definicion definicion : definicionsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DefinicionConstantesFunciones.generarExcelReporteDataDefinicion("NORMAL",row,workbook,definicion,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDefinicion(String sTipo,Row row,Workbook workbook) {
		
		DefinicionConstantesFunciones.generarExcelReporteHeaderDefinicion(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDefinicions(String sAccionBusqueda,String sTipoArchivoReporte,List<Definicion> definicionsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Definicions");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Definicion definicion : definicionsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DefinicionConstantesFunciones.getDefinicionDescripcion(definicion));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getsecuencial_formato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_SECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getsecuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipodefinicion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipoivaitem_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_mostrar_bodega()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_FACTOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_FACTOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getfactor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_otro_recargo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipoglobalcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCOA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCOA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_coa()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipocosteodefinicion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONRETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_retencion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipocostodefinicion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_novedad_producto()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_ice()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_cantidad()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_producto_por_proveedor()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_lote_cliente()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_cuenta_contable()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONDETALLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDETALLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_detalle()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_iva_incluido()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONLOTES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_lotes()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getnumero_descuentos());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_precio()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getnumero_registros());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_centro_costo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONORDENIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONORDENIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_orden_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_multi_empresa()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONENLINEA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONENLINEA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_en_linea()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipotributario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettiporetencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONEVALUACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONEVALUACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_evaluacion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONOT))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOT);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_ot()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONANTICIPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONANTICIPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_anticipo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCIERRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCIERRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_cierre()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONGENERAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONGENERAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_general()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_por_producto()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONDESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_descuento()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONSERIES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONSERIES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_series()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipodocumento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getlibrocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONINTERNO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONINTERNO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_interno()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONRESERVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRESERVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_reserva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_precio_proveedor()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONPRODUCCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_produccion()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_codigo_barra()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_CONROMANEOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONROMANEOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(definicion.getcon_romaneos()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.gettipotransaccionmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(definicion.getcuentacontable_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDefinicions(String sAccionBusqueda,String sTipoArchivoReporte,List<Definicion> definicionsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Definicion> definicionsRespaldo=null;
		
		classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.definicionLogic.setDatosCliente(this.datosCliente);
		this.definicionLogic.setDatosDeep(this.datosDeep);
		this.definicionLogic.setIsConDeep(true);
		
		definicionsRespaldo=this.definicionLogic.getDefinicions();
		
		this.definicionLogic.setDefinicions(definicionsParaReportes);	
		this.definicionLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		definicionsParaReportes=this.definicionLogic.getDefinicions();
		this.definicionLogic.setDefinicions(definicionsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Definicions");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDefinicion("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Definicion definicion : definicionsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDefinicion("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DefinicionConstantesFunciones.generarExcelReporteDataDefinicion("NORMAL",row,workbook,definicion,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DefinicionConstantesFunciones.getDefinicionDescripcion(definicion));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDefinicion.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDefinicion() throws Exception {		
		this.startProcessDefinicion(true);
	}
	
	public void startProcessDefinicion(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDefinicion ,this.jPanelParametrosReportesDefinicion, this.jScrollPanelDatosDefinicion,this.jPanelPaginacionDefinicion, this.jScrollPanelDatosEdicionDefinicion, this.jPanelAccionesDefinicion,this.jPanelAccionesFormularioDefinicion,this.jmenuBarDefinicion,this.jmenuBarDetalleDefinicion,this.jTtoolBarDefinicion,this.jTtoolBarDetalleDefinicion);		
		
		final JTabbedPane jTabbedPaneBusquedasDefinicion=this.jTabbedPaneBusquedasDefinicion; 
		
		final JPanel jPanelParametrosReportesDefinicion=this.jPanelParametrosReportesDefinicion;
		//final JScrollPane jScrollPanelDatosDefinicion=this.jScrollPanelDatosDefinicion;
		final JTable jTableDatosDefinicion=this.jTableDatosDefinicion;		
		final JPanel jPanelPaginacionDefinicion=this.jPanelPaginacionDefinicion;
		//final JScrollPane jScrollPanelDatosEdicionDefinicion=this.jScrollPanelDatosEdicionDefinicion;
		final JPanel jPanelAccionesDefinicion=this.jPanelAccionesDefinicion;
		
		JPanel jPanelCamposAuxiliarDefinicion=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDefinicion=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			jPanelCamposAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jPanelCamposDefinicion;
			jPanelAccionesFormularioAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jPanelAccionesFormularioDefinicion;
		}
		
		final JPanel jPanelCamposDefinicion=jPanelCamposAuxiliarDefinicion;
		final JPanel jPanelAccionesFormularioDefinicion=jPanelAccionesFormularioAuxiliarDefinicion;
		
		
		final JMenuBar jmenuBarDefinicion=this.jmenuBarDefinicion;
		final JToolBar jTtoolBarDefinicion=this.jTtoolBarDefinicion;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDefinicion=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDefinicion=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			jmenuBarDetalleAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jmenuBarDetalleDefinicion;
			jTtoolBarDetalleAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jTtoolBarDetalleDefinicion;
		}
		
		final JMenuBar jmenuBarDetalleDefinicion=jmenuBarDetalleAuxiliarDefinicion;
		final JToolBar jTtoolBarDetalleDefinicion=jTtoolBarDetalleAuxiliarDefinicion;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDefinicion;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDefinicion;
			processRunnable.jTableDatos=jTableDatosDefinicion;
			processRunnable.jPanelCampos=jPanelCamposDefinicion;
			processRunnable.jPanelPaginacion=jPanelPaginacionDefinicion;
			processRunnable.jPanelAcciones=jPanelAccionesDefinicion;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDefinicion;
			
			
			processRunnable.jmenuBar=jmenuBarDefinicion;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDefinicion;
			processRunnable.jTtoolBar=jTtoolBarDefinicion;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDefinicion;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDefinicion ,jPanelParametrosReportesDefinicion,jTableDatosDefinicion, /*jScrollPanelDatosDefinicion,*/jPanelCamposDefinicion,jPanelPaginacionDefinicion, /*jScrollPanelDatosEdicionDefinicion,*/ jPanelAccionesDefinicion,jPanelAccionesFormularioDefinicion,jmenuBarDefinicion,jmenuBarDetalleDefinicion,jTtoolBarDefinicion,jTtoolBarDetalleDefinicion);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDefinicion ,jPanelParametrosReportesDefinicion, jScrollPanelDatosDefinicion,jPanelPaginacionDefinicion, jScrollPanelDatosEdicionDefinicion, jPanelAccionesDefinicion,jPanelAccionesFormularioDefinicion,jmenuBarDefinicion,jmenuBarDetalleDefinicion,jTtoolBarDefinicion,jTtoolBarDetalleDefinicion);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDefinicion() {// throws Exception 
		this.finishProcessDefinicion(true);
	}
	
	public void finishProcessDefinicion(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDefinicion ,this.jPanelParametrosReportesDefinicion, this.jScrollPanelDatosDefinicion,this.jPanelPaginacionDefinicion, this.jScrollPanelDatosEdicionDefinicion, this.jPanelAccionesDefinicion,this.jPanelAccionesFormularioDefinicion,this.jmenuBarDefinicion,this.jmenuBarDetalleDefinicion,this.jTtoolBarDefinicion,this.jTtoolBarDetalleDefinicion);		
		
		final JTabbedPane jTabbedPaneBusquedasDefinicion=this.jTabbedPaneBusquedasDefinicion; 
		
		final JPanel jPanelParametrosReportesDefinicion=this.jPanelParametrosReportesDefinicion;
		//final JScrollPane jScrollPanelDatosDefinicion=this.jScrollPanelDatosDefinicion;
		final JTable jTableDatosDefinicion=this.jTableDatosDefinicion;		
		final JPanel jPanelPaginacionDefinicion=this.jPanelPaginacionDefinicion;
		//final JScrollPane jScrollPanelDatosEdicionDefinicion=this.jScrollPanelDatosEdicionDefinicion;
		final JPanel jPanelAccionesDefinicion=this.jPanelAccionesDefinicion;
		
		JPanel jPanelCamposAuxiliarDefinicion=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDefinicion=new JPanel();
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			jPanelCamposAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jPanelCamposDefinicion;
			jPanelAccionesFormularioAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jPanelAccionesFormularioDefinicion;
		}
		
		final JPanel jPanelCamposDefinicion=jPanelCamposAuxiliarDefinicion;
		final JPanel jPanelAccionesFormularioDefinicion=jPanelAccionesFormularioAuxiliarDefinicion;
		
		
		final JMenuBar jmenuBarDefinicion=this.jmenuBarDefinicion;		
		final JToolBar jTtoolBarDefinicion=this.jTtoolBarDefinicion;
				
		JMenuBar jmenuBarDetalleAuxiliarDefinicion=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDefinicion=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			jmenuBarDetalleAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jmenuBarDetalleDefinicion;
			jTtoolBarDetalleAuxiliarDefinicion=this.jInternalFrameDetalleFormDefinicion.jTtoolBarDetalleDefinicion;		
		}
		
		final JMenuBar jmenuBarDetalleDefinicion=jmenuBarDetalleAuxiliarDefinicion;
		final JToolBar jTtoolBarDetalleDefinicion=jTtoolBarDetalleAuxiliarDefinicion;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDefinicion;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDefinicion;
			processRunnable.jTableDatos=jTableDatosDefinicion;
			processRunnable.jPanelCampos=jPanelCamposDefinicion;
			processRunnable.jPanelPaginacion=jPanelPaginacionDefinicion;
			processRunnable.jPanelAcciones=jPanelAccionesDefinicion;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDefinicion;
			
			
			processRunnable.jmenuBar=jmenuBarDefinicion;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDefinicion;
			processRunnable.jTtoolBar=jTtoolBarDefinicion;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDefinicion;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDefinicion ,jPanelParametrosReportesDefinicion, jTableDatosDefinicion,/*jScrollPanelDatosDefinicion,*/jPanelCamposDefinicion,jPanelPaginacionDefinicion, /*jScrollPanelDatosEdicionDefinicion,*/ jPanelAccionesDefinicion,jPanelAccionesFormularioDefinicion,jmenuBarDefinicion,jmenuBarDetalleDefinicion,jTtoolBarDefinicion,jTtoolBarDetalleDefinicion));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDefinicion(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDefinicion(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDefinicion(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDefinicion(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDefinicion,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDefinicion,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDefinicion(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDefinicion,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDefinicion,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.definicionConstantesFunciones.getsFinalQueryDefinicion();
		String  finalQueryPaginacionTodos=this.definicionConstantesFunciones.getsFinalQueryDefinicion();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DefinicionConstantesFunciones.getArrayColumnasGlobalesNoDefinicion(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DefinicionConstantesFunciones.getArrayColumnasGlobalesDefinicion(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DefinicionConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.definicionsEliminados= new ArrayList<Definicion>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDefinicion();
		
				///*DefinicionSessionBean*/this.definicionSessionBean=new DefinicionSessionBean();
			
			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DefinicionConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DefinicionConstantesFunciones.getClassesForeignKeysOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/definicion."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			definicionsAux= new ArrayList<Definicion>();
			
				
			definicionLogic.setDatosCliente(this.datosCliente);
			definicionLogic.setDatosDeep(this.datosDeep);
			definicionLogic.setIsConDeep(true);
			
			
			definicionLogic.getDefinicionDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					definicionLogic.getTodosDefinicions(finalQueryGlobal,pagination);
					
					//definicionLogic.getTodosDefinicionsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(definicionLogic.getDefinicions()==null|| definicionLogic.getDefinicions().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							definicionsAux= new ArrayList<Definicion>();
							definicionsAux.addAll(definicionLogic.getDefinicions());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux= new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							definicionLogic.getTodosDefinicions(finalQueryGlobal+"",this.pagination);												
							
							//definicionLogic.getTodosDefinicionsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDefinicions("Todos",definicionLogic.getDefinicions() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							definicionLogic.setDefinicions(new ArrayList<Definicion>());					
							definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDefinicion=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDefinicion=this.idActual;
				
				} else if(this.idDefinicionActual!=null && this.idDefinicionActual!=0L) {
					idDefinicion=idDefinicionActual;
				}
				
					
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndicePorId(idDefinicion);
				
				this.definicions=new ArrayList<Definicion>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					definicionLogic.getEntity(idDefinicion);
					
					//definicionLogic.getEntityWithConnection(idDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.setDefinicions(new ArrayList<Definicion>());
					definicionLogic.getDefinicions().add(definicionLogic.getDefinicion());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicions=new ArrayList<Definicion>();
					this.definicions.add(definicion);
				}
				
				if(definicionLogic.getDefinicion()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCuentaContable")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdCuentaContable",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdCuentaContable",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdEmpresa",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdEmpresa",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdLibroContable")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdLibroContable(id_libro_contableFK_IdLibroContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdLibroContable(finalQueryGlobal,pagination,id_libro_contableFK_IdLibroContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdLibroContable(id_libro_contableFK_IdLibroContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdLibroContable(id_libro_contableFK_IdLibroContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdLibroContable(finalQueryGlobal,pagination,id_libro_contableFK_IdLibroContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdLibroContable(id_libro_contableFK_IdLibroContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdLibroContable(id_libro_contableFK_IdLibroContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdLibroContable",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdLibroContable",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdModulo",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdModulo",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdSucursal",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdSucursal",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCosteoDefinicion")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCosteoDefinicion(id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoCosteoDefinicion(finalQueryGlobal,pagination,id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCosteoDefinicion(id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCosteoDefinicion(id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoCosteoDefinicion(finalQueryGlobal,pagination,id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCosteoDefinicion(id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCosteoDefinicion(id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoCosteoDefinicion",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoCosteoDefinicion",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCostoDefinicion")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCostoDefinicion(id_tipo_costo_definicionFK_IdTipoCostoDefinicion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoCostoDefinicion(finalQueryGlobal,pagination,id_tipo_costo_definicionFK_IdTipoCostoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCostoDefinicion(id_tipo_costo_definicionFK_IdTipoCostoDefinicion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCostoDefinicion(id_tipo_costo_definicionFK_IdTipoCostoDefinicion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoCostoDefinicion(finalQueryGlobal,pagination,id_tipo_costo_definicionFK_IdTipoCostoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCostoDefinicion(id_tipo_costo_definicionFK_IdTipoCostoDefinicion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoCostoDefinicion(id_tipo_costo_definicionFK_IdTipoCostoDefinicion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoCostoDefinicion",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoCostoDefinicion",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDefinicion")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDefinicion(id_tipo_definicionFK_IdTipoDefinicion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoDefinicion(finalQueryGlobal,pagination,id_tipo_definicionFK_IdTipoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDefinicion(id_tipo_definicionFK_IdTipoDefinicion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDefinicion(id_tipo_definicionFK_IdTipoDefinicion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoDefinicion(finalQueryGlobal,pagination,id_tipo_definicionFK_IdTipoDefinicion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDefinicion(id_tipo_definicionFK_IdTipoDefinicion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDefinicion(id_tipo_definicionFK_IdTipoDefinicion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoDefinicion",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoDefinicion",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDocumento")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoDocumento",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoDocumento",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoGlobalCliente")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoGlobalCliente(id_tipo_global_clienteFK_IdTipoGlobalCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoGlobalCliente(finalQueryGlobal,pagination,id_tipo_global_clienteFK_IdTipoGlobalCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoGlobalCliente(id_tipo_global_clienteFK_IdTipoGlobalCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoGlobalCliente(id_tipo_global_clienteFK_IdTipoGlobalCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoGlobalCliente(finalQueryGlobal,pagination,id_tipo_global_clienteFK_IdTipoGlobalCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoGlobalCliente(id_tipo_global_clienteFK_IdTipoGlobalCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoGlobalCliente(id_tipo_global_clienteFK_IdTipoGlobalCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoGlobalCliente",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoGlobalCliente",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoIvaItem")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoIvaItem(id_tipo_iva_itemFK_IdTipoIvaItem);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoIvaItem(finalQueryGlobal,pagination,id_tipo_iva_itemFK_IdTipoIvaItem);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoIvaItem(id_tipo_iva_itemFK_IdTipoIvaItem);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoIvaItem(id_tipo_iva_itemFK_IdTipoIvaItem);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoIvaItem(finalQueryGlobal,pagination,id_tipo_iva_itemFK_IdTipoIvaItem);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoIvaItem(id_tipo_iva_itemFK_IdTipoIvaItem);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoIvaItem(id_tipo_iva_itemFK_IdTipoIvaItem);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoIvaItem",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoIvaItem",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencion")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoRetencion",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoRetencion",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoTransaccionModulo",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoTransaccionModulo",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTributario")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTipoTributario",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTipoTributario",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					definicionLogic.getDefinicionsFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=definicionLogic.getDefinicions()==null||definicionLogic.getDefinicions().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=definicions==null|| definicions.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionsAux=new ArrayList<Definicion>();
						definicionsAux.addAll(definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionsAux=new ArrayList<Definicion>();
							definicionsAux.addAll(definicions);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							definicionLogic.getDefinicionsFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DefinicionConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDefinicions("FK_IdTransaccion",definicionLogic.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDefinicions("FK_IdTransaccion",definicions);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionLogic.setDefinicions(new ArrayList<Definicion>());
						definicionLogic.getDefinicions().addAll(definicionsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicions=new ArrayList<Definicion>();
							definicions.addAll(definicionsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDefinicion();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDefinicion();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=definicionLogic.getDefinicions().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=definicions.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=definicionLogic.getDefinicions().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=definicions.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Definicion definicion) {
		Boolean permite=true;
		
		if(this.definicion.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DefinicionConstantesFunciones.getOrderByListaDefinicion();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DefinicionConstantesFunciones.getOrderByListaDefinicion();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Definicion definicion:definicionLogic.getDefinicions()) {
				if(definicion.getsType().equals(Constantes2.S_TOTALES)) {
					definicionTotales=definicion;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Definicion definicion:this.definicions) {
				if(definicion.getsType().equals(Constantes2.S_TOTALES)) {
					definicionTotales=definicion;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.definicionAux=new Definicion();
			this.definicionAux.setsType(Constantes2.S_TOTALES);
			this.definicionAux.setIsNew(false);
			this.definicionAux.setIsChanged(false);
			this.definicionAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DefinicionConstantesFunciones.TotalizarValoresFilaDefinicion(this.definicionLogic.getDefinicions(),this.definicionAux);
				
				this.definicionLogic.getDefinicions().add(this.definicionAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DefinicionConstantesFunciones.TotalizarValoresFilaDefinicion(this.definicions,this.definicionAux);
				
				this.definicions.add(this.definicionAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		definicionTotales=new Definicion();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.definicionLogic.getDefinicions().remove(definicionTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.definicions.remove(definicionTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		definicionTotales=new Definicion();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Definicion definicion:definicionLogic.getDefinicions()) {
				if(definicion.getsType().equals(Constantes2.S_TOTALES)) {
					definicionTotales=definicion;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DefinicionConstantesFunciones.TotalizarValoresFilaDefinicion(this.definicionLogic.getDefinicions(),definicionTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Definicion definicion:this.definicions) {
				if(definicion.getsType().equals(Constantes2.S_TOTALES)) {
					definicionTotales=definicion;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DefinicionConstantesFunciones.TotalizarValoresFilaDefinicion(this.definicions,definicionTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDefinicionsFK_IdCuentaContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdLibroContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdLibroContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoCosteoDefinicion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCosteoDefinicion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoCostoDefinicion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCostoDefinicion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoDefinicion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDefinicion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoDocumento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDocumento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoGlobalCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoGlobalCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoIvaItem()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoIvaItem";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoRetencion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTipoTributario()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTributario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDefinicionsFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDefinicionsFK_IdCuentaContable(String sFinalQuery,Long id_cuenta_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdCuentaContable(sFinalQuery,this.pagination,id_cuenta_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdLibroContable(String sFinalQuery,Long id_libro_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdLibroContable(sFinalQuery,this.pagination,id_libro_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoCosteoDefinicion(String sFinalQuery,Long id_tipo_costeo_definicion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoCosteoDefinicion(sFinalQuery,this.pagination,id_tipo_costeo_definicion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoCostoDefinicion(String sFinalQuery,Long id_tipo_costo_definicion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoCostoDefinicion(sFinalQuery,this.pagination,id_tipo_costo_definicion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoDefinicion(String sFinalQuery,Long id_tipo_definicion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoDefinicion(sFinalQuery,this.pagination,id_tipo_definicion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoDocumento(String sFinalQuery,Long id_tipo_documento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoDocumento(sFinalQuery,this.pagination,id_tipo_documento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoGlobalCliente(String sFinalQuery,Long id_tipo_global_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoGlobalCliente(sFinalQuery,this.pagination,id_tipo_global_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoIvaItem(String sFinalQuery,Long id_tipo_iva_item)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoIvaItem(sFinalQuery,this.pagination,id_tipo_iva_item);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoRetencion(String sFinalQuery,Long id_tipo_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoRetencion(sFinalQuery,this.pagination,id_tipo_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTipoTributario(String sFinalQuery,Long id_tipo_tributario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTipoTributario(sFinalQuery,this.pagination,id_tipo_tributario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDefinicionsFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLogic.getDefinicionsFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDefinicion() {
		this.isPermisoTodoDefinicion=false;
		this.isPermisoNuevoDefinicion=false;
		this.isPermisoActualizarDefinicion=false;
		this.isPermisoActualizarOriginalDefinicion=false;
		this.isPermisoEliminarDefinicion=false;
		this.isPermisoGuardarCambiosDefinicion=false;
		this.isPermisoConsultaDefinicion=false;
		this.isPermisoBusquedaDefinicion=false;
		this.isPermisoReporteDefinicion=false;		
		this.isPermisoOrdenDefinicion=false;		
		this.isPermisoPaginacionMedioDefinicion=false;		
		this.isPermisoPaginacionAltoDefinicion=false;
		this.isPermisoPaginacionTodoDefinicion=false;
		this.isPermisoCopiarDefinicion=false;		
		this.isPermisoVerFormDefinicion=false;		
		this.isPermisoDuplicarDefinicion=false;		
		this.isPermisoOrdenDefinicion=false;		
	}
	
	public void setPermisosUsuarioDefinicion(Boolean isPermiso) {
		this.isPermisoTodoDefinicion=isPermiso;
		this.isPermisoNuevoDefinicion=isPermiso;
		this.isPermisoActualizarDefinicion=isPermiso;
		this.isPermisoActualizarOriginalDefinicion=isPermiso;
		this.isPermisoEliminarDefinicion=isPermiso;
		this.isPermisoGuardarCambiosDefinicion=isPermiso;
		this.isPermisoConsultaDefinicion=isPermiso;
		this.isPermisoBusquedaDefinicion=isPermiso;
		this.isPermisoReporteDefinicion=isPermiso;
		this.isPermisoOrdenDefinicion=isPermiso;		
		this.isPermisoPaginacionMedioDefinicion=isPermiso;		
		this.isPermisoPaginacionAltoDefinicion=isPermiso;		
		this.isPermisoPaginacionTodoDefinicion=isPermiso;		
		this.isPermisoCopiarDefinicion=isPermiso;		
		this.isPermisoVerFormDefinicion=isPermiso;		
		this.isPermisoDuplicarDefinicion=isPermiso;
		this.isPermisoOrdenDefinicion=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDefinicion(Boolean isPermiso) {
		//this.isPermisoTodoDefinicion=isPermiso;
		this.isPermisoNuevoDefinicion=isPermiso;
		this.isPermisoActualizarDefinicion=isPermiso;
		this.isPermisoActualizarOriginalDefinicion=isPermiso;
		this.isPermisoEliminarDefinicion=isPermiso;
		this.isPermisoGuardarCambiosDefinicion=isPermiso;
		//this.isPermisoConsultaDefinicion=isPermiso;
		//this.isPermisoBusquedaDefinicion=isPermiso;
		//this.isPermisoReporteDefinicion=isPermiso;
		//this.isPermisoOrdenDefinicion=isPermiso;		
		//this.isPermisoPaginacionMedioDefinicion=isPermiso;		
		//this.isPermisoPaginacionAltoDefinicion=isPermiso;		
		//this.isPermisoPaginacionTodoDefinicion=isPermiso;		
		//this.isPermisoCopiarDefinicion=isPermiso;		
		//this.isPermisoDuplicarDefinicion=isPermiso;
		//this.isPermisoOrdenDefinicion=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDefinicionClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DefinicionJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDefinicion(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDefinicionClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDefinicionClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDefinicionClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDefinicionClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDefinicion() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DefinicionJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.definicionSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DefinicionConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDefinicion=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDefinicion=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDefinicion=this.isPermisoActualizarDefinicion;
			this.isPermisoEliminarDefinicion=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDefinicion=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDefinicion=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDefinicion=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDefinicion=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDefinicion=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDefinicion=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDefinicion=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDefinicion=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDefinicion=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDefinicion=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDefinicion=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDefinicion=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDefinicion=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.definicionSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDefinicion.setToolTipText(this.jTableDatosDefinicion.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDefinicion(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDefinicion(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DefinicionJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DefinicionJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDefinicion() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDefinicionListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.tipodefinicionsForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.tipoivaitemsForeignKey=new ArrayList();
				this.tipoglobalclientesForeignKey=new ArrayList();
				this.tipocosteodefinicionsForeignKey=new ArrayList();
				this.tipocostodefinicionsForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.tipotributariosForeignKey=new ArrayList();
				this.tiporetencionsForeignKey=new ArrayList();
				this.tipodocumentosForeignKey=new ArrayList();
				this.librocontablesForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDefinicionListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DefinicionJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDefinicionListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoIvaItemListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoGlobalClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCosteoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCostoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyLibroContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDefinicionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodefinicionsForeignKey==null||this.tipodefinicionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDefinicionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDefinicionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDefinicionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIvaItemListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoivaitemsForeignKey==null||this.tipoivaitemsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoIvaItemConstantesFunciones.getArrayColumnasGlobalesTipoIvaItem(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIvaItemConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoIvaItemConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoIvaItemsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoGlobalClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoglobalclientesForeignKey==null||this.tipoglobalclientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoGlobalClienteConstantesFunciones.getArrayColumnasGlobalesTipoGlobalCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoGlobalClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoGlobalClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoGlobalClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCosteoDefinicionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocosteodefinicionsForeignKey==null||this.tipocosteodefinicionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCosteoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoCosteoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCosteoDefinicionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCosteoDefinicionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCosteoDefinicionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCostoDefinicionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocostodefinicionsForeignKey==null||this.tipocostodefinicionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCostoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoCostoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCostoDefinicionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCostoDefinicionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCostoDefinicionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTributarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDocumentoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLibroContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.librocontablesForeignKey==null||this.librocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=LibroContableConstantesFunciones.getArrayColumnasGlobalesLibroContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LibroContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=LibroContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosLibroContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDefinicionListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DefinicionParameterReturnGeneral definicionReturnGeneral=new DefinicionParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_empresaDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_empresaDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_moduloDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_moduloDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalTipoDefinicion="";

				if(((this.tipodefinicionsForeignKey==null||this.tipodefinicionsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_definicionDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_definicionDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDefinicion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDefinicion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDefinicionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDefinicion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDefinicion, "");
						finalQueryGlobalTipoDefinicion+=TipoDefinicionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDefinicionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDefinicion=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoDefinicionActual();
					}
				} else {
					finalQueryGlobalTipoDefinicion="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_transaccionDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_transaccionDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_sucursalDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_sucursalDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalTipoIvaItem="";

				if(((this.tipoivaitemsForeignKey==null||this.tipoivaitemsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_iva_itemDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_iva_itemDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoIvaItem()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoIvaItemConstantesFunciones.getArrayColumnasGlobalesTipoIvaItem(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoIvaItem=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoIvaItemConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoIvaItem=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoIvaItem, "");
						finalQueryGlobalTipoIvaItem+=TipoIvaItemConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoIvaItemsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoIvaItem=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoIvaItemActual();
					}
				} else {
					finalQueryGlobalTipoIvaItem="NONE";
				}


				String finalQueryGlobalTipoGlobalCliente="";

				if(((this.tipoglobalclientesForeignKey==null||this.tipoglobalclientesForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_global_clienteDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_global_clienteDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoGlobalCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoGlobalClienteConstantesFunciones.getArrayColumnasGlobalesTipoGlobalCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoGlobalClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoGlobalCliente, "");
						finalQueryGlobalTipoGlobalCliente+=TipoGlobalClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoGlobalClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoGlobalCliente=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoGlobalClienteActual();
					}
				} else {
					finalQueryGlobalTipoGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoCosteoDefinicion="";

				if(((this.tipocosteodefinicionsForeignKey==null||this.tipocosteodefinicionsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_costeo_definicionDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_costeo_definicionDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteoDefinicion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCosteoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoCosteoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCosteoDefinicion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCosteoDefinicionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCosteoDefinicion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCosteoDefinicion, "");
						finalQueryGlobalTipoCosteoDefinicion+=TipoCosteoDefinicionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCosteoDefinicionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCosteoDefinicion=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoCosteoDefinicionActual();
					}
				} else {
					finalQueryGlobalTipoCosteoDefinicion="NONE";
				}


				String finalQueryGlobalTipoCostoDefinicion="";

				if(((this.tipocostodefinicionsForeignKey==null||this.tipocostodefinicionsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_costo_definicionDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_costo_definicionDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCostoDefinicion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCostoDefinicionConstantesFunciones.getArrayColumnasGlobalesTipoCostoDefinicion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCostoDefinicion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCostoDefinicionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCostoDefinicion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCostoDefinicion, "");
						finalQueryGlobalTipoCostoDefinicion+=TipoCostoDefinicionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCostoDefinicionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCostoDefinicion=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoCostoDefinicionActual();
					}
				} else {
					finalQueryGlobalTipoCostoDefinicion="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_formatoDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_formatoDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTipoTributario="";

				if(((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_tributarioDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_tributarioDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTributario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTributario=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTributario, "");
						finalQueryGlobalTipoTributario+=TipoTributarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTributario=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoTributarioActual();
					}
				} else {
					finalQueryGlobalTipoTributario="NONE";
				}


				String finalQueryGlobalTipoRetencion="";

				if(((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_retencionDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_retencionDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencion, "");
						finalQueryGlobalTipoRetencion+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencion=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoRetencionActual();
					}
				} else {
					finalQueryGlobalTipoRetencion="NONE";
				}


				String finalQueryGlobalTipoDocumento="";

				if(((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_documentoDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_documentoDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDocumento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDocumento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDocumento, "");
						finalQueryGlobalTipoDocumento+=TipoDocumentoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDocumento=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoDocumentoActual();
					}
				} else {
					finalQueryGlobalTipoDocumento="NONE";
				}


				String finalQueryGlobalLibroContable="";

				if(((this.librocontablesForeignKey==null||this.librocontablesForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_libro_contableDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_libro_contableDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionLibroContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=LibroContableConstantesFunciones.getArrayColumnasGlobalesLibroContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalLibroContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,LibroContableConstantesFunciones.TABLENAME);

						finalQueryGlobalLibroContable=Funciones.GetFinalQueryAppend(finalQueryGlobalLibroContable, "");
						finalQueryGlobalLibroContable+=LibroContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosLibroContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalLibroContable=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidLibroContableActual();
					}
				} else {
					finalQueryGlobalLibroContable="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_tipo_transaccion_moduloDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_tipo_transaccion_moduloDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.definicionConstantesFunciones.cargarid_cuenta_contableDefinicion)
					 || (this.esRecargarFks && this.definicionConstantesFunciones.cargarid_cuenta_contableDefinicion)) {

					if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+definicionSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				definicionReturnGeneral=definicionLogic.cargarCombosLoteForeignKeyDefinicion(finalQueryGlobalEmpresa,finalQueryGlobalModulo,finalQueryGlobalTipoDefinicion,finalQueryGlobalTransaccion,finalQueryGlobalSucursal,finalQueryGlobalTipoIvaItem,finalQueryGlobalTipoGlobalCliente,finalQueryGlobalTipoCosteoDefinicion,finalQueryGlobalTipoCostoDefinicion,finalQueryGlobalFormato,finalQueryGlobalTipoTributario,finalQueryGlobalTipoRetencion,finalQueryGlobalTipoDocumento,finalQueryGlobalLibroContable,finalQueryGlobalTipoTransaccionModulo,finalQueryGlobalCuentaContable);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=definicionReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=definicionReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalTipoDefinicion.equals("NONE")) {
				this.tipodefinicionsForeignKey=definicionReturnGeneral.gettipodefinicionsForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=definicionReturnGeneral.gettransaccionsForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=definicionReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalTipoIvaItem.equals("NONE")) {
				this.tipoivaitemsForeignKey=definicionReturnGeneral.gettipoivaitemsForeignKey();
			}

			if(!finalQueryGlobalTipoGlobalCliente.equals("NONE")) {
				this.tipoglobalclientesForeignKey=definicionReturnGeneral.gettipoglobalclientesForeignKey();
			}

			if(!finalQueryGlobalTipoCosteoDefinicion.equals("NONE")) {
				this.tipocosteodefinicionsForeignKey=definicionReturnGeneral.gettipocosteodefinicionsForeignKey();
			}

			if(!finalQueryGlobalTipoCostoDefinicion.equals("NONE")) {
				this.tipocostodefinicionsForeignKey=definicionReturnGeneral.gettipocostodefinicionsForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=definicionReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTipoTributario.equals("NONE")) {
				this.tipotributariosForeignKey=definicionReturnGeneral.gettipotributariosForeignKey();
			}

			if(!finalQueryGlobalTipoRetencion.equals("NONE")) {
				this.tiporetencionsForeignKey=definicionReturnGeneral.gettiporetencionsForeignKey();
			}

			if(!finalQueryGlobalTipoDocumento.equals("NONE")) {
				this.tipodocumentosForeignKey=definicionReturnGeneral.gettipodocumentosForeignKey();
			}

			if(!finalQueryGlobalLibroContable.equals("NONE")) {
				this.librocontablesForeignKey=definicionReturnGeneral.getlibrocontablesForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=definicionReturnGeneral.gettipotransaccionmodulosForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=definicionReturnGeneral.getcuentacontablesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDefinicion()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyTipoDefinicion();
			this.addItemDefectoCombosForeignKeyTransaccion();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyTipoIvaItem();
			this.addItemDefectoCombosForeignKeyTipoGlobalCliente();
			this.addItemDefectoCombosForeignKeyTipoCosteoDefinicion();
			this.addItemDefectoCombosForeignKeyTipoCostoDefinicion();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTipoTributario();
			this.addItemDefectoCombosForeignKeyTipoRetencion();
			this.addItemDefectoCombosForeignKeyTipoDocumento();
			this.addItemDefectoCombosForeignKeyLibroContable();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
			this.addItemDefectoCombosForeignKeyCuentaContable();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.definicionSessionBean==null) {
				this.definicionSessionBean=new DefinicionSessionBean();
			}

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDefinicion()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDefinicion()) {
				TipoDefinicion tipodefinicion=new TipoDefinicion();
				TipoDefinicionConstantesFunciones.setTipoDefinicionDescripcion(tipodefinicion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodefinicion.setId(null);

				if(!TipoDefinicionConstantesFunciones.ExisteEnLista(this.tipodefinicionsForeignKey,tipodefinicion,true)) {

					this.tipodefinicionsForeignKey.add(0,tipodefinicion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoIvaItem()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoIvaItem()) {
				TipoIvaItem tipoivaitem=new TipoIvaItem();
				TipoIvaItemConstantesFunciones.setTipoIvaItemDescripcion(tipoivaitem,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoivaitem.setId(null);

				if(!TipoIvaItemConstantesFunciones.ExisteEnLista(this.tipoivaitemsForeignKey,tipoivaitem,true)) {

					this.tipoivaitemsForeignKey.add(0,tipoivaitem);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoGlobalCliente()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoGlobalCliente()) {
				TipoGlobalCliente tipoglobalcliente=new TipoGlobalCliente();
				TipoGlobalClienteConstantesFunciones.setTipoGlobalClienteDescripcion(tipoglobalcliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoglobalcliente.setId(null);

				if(!TipoGlobalClienteConstantesFunciones.ExisteEnLista(this.tipoglobalclientesForeignKey,tipoglobalcliente,true)) {

					this.tipoglobalclientesForeignKey.add(0,tipoglobalcliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCosteoDefinicion()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCosteoDefinicion()) {
				TipoCosteoDefinicion tipocosteodefinicion=new TipoCosteoDefinicion();
				TipoCosteoDefinicionConstantesFunciones.setTipoCosteoDefinicionDescripcion(tipocosteodefinicion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocosteodefinicion.setId(null);

				if(!TipoCosteoDefinicionConstantesFunciones.ExisteEnLista(this.tipocosteodefinicionsForeignKey,tipocosteodefinicion,true)) {

					this.tipocosteodefinicionsForeignKey.add(0,tipocosteodefinicion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCostoDefinicion()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoCostoDefinicion()) {
				TipoCostoDefinicion tipocostodefinicion=new TipoCostoDefinicion();
				TipoCostoDefinicionConstantesFunciones.setTipoCostoDefinicionDescripcion(tipocostodefinicion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocostodefinicion.setId(null);

				if(!TipoCostoDefinicionConstantesFunciones.ExisteEnLista(this.tipocostodefinicionsForeignKey,tipocostodefinicion,true)) {

					this.tipocostodefinicionsForeignKey.add(0,tipocostodefinicion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTributario()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				TipoTributario tipotributario=new TipoTributario();
				TipoTributarioConstantesFunciones.setTipoTributarioDescripcion(tipotributario,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotributario.setId(null);

				if(!TipoTributarioConstantesFunciones.ExisteEnLista(this.tipotributariosForeignKey,tipotributario,true)) {

					this.tipotributariosForeignKey.add(0,tipotributario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencion()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				TipoRetencion tiporetencion=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencion.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionsForeignKey,tiporetencion,true)) {

					this.tiporetencionsForeignKey.add(0,tiporetencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDocumento()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				TipoDocumento tipodocumento=new TipoDocumento();
				TipoDocumentoConstantesFunciones.setTipoDocumentoDescripcion(tipodocumento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodocumento.setId(null);

				if(!TipoDocumentoConstantesFunciones.ExisteEnLista(this.tipodocumentosForeignKey,tipodocumento,true)) {

					this.tipodocumentosForeignKey.add(0,tipodocumento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyLibroContable()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionLibroContable()) {
				LibroContable librocontable=new LibroContable();
				LibroContableConstantesFunciones.setLibroContableDescripcion(librocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				librocontable.setId(null);

				if(!LibroContableConstantesFunciones.ExisteEnLista(this.librocontablesForeignKey,librocontable,true)) {

					this.librocontablesForeignKey.add(0,librocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.definicionSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDefinicion()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTipoTransaccionModulo("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDefinicion(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTipoTransaccionModulo(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyTipoTransaccionModulo(JComboBox jComboBoxTipoTransaccionModuloGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			TipoTransaccionModulo tipotransaccionmoduloLocal=(TipoTransaccionModulo)jComboBoxTipoTransaccionModuloGenerico.getSelectedItem();

			if(tipotransaccionmoduloLocal!=null  && tipotransaccionmoduloLocal.getId()!=null  && tipotransaccionmoduloLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_tipo_transaccion_modulo="+tipotransaccionmoduloLocal.getId();
			}
			//REDEFINE

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboTransaccion=sFinalQueryCombo;

			this.transaccionsForeignKey=new ArrayList<Transaccion>();
			this.cargarCombosForeignKeyTransaccion(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyTipoTransaccionModulo(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.addItemListener(new ComboBoxItemListener(this,"id_tipo_transaccion_moduloDefinicion"));
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_transaccion_moduloDefinicion"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDefinicion!=null) {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.addActionListener(new ComboBoxActionListener(this,"id_tipo_transaccion_moduloDefinicion"));
						this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_transaccion_moduloDefinicion"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion"));

						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion"));

					} else {
						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion"));

						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDefinicion()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualModuloForeignKey(this.moduloActual.getId(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDefinicion();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDefinicion(Definicion definicion)throws Exception {	
		try {
			
			this.setActualTipoDefinicionForeignKey(definicion.getid_tipo_definicion(),false,"Formulario");
			this.setActualTransaccionForeignKey(definicion.getid_transaccion(),false,"Formulario");
			this.setActualSucursalForeignKey(definicion.getid_sucursal(),false,"Formulario");
			this.setActualTipoIvaItemForeignKey(definicion.getid_tipo_iva_item(),false,"Formulario");
			this.setActualTipoGlobalClienteForeignKey(definicion.getid_tipo_global_cliente(),false,"Formulario");
			this.setActualTipoCosteoDefinicionForeignKey(definicion.getid_tipo_costeo_definicion(),false,"Formulario");
			this.setActualTipoCostoDefinicionForeignKey(definicion.getid_tipo_costo_definicion(),false,"Formulario");
			this.setActualFormatoForeignKey(definicion.getid_formato(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(definicion.getid_tipo_tributario(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(definicion.getid_tipo_retencion(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(definicion.getid_tipo_documento(),false,"Formulario");
			this.setActualLibroContableForeignKey(definicion.getid_libro_contable(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(definicion.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualCuentaContableForeignKey(definicion.getid_cuenta_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDefinicion(Definicion definicion,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDefinicion()throws Exception {	
		try {
			
			this.setActualTipoDefinicionForeignKey(this.definicionConstantesFunciones.getid_tipo_definicion(),false,"Formulario");
			this.setActualTransaccionForeignKey(this.definicionConstantesFunciones.getid_transaccion(),false,"Formulario");
			this.setActualSucursalForeignKey(this.definicionConstantesFunciones.getid_sucursal(),false,"Formulario");
			this.setActualTipoIvaItemForeignKey(this.definicionConstantesFunciones.getid_tipo_iva_item(),false,"Formulario");
			this.setActualTipoGlobalClienteForeignKey(this.definicionConstantesFunciones.getid_tipo_global_cliente(),false,"Formulario");
			this.setActualTipoCosteoDefinicionForeignKey(this.definicionConstantesFunciones.getid_tipo_costeo_definicion(),false,"Formulario");
			this.setActualTipoCostoDefinicionForeignKey(this.definicionConstantesFunciones.getid_tipo_costo_definicion(),false,"Formulario");
			this.setActualFormatoForeignKey(this.definicionConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(this.definicionConstantesFunciones.getid_tipo_tributario(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(this.definicionConstantesFunciones.getid_tipo_retencion(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(this.definicionConstantesFunciones.getid_tipo_documento(),false,"Formulario");
			this.setActualLibroContableForeignKey(this.definicionConstantesFunciones.getid_libro_contable(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.definicionConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.definicionConstantesFunciones.getid_cuenta_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDefinicion()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDefinicion()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDefinicion()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDefinicion()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDefinicion()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFrameTipoDefinicionsForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameTipoIvaItemsForeignKey("Todos");
			this.cargarCombosFrameTipoGlobalClientesForeignKey("Todos");
			this.cargarCombosFrameTipoCosteoDefinicionsForeignKey("Todos");
			this.cargarCombosFrameTipoCostoDefinicionsForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTipoTributariosForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
			this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
			this.cargarCombosFrameLibroContablesForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDefinicion(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDefinicionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoIvaItemsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoGlobalClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCosteoDefinicionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCostoDefinicionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameLibroContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDefinicion()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion!=null && this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.getItemCount()>0) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	





























	public void recargarFormDefinicionTipoTransaccionModulo(JComboBox<?> jComboBoxGenericoTipoTransaccionModulo,String sFormularioTipoBusqueda) throws Exception {

	}


	
	

	public DefinicionBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DefinicionBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DefinicionBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.definicionSessionBean=new DefinicionSessionBean(); 
		this.definicionConstantesFunciones=new DefinicionConstantesFunciones(); 
		this.definicionBean=new Definicion();//(this.definicionConstantesFunciones); 		
		this.definicionReturnGeneral=new DefinicionParameterReturnGeneral(); 
		
		this.definicionSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.definicionSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DefinicionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DefinicionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DefinicionBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDefinicion(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.definicionConstantesFunciones=new DefinicionConstantesFunciones(); 
			this.definicionBean=new Definicion();//this.definicionConstantesFunciones); 			
			this.definicionReturnGeneral=new DefinicionParameterReturnGeneral(); 
		
			DefinicionBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Definicion Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.definicion=new Definicion();
			this.definicions = new ArrayList<Definicion>();
			this.definicionsAux = new ArrayList<Definicion>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic=new DefinicionLogic();
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			//this.definicionSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.definicionSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDefinicion);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDefinicion);	
					}
					
					if(this.jInternalFrameImportacionDefinicion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDefinicion);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDefinicion!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDefinicion);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDefinicion!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDefinicion);
				this.jInternalFrameDetalleFormDefinicion.setVisible(false);
				this.jInternalFrameDetalleFormDefinicion.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDefinicion);
					this.jInternalFrameReporteDinamicoDefinicion.setVisible(false);
					this.jInternalFrameReporteDinamicoDefinicion.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDefinicion!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDefinicion);
					this.jInternalFrameImportacionDefinicion.setVisible(false);
					this.jInternalFrameImportacionDefinicion.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDefinicion!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDefinicion);
					this.jInternalFrameOrderByDefinicion.setVisible(false);
					this.jInternalFrameOrderByDefinicion.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDefinicionActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DefinicionConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.definicionReturnGeneral=new DefinicionParameterReturnGeneral();
			
			this.definicionParameterGeneral=new DefinicionParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.definicionLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DefinicionJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.definicionSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DefinicionConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.definicionSessionBean.getEsGuardarRelacionado(),this.definicionSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DefinicionConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.definicionSessionBean.getEsGuardarRelacionado(),this.definicionSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaDuplicarDefinicion=true;
			this.isVisibilidadCeldaCopiarDefinicion=true;
			this.isVisibilidadCeldaVerFormDefinicion=true;
			this.isVisibilidadCeldaOrdenDefinicion=true;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=false;
			this.isVisibilidadCeldaGuardarDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			
			
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdLibroContable=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCosteoDefinicion=true;
			this.isVisibilidadFK_IdTipoCostoDefinicion=true;
			this.isVisibilidadFK_IdTipoDefinicion=true;
			this.isVisibilidadFK_IdTipoDocumento=true;
			this.isVisibilidadFK_IdTipoGlobalCliente=true;
			this.isVisibilidadFK_IdTipoIvaItem=true;
			this.isVisibilidadFK_IdTipoRetencion=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTipoTributario=true;
			this.isVisibilidadFK_IdTransaccion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDefinicion();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDefinicion(false);
			
			this.setPermisosUsuarioDefinicion();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.definicionSessionBean.getEsGuardarRelacionado() 
				|| (this.definicionSessionBean.getEsGuardarRelacionado() && this.definicionSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDefinicionClasesRelacionadas();
			}
			
			if(this.definicionSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDefinicionClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DefinicionJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDefinicion();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDefinicion();
			}
			
			if(!this.isPermisoBusquedaDefinicion) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDefinicion.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.definicionSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDefinicion,this.isPermisoPaginacionMedioDefinicion,this.isPermisoPaginacionTodoDefinicion);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DefinicionConstantesFunciones.getTiposSeleccionarDefinicion());
				
				this.tiposColumnasSelect=DefinicionConstantesFunciones.getTiposSeleccionarDefinicion(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDefinicion();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDefinicion(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDefinicion(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDefinicion() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.moduloLogic=new ModuloLogic();
			this.tipodefinicionLogic=new TipoDefinicionLogic();
			this.transaccionLogic=new TransaccionLogic();
			this.sucursalLogic=new SucursalLogic();
			this.tipoivaitemLogic=new TipoIvaItemLogic();
			this.tipoglobalclienteLogic=new TipoGlobalClienteLogic();
			this.tipocosteodefinicionLogic=new TipoCosteoDefinicionLogic();
			this.tipocostodefinicionLogic=new TipoCostoDefinicionLogic();
			this.formatoLogic=new FormatoLogic();
			this.tipotributarioLogic=new TipoTributarioLogic();
			this.tiporetencionLogic=new TipoRetencionLogic();
			this.tipodocumentoLogic=new TipoDocumentoLogic();
			this.librocontableLogic=new LibroContableLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			this.cuentacontableLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				definicionImplementable= (DefinicionImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DefinicionConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				definicionImplementableHome= (DefinicionImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DefinicionConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.definicions= new ArrayList<Definicion>();
			this.definicionsEliminados= new ArrayList<Definicion>();
						
			this.isEsNuevoDefinicion=false;
			this.esParaAccionDesdeFormularioDefinicion=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.tipodefinicionsForeignKey=new ArrayList<TipoDefinicion>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.tipoivaitemsForeignKey=new ArrayList<TipoIvaItem>() ;
			this.tipoglobalclientesForeignKey=new ArrayList<TipoGlobalCliente>() ;
			this.tipocosteodefinicionsForeignKey=new ArrayList<TipoCosteoDefinicion>() ;
			this.tipocostodefinicionsForeignKey=new ArrayList<TipoCostoDefinicion>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>() ;
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>() ;
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>() ;
			this.librocontablesForeignKey=new ArrayList<LibroContable>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDefinicion(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDefinicion();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DefinicionBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DefinicionConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDefinicion("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDefinicion(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDefinicion!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDefinicion();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDefinicion();
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDefinicion.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDefinicion(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Definicion: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDefinicion() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDefinicion")) {
				iIndex=this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDefinicion();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDefinicion(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDefinicion(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDefinicion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDefinicionListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDefinicion();
		
		this.cargarCombosFrameForeignKeyDefinicion();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDefinicion();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDefinicion();
		}
	}
	
	

	public void cargarCombosForeignKeyTipoDefinicion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDefinicion();
				this.cargarCombosFrameTipoDefinicionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoDefinicion(this.tipodefinicionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSucursal(this.sucursalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoIvaItem(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoIvaItemListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoIvaItem();
				this.cargarCombosFrameTipoIvaItemsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoIvaItem(this.tipoivaitemsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoGlobalCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoGlobalClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoGlobalCliente();
				this.cargarCombosFrameTipoGlobalClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoGlobalCliente(this.tipoglobalclientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCosteoDefinicion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCosteoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCosteoDefinicion();
				this.cargarCombosFrameTipoCosteoDefinicionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCosteoDefinicion(this.tipocosteodefinicionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCostoDefinicion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCostoDefinicionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCostoDefinicion();
				this.cargarCombosFrameTipoCostoDefinicionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCostoDefinicion(this.tipocostodefinicionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTributario(this.tipotributariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencion(this.tiporetencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoDocumento(this.tipodocumentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyLibroContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyLibroContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyLibroContable();
				this.cargarCombosFrameLibroContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaLibroContable(this.librocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoTransaccionModulo("Todos");
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoTransaccionModulo("Todos");
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDefinicionActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.definicionSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			
			if(jTableDatosDefinicion.getRowCount()>=1) {
				jTableDatosDefinicion.removeRowSelectionInterval(0, jTableDatosDefinicion.getRowCount()-1);						
			}
			
			this.isEsNuevoDefinicion=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDefinicion(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDefinicion(true);			
			//this.definicion=new Definicion();
			//this.definicion.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDefinicion(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDefinicion() ;
			
			if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDefinicion(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.definicion);	
			this.actualizarInformacion("INFO_PADRE",false,this.definicion);				
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			if(this.definicionSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Definicion: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDefinicionActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDefinicion.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDefinicion.getSelectedRows().length;			
			}
			
			definicionsSeleccionados=this.getDefinicionsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDefinicion--;			
				//Definicion definicionAux= new Definicion();			
				//definicionAux.setId(this.iIdNuevoDefinicion);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Definicion definicionOrigen=new Definicion();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Definicion definicionOrigen : definicionsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							definicionOrigen =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							definicionOrigen =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDefinicion();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.definicion.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDefinicion(definicionOrigen,this.definicion,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.definicionLogic.getDefinicions().add(this.definicionAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.definicions.add(this.definicionAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDefinicion(false);
				
				this.jTableDatosDefinicion.setRowSelectionInterval(this.getIndiceNuevoDefinicion(), this.getIndiceNuevoDefinicion());
				
				int iLastRow =  this.jTableDatosDefinicion.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDefinicion.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDefinicion.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDefinicion(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();									
		
			Definicion definicionOrigen=new Definicion();
			Definicion definicionDestino=new Definicion();
				
			definicionsSeleccionados=this.getDefinicionsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDefinicion.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || definicionsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDefinicion.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionOrigen =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						definicionOrigen =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						definicionDestino =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						definicionDestino =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				definicionOrigen =definicionsSeleccionados.get(0);
				definicionDestino =definicionsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDefinicion(definicionOrigen,definicionDestino,true,false);
				
				definicionDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(definicionDestino,definicionLogic.getDefinicions());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(definicionDestino,definicions);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDefinicion(false);
				
				//this.jTableDatosDefinicion.setRowSelectionInterval(this.getIndiceNuevoDefinicion(), this.getIndiceNuevoDefinicion());
				
				int iLastRow =  this.jTableDatosDefinicion.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDefinicion.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDefinicion.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDefinicion(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDefinicion.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDefinicion.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDefinicion.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDefinicion.setVisible(!isVisible);
			this.jPanelPaginacionDefinicion.setVisible(!isVisible);
			this.jPanelAccionesDefinicion.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDefinicion();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDefinicion();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDefinicion();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDefinicion();
			
			this.abrirFrameOrderByDefinicion();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDefinicion();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDefinicion(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDefinicion);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDefinicion.isMaximum()) {
					this.jInternalFrameDetalleFormDefinicion.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDefinicion.setSize(this.jInternalFrameDetalleFormDefinicion.iWidthFormulario,this.jInternalFrameDetalleFormDefinicion.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDefinicion.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDefinicion.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDefinicion.isMaximum()) {
						this.jInternalFrameDetalleFormDefinicion.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDefinicion.jContentPaneDetalleDefinicion.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDefinicion.jContentPaneDetalleDefinicion.getWidth(),DefinicionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDefinicion.jContentPaneDetalleDefinicion.getWidth(),DefinicionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDefinicion.jContentPaneDetalleDefinicion.getWidth(),DefinicionConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDefinicion.setVisible(true);
	        this.jInternalFrameDetalleFormDefinicion.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDefinicion() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDefinicion==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDefinicion=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDefinicion,false,this);
				} else {
					this.jInternalFrameOrderByDefinicion=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDefinicion,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDefinicion);
				this.jInternalFrameOrderByDefinicion.setVisible(false);
				this.jInternalFrameOrderByDefinicion.setSelected(false);
				
				this.jInternalFrameOrderByDefinicion.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDefinicion"));
				
				this.inicializarActualizarBindingTablaOrderByDefinicion();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDefinicion() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDefinicion==null) {
				
				this.jInternalFrameImportacionDefinicion=new ImportacionJInternalFrame(DefinicionConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDefinicion);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDefinicion);
				this.jInternalFrameImportacionDefinicion.setVisible(false);
				this.jInternalFrameImportacionDefinicion.setSelected(false);


				this.jInternalFrameImportacionDefinicion.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDefinicion"));
				this.jInternalFrameImportacionDefinicion.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDefinicion"));
				this.jInternalFrameImportacionDefinicion.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDefinicion"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDefinicion() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDefinicion==null) {
				this.jInternalFrameReporteDinamicoDefinicion=new ReporteDinamicoJInternalFrame(DefinicionConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDefinicion);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDefinicion);
				this.jInternalFrameReporteDinamicoDefinicion.setVisible(false);
				this.jInternalFrameReporteDinamicoDefinicion.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDefinicion"));
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDefinicion"));
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDefinicion"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDefinicion();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleDefinicion() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDefinicion);
			
	       	this.jInternalFrameDetalleFormDefinicion.setVisible(false);
	        this.jInternalFrameDetalleFormDefinicion.setSelected(false);
			
			//this.jInternalFrameDetalleFormDefinicion.dispose();
			//this.jInternalFrameDetalleFormDefinicion=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDefinicion() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDefinicion.setVisible(true);
	        this.jInternalFrameReporteDinamicoDefinicion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDefinicion() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDefinicion.setVisible(true);
	        this.jInternalFrameImportacionDefinicion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDefinicion() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDefinicion.setVisible(true);
	        this.jInternalFrameOrderByDefinicion.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDefinicion() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDefinicion.setVisible(false);
	        this.jInternalFrameOrderByDefinicion.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDefinicion() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDefinicion.setVisible(false);
	        this.jInternalFrameReporteDinamicoDefinicion.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDefinicion() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDefinicion.setVisible(false);
	        this.jInternalFrameImportacionDefinicion.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
						TitledBorder titledBorderCuentaContable=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContable.setTitle(titledBorderDefinicion.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContable(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDefinicion(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDefinicion(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDefinicion(true);
			//this.isEsNuevoDefinicion=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDefinicion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDefinicion(false) ;
			
			if(definicionSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDefinicion(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDefinicion(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDefinicionActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDefinicion(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDefinicion(true);
			//this.isEsNuevoDefinicion=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.definicion.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDefinicion("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDefinicion(false) ;
			
			if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDefinicion(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDefinicion(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaTipoDefinicion(List<TipoDefinicion> tipodefinicionsForeignKey)throws Exception{
		TableColumn tableColumnTipoDefinicion=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION));
		TableCellEditor tableCellEditorTipoDefinicion =tableColumnTipoDefinicion.getCellEditor();

		TipoDefinicionTableCell tipodefinicionTableCellFk=(TipoDefinicionTableCell)tableCellEditorTipoDefinicion;

		if(tipodefinicionTableCellFk!=null) {
			tipodefinicionTableCellFk.settipodefinicionsForeignKey(tipodefinicionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodefinicionTableCellFk.setRowActual(intSelectedRow);
			//tipodefinicionTableCellFk.settipodefinicionsForeignKeyActual(tipodefinicionsForeignKey);
		//}


		if(tipodefinicionTableCellFk!=null) {
			tipodefinicionTableCellFk.RecargarTipoDefinicionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaSucursal(List<Sucursal> sucursalsForeignKey)throws Exception{
		TableColumn tableColumnSucursal=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDSUCURSAL));
		TableCellEditor tableCellEditorSucursal =tableColumnSucursal.getCellEditor();

		SucursalTableCell sucursalTableCellFk=(SucursalTableCell)tableCellEditorSucursal;

		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.setsucursalsForeignKey(sucursalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//sucursalTableCellFk.setRowActual(intSelectedRow);
			//sucursalTableCellFk.setsucursalsForeignKeyActual(sucursalsForeignKey);
		//}


		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.RecargarSucursalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoIvaItem(List<TipoIvaItem> tipoivaitemsForeignKey)throws Exception{
		TableColumn tableColumnTipoIvaItem=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM));
		TableCellEditor tableCellEditorTipoIvaItem =tableColumnTipoIvaItem.getCellEditor();

		TipoIvaItemTableCell tipoivaitemTableCellFk=(TipoIvaItemTableCell)tableCellEditorTipoIvaItem;

		if(tipoivaitemTableCellFk!=null) {
			tipoivaitemTableCellFk.settipoivaitemsForeignKey(tipoivaitemsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoivaitemTableCellFk.setRowActual(intSelectedRow);
			//tipoivaitemTableCellFk.settipoivaitemsForeignKeyActual(tipoivaitemsForeignKey);
		//}


		if(tipoivaitemTableCellFk!=null) {
			tipoivaitemTableCellFk.RecargarTipoIvaItemsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoGlobalCliente(List<TipoGlobalCliente> tipoglobalclientesForeignKey)throws Exception{
		TableColumn tableColumnTipoGlobalCliente=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE));
		TableCellEditor tableCellEditorTipoGlobalCliente =tableColumnTipoGlobalCliente.getCellEditor();

		TipoGlobalClienteTableCell tipoglobalclienteTableCellFk=(TipoGlobalClienteTableCell)tableCellEditorTipoGlobalCliente;

		if(tipoglobalclienteTableCellFk!=null) {
			tipoglobalclienteTableCellFk.settipoglobalclientesForeignKey(tipoglobalclientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoglobalclienteTableCellFk.setRowActual(intSelectedRow);
			//tipoglobalclienteTableCellFk.settipoglobalclientesForeignKeyActual(tipoglobalclientesForeignKey);
		//}


		if(tipoglobalclienteTableCellFk!=null) {
			tipoglobalclienteTableCellFk.RecargarTipoGlobalClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCosteoDefinicion(List<TipoCosteoDefinicion> tipocosteodefinicionsForeignKey)throws Exception{
		TableColumn tableColumnTipoCosteoDefinicion=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION));
		TableCellEditor tableCellEditorTipoCosteoDefinicion =tableColumnTipoCosteoDefinicion.getCellEditor();

		TipoCosteoDefinicionTableCell tipocosteodefinicionTableCellFk=(TipoCosteoDefinicionTableCell)tableCellEditorTipoCosteoDefinicion;

		if(tipocosteodefinicionTableCellFk!=null) {
			tipocosteodefinicionTableCellFk.settipocosteodefinicionsForeignKey(tipocosteodefinicionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocosteodefinicionTableCellFk.setRowActual(intSelectedRow);
			//tipocosteodefinicionTableCellFk.settipocosteodefinicionsForeignKeyActual(tipocosteodefinicionsForeignKey);
		//}


		if(tipocosteodefinicionTableCellFk!=null) {
			tipocosteodefinicionTableCellFk.RecargarTipoCosteoDefinicionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCostoDefinicion(List<TipoCostoDefinicion> tipocostodefinicionsForeignKey)throws Exception{
		TableColumn tableColumnTipoCostoDefinicion=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION));
		TableCellEditor tableCellEditorTipoCostoDefinicion =tableColumnTipoCostoDefinicion.getCellEditor();

		TipoCostoDefinicionTableCell tipocostodefinicionTableCellFk=(TipoCostoDefinicionTableCell)tableCellEditorTipoCostoDefinicion;

		if(tipocostodefinicionTableCellFk!=null) {
			tipocostodefinicionTableCellFk.settipocostodefinicionsForeignKey(tipocostodefinicionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocostodefinicionTableCellFk.setRowActual(intSelectedRow);
			//tipocostodefinicionTableCellFk.settipocostodefinicionsForeignKeyActual(tipocostodefinicionsForeignKey);
		//}


		if(tipocostodefinicionTableCellFk!=null) {
			tipocostodefinicionTableCellFk.RecargarTipoCostoDefinicionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTributario(List<TipoTributario> tipotributariosForeignKey)throws Exception{
		TableColumn tableColumnTipoTributario=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));
		TableCellEditor tableCellEditorTipoTributario =tableColumnTipoTributario.getCellEditor();

		TipoTributarioTableCell tipotributarioTableCellFk=(TipoTributarioTableCell)tableCellEditorTipoTributario;

		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.settipotributariosForeignKey(tipotributariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotributarioTableCellFk.setRowActual(intSelectedRow);
			//tipotributarioTableCellFk.settipotributariosForeignKeyActual(tipotributariosForeignKey);
		//}


		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.RecargarTipoTributariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencion(List<TipoRetencion> tiporetencionsForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencion=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPORETENCION));
		TableCellEditor tableCellEditorTipoRetencion =tableColumnTipoRetencion.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencion;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionsForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoDocumento(List<TipoDocumento> tipodocumentosForeignKey)throws Exception{
		TableColumn tableColumnTipoDocumento=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO));
		TableCellEditor tableCellEditorTipoDocumento =tableColumnTipoDocumento.getCellEditor();

		TipoDocumentoTableCell tipodocumentoTableCellFk=(TipoDocumentoTableCell)tableCellEditorTipoDocumento;

		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.settipodocumentosForeignKey(tipodocumentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodocumentoTableCellFk.setRowActual(intSelectedRow);
			//tipodocumentoTableCellFk.settipodocumentosForeignKeyActual(tipodocumentosForeignKey);
		//}


		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.RecargarTipoDocumentosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaLibroContable(List<LibroContable> librocontablesForeignKey)throws Exception{
		TableColumn tableColumnLibroContable=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE));
		TableCellEditor tableCellEditorLibroContable =tableColumnLibroContable.getCellEditor();

		LibroContableTableCell librocontableTableCellFk=(LibroContableTableCell)tableCellEditorLibroContable;

		if(librocontableTableCellFk!=null) {
			librocontableTableCellFk.setlibrocontablesForeignKey(librocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//librocontableTableCellFk.setRowActual(intSelectedRow);
			//librocontableTableCellFk.setlibrocontablesForeignKeyActual(librocontablesForeignKey);
		//}


		if(librocontableTableCellFk!=null) {
			librocontableTableCellFk.RecargarLibroContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDefinicion(false);
			
			//if(!this.isEsNuevoDefinicion) {								
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				
			}
			
			if(this.permiteMantenimiento(this.definicion)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.definicionSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDefinicion=true;
					this.inicializarActualizarBindingTablaDefinicion(false);
					this.isEsNuevoDefinicion=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDefinicion=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDefinicion=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDefinicion(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDefinicion(false);
				
				this.habilitarDeshabilitarControlesDefinicion(false);
			
												
				
				if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDefinicion();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDefinicionActionPerformed(evt,definicionSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDefinicion(this.definicion,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,definicionSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.definicion.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDefinicionActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				this.definicion.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				this.definicion.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.definicion)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.definicionSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DefinicionModel) this.jTableDatosDefinicion.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDefinicion=true;
				this.inicializarActualizarBindingTablaDefinicion(false);
				this.isEsNuevoDefinicion=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDefinicion(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDefinicion(false);
				
				this.habilitarDeshabilitarControlesDefinicion(false);
				
				
				
				if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDefinicion();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDefinicionActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDefinicion.getRowCount()>=1) {
				jTableDatosDefinicion.removeRowSelectionInterval(0, jTableDatosDefinicion.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDefinicion(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDefinicion(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDefinicion(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDefinicion(false) ;
			
			this.isEsNuevoDefinicion=false;
			
			if(DefinicionJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDefinicion();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDefinicion(false);
				
				//SI ES MANUAL
				if(DefinicionJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDefinicion();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDefinicion--;			
			//Definicion definicionAux= new Definicion();			
			//definicionAux.setId(this.iIdNuevoDefinicion);
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDefinicion();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
			
			this.definicion.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.definicionLogic.getDefinicions().add(this.definicionAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.definicions.add(this.definicionAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDefinicion(false);
			
			this.jTableDatosDefinicion.setRowSelectionInterval(this.getIndiceNuevoDefinicion(), this.getIndiceNuevoDefinicion());
			
			int iLastRow =  this.jTableDatosDefinicion.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDefinicion.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDefinicion.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDefinicion(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDefinicion(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDefinicion(false);
			
			//SI ES MANUAL
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDefinicion();
			}
			
			//this.abrirFrameTreeDefinicion();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDefinicionActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE DefinicionES ?", "MANTENIMIENTO DE Definicion", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDefinicion.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDefinicion();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.definicionReturnGeneral=definicionLogic.procesarImportacionDefinicionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.definicionParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDefinicionReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDefinicionActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDefinicion.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDefinicion.setFileImportacion(this.jInternalFrameImportacionDefinicion.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDefinicion.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDefinicion.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDefinicion.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDefinicion.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		

		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DefinicionBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DefinicionBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDefinicions("Todos",definicionsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DefinicionConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialFormato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialFormato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialFormato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialFormato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDefinicion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDefinicion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDefinicion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDefinicion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoIvaItem_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoIvaItem_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoIvaItem_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoIvaItem_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nMostrarBodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nMostrarBodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nMostrarBodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nMostrarBodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_FACTOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ctor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ctor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ctor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ctor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONOTRORECARGO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nOtroRecargo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nOtroRecargo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nOtroRecargo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nOtroRecargo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoGlobalCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoGlobalCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoGlobalCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoGlobalCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCOA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCoa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCoa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCoa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCoa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCosteoDefinicion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCosteoDefinicion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCosteoDefinicion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCosteoDefinicion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONRETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCostoDefinicion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCostoDefinicion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCostoDefinicion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCostoDefinicion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nNovedadProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nNovedadProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nNovedadProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nNovedadProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCantidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCantidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCantidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCantidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nProductoPorProveedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nProductoPorProveedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nProductoPorProveedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nProductoPorProveedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nLoteCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nLoteCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nLoteCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nLoteCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONDETALLE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDetalle_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDetalle_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDetalle_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDetalle_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nIvaIncluido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nIvaIncluido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nIvaIncluido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nIvaIncluido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nLotes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nLotes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nLotes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nLotes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDescuentos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDescuentos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDescuentos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDescuentos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroRegistros_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroRegistros_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroRegistros_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroRegistros_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONORDENIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nOrdenIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nOrdenIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nOrdenIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nOrdenIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nMultiEmpresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nMultiEmpresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nMultiEmpresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nMultiEmpresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONENLINEA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nEnLinea_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nEnLinea_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nEnLinea_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nEnLinea_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTributario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTributario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTributario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTributario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONEVALUACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nEvaluacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nEvaluacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nEvaluacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nEvaluacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONOT:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nOt_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nOt_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nOt_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nOt_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONANTICIPO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nAnticipo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nAnticipo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nAnticipo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nAnticipo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCIERRE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCierre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCierre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCierre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCierre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONGENERAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nGeneral_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nGeneral_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nGeneral_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nGeneral_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPorProducto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPorProducto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPorProducto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPorProducto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONDESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDescuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDescuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDescuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDescuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONSERIES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nSeries_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nSeries_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nSeries_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nSeries_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_LibroContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_LibroContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_LibroContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_LibroContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONINTERNO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nInterno_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nInterno_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nInterno_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nInterno_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONRESERVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nReserva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nReserva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nReserva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nReserva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPrecioProveedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPrecioProveedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPrecioProveedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPrecioProveedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nProduccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nProduccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nProduccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nProduccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nCodigoBarra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nCodigoBarra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nCodigoBarra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nCodigoBarra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_CONROMANEOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nRomaneos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nRomaneos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nRomaneos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nRomaneos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDefinicion.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DefinicionConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO:
					sNombreCampoCategoria="secuencial_formato";
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoria="secuencial";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION:
					sNombreCampoCategoria="id_tipo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM:
					sNombreCampoCategoria="id_tipo_iva_item";
					break;

				case DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA:
					sNombreCampoCategoria="con_mostrar_bodega";
					break;

				case DefinicionConstantesFunciones.LABEL_FACTOR:
					sNombreCampoCategoria="factor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONOTRORECARGO:
					sNombreCampoCategoria="con_otro_recargo";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE:
					sNombreCampoCategoria="id_tipo_global_cliente";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCOA:
					sNombreCampoCategoria="con_coa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION:
					sNombreCampoCategoria="id_tipo_costeo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONRETENCION:
					sNombreCampoCategoria="con_retencion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION:
					sNombreCampoCategoria="id_tipo_costo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO:
					sNombreCampoCategoria="con_novedad_producto";
					break;

				case DefinicionConstantesFunciones.LABEL_CONICE:
					sNombreCampoCategoria="con_ice";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCANTIDAD:
					sNombreCampoCategoria="con_cantidad";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR:
					sNombreCampoCategoria="con_producto_por_proveedor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE:
					sNombreCampoCategoria="con_lote_cliente";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE:
					sNombreCampoCategoria="con_cuenta_contable";
					break;

				case DefinicionConstantesFunciones.LABEL_CONDETALLE:
					sNombreCampoCategoria="con_detalle";
					break;

				case DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO:
					sNombreCampoCategoria="con_iva_incluido";
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTES:
					sNombreCampoCategoria="con_lotes";
					break;

				case DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS:
					sNombreCampoCategoria="numero_descuentos";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIO:
					sNombreCampoCategoria="con_precio";
					break;

				case DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS:
					sNombreCampoCategoria="numero_registros";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO:
					sNombreCampoCategoria="con_centro_costo";
					break;

				case DefinicionConstantesFunciones.LABEL_CONORDENIVA:
					sNombreCampoCategoria="con_orden_iva";
					break;

				case DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA:
					sNombreCampoCategoria="con_multi_empresa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case DefinicionConstantesFunciones.LABEL_CONENLINEA:
					sNombreCampoCategoria="con_en_linea";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoria="id_tipo_tributario";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoria="id_tipo_retencion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONEVALUACION:
					sNombreCampoCategoria="con_evaluacion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONOT:
					sNombreCampoCategoria="con_ot";
					break;

				case DefinicionConstantesFunciones.LABEL_CONANTICIPO:
					sNombreCampoCategoria="con_anticipo";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCIERRE:
					sNombreCampoCategoria="con_cierre";
					break;

				case DefinicionConstantesFunciones.LABEL_CONGENERAL:
					sNombreCampoCategoria="con_general";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO:
					sNombreCampoCategoria="con_por_producto";
					break;

				case DefinicionConstantesFunciones.LABEL_CONDESCUENTO:
					sNombreCampoCategoria="con_descuento";
					break;

				case DefinicionConstantesFunciones.LABEL_CONSERIES:
					sNombreCampoCategoria="con_series";
					break;

				case DefinicionConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoria="id_tipo_documento";
					break;

				case DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE:
					sNombreCampoCategoria="id_libro_contable";
					break;

				case DefinicionConstantesFunciones.LABEL_CONINTERNO:
					sNombreCampoCategoria="con_interno";
					break;

				case DefinicionConstantesFunciones.LABEL_CONRESERVA:
					sNombreCampoCategoria="con_reserva";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR:
					sNombreCampoCategoria="con_precio_proveedor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCCION:
					sNombreCampoCategoria="con_produccion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA:
					sNombreCampoCategoria="con_codigo_barra";
					break;

				case DefinicionConstantesFunciones.LABEL_CONROMANEOS:
					sNombreCampoCategoria="con_romaneos";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;

				case DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DefinicionConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO:
					sNombreCampoCategoriaValor="secuencial_formato";
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoriaValor="secuencial";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION:
					sNombreCampoCategoriaValor="id_tipo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM:
					sNombreCampoCategoriaValor="id_tipo_iva_item";
					break;

				case DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA:
					sNombreCampoCategoriaValor="con_mostrar_bodega";
					break;

				case DefinicionConstantesFunciones.LABEL_FACTOR:
					sNombreCampoCategoriaValor="factor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONOTRORECARGO:
					sNombreCampoCategoriaValor="con_otro_recargo";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE:
					sNombreCampoCategoriaValor="id_tipo_global_cliente";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCOA:
					sNombreCampoCategoriaValor="con_coa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION:
					sNombreCampoCategoriaValor="id_tipo_costeo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONRETENCION:
					sNombreCampoCategoriaValor="con_retencion";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION:
					sNombreCampoCategoriaValor="id_tipo_costo_definicion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO:
					sNombreCampoCategoriaValor="con_novedad_producto";
					break;

				case DefinicionConstantesFunciones.LABEL_CONICE:
					sNombreCampoCategoriaValor="con_ice";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCANTIDAD:
					sNombreCampoCategoriaValor="con_cantidad";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR:
					sNombreCampoCategoriaValor="con_producto_por_proveedor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE:
					sNombreCampoCategoriaValor="con_lote_cliente";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE:
					sNombreCampoCategoriaValor="con_cuenta_contable";
					break;

				case DefinicionConstantesFunciones.LABEL_CONDETALLE:
					sNombreCampoCategoriaValor="con_detalle";
					break;

				case DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO:
					sNombreCampoCategoriaValor="con_iva_incluido";
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTES:
					sNombreCampoCategoriaValor="con_lotes";
					break;

				case DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS:
					sNombreCampoCategoriaValor="numero_descuentos";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIO:
					sNombreCampoCategoriaValor="con_precio";
					break;

				case DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS:
					sNombreCampoCategoriaValor="numero_registros";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO:
					sNombreCampoCategoriaValor="con_centro_costo";
					break;

				case DefinicionConstantesFunciones.LABEL_CONORDENIVA:
					sNombreCampoCategoriaValor="con_orden_iva";
					break;

				case DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA:
					sNombreCampoCategoriaValor="con_multi_empresa";
					break;

				case DefinicionConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case DefinicionConstantesFunciones.LABEL_CONENLINEA:
					sNombreCampoCategoriaValor="con_en_linea";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoriaValor="id_tipo_tributario";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoriaValor="id_tipo_retencion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONEVALUACION:
					sNombreCampoCategoriaValor="con_evaluacion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONOT:
					sNombreCampoCategoriaValor="con_ot";
					break;

				case DefinicionConstantesFunciones.LABEL_CONANTICIPO:
					sNombreCampoCategoriaValor="con_anticipo";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCIERRE:
					sNombreCampoCategoriaValor="con_cierre";
					break;

				case DefinicionConstantesFunciones.LABEL_CONGENERAL:
					sNombreCampoCategoriaValor="con_general";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO:
					sNombreCampoCategoriaValor="con_por_producto";
					break;

				case DefinicionConstantesFunciones.LABEL_CONDESCUENTO:
					sNombreCampoCategoriaValor="con_descuento";
					break;

				case DefinicionConstantesFunciones.LABEL_CONSERIES:
					sNombreCampoCategoriaValor="con_series";
					break;

				case DefinicionConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoriaValor="id_tipo_documento";
					break;

				case DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE:
					sNombreCampoCategoriaValor="id_libro_contable";
					break;

				case DefinicionConstantesFunciones.LABEL_CONINTERNO:
					sNombreCampoCategoriaValor="con_interno";
					break;

				case DefinicionConstantesFunciones.LABEL_CONRESERVA:
					sNombreCampoCategoriaValor="con_reserva";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR:
					sNombreCampoCategoriaValor="con_precio_proveedor";
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCCION:
					sNombreCampoCategoriaValor="con_produccion";
					break;

				case DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA:
					sNombreCampoCategoriaValor="con_codigo_barra";
					break;

				case DefinicionConstantesFunciones.LABEL_CONROMANEOS:
					sNombreCampoCategoriaValor="con_romaneos";
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;

				case DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DefinicionConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DefinicionConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_formato");
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_definicion");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case DefinicionConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Item",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_iva_item");
					break;

				case DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mostrar Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_mostrar_bodega");
					break;

				case DefinicionConstantesFunciones.LABEL_FACTOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"factor");
					break;

				case DefinicionConstantesFunciones.LABEL_CONOTRORECARGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros Recargos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_otro_recargo");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_global_cliente");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCOA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Coa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_coa");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Costeo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_costeo_definicion");
					break;

				case DefinicionConstantesFunciones.LABEL_CONRETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retenciones",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_retencion");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_costo_definicion");
					break;

				case DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Novedades Prod",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_novedad_producto");
					break;

				case DefinicionConstantesFunciones.LABEL_CONICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte," Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_ice");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_cantidad");
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Prod x Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_producto_por_proveedor");
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lote Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_lote_cliente");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_cuenta_contable");
					break;

				case DefinicionConstantesFunciones.LABEL_CONDETALLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_detalle");
					break;

				case DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva Incluido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_iva_incluido");
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Lotes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_lotes");
					break;

				case DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Descuentos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_descuentos");
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_precio");
					break;

				case DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Registros",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_registros");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_centro_costo");
					break;

				case DefinicionConstantesFunciones.LABEL_CONORDENIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Orden Iva Incluido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_orden_iva");
					break;

				case DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Multi Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_multi_empresa");
					break;

				case DefinicionConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case DefinicionConstantesFunciones.LABEL_CONENLINEA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Integracion En Linea",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_en_linea");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sustento Trib.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_tributario");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cod Ret.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion");
					break;

				case DefinicionConstantesFunciones.LABEL_CONEVALUACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Evaluacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_evaluacion");
					break;

				case DefinicionConstantesFunciones.LABEL_CONOT:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"OT",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_ot");
					break;

				case DefinicionConstantesFunciones.LABEL_CONANTICIPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anticipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_anticipo");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCIERRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cierre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_cierre");
					break;

				case DefinicionConstantesFunciones.LABEL_CONGENERAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"General",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_general");
					break;

				case DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Por Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_por_producto");
					break;

				case DefinicionConstantesFunciones.LABEL_CONDESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_descuento");
					break;

				case DefinicionConstantesFunciones.LABEL_CONSERIES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Series",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_series");
					break;

				case DefinicionConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_documento");
					break;

				case DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Libro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_libro_contable");
					break;

				case DefinicionConstantesFunciones.LABEL_CONINTERNO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"P. Interno",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_interno");
					break;

				case DefinicionConstantesFunciones.LABEL_CONRESERVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Reserva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_reserva");
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_precio_proveedor");
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Produccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_produccion");
					break;

				case DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Codigo Barra",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_codigo_barra");
					break;

				case DefinicionConstantesFunciones.LABEL_CONROMANEOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Romaneos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_romaneos");
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Transaccion Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;

				case DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDefinicionActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Definicions");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DefinicionConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getsecuencial_formato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_SECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIAL);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getsecuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipodefinicion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipoivaitem_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_mostrar_bodega());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_FACTOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_FACTOR);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getfactor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONOTRORECARGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_otro_recargo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipoglobalcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCOA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCOA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_coa());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipocosteodefinicion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONRETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRETENCION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipocostodefinicion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_novedad_producto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONICE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_ice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCANTIDAD);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_cantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_producto_por_proveedor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_lote_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_cuenta_contable());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONDETALLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDETALLE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_detalle());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_iva_incluido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONLOTES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTES);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_lotes());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getnumero_descuentos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_precio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getnumero_registros());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_centro_costo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONORDENIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONORDENIVA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_orden_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_multi_empresa());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONENLINEA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONENLINEA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_en_linea());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipotributario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPORETENCION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettiporetencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONEVALUACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONEVALUACION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_evaluacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONOT:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOT);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_ot());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONANTICIPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONANTICIPO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_anticipo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCIERRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCIERRE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_cierre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONGENERAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONGENERAL);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_general());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_por_producto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONDESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDESCUENTO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_descuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONSERIES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONSERIES);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_series());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipodocumento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getlibrocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONINTERNO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONINTERNO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_interno());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONRESERVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRESERVA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_reserva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_precio_proveedor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONPRODUCCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCCION);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_produccion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_codigo_barra());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_CONROMANEOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONROMANEOS);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcon_romaneos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(Definicion definicion:definicionsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(definicion.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDefinicion(row);				
			//	iRow++;
			//}				
			
			//for(Definicion definicionAux:definicionsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDefinicion(definicionAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDefinicion(false);
			
			//SI ES MANUAL
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDefinicion();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDefinicion(false);
			
			//SI ES MANUAL
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDefinicion();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDefinicionActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDefinicion(false);
			
			//SI ES MANUAL
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDefinicion();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDefinicion() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDefinicion.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDefinicion.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDefinicion.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDefinicion.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDefinicion.setMinimumSize(dimensionMinimum);
		this.jTableDatosDefinicion.setMaximumSize(dimensionMaximum);
		this.jTableDatosDefinicion.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDefinicion(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDefinicion(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDefinicion(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDefinicion(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDefinicion(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDefinicion(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDefinicion(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDefinicion(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DefinicionJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDefinicion() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDefinicion();
		
		this.inicializarActualizarBindingBotonesManualDefinicion(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDefinicion();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDefinicion() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDefinicion(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDefinicion(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDefinicion.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDefinicion.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDefinicion.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDefinicion!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionNuevoDefinicion.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionSinCerrarDefinicion.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionSinMensajeDefinicion.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDefinicion.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDefinicion.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDefinicion.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDefinicion!=null) {
				this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionNuevoDefinicion.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionSinCerrarDefinicion.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDefinicion.jCheckBoxPostAccionSinMensajeDefinicion.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDefinicion.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDefinicion.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDefinicion.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDefinicion.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDefinicion.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDefinicion.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDefinicion.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDefinicion.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDefinicion.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDefinicion(Boolean esInicializar) throws Exception {
		try	{	
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDefinicion(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDefinicion() throws Exception {
		try	{
			if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDefinicion();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDefinicion() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDefinicion() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDefinicion.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDefinicion.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDefinicion.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDefinicion.addItem(reporte);
			}
			
			
			if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDefinicion.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDefinicion.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDefinicion.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDefinicion.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDefinicion.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDefinicion.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDefinicion.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDefinicion();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDefinicion() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
				this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
				this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
				
				if(this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDefinicion.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDefinicion.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DefinicionConstantesFunciones.getTiposSeleccionarDefinicion(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DefinicionConstantesFunciones.getTiposSeleccionarDefinicion(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DefinicionConstantesFunciones.getTiposSeleccionarDefinicion(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDefinicion.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDefinicion.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDefinicion()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.getSelectedItem()!=null){this.id_cuenta_contableFK_IdCuentaContable=((CuentaContable)this.jComboBoxid_cuenta_contableFK_IdCuentaContableDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.getSelectedItem()!=null){this.id_libro_contableFK_IdLibroContable=((LibroContable)this.jComboBoxid_libro_contableFK_IdLibroContableDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_sucursalFK_IdSucursalDefinicion.getSelectedItem()!=null){this.id_sucursalFK_IdSucursal=((Sucursal)this.jComboBoxid_sucursalFK_IdSucursalDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.getSelectedItem()!=null){this.id_tipo_costeo_definicionFK_IdTipoCosteoDefinicion=((TipoCosteoDefinicion)this.jComboBoxid_tipo_costeo_definicionFK_IdTipoCosteoDefinicionDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.getSelectedItem()!=null){this.id_tipo_costo_definicionFK_IdTipoCostoDefinicion=((TipoCostoDefinicion)this.jComboBoxid_tipo_costo_definicionFK_IdTipoCostoDefinicionDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.getSelectedItem()!=null){this.id_tipo_definicionFK_IdTipoDefinicion=((TipoDefinicion)this.jComboBoxid_tipo_definicionFK_IdTipoDefinicionDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.getSelectedItem()!=null){this.id_tipo_documentoFK_IdTipoDocumento=((TipoDocumento)this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.getSelectedItem()!=null){this.id_tipo_global_clienteFK_IdTipoGlobalCliente=((TipoGlobalCliente)this.jComboBoxid_tipo_global_clienteFK_IdTipoGlobalClienteDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.getSelectedItem()!=null){this.id_tipo_iva_itemFK_IdTipoIvaItem=((TipoIvaItem)this.jComboBoxid_tipo_iva_itemFK_IdTipoIvaItemDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.getSelectedItem()!=null){this.id_tipo_retencionFK_IdTipoRetencion=((TipoRetencion)this.jComboBoxid_tipo_retencionFK_IdTipoRetencionDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.getSelectedItem()!=null){this.id_tipo_tributarioFK_IdTipoTributario=((TipoTributario)this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioDefinicion.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionDefinicion.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDefinicion(Boolean esInicializar) throws Exception {				
		if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDefinicion();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDefinicion() throws Exception {
		this.inicializarActualizarBindingTablaDefinicion(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDefinicion() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDefinicionOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicionOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDefinicion(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=definicionLogic.getDefinicions().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=definicions.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDefinicion.setModel(new DefinicionModel(this.definicionLogic.getDefinicions(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDefinicion.setModel(new DefinicionModel(this.definicions,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDefinicion!=null && this.jInternalFrameOrderByDefinicion.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDefinicion();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DefinicionConstantesFunciones.SCLASSWEBTITULO,definicionConstantesFunciones.resaltarSeleccionarDefinicion,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DefinicionConstantesFunciones.SCLASSWEBTITULO,definicionConstantesFunciones.resaltarSeleccionarDefinicion,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_ID));

		if(this.definicionConstantesFunciones.mostraridDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltaridDefinicion,this.definicionConstantesFunciones.activaridDefinicion,iSizeTabla,this,true,"idDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltaridDefinicion,this.definicionConstantesFunciones.activaridDefinicion,this,true,"idDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDEMPRESA));

		if(this.definicionConstantesFunciones.mostrarid_empresaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.definicionConstantesFunciones.resaltarid_empresaDefinicion,this,this.definicionConstantesFunciones.activarid_empresaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.definicionConstantesFunciones.resaltarid_empresaDefinicion,this,this.definicionConstantesFunciones.activarid_empresaDefinicion,false,"id_empresaDefinicion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDMODULO));

		if(this.definicionConstantesFunciones.mostrarid_moduloDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.definicionConstantesFunciones.resaltarid_moduloDefinicion,this,this.definicionConstantesFunciones.activarid_moduloDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.definicionConstantesFunciones.resaltarid_moduloDefinicion,this,this.definicionConstantesFunciones.activarid_moduloDefinicion,false,"id_moduloDefinicion","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO));

		if(this.definicionConstantesFunciones.mostrarsecuencial_formatoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.definicionConstantesFunciones.resaltarsecuencial_formatoDefinicion,this.definicionConstantesFunciones.activarsecuencial_formatoDefinicion,iSizeTabla,this,true,"secuencial_formatoDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarsecuencial_formatoDefinicion,this.definicionConstantesFunciones.activarsecuencial_formatoDefinicion,this,true,"secuencial_formatoDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_SECUENCIAL));

		if(this.definicionConstantesFunciones.mostrarsecuencialDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_SECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltarsecuencialDefinicion,this.definicionConstantesFunciones.activarsecuencialDefinicion,iSizeTabla,this,true,"secuencialDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarsecuencialDefinicion,this.definicionConstantesFunciones.activarsecuencialDefinicion,this,true,"secuencialDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION));

		if(this.definicionConstantesFunciones.mostrarid_tipo_definicionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDefinicionTableCell(this.tipodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_definicionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoDefinicionTableCell(this.tipodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_definicionDefinicion,true,"id_tipo_definicionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.definicionConstantesFunciones.mostrarid_transaccionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.definicionConstantesFunciones.resaltarid_transaccionDefinicion,this,this.definicionConstantesFunciones.activarid_transaccionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.definicionConstantesFunciones.resaltarid_transaccionDefinicion,this,this.definicionConstantesFunciones.activarid_transaccionDefinicion,true,"id_transaccionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.definicionConstantesFunciones.mostrarid_sucursalDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.definicionConstantesFunciones.resaltarid_sucursalDefinicion,this,this.definicionConstantesFunciones.activarid_sucursalDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.definicionConstantesFunciones.resaltarid_sucursalDefinicion,this,this.definicionConstantesFunciones.activarid_sucursalDefinicion,true,"id_sucursalDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM));

		if(this.definicionConstantesFunciones.mostrarid_tipo_iva_itemDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoIvaItemTableCell(this.tipoivaitemsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_iva_itemDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_iva_itemDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoIvaItemTableCell(this.tipoivaitemsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_iva_itemDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_iva_itemDefinicion,true,"id_tipo_iva_itemDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA));

		if(this.definicionConstantesFunciones.mostrarcon_mostrar_bodegaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_mostrar_bodegaDefinicion,this.definicionConstantesFunciones.activarcon_mostrar_bodegaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_mostrar_bodegaDefinicion,this.definicionConstantesFunciones.activarcon_mostrar_bodegaDefinicion,this,true,"con_mostrar_bodegaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_FACTOR));

		if(this.definicionConstantesFunciones.mostrarfactorDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_FACTOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltarfactorDefinicion,this.definicionConstantesFunciones.activarfactorDefinicion,iSizeTabla,this,true,"factorDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarfactorDefinicion,this.definicionConstantesFunciones.activarfactorDefinicion,this,true,"factorDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONOTRORECARGO));

		if(this.definicionConstantesFunciones.mostrarcon_otro_recargoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONOTRORECARGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_otro_recargoDefinicion,this.definicionConstantesFunciones.activarcon_otro_recargoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_otro_recargoDefinicion,this.definicionConstantesFunciones.activarcon_otro_recargoDefinicion,this,true,"con_otro_recargoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE));

		if(this.definicionConstantesFunciones.mostrarid_tipo_global_clienteDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoGlobalClienteTableCell(this.tipoglobalclientesForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_global_clienteDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_global_clienteDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoGlobalClienteTableCell(this.tipoglobalclientesForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_global_clienteDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_global_clienteDefinicion,true,"id_tipo_global_clienteDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCOA));

		if(this.definicionConstantesFunciones.mostrarcon_coaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCOA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_coaDefinicion,this.definicionConstantesFunciones.activarcon_coaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_coaDefinicion,this.definicionConstantesFunciones.activarcon_coaDefinicion,this,true,"con_coaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION));

		if(this.definicionConstantesFunciones.mostrarid_tipo_costeo_definicionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCosteoDefinicionTableCell(this.tipocosteodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_costeo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_costeo_definicionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoCosteoDefinicionTableCell(this.tipocosteodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_costeo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_costeo_definicionDefinicion,true,"id_tipo_costeo_definicionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONRETENCION));

		if(this.definicionConstantesFunciones.mostrarcon_retencionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONRETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_retencionDefinicion,this.definicionConstantesFunciones.activarcon_retencionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_retencionDefinicion,this.definicionConstantesFunciones.activarcon_retencionDefinicion,this,true,"con_retencionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION));

		if(this.definicionConstantesFunciones.mostrarid_tipo_costo_definicionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCostoDefinicionTableCell(this.tipocostodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_costo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_costo_definicionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoCostoDefinicionTableCell(this.tipocostodefinicionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_costo_definicionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_costo_definicionDefinicion,true,"id_tipo_costo_definicionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-40);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO));

		if(this.definicionConstantesFunciones.mostrarcon_novedad_productoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_novedad_productoDefinicion,this.definicionConstantesFunciones.activarcon_novedad_productoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_novedad_productoDefinicion,this.definicionConstantesFunciones.activarcon_novedad_productoDefinicion,this,true,"con_novedad_productoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONICE));

		if(this.definicionConstantesFunciones.mostrarcon_iceDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_iceDefinicion,this.definicionConstantesFunciones.activarcon_iceDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_iceDefinicion,this.definicionConstantesFunciones.activarcon_iceDefinicion,this,true,"con_iceDefinicion","BASICO"));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCANTIDAD));

		if(this.definicionConstantesFunciones.mostrarcon_cantidadDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_cantidadDefinicion,this.definicionConstantesFunciones.activarcon_cantidadDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_cantidadDefinicion,this.definicionConstantesFunciones.activarcon_cantidadDefinicion,this,true,"con_cantidadDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR));

		if(this.definicionConstantesFunciones.mostrarcon_producto_por_proveedorDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_producto_por_proveedorDefinicion,this.definicionConstantesFunciones.activarcon_producto_por_proveedorDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_producto_por_proveedorDefinicion,this.definicionConstantesFunciones.activarcon_producto_por_proveedorDefinicion,this,true,"con_producto_por_proveedorDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE));

		if(this.definicionConstantesFunciones.mostrarcon_lote_clienteDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_lote_clienteDefinicion,this.definicionConstantesFunciones.activarcon_lote_clienteDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_lote_clienteDefinicion,this.definicionConstantesFunciones.activarcon_lote_clienteDefinicion,this,true,"con_lote_clienteDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE));

		if(this.definicionConstantesFunciones.mostrarcon_cuenta_contableDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_cuenta_contableDefinicion,this.definicionConstantesFunciones.activarcon_cuenta_contableDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_cuenta_contableDefinicion,this.definicionConstantesFunciones.activarcon_cuenta_contableDefinicion,this,true,"con_cuenta_contableDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONDETALLE));

		if(this.definicionConstantesFunciones.mostrarcon_detalleDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONDETALLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_detalleDefinicion,this.definicionConstantesFunciones.activarcon_detalleDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_detalleDefinicion,this.definicionConstantesFunciones.activarcon_detalleDefinicion,this,true,"con_detalleDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO));

		if(this.definicionConstantesFunciones.mostrarcon_iva_incluidoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_iva_incluidoDefinicion,this.definicionConstantesFunciones.activarcon_iva_incluidoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_iva_incluidoDefinicion,this.definicionConstantesFunciones.activarcon_iva_incluidoDefinicion,this,true,"con_iva_incluidoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONLOTES));

		if(this.definicionConstantesFunciones.mostrarcon_lotesDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONLOTES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_lotesDefinicion,this.definicionConstantesFunciones.activarcon_lotesDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_lotesDefinicion,this.definicionConstantesFunciones.activarcon_lotesDefinicion,this,true,"con_lotesDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS));

		if(this.definicionConstantesFunciones.mostrarnumero_descuentosDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltarnumero_descuentosDefinicion,this.definicionConstantesFunciones.activarnumero_descuentosDefinicion,iSizeTabla,this,true,"numero_descuentosDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarnumero_descuentosDefinicion,this.definicionConstantesFunciones.activarnumero_descuentosDefinicion,this,true,"numero_descuentosDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONPRECIO));

		if(this.definicionConstantesFunciones.mostrarcon_precioDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONPRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_precioDefinicion,this.definicionConstantesFunciones.activarcon_precioDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_precioDefinicion,this.definicionConstantesFunciones.activarcon_precioDefinicion,this,true,"con_precioDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS));

		if(this.definicionConstantesFunciones.mostrarnumero_registrosDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltarnumero_registrosDefinicion,this.definicionConstantesFunciones.activarnumero_registrosDefinicion,iSizeTabla,this,true,"numero_registrosDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarnumero_registrosDefinicion,this.definicionConstantesFunciones.activarnumero_registrosDefinicion,this,true,"numero_registrosDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO));

		if(this.definicionConstantesFunciones.mostrarcon_centro_costoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_centro_costoDefinicion,this.definicionConstantesFunciones.activarcon_centro_costoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_centro_costoDefinicion,this.definicionConstantesFunciones.activarcon_centro_costoDefinicion,this,true,"con_centro_costoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONORDENIVA));

		if(this.definicionConstantesFunciones.mostrarcon_orden_ivaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONORDENIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_orden_ivaDefinicion,this.definicionConstantesFunciones.activarcon_orden_ivaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_orden_ivaDefinicion,this.definicionConstantesFunciones.activarcon_orden_ivaDefinicion,this,true,"con_orden_ivaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA));

		if(this.definicionConstantesFunciones.mostrarcon_multi_empresaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_multi_empresaDefinicion,this.definicionConstantesFunciones.activarcon_multi_empresaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_multi_empresaDefinicion,this.definicionConstantesFunciones.activarcon_multi_empresaDefinicion,this,true,"con_multi_empresaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDFORMATO));

		if(this.definicionConstantesFunciones.mostrarid_formatoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.definicionConstantesFunciones.resaltarid_formatoDefinicion,this,this.definicionConstantesFunciones.activarid_formatoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.definicionConstantesFunciones.resaltarid_formatoDefinicion,this,this.definicionConstantesFunciones.activarid_formatoDefinicion,true,"id_formatoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,-30);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONENLINEA));

		if(this.definicionConstantesFunciones.mostrarcon_en_lineaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONENLINEA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_en_lineaDefinicion,this.definicionConstantesFunciones.activarcon_en_lineaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_en_lineaDefinicion,this.definicionConstantesFunciones.activarcon_en_lineaDefinicion,this,true,"con_en_lineaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));

		if(this.definicionConstantesFunciones.mostrarid_tipo_tributarioDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_tributarioDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_tributarioDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_tributarioDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_tributarioDefinicion,true,"id_tipo_tributarioDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPORETENCION));

		if(this.definicionConstantesFunciones.mostrarid_tipo_retencionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPORETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_retencionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_retencionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_retencionDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_retencionDefinicion,true,"id_tipo_retencionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONEVALUACION));

		if(this.definicionConstantesFunciones.mostrarcon_evaluacionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONEVALUACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_evaluacionDefinicion,this.definicionConstantesFunciones.activarcon_evaluacionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_evaluacionDefinicion,this.definicionConstantesFunciones.activarcon_evaluacionDefinicion,this,true,"con_evaluacionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONOT));

		if(this.definicionConstantesFunciones.mostrarcon_otDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONOT,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_otDefinicion,this.definicionConstantesFunciones.activarcon_otDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_otDefinicion,this.definicionConstantesFunciones.activarcon_otDefinicion,this,true,"con_otDefinicion","BASICO"));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONANTICIPO));

		if(this.definicionConstantesFunciones.mostrarcon_anticipoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONANTICIPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_anticipoDefinicion,this.definicionConstantesFunciones.activarcon_anticipoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_anticipoDefinicion,this.definicionConstantesFunciones.activarcon_anticipoDefinicion,this,true,"con_anticipoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCIERRE));

		if(this.definicionConstantesFunciones.mostrarcon_cierreDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCIERRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_cierreDefinicion,this.definicionConstantesFunciones.activarcon_cierreDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_cierreDefinicion,this.definicionConstantesFunciones.activarcon_cierreDefinicion,this,true,"con_cierreDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONGENERAL));

		if(this.definicionConstantesFunciones.mostrarcon_generalDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONGENERAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_generalDefinicion,this.definicionConstantesFunciones.activarcon_generalDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_generalDefinicion,this.definicionConstantesFunciones.activarcon_generalDefinicion,this,true,"con_generalDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO));

		if(this.definicionConstantesFunciones.mostrarcon_por_productoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_por_productoDefinicion,this.definicionConstantesFunciones.activarcon_por_productoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_por_productoDefinicion,this.definicionConstantesFunciones.activarcon_por_productoDefinicion,this,true,"con_por_productoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONDESCUENTO));

		if(this.definicionConstantesFunciones.mostrarcon_descuentoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONDESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_descuentoDefinicion,this.definicionConstantesFunciones.activarcon_descuentoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_descuentoDefinicion,this.definicionConstantesFunciones.activarcon_descuentoDefinicion,this,true,"con_descuentoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONSERIES));

		if(this.definicionConstantesFunciones.mostrarcon_seriesDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONSERIES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_seriesDefinicion,this.definicionConstantesFunciones.activarcon_seriesDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_seriesDefinicion,this.definicionConstantesFunciones.activarcon_seriesDefinicion,this,true,"con_seriesDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CANTIDAD));

		if(this.definicionConstantesFunciones.mostrarcantidadDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.definicionConstantesFunciones.resaltarcantidadDefinicion,this.definicionConstantesFunciones.activarcantidadDefinicion,iSizeTabla,this,true,"cantidadDefinicion","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.definicionConstantesFunciones.resaltarcantidadDefinicion,this.definicionConstantesFunciones.activarcantidadDefinicion,this,true,"cantidadDefinicion","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO));

		if(this.definicionConstantesFunciones.mostrarid_tipo_documentoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_documentoDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_documentoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.definicionConstantesFunciones.resaltarid_tipo_documentoDefinicion,this,this.definicionConstantesFunciones.activarid_tipo_documentoDefinicion,true,"id_tipo_documentoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE));

		if(this.definicionConstantesFunciones.mostrarid_libro_contableDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new LibroContableTableCell(this.librocontablesForeignKey,this.definicionConstantesFunciones.resaltarid_libro_contableDefinicion,this,this.definicionConstantesFunciones.activarid_libro_contableDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new LibroContableTableCell(this.librocontablesForeignKey,this.definicionConstantesFunciones.resaltarid_libro_contableDefinicion,this,this.definicionConstantesFunciones.activarid_libro_contableDefinicion,true,"id_libro_contableDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONINTERNO));

		if(this.definicionConstantesFunciones.mostrarcon_internoDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONINTERNO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_internoDefinicion,this.definicionConstantesFunciones.activarcon_internoDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_internoDefinicion,this.definicionConstantesFunciones.activarcon_internoDefinicion,this,true,"con_internoDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONRESERVA));

		if(this.definicionConstantesFunciones.mostrarcon_reservaDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONRESERVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_reservaDefinicion,this.definicionConstantesFunciones.activarcon_reservaDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_reservaDefinicion,this.definicionConstantesFunciones.activarcon_reservaDefinicion,this,true,"con_reservaDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR));

		if(this.definicionConstantesFunciones.mostrarcon_precio_proveedorDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_precio_proveedorDefinicion,this.definicionConstantesFunciones.activarcon_precio_proveedorDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_precio_proveedorDefinicion,this.definicionConstantesFunciones.activarcon_precio_proveedorDefinicion,this,true,"con_precio_proveedorDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONPRODUCCION));

		if(this.definicionConstantesFunciones.mostrarcon_produccionDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONPRODUCCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_produccionDefinicion,this.definicionConstantesFunciones.activarcon_produccionDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_produccionDefinicion,this.definicionConstantesFunciones.activarcon_produccionDefinicion,this,true,"con_produccionDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA));

		if(this.definicionConstantesFunciones.mostrarcon_codigo_barraDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_codigo_barraDefinicion,this.definicionConstantesFunciones.activarcon_codigo_barraDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_codigo_barraDefinicion,this.definicionConstantesFunciones.activarcon_codigo_barraDefinicion,this,true,"con_codigo_barraDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,DefinicionConstantesFunciones.LABEL_CONROMANEOS));

		if(this.definicionConstantesFunciones.mostrarcon_romaneosDefinicion && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DefinicionConstantesFunciones.LABEL_CONROMANEOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.definicionConstantesFunciones.resaltarcon_romaneosDefinicion,this.definicionConstantesFunciones.activarcon_romaneosDefinicion,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.definicionConstantesFunciones.resaltarcon_romaneosDefinicion,this.definicionConstantesFunciones.activarcon_romaneosDefinicion,this,true,"con_romaneosDefinicion","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DefinicionPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.definicionSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDefinicion.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDefinicion.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDefinicion && this.isPermisoGuardarCambiosDefinicion) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.definicionSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDefinicion.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDefinicion.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDefinicion && this.isPermisoGuardarCambiosDefinicion) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDefinicion && this.isPermisoGuardarCambiosDefinicion) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDefinicion.moveColumn(this.jTableDatosDefinicion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDefinicion.moveColumn(this.jTableDatosDefinicion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDefinicion.moveColumn(this.jTableDatosDefinicion.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDefinicion.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDefinicion.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDefinicion,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDefinicion.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDefinicion.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDefinicion.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDefinicion.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDefinicion.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=definicionLogic.getDefinicions().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=definicions.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDefinicion.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDefinicion.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDefinicion();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDefinicion=false;
					
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDefinicion==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDefinicion.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.definicion.getsType().equals("DUPLICADO")
				   || this.definicion.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDefinicion=true;
				
				} else {
					this.isEsNuevoDefinicion=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.definicionSessionBean.getEsGuardarRelacionado()) {
					if(this.definicion.getId()>=0 && !this.definicion.getIsNew()) {						
						this.isEsNuevoDefinicion=false;
						
					} else {
						this.isEsNuevoDefinicion=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDefinicion(esRelaciones);						
				
				this.seleccionarDefinicion(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.definicion.getId()<0) {
					this.isEsNuevoDefinicion=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDefinicion(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDefinicion(evt,rowIndex);
				}	
				
				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Definicion: " + this.dDif); 
					}
				}								
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDefinicion(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.definicion)) {
					if(this.definicion.getId()>0) {
						this.definicion.setIsDeleted(true);
						
						this.definicionsEliminados.add(this.definicion);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.definicionLogic.getDefinicions().remove(this.definicion);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.definicions.remove(this.definicion);				
					}
					
					
					((DefinicionModel) this.jTableDatosDefinicion.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDefinicion(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDefinicion(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDefinicion) {
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDefinicion.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDefinicion.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDefinicion(this.definicion);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.definicionConstantesFunciones.cargarid_empresaDefinicion || this.definicionConstantesFunciones.event_dependid_empresaDefinicion) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.definicion.getid_empresa());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(definicion.getEmpresa()!=null) {
							this.empresasForeignKey.add(definicion.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.definicion.getid_empresa(),false,"Formulario");

					//Modulo
					if(!this.definicionConstantesFunciones.cargarid_moduloDefinicion || this.definicionConstantesFunciones.event_dependid_moduloDefinicion) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.definicion.getid_modulo());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(definicion.getModulo()!=null) {
							this.modulosForeignKey.add(definicion.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.definicion.getid_modulo(),false,"Formulario");

					//TipoDefinicion
					if(!this.definicionConstantesFunciones.cargarid_tipo_definicionDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_definicionDefinicion) {
						//this.cargarCombosTipoDefinicionsForeignKeyLista(" where id="+this.definicion.getid_tipo_definicion());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipodefinicionsForeignKey=new ArrayList<TipoDefinicion>();

						if(definicion.getTipoDefinicion()!=null) {
							this.tipodefinicionsForeignKey.add(definicion.getTipoDefinicion());
						}

						this.addItemDefectoCombosForeignKeyTipoDefinicion();
						this.cargarCombosFrameTipoDefinicionsForeignKey("Todos");
					}
					this.setActualTipoDefinicionForeignKey(this.definicion.getid_tipo_definicion(),false,"Formulario");

					//Transaccion
					if(!this.definicionConstantesFunciones.cargarid_transaccionDefinicion || this.definicionConstantesFunciones.event_dependid_transaccionDefinicion) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.definicion.getid_transaccion());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(definicion.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(definicion.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.definicion.getid_transaccion(),false,"Formulario");

					//Sucursal
					if(!this.definicionConstantesFunciones.cargarid_sucursalDefinicion || this.definicionConstantesFunciones.event_dependid_sucursalDefinicion) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.definicion.getid_sucursal());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(definicion.getSucursal()!=null) {
							this.sucursalsForeignKey.add(definicion.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.definicion.getid_sucursal(),false,"Formulario");

					//TipoIvaItem
					if(!this.definicionConstantesFunciones.cargarid_tipo_iva_itemDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_iva_itemDefinicion) {
						//this.cargarCombosTipoIvaItemsForeignKeyLista(" where id="+this.definicion.getid_tipo_iva_item());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipoivaitemsForeignKey=new ArrayList<TipoIvaItem>();

						if(definicion.getTipoIvaItem()!=null) {
							this.tipoivaitemsForeignKey.add(definicion.getTipoIvaItem());
						}

						this.addItemDefectoCombosForeignKeyTipoIvaItem();
						this.cargarCombosFrameTipoIvaItemsForeignKey("Todos");
					}
					this.setActualTipoIvaItemForeignKey(this.definicion.getid_tipo_iva_item(),false,"Formulario");

					//TipoGlobalCliente
					if(!this.definicionConstantesFunciones.cargarid_tipo_global_clienteDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_global_clienteDefinicion) {
						//this.cargarCombosTipoGlobalClientesForeignKeyLista(" where id="+this.definicion.getid_tipo_global_cliente());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipoglobalclientesForeignKey=new ArrayList<TipoGlobalCliente>();

						if(definicion.getTipoGlobalCliente()!=null) {
							this.tipoglobalclientesForeignKey.add(definicion.getTipoGlobalCliente());
						}

						this.addItemDefectoCombosForeignKeyTipoGlobalCliente();
						this.cargarCombosFrameTipoGlobalClientesForeignKey("Todos");
					}
					this.setActualTipoGlobalClienteForeignKey(this.definicion.getid_tipo_global_cliente(),false,"Formulario");

					//TipoCosteoDefinicion
					if(!this.definicionConstantesFunciones.cargarid_tipo_costeo_definicionDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_costeo_definicionDefinicion) {
						//this.cargarCombosTipoCosteoDefinicionsForeignKeyLista(" where id="+this.definicion.getid_tipo_costeo_definicion());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipocosteodefinicionsForeignKey=new ArrayList<TipoCosteoDefinicion>();

						if(definicion.getTipoCosteoDefinicion()!=null) {
							this.tipocosteodefinicionsForeignKey.add(definicion.getTipoCosteoDefinicion());
						}

						this.addItemDefectoCombosForeignKeyTipoCosteoDefinicion();
						this.cargarCombosFrameTipoCosteoDefinicionsForeignKey("Todos");
					}
					this.setActualTipoCosteoDefinicionForeignKey(this.definicion.getid_tipo_costeo_definicion(),false,"Formulario");

					//TipoCostoDefinicion
					if(!this.definicionConstantesFunciones.cargarid_tipo_costo_definicionDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_costo_definicionDefinicion) {
						//this.cargarCombosTipoCostoDefinicionsForeignKeyLista(" where id="+this.definicion.getid_tipo_costo_definicion());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipocostodefinicionsForeignKey=new ArrayList<TipoCostoDefinicion>();

						if(definicion.getTipoCostoDefinicion()!=null) {
							this.tipocostodefinicionsForeignKey.add(definicion.getTipoCostoDefinicion());
						}

						this.addItemDefectoCombosForeignKeyTipoCostoDefinicion();
						this.cargarCombosFrameTipoCostoDefinicionsForeignKey("Todos");
					}
					this.setActualTipoCostoDefinicionForeignKey(this.definicion.getid_tipo_costo_definicion(),false,"Formulario");

					//Formato
					if(!this.definicionConstantesFunciones.cargarid_formatoDefinicion || this.definicionConstantesFunciones.event_dependid_formatoDefinicion) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.definicion.getid_formato());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(definicion.getFormato()!=null) {
							this.formatosForeignKey.add(definicion.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.definicion.getid_formato(),false,"Formulario");

					//TipoTributario
					if(!this.definicionConstantesFunciones.cargarid_tipo_tributarioDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_tributarioDefinicion) {
						//this.cargarCombosTipoTributariosForeignKeyLista(" where id="+this.definicion.getid_tipo_tributario());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

						if(definicion.getTipoTributario()!=null) {
							this.tipotributariosForeignKey.add(definicion.getTipoTributario());
						}

						this.addItemDefectoCombosForeignKeyTipoTributario();
						this.cargarCombosFrameTipoTributariosForeignKey("Todos");
					}
					this.setActualTipoTributarioForeignKey(this.definicion.getid_tipo_tributario(),false,"Formulario");

					//TipoRetencion
					if(!this.definicionConstantesFunciones.cargarid_tipo_retencionDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_retencionDefinicion) {
						//this.cargarCombosTipoRetencionsForeignKeyLista(" where id="+this.definicion.getid_tipo_retencion());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

						if(definicion.getTipoRetencion()!=null) {
							this.tiporetencionsForeignKey.add(definicion.getTipoRetencion());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencion();
						this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
					}
					this.setActualTipoRetencionForeignKey(this.definicion.getid_tipo_retencion(),false,"Formulario");

					//TipoDocumento
					if(!this.definicionConstantesFunciones.cargarid_tipo_documentoDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_documentoDefinicion) {
						//this.cargarCombosTipoDocumentosForeignKeyLista(" where id="+this.definicion.getid_tipo_documento());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

						if(definicion.getTipoDocumento()!=null) {
							this.tipodocumentosForeignKey.add(definicion.getTipoDocumento());
						}

						this.addItemDefectoCombosForeignKeyTipoDocumento();
						this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
					}
					this.setActualTipoDocumentoForeignKey(this.definicion.getid_tipo_documento(),false,"Formulario");

					//LibroContable
					if(!this.definicionConstantesFunciones.cargarid_libro_contableDefinicion || this.definicionConstantesFunciones.event_dependid_libro_contableDefinicion) {
						//this.cargarCombosLibroContablesForeignKeyLista(" where id="+this.definicion.getid_libro_contable());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.librocontablesForeignKey=new ArrayList<LibroContable>();

						if(definicion.getLibroContable()!=null) {
							this.librocontablesForeignKey.add(definicion.getLibroContable());
						}

						this.addItemDefectoCombosForeignKeyLibroContable();
						this.cargarCombosFrameLibroContablesForeignKey("Todos");
					}
					this.setActualLibroContableForeignKey(this.definicion.getid_libro_contable(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.definicionConstantesFunciones.cargarid_tipo_transaccion_moduloDefinicion || this.definicionConstantesFunciones.event_dependid_tipo_transaccion_moduloDefinicion) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.definicion.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(definicion.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(definicion.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.definicion.getid_tipo_transaccion_modulo(),false,"Formulario");

					//CuentaContable
					if(!this.definicionConstantesFunciones.cargarid_cuenta_contableDefinicion || this.definicionConstantesFunciones.event_dependid_cuenta_contableDefinicion) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.definicion.getid_cuenta_contable());
									//this.inicializarActualizarBindingDefinicion(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(definicion.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(definicion.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.definicion.getid_cuenta_contable(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDefinicion("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDefinicion(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDefinicion() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDefinicion(Definicion definicion) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDefinicion(definicion,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDefinicion(Definicion definicion,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDefinicion(definicion);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDefinicion(definicion,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDefinicion(definicion);
	}
	
	public void setVariablesObjetoActualToFormularioDefinicion(Definicion definicion) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setText(definicion.getId().toString());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setText(definicion.getsecuencial_formato());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setText(definicion.getsecuencial().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setSelected(definicion.getcon_mostrar_bodega());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setText(definicion.getfactor().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setSelected(definicion.getcon_otro_recargo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setSelected(definicion.getcon_coa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setSelected(definicion.getcon_retencion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setSelected(definicion.getcon_novedad_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setSelected(definicion.getcon_ice());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setSelected(definicion.getcon_cantidad());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setSelected(definicion.getcon_producto_por_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setSelected(definicion.getcon_lote_cliente());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setSelected(definicion.getcon_cuenta_contable());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setSelected(definicion.getcon_detalle());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setSelected(definicion.getcon_iva_incluido());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setSelected(definicion.getcon_lotes());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setText(definicion.getnumero_descuentos().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setSelected(definicion.getcon_precio());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setText(definicion.getnumero_registros().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setSelected(definicion.getcon_centro_costo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setSelected(definicion.getcon_orden_iva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setSelected(definicion.getcon_multi_empresa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setSelected(definicion.getcon_en_linea());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setSelected(definicion.getcon_evaluacion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setSelected(definicion.getcon_ot());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setSelected(definicion.getcon_anticipo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setSelected(definicion.getcon_cierre());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setSelected(definicion.getcon_general());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setSelected(definicion.getcon_por_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setSelected(definicion.getcon_descuento());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setSelected(definicion.getcon_series());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setText(definicion.getcantidad().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setSelected(definicion.getcon_interno());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setSelected(definicion.getcon_reserva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setSelected(definicion.getcon_precio_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setSelected(definicion.getcon_produccion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setSelected(definicion.getcon_codigo_barra());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setSelected(definicion.getcon_romaneos());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Definicion definicionLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,definicionLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Definicion definicionLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				definicionLocal=this.definicion;
			} else {
				definicionLocal=this.definicionAnterior;
			}
		}
		
		if(this.permiteMantenimiento(definicionLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDefinicion(definicionLocal,true);
					
					if(definicionSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(definicionLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.definicionSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(definicionLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDefinicion(Definicion definicion,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDefinicion(definicion,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(definicion);
	}
	
	public void setVariablesFormularioToObjetoActualDefinicion(Definicion definicion,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDefinicion(definicion,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDefinicion(Definicion definicion,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.getText()==null || this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.getText()=="" || this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.getText()=="Id") {
				this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setText("0");
			}

			if(conColumnasBase) {definicion.setId(Long.parseLong(this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelIdDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setsecuencial_formato(this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencial_formatoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setsecuencial(Long.parseLong(this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_SECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelsecuencialDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_mostrar_bodega(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_mostrar_bodegaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setfactor(Double.parseDouble(this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_FACTOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelfactorDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_otro_recargo(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONOTRORECARGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otro_recargoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_coa(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCOA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_coaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_retencion(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONRETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_retencionDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_novedad_producto(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_novedad_productoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_ice(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iceDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_cantidad(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cantidadDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_producto_por_proveedor(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_producto_por_proveedorDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_lote_cliente(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lote_clienteDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_cuenta_contable(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cuenta_contableDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_detalle(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONDETALLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_detalleDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_iva_incluido(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_iva_incluidoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_lotes(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONLOTES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_lotesDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setnumero_descuentos(Integer.parseInt(this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_descuentosDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_precio(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONPRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precioDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setnumero_registros(Integer.parseInt(this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelnumero_registrosDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_centro_costo(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_centro_costoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_orden_iva(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONORDENIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_orden_ivaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_multi_empresa(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_multi_empresaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_en_linea(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONENLINEA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_en_lineaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_evaluacion(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONEVALUACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_evaluacionDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_ot(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONOT+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_otDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_anticipo(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONANTICIPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_anticipoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_cierre(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCIERRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_cierreDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_general(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONGENERAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_generalDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_por_producto(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_por_productoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_descuento(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONDESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_descuentoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_series(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONSERIES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_seriesDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcantidadDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_interno(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONINTERNO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_internoDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_reserva(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONRESERVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_reservaDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_precio_proveedor(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_precio_proveedorDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_produccion(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONPRODUCCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_produccionDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_codigo_barra(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_codigo_barraDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			definicion.setcon_romaneos(this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DefinicionConstantesFunciones.LABEL_CONROMANEOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDefinicion.jLabelcon_romaneosDefinicion,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDefinicion(Definicion definicionBean,Definicion definicion,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && definicionBean.getid_tipo_definicion()!=null && !definicionBean.getid_tipo_definicion().equals(-1L))) {definicion.setid_tipo_definicion(definicionBean.getid_tipo_definicion());}
			if(conDefault || (!conDefault && definicionBean.getid_transaccion()!=null && !definicionBean.getid_transaccion().equals(-1L))) {definicion.setid_transaccion(definicionBean.getid_transaccion());}
			if(conDefault || (!conDefault && definicionBean.getid_sucursal()!=null && !definicionBean.getid_sucursal().equals(-1L))) {definicion.setid_sucursal(definicionBean.getid_sucursal());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_iva_item()!=null && !definicionBean.getid_tipo_iva_item().equals(-1L))) {definicion.setid_tipo_iva_item(definicionBean.getid_tipo_iva_item());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_global_cliente()!=null && !definicionBean.getid_tipo_global_cliente().equals(-1L))) {definicion.setid_tipo_global_cliente(definicionBean.getid_tipo_global_cliente());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_costeo_definicion()!=null && !definicionBean.getid_tipo_costeo_definicion().equals(-1L))) {definicion.setid_tipo_costeo_definicion(definicionBean.getid_tipo_costeo_definicion());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_costo_definicion()!=null && !definicionBean.getid_tipo_costo_definicion().equals(-1L))) {definicion.setid_tipo_costo_definicion(definicionBean.getid_tipo_costo_definicion());}
			if(conDefault || (!conDefault && definicionBean.getid_formato()!=null && !definicionBean.getid_formato().equals(null))) {definicion.setid_formato(definicionBean.getid_formato());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_tributario()!=null && !definicionBean.getid_tipo_tributario().equals(null))) {definicion.setid_tipo_tributario(definicionBean.getid_tipo_tributario());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_retencion()!=null && !definicionBean.getid_tipo_retencion().equals(null))) {definicion.setid_tipo_retencion(definicionBean.getid_tipo_retencion());}
			if(conDefault || (!conDefault && definicionBean.getid_tipo_documento()!=null && !definicionBean.getid_tipo_documento().equals(null))) {definicion.setid_tipo_documento(definicionBean.getid_tipo_documento());}
			if(conDefault || (!conDefault && definicionBean.getid_libro_contable()!=null && !definicionBean.getid_libro_contable().equals(null))) {definicion.setid_libro_contable(definicionBean.getid_libro_contable());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDefinicion(Definicion definicionOrigen,Definicion definicion,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && definicionOrigen.getId()!=null && !definicionOrigen.getId().equals(0L))) {definicion.setId(definicionOrigen.getId());}}
			if(conDefault || (!conDefault && definicionOrigen.getsecuencial_formato()!=null && !definicionOrigen.getsecuencial_formato().equals(""))) {definicion.setsecuencial_formato(definicionOrigen.getsecuencial_formato());}
			if(conDefault || (!conDefault && definicionOrigen.getsecuencial()!=null && !definicionOrigen.getsecuencial().equals(0L))) {definicion.setsecuencial(definicionOrigen.getsecuencial());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_definicion()!=null && !definicionOrigen.getid_tipo_definicion().equals(-1L))) {definicion.setid_tipo_definicion(definicionOrigen.getid_tipo_definicion());}
			if(conDefault || (!conDefault && definicionOrigen.getid_transaccion()!=null && !definicionOrigen.getid_transaccion().equals(-1L))) {definicion.setid_transaccion(definicionOrigen.getid_transaccion());}
			if(conDefault || (!conDefault && definicionOrigen.getid_sucursal()!=null && !definicionOrigen.getid_sucursal().equals(-1L))) {definicion.setid_sucursal(definicionOrigen.getid_sucursal());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_iva_item()!=null && !definicionOrigen.getid_tipo_iva_item().equals(-1L))) {definicion.setid_tipo_iva_item(definicionOrigen.getid_tipo_iva_item());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_mostrar_bodega()!=null && !definicionOrigen.getcon_mostrar_bodega().equals(false))) {definicion.setcon_mostrar_bodega(definicionOrigen.getcon_mostrar_bodega());}
			if(conDefault || (!conDefault && definicionOrigen.getfactor()!=null && !definicionOrigen.getfactor().equals(0.0))) {definicion.setfactor(definicionOrigen.getfactor());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_otro_recargo()!=null && !definicionOrigen.getcon_otro_recargo().equals(false))) {definicion.setcon_otro_recargo(definicionOrigen.getcon_otro_recargo());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_global_cliente()!=null && !definicionOrigen.getid_tipo_global_cliente().equals(-1L))) {definicion.setid_tipo_global_cliente(definicionOrigen.getid_tipo_global_cliente());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_coa()!=null && !definicionOrigen.getcon_coa().equals(false))) {definicion.setcon_coa(definicionOrigen.getcon_coa());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_costeo_definicion()!=null && !definicionOrigen.getid_tipo_costeo_definicion().equals(-1L))) {definicion.setid_tipo_costeo_definicion(definicionOrigen.getid_tipo_costeo_definicion());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_retencion()!=null && !definicionOrigen.getcon_retencion().equals(false))) {definicion.setcon_retencion(definicionOrigen.getcon_retencion());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_costo_definicion()!=null && !definicionOrigen.getid_tipo_costo_definicion().equals(-1L))) {definicion.setid_tipo_costo_definicion(definicionOrigen.getid_tipo_costo_definicion());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_novedad_producto()!=null && !definicionOrigen.getcon_novedad_producto().equals(false))) {definicion.setcon_novedad_producto(definicionOrigen.getcon_novedad_producto());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_ice()!=null && !definicionOrigen.getcon_ice().equals(false))) {definicion.setcon_ice(definicionOrigen.getcon_ice());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_cantidad()!=null && !definicionOrigen.getcon_cantidad().equals(false))) {definicion.setcon_cantidad(definicionOrigen.getcon_cantidad());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_producto_por_proveedor()!=null && !definicionOrigen.getcon_producto_por_proveedor().equals(false))) {definicion.setcon_producto_por_proveedor(definicionOrigen.getcon_producto_por_proveedor());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_lote_cliente()!=null && !definicionOrigen.getcon_lote_cliente().equals(false))) {definicion.setcon_lote_cliente(definicionOrigen.getcon_lote_cliente());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_cuenta_contable()!=null && !definicionOrigen.getcon_cuenta_contable().equals(false))) {definicion.setcon_cuenta_contable(definicionOrigen.getcon_cuenta_contable());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_detalle()!=null && !definicionOrigen.getcon_detalle().equals(false))) {definicion.setcon_detalle(definicionOrigen.getcon_detalle());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_iva_incluido()!=null && !definicionOrigen.getcon_iva_incluido().equals(false))) {definicion.setcon_iva_incluido(definicionOrigen.getcon_iva_incluido());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_lotes()!=null && !definicionOrigen.getcon_lotes().equals(false))) {definicion.setcon_lotes(definicionOrigen.getcon_lotes());}
			if(conDefault || (!conDefault && definicionOrigen.getnumero_descuentos()!=null && !definicionOrigen.getnumero_descuentos().equals(0))) {definicion.setnumero_descuentos(definicionOrigen.getnumero_descuentos());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_precio()!=null && !definicionOrigen.getcon_precio().equals(false))) {definicion.setcon_precio(definicionOrigen.getcon_precio());}
			if(conDefault || (!conDefault && definicionOrigen.getnumero_registros()!=null && !definicionOrigen.getnumero_registros().equals(0))) {definicion.setnumero_registros(definicionOrigen.getnumero_registros());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_centro_costo()!=null && !definicionOrigen.getcon_centro_costo().equals(false))) {definicion.setcon_centro_costo(definicionOrigen.getcon_centro_costo());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_orden_iva()!=null && !definicionOrigen.getcon_orden_iva().equals(false))) {definicion.setcon_orden_iva(definicionOrigen.getcon_orden_iva());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_multi_empresa()!=null && !definicionOrigen.getcon_multi_empresa().equals(false))) {definicion.setcon_multi_empresa(definicionOrigen.getcon_multi_empresa());}
			if(conDefault || (!conDefault && definicionOrigen.getid_formato()!=null && !definicionOrigen.getid_formato().equals(null))) {definicion.setid_formato(definicionOrigen.getid_formato());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_en_linea()!=null && !definicionOrigen.getcon_en_linea().equals(false))) {definicion.setcon_en_linea(definicionOrigen.getcon_en_linea());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_tributario()!=null && !definicionOrigen.getid_tipo_tributario().equals(null))) {definicion.setid_tipo_tributario(definicionOrigen.getid_tipo_tributario());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_retencion()!=null && !definicionOrigen.getid_tipo_retencion().equals(null))) {definicion.setid_tipo_retencion(definicionOrigen.getid_tipo_retencion());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_evaluacion()!=null && !definicionOrigen.getcon_evaluacion().equals(false))) {definicion.setcon_evaluacion(definicionOrigen.getcon_evaluacion());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_ot()!=null && !definicionOrigen.getcon_ot().equals(false))) {definicion.setcon_ot(definicionOrigen.getcon_ot());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_anticipo()!=null && !definicionOrigen.getcon_anticipo().equals(false))) {definicion.setcon_anticipo(definicionOrigen.getcon_anticipo());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_cierre()!=null && !definicionOrigen.getcon_cierre().equals(false))) {definicion.setcon_cierre(definicionOrigen.getcon_cierre());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_general()!=null && !definicionOrigen.getcon_general().equals(false))) {definicion.setcon_general(definicionOrigen.getcon_general());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_por_producto()!=null && !definicionOrigen.getcon_por_producto().equals(false))) {definicion.setcon_por_producto(definicionOrigen.getcon_por_producto());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_descuento()!=null && !definicionOrigen.getcon_descuento().equals(false))) {definicion.setcon_descuento(definicionOrigen.getcon_descuento());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_series()!=null && !definicionOrigen.getcon_series().equals(false))) {definicion.setcon_series(definicionOrigen.getcon_series());}
			if(conDefault || (!conDefault && definicionOrigen.getcantidad()!=null && !definicionOrigen.getcantidad().equals(0))) {definicion.setcantidad(definicionOrigen.getcantidad());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_documento()!=null && !definicionOrigen.getid_tipo_documento().equals(null))) {definicion.setid_tipo_documento(definicionOrigen.getid_tipo_documento());}
			if(conDefault || (!conDefault && definicionOrigen.getid_libro_contable()!=null && !definicionOrigen.getid_libro_contable().equals(null))) {definicion.setid_libro_contable(definicionOrigen.getid_libro_contable());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_interno()!=null && !definicionOrigen.getcon_interno().equals(false))) {definicion.setcon_interno(definicionOrigen.getcon_interno());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_reserva()!=null && !definicionOrigen.getcon_reserva().equals(false))) {definicion.setcon_reserva(definicionOrigen.getcon_reserva());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_precio_proveedor()!=null && !definicionOrigen.getcon_precio_proveedor().equals(false))) {definicion.setcon_precio_proveedor(definicionOrigen.getcon_precio_proveedor());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_produccion()!=null && !definicionOrigen.getcon_produccion().equals(false))) {definicion.setcon_produccion(definicionOrigen.getcon_produccion());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_codigo_barra()!=null && !definicionOrigen.getcon_codigo_barra().equals(false))) {definicion.setcon_codigo_barra(definicionOrigen.getcon_codigo_barra());}
			if(conDefault || (!conDefault && definicionOrigen.getcon_romaneos()!=null && !definicionOrigen.getcon_romaneos().equals(false))) {definicion.setcon_romaneos(definicionOrigen.getcon_romaneos());}
			if(conDefault || (!conDefault && definicionOrigen.getid_tipo_transaccion_modulo()!=null && !definicionOrigen.getid_tipo_transaccion_modulo().equals(null))) {definicion.setid_tipo_transaccion_modulo(definicionOrigen.getid_tipo_transaccion_modulo());}
			if(conDefault || (!conDefault && definicionOrigen.getid_cuenta_contable()!=null && !definicionOrigen.getid_cuenta_contable().equals(null))) {definicion.setid_cuenta_contable(definicionOrigen.getid_cuenta_contable());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDefinicion(Definicion definicion) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setText(definicion.getId().toString());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setText(definicion.getsecuencial_formato());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setText(definicion.getsecuencial().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setSelected(definicion.getcon_mostrar_bodega());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setText(definicion.getfactor().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setSelected(definicion.getcon_otro_recargo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setSelected(definicion.getcon_coa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setSelected(definicion.getcon_retencion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setSelected(definicion.getcon_novedad_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setSelected(definicion.getcon_ice());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setSelected(definicion.getcon_cantidad());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setSelected(definicion.getcon_producto_por_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setSelected(definicion.getcon_lote_cliente());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setSelected(definicion.getcon_cuenta_contable());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setSelected(definicion.getcon_detalle());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setSelected(definicion.getcon_iva_incluido());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setSelected(definicion.getcon_lotes());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setText(definicion.getnumero_descuentos().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setSelected(definicion.getcon_precio());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setText(definicion.getnumero_registros().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setSelected(definicion.getcon_centro_costo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setSelected(definicion.getcon_orden_iva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setSelected(definicion.getcon_multi_empresa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setSelected(definicion.getcon_en_linea());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setSelected(definicion.getcon_evaluacion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setSelected(definicion.getcon_ot());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setSelected(definicion.getcon_anticipo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setSelected(definicion.getcon_cierre());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setSelected(definicion.getcon_general());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setSelected(definicion.getcon_por_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setSelected(definicion.getcon_descuento());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setSelected(definicion.getcon_series());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setText(definicion.getcantidad().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setSelected(definicion.getcon_interno());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setSelected(definicion.getcon_reserva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setSelected(definicion.getcon_precio_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setSelected(definicion.getcon_produccion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setSelected(definicion.getcon_codigo_barra());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setSelected(definicion.getcon_romaneos());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDefinicion(DefinicionBean definicionBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setText(definicionBean.getId().toString());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setText(definicionBean.getsecuencial_formato());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setText(definicionBean.getsecuencial().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setSelected(definicionBean.getcon_mostrar_bodega());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setText(definicionBean.getfactor().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setSelected(definicionBean.getcon_otro_recargo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setSelected(definicionBean.getcon_coa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setSelected(definicionBean.getcon_retencion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setSelected(definicionBean.getcon_novedad_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setSelected(definicionBean.getcon_ice());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setSelected(definicionBean.getcon_cantidad());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setSelected(definicionBean.getcon_producto_por_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setSelected(definicionBean.getcon_lote_cliente());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setSelected(definicionBean.getcon_cuenta_contable());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setSelected(definicionBean.getcon_detalle());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setSelected(definicionBean.getcon_iva_incluido());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setSelected(definicionBean.getcon_lotes());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setText(definicionBean.getnumero_descuentos().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setSelected(definicionBean.getcon_precio());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setText(definicionBean.getnumero_registros().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setSelected(definicionBean.getcon_centro_costo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setSelected(definicionBean.getcon_orden_iva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setSelected(definicionBean.getcon_multi_empresa());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setSelected(definicionBean.getcon_en_linea());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setSelected(definicionBean.getcon_evaluacion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setSelected(definicionBean.getcon_ot());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setSelected(definicionBean.getcon_anticipo());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setSelected(definicionBean.getcon_cierre());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setSelected(definicionBean.getcon_general());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setSelected(definicionBean.getcon_por_producto());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setSelected(definicionBean.getcon_descuento());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setSelected(definicionBean.getcon_series());
			this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setText(definicionBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setSelected(definicionBean.getcon_interno());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setSelected(definicionBean.getcon_reserva());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setSelected(definicionBean.getcon_precio_proveedor());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setSelected(definicionBean.getcon_produccion());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setSelected(definicionBean.getcon_codigo_barra());
			this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setSelected(definicionBean.getcon_romaneos());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDefinicion(DefinicionParameterReturnGeneral definicionReturnGeneral,DefinicionBean definicionBean,Boolean conDefault) throws Exception { 
		try {
			Definicion definicionLocal=new Definicion();
			
			definicionLocal=definicionReturnGeneral.getDefinicion();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && definicionLocal.getId()!=null && !definicionLocal.getId().equals(0L))) {definicionBean.setId(definicionLocal.getId());}}
			if(conDefault || (!conDefault && definicionLocal.getsecuencial_formato()!=null && !definicionLocal.getsecuencial_formato().equals(""))) {definicionBean.setsecuencial_formato(definicionLocal.getsecuencial_formato());}
			if(conDefault || (!conDefault && definicionLocal.getsecuencial()!=null && !definicionLocal.getsecuencial().equals(0L))) {definicionBean.setsecuencial(definicionLocal.getsecuencial());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_definicion()!=null && !definicionLocal.getid_tipo_definicion().equals(-1L))) {definicionBean.setid_tipo_definicion(definicionLocal.getid_tipo_definicion());}
			if(conDefault || (!conDefault && definicionLocal.getid_transaccion()!=null && !definicionLocal.getid_transaccion().equals(-1L))) {definicionBean.setid_transaccion(definicionLocal.getid_transaccion());}
			if(conDefault || (!conDefault && definicionLocal.getid_sucursal()!=null && !definicionLocal.getid_sucursal().equals(-1L))) {definicionBean.setid_sucursal(definicionLocal.getid_sucursal());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_iva_item()!=null && !definicionLocal.getid_tipo_iva_item().equals(-1L))) {definicionBean.setid_tipo_iva_item(definicionLocal.getid_tipo_iva_item());}
			if(conDefault || (!conDefault && definicionLocal.getcon_mostrar_bodega()!=null && !definicionLocal.getcon_mostrar_bodega().equals(false))) {definicionBean.setcon_mostrar_bodega(definicionLocal.getcon_mostrar_bodega());}
			if(conDefault || (!conDefault && definicionLocal.getfactor()!=null && !definicionLocal.getfactor().equals(0.0))) {definicionBean.setfactor(definicionLocal.getfactor());}
			if(conDefault || (!conDefault && definicionLocal.getcon_otro_recargo()!=null && !definicionLocal.getcon_otro_recargo().equals(false))) {definicionBean.setcon_otro_recargo(definicionLocal.getcon_otro_recargo());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_global_cliente()!=null && !definicionLocal.getid_tipo_global_cliente().equals(-1L))) {definicionBean.setid_tipo_global_cliente(definicionLocal.getid_tipo_global_cliente());}
			if(conDefault || (!conDefault && definicionLocal.getcon_coa()!=null && !definicionLocal.getcon_coa().equals(false))) {definicionBean.setcon_coa(definicionLocal.getcon_coa());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_costeo_definicion()!=null && !definicionLocal.getid_tipo_costeo_definicion().equals(-1L))) {definicionBean.setid_tipo_costeo_definicion(definicionLocal.getid_tipo_costeo_definicion());}
			if(conDefault || (!conDefault && definicionLocal.getcon_retencion()!=null && !definicionLocal.getcon_retencion().equals(false))) {definicionBean.setcon_retencion(definicionLocal.getcon_retencion());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_costo_definicion()!=null && !definicionLocal.getid_tipo_costo_definicion().equals(-1L))) {definicionBean.setid_tipo_costo_definicion(definicionLocal.getid_tipo_costo_definicion());}
			if(conDefault || (!conDefault && definicionLocal.getcon_novedad_producto()!=null && !definicionLocal.getcon_novedad_producto().equals(false))) {definicionBean.setcon_novedad_producto(definicionLocal.getcon_novedad_producto());}
			if(conDefault || (!conDefault && definicionLocal.getcon_ice()!=null && !definicionLocal.getcon_ice().equals(false))) {definicionBean.setcon_ice(definicionLocal.getcon_ice());}
			if(conDefault || (!conDefault && definicionLocal.getcon_cantidad()!=null && !definicionLocal.getcon_cantidad().equals(false))) {definicionBean.setcon_cantidad(definicionLocal.getcon_cantidad());}
			if(conDefault || (!conDefault && definicionLocal.getcon_producto_por_proveedor()!=null && !definicionLocal.getcon_producto_por_proveedor().equals(false))) {definicionBean.setcon_producto_por_proveedor(definicionLocal.getcon_producto_por_proveedor());}
			if(conDefault || (!conDefault && definicionLocal.getcon_lote_cliente()!=null && !definicionLocal.getcon_lote_cliente().equals(false))) {definicionBean.setcon_lote_cliente(definicionLocal.getcon_lote_cliente());}
			if(conDefault || (!conDefault && definicionLocal.getcon_cuenta_contable()!=null && !definicionLocal.getcon_cuenta_contable().equals(false))) {definicionBean.setcon_cuenta_contable(definicionLocal.getcon_cuenta_contable());}
			if(conDefault || (!conDefault && definicionLocal.getcon_detalle()!=null && !definicionLocal.getcon_detalle().equals(false))) {definicionBean.setcon_detalle(definicionLocal.getcon_detalle());}
			if(conDefault || (!conDefault && definicionLocal.getcon_iva_incluido()!=null && !definicionLocal.getcon_iva_incluido().equals(false))) {definicionBean.setcon_iva_incluido(definicionLocal.getcon_iva_incluido());}
			if(conDefault || (!conDefault && definicionLocal.getcon_lotes()!=null && !definicionLocal.getcon_lotes().equals(false))) {definicionBean.setcon_lotes(definicionLocal.getcon_lotes());}
			if(conDefault || (!conDefault && definicionLocal.getnumero_descuentos()!=null && !definicionLocal.getnumero_descuentos().equals(0))) {definicionBean.setnumero_descuentos(definicionLocal.getnumero_descuentos());}
			if(conDefault || (!conDefault && definicionLocal.getcon_precio()!=null && !definicionLocal.getcon_precio().equals(false))) {definicionBean.setcon_precio(definicionLocal.getcon_precio());}
			if(conDefault || (!conDefault && definicionLocal.getnumero_registros()!=null && !definicionLocal.getnumero_registros().equals(0))) {definicionBean.setnumero_registros(definicionLocal.getnumero_registros());}
			if(conDefault || (!conDefault && definicionLocal.getcon_centro_costo()!=null && !definicionLocal.getcon_centro_costo().equals(false))) {definicionBean.setcon_centro_costo(definicionLocal.getcon_centro_costo());}
			if(conDefault || (!conDefault && definicionLocal.getcon_orden_iva()!=null && !definicionLocal.getcon_orden_iva().equals(false))) {definicionBean.setcon_orden_iva(definicionLocal.getcon_orden_iva());}
			if(conDefault || (!conDefault && definicionLocal.getcon_multi_empresa()!=null && !definicionLocal.getcon_multi_empresa().equals(false))) {definicionBean.setcon_multi_empresa(definicionLocal.getcon_multi_empresa());}
			if(conDefault || (!conDefault && definicionLocal.getid_formato()!=null && !definicionLocal.getid_formato().equals(null))) {definicionBean.setid_formato(definicionLocal.getid_formato());}
			if(conDefault || (!conDefault && definicionLocal.getcon_en_linea()!=null && !definicionLocal.getcon_en_linea().equals(false))) {definicionBean.setcon_en_linea(definicionLocal.getcon_en_linea());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_tributario()!=null && !definicionLocal.getid_tipo_tributario().equals(null))) {definicionBean.setid_tipo_tributario(definicionLocal.getid_tipo_tributario());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_retencion()!=null && !definicionLocal.getid_tipo_retencion().equals(null))) {definicionBean.setid_tipo_retencion(definicionLocal.getid_tipo_retencion());}
			if(conDefault || (!conDefault && definicionLocal.getcon_evaluacion()!=null && !definicionLocal.getcon_evaluacion().equals(false))) {definicionBean.setcon_evaluacion(definicionLocal.getcon_evaluacion());}
			if(conDefault || (!conDefault && definicionLocal.getcon_ot()!=null && !definicionLocal.getcon_ot().equals(false))) {definicionBean.setcon_ot(definicionLocal.getcon_ot());}
			if(conDefault || (!conDefault && definicionLocal.getcon_anticipo()!=null && !definicionLocal.getcon_anticipo().equals(false))) {definicionBean.setcon_anticipo(definicionLocal.getcon_anticipo());}
			if(conDefault || (!conDefault && definicionLocal.getcon_cierre()!=null && !definicionLocal.getcon_cierre().equals(false))) {definicionBean.setcon_cierre(definicionLocal.getcon_cierre());}
			if(conDefault || (!conDefault && definicionLocal.getcon_general()!=null && !definicionLocal.getcon_general().equals(false))) {definicionBean.setcon_general(definicionLocal.getcon_general());}
			if(conDefault || (!conDefault && definicionLocal.getcon_por_producto()!=null && !definicionLocal.getcon_por_producto().equals(false))) {definicionBean.setcon_por_producto(definicionLocal.getcon_por_producto());}
			if(conDefault || (!conDefault && definicionLocal.getcon_descuento()!=null && !definicionLocal.getcon_descuento().equals(false))) {definicionBean.setcon_descuento(definicionLocal.getcon_descuento());}
			if(conDefault || (!conDefault && definicionLocal.getcon_series()!=null && !definicionLocal.getcon_series().equals(false))) {definicionBean.setcon_series(definicionLocal.getcon_series());}
			if(conDefault || (!conDefault && definicionLocal.getcantidad()!=null && !definicionLocal.getcantidad().equals(0))) {definicionBean.setcantidad(definicionLocal.getcantidad());}
			if(conDefault || (!conDefault && definicionLocal.getid_tipo_documento()!=null && !definicionLocal.getid_tipo_documento().equals(null))) {definicionBean.setid_tipo_documento(definicionLocal.getid_tipo_documento());}
			if(conDefault || (!conDefault && definicionLocal.getid_libro_contable()!=null && !definicionLocal.getid_libro_contable().equals(null))) {definicionBean.setid_libro_contable(definicionLocal.getid_libro_contable());}
			if(conDefault || (!conDefault && definicionLocal.getcon_interno()!=null && !definicionLocal.getcon_interno().equals(false))) {definicionBean.setcon_interno(definicionLocal.getcon_interno());}
			if(conDefault || (!conDefault && definicionLocal.getcon_reserva()!=null && !definicionLocal.getcon_reserva().equals(false))) {definicionBean.setcon_reserva(definicionLocal.getcon_reserva());}
			if(conDefault || (!conDefault && definicionLocal.getcon_precio_proveedor()!=null && !definicionLocal.getcon_precio_proveedor().equals(false))) {definicionBean.setcon_precio_proveedor(definicionLocal.getcon_precio_proveedor());}
			if(conDefault || (!conDefault && definicionLocal.getcon_produccion()!=null && !definicionLocal.getcon_produccion().equals(false))) {definicionBean.setcon_produccion(definicionLocal.getcon_produccion());}
			if(conDefault || (!conDefault && definicionLocal.getcon_codigo_barra()!=null && !definicionLocal.getcon_codigo_barra().equals(false))) {definicionBean.setcon_codigo_barra(definicionLocal.getcon_codigo_barra());}
			if(conDefault || (!conDefault && definicionLocal.getcon_romaneos()!=null && !definicionLocal.getcon_romaneos().equals(false))) {definicionBean.setcon_romaneos(definicionLocal.getcon_romaneos());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDefinicionGenerico(Long idDefinicionSeleccionado,JComboBox jComboBoxDefinicion,List<Definicion> definicionsLocal)throws Exception {
		try {
			Definicion  definicionTemp=null;

			for(Definicion definicionAux:definicionsLocal) {
				if(definicionAux.getId()!=null && definicionAux.getId().equals(idDefinicionSeleccionado)) {
					definicionTemp=definicionAux;
					break;
				}
			}

			jComboBoxDefinicion.setSelectedItem(definicionTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDefinicionGenerico(JComboBox jComboBoxDefinicion,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDefinicion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDefinicion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDefinicion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDefinicion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDefinicion.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDefinicion.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDefinicion.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDefinicion.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDefinicion.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDefinicion.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			definicion=(Definicion) definicionLogic.getDefinicions().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			definicion =(Definicion) definicions.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("TipoDefinicion")) {
			//sDescripcion=this.getActualTipoDefinicionForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipodefinicion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDefinicionForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipodefinicion_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettransaccion_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("TipoIvaItem")) {
			//sDescripcion=this.getActualTipoIvaItemForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipoivaitem_descripcion();
			} else {
				//sDescripcion=this.getActualTipoIvaItemForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipoivaitem_descripcion();
			}
		}

		if(sTipo.equals("TipoGlobalCliente")) {
			//sDescripcion=this.getActualTipoGlobalClienteForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipoglobalcliente_descripcion();
			} else {
				//sDescripcion=this.getActualTipoGlobalClienteForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipoglobalcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoCosteoDefinicion")) {
			//sDescripcion=this.getActualTipoCosteoDefinicionForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipocosteodefinicion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCosteoDefinicionForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipocosteodefinicion_descripcion();
			}
		}

		if(sTipo.equals("TipoCostoDefinicion")) {
			//sDescripcion=this.getActualTipoCostoDefinicionForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipocostodefinicion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCostoDefinicionForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipocostodefinicion_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getformato_descripcion();
			}
		}

		if(sTipo.equals("TipoTributario")) {
			//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipotributario_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipotributario_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencion")) {
			//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettiporetencion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettiporetencion_descripcion();
			}
		}

		if(sTipo.equals("TipoDocumento")) {
			//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipodocumento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipodocumento_descripcion();
			}
		}

		if(sTipo.equals("LibroContable")) {
			//sDescripcion=this.getActualLibroContableForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getlibrocontable_descripcion();
			} else {
				//sDescripcion=this.getActualLibroContableForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getlibrocontable_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.gettipotransaccionmodulo_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!definicion.getIsNew() && !definicion.getIsChanged() && !definicion.getIsDeleted()) {
				sDescripcion=definicion.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=definicion.getcuentacontable_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Definicion definicionRow=new Definicion();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			definicionRow=(Definicion) definicionLogic.getDefinicions().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			definicionRow=(Definicion) definicions.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDefinicion(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion));			
			this.jButtonDuplicarDefinicion.setVisible((this.isVisibilidadCeldaDuplicarDefinicion && this.isPermisoDuplicarDefinicion));			
			this.jButtonCopiarDefinicion.setVisible((this.isVisibilidadCeldaCopiarDefinicion && this.isPermisoCopiarDefinicion));
			this.jButtonVerFormDefinicion.setVisible((this.isVisibilidadCeldaVerFormDefinicion && this.isPermisoVerFormDefinicion));
			
			this.jButtonAbrirOrderByDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));			
			
			this.jButtonNuevoRelacionesDefinicion.setVisible((this.isVisibilidadCeldaNuevoRelacionesDefinicion && this.isPermisoNuevoDefinicion));			
			this.jButtonNuevoGuardarCambiosDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion && this.isPermisoGuardarCambiosDefinicion));
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.jInternalFrameDetalleFormDefinicion.jButtonModificarDefinicion.setVisible((this.isVisibilidadCeldaModificarDefinicion && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.setVisible((this.isVisibilidadCeldaActualizarDefinicion && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.setVisible((this.isVisibilidadCeldaEliminarDefinicion && this.isPermisoEliminarDefinicion));
			this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.setVisible(this.isVisibilidadCeldaCancelarDefinicion);							
			this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.setVisible((this.isVisibilidadCeldaGuardarDefinicion && this.isPermisoGuardarCambiosDefinicion));			
			
			}
						
			this.jButtonGuardarCambiosTablaDefinicion.setVisible((this.isVisibilidadCeldaGuardarCambiosDefinicion && this.isPermisoGuardarCambiosDefinicion));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion));						
			this.jButtonDuplicarToolBarDefinicion.setVisible((this.isVisibilidadCeldaDuplicarDefinicion && this.isPermisoDuplicarDefinicion));						
			this.jButtonCopiarToolBarDefinicion.setVisible((this.isVisibilidadCeldaCopiarDefinicion && this.isPermisoCopiarDefinicion));			
			this.jButtonVerFormToolBarDefinicion.setVisible((this.isVisibilidadCeldaVerFormDefinicion && this.isPermisoVerFormDefinicion));			
			this.jButtonAbrirOrderByToolBarDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));
			this.jButtonNuevoRelacionesToolBarDefinicion.setVisible((this.isVisibilidadCeldaNuevoRelacionesDefinicion && this.isPermisoNuevoDefinicion));			
			this.jButtonNuevoGuardarCambiosToolBarDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion && this.isPermisoGuardarCambiosDefinicion));			
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.jInternalFrameDetalleFormDefinicion.jButtonModificarToolBarDefinicion.setVisible((this.isVisibilidadCeldaModificarDefinicion && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jButtonActualizarToolBarDefinicion.setVisible((this.isVisibilidadCeldaActualizarDefinicion  && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jButtonEliminarToolBarDefinicion.setVisible((this.isVisibilidadCeldaEliminarDefinicion && this.isPermisoEliminarDefinicion));
			this.jInternalFrameDetalleFormDefinicion.jButtonCancelarToolBarDefinicion.setVisible(this.isVisibilidadCeldaCancelarDefinicion);				
			this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosToolBarDefinicion.setVisible((this.isVisibilidadCeldaGuardarDefinicion && this.isPermisoGuardarCambiosDefinicion));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDefinicion.setVisible((this.isVisibilidadCeldaGuardarCambiosDefinicion && this.isPermisoGuardarCambiosDefinicion));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion));			
			this.jMenuItemDuplicarDefinicion.setVisible((this.isVisibilidadCeldaDuplicarDefinicion && this.isPermisoDuplicarDefinicion));			
			this.jMenuItemCopiarDefinicion.setVisible((this.isVisibilidadCeldaCopiarDefinicion && this.isPermisoCopiarDefinicion));			
			this.jMenuItemVerFormDefinicion.setVisible((this.isVisibilidadCeldaVerFormDefinicion && this.isPermisoVerFormDefinicion));			
			this.jMenuItemAbrirOrderByDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));			
			//this.jMenuItemMostrarOcultarDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));
			this.jMenuItemDetalleAbrirOrderByDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));			
			//this.jMenuItemDetalleMostrarOcultarDefinicion.setVisible((this.isVisibilidadCeldaOrdenDefinicion && this.isPermisoOrdenDefinicion));			
			this.jMenuItemNuevoRelacionesDefinicion.setVisible((this.isVisibilidadCeldaNuevoRelacionesDefinicion && this.isPermisoNuevoDefinicion));			
			this.jMenuItemNuevoGuardarCambiosDefinicion.setVisible((this.isVisibilidadCeldaNuevoDefinicion && this.isPermisoNuevoDefinicion && this.isPermisoGuardarCambiosDefinicion));									
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.jInternalFrameDetalleFormDefinicion.jMenuItemModificarDefinicion.setVisible((this.isVisibilidadCeldaModificarDefinicion && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jMenuItemActualizarDefinicion.setVisible((this.isVisibilidadCeldaActualizarDefinicion && this.isPermisoActualizarDefinicion));	
			this.jInternalFrameDetalleFormDefinicion.jMenuItemEliminarDefinicion.setVisible((this.isVisibilidadCeldaEliminarDefinicion && this.isPermisoEliminarDefinicion));
			this.jInternalFrameDetalleFormDefinicion.jMenuItemCancelarDefinicion.setVisible(this.isVisibilidadCeldaCancelarDefinicion);				
			}
			
			this.jMenuItemGuardarCambiosDefinicion.setVisible((this.isVisibilidadCeldaGuardarDefinicion && this.isPermisoGuardarCambiosDefinicion));						
			this.jMenuItemGuardarCambiosTablaDefinicion.setVisible((this.isVisibilidadCeldaGuardarCambiosDefinicion && this.isPermisoGuardarCambiosDefinicion));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDefinicion=this.jButtonNuevoDefinicion.isVisible();
			this.isVisibilidadCeldaDuplicarDefinicion=this.jButtonDuplicarDefinicion.isVisible();
			this.isVisibilidadCeldaCopiarDefinicion=this.jButtonCopiarDefinicion.isVisible();
			this.isVisibilidadCeldaVerFormDefinicion=this.jButtonVerFormDefinicion.isVisible();
			
			this.isVisibilidadCeldaOrdenDefinicion=this.jButtonAbrirOrderByDefinicion.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=this.jButtonNuevoRelacionesDefinicion.isVisible();
			this.isVisibilidadCeldaModificarDefinicion=this.jButtonModificarDefinicion.isVisible();
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.isVisibilidadCeldaActualizarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.isVisible();
			this.isVisibilidadCeldaEliminarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.isVisible();
			this.isVisibilidadCeldaCancelarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.isVisible();
			this.isVisibilidadCeldaGuardarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDefinicion=this.jButtonGuardarCambiosTablaDefinicion.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDefinicion=this.jButtonNuevoToolBarDefinicion.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=this.jButtonNuevoRelacionesToolBarDefinicion.isVisible();
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.isVisibilidadCeldaModificarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonModificarToolBarDefinicion.isVisible();
			this.isVisibilidadCeldaActualizarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonActualizarToolBarDefinicion.isVisible();
			this.isVisibilidadCeldaEliminarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonEliminarToolBarDefinicion.isVisible();
			this.isVisibilidadCeldaCancelarDefinicion=this.jInternalFrameDetalleFormDefinicion.jButtonCancelarToolBarDefinicion.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDefinicion=this.jButtonGuardarCambiosToolBarDefinicion.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDefinicion=this.jButtonGuardarCambiosTablaToolBarDefinicion.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDefinicion=this.jMenuItemNuevoDefinicion.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=this.jMenuItemNuevoRelacionesDefinicion.isVisible();
			
			if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.isVisibilidadCeldaModificarDefinicion=this.jInternalFrameDetalleFormDefinicion.jMenuItemModificarDefinicion.isVisible();
			this.isVisibilidadCeldaActualizarDefinicion=this.jInternalFrameDetalleFormDefinicion.jMenuItemActualizarDefinicion.isVisible();
			this.isVisibilidadCeldaEliminarDefinicion=this.jInternalFrameDetalleFormDefinicion.jMenuItemEliminarDefinicion.isVisible();
			this.isVisibilidadCeldaCancelarDefinicion=this.jInternalFrameDetalleFormDefinicion.jMenuItemCancelarDefinicion.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDefinicion=this.jMenuItemGuardarCambiosDefinicion.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDefinicion=this.jMenuItemGuardarCambiosTablaDefinicion.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDefinicion(Boolean esInicializar) {
		if(DefinicionJInternalFrame.ISBINDING_MANUAL) {			
			if(this.definicionSessionBean.getConGuardarRelaciones()) {
				//if(this.definicionSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDefinicion();
			}
			
			this.inicializarActualizarBindingBotonesManualDefinicion(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDefinicion() {
		this.jButtonNuevoDefinicion.setVisible(this.isPermisoNuevoDefinicion);			
		this.jButtonDuplicarDefinicion.setVisible(this.isPermisoDuplicarDefinicion);			
		this.jButtonCopiarDefinicion.setVisible(this.isPermisoCopiarDefinicion);			
		this.jButtonVerFormDefinicion.setVisible(this.isPermisoVerFormDefinicion);			
		
		this.jButtonAbrirOrderByDefinicion.setVisible(this.isPermisoOrdenDefinicion);					
		
		this.jButtonNuevoRelacionesDefinicion.setVisible(this.isPermisoNuevoDefinicion);			
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonModificarDefinicion.setVisible(this.isPermisoActualizarDefinicion);	
			this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.setVisible(this.isPermisoActualizarDefinicion);	
			this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.setVisible(this.isPermisoEliminarDefinicion);
			this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.setVisible(this.isVisibilidadCeldaCancelarDefinicion);						
			this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.setVisible(this.isPermisoGuardarCambiosDefinicion);							
		}
		
		this.jButtonGuardarCambiosTablaDefinicion.setVisible(this.isPermisoActualizarDefinicion);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDefinicion() {
		this.jInternalFrameDetalleFormDefinicion.jButtonModificarDefinicion.setVisible(this.isPermisoActualizarDefinicion);	
		this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.setVisible(this.isPermisoActualizarDefinicion);	
		this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.setVisible(this.isPermisoEliminarDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.setVisible(this.isVisibilidadCeldaCancelarDefinicion);							
		this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.setVisible((this.isVisibilidadCeldaGuardarDefinicion && this.isPermisoGuardarCambiosDefinicion));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDefinicion() {
		if(DefinicionJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDefinicion();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDefinicion() {
	}
	
	public void jTableDatosDefinicionListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDefinicion(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.definicion.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDefinicion(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.definicion.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDefinicion.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.definicion.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebDefinicion(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.definicion.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderDefinicion.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.definicion.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_formatoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getsecuencial_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_formato like '%"+this.definicion.getsecuencial_formato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencialDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getsecuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial = "+this.definicion.getsecuencial().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_definicionDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodefinicion=true;

			idTienePermisotipodefinicion=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoDefinicionConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodefinicion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipodefinicionBeanSwingJInternalFrame=new TipoDefinicionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodefinicionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodefinicionBeanSwingJInternalFrame.getTipoDefinicionLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_definicion()!=null) {
					this.tipodefinicionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodefinicionBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_definicion());
					this.tipodefinicionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodefinicionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodefinicionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDefinicion();
				}

				JInternalFrameBase jinternalFrame =this.tipodefinicionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipodefinicion=(TitledBorder)this.tipodefinicionBeanSwingJInternalFrame.jScrollPanelDatosTipoDefinicion.getBorder();

				titledBordertipodefinicion.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Definicion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_definicionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_definicion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_definicion = "+this.definicion.getid_tipo_definicion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebDefinicion(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.definicion.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderDefinicion.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.definicion.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDefinicion(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.definicion.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDefinicion.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.definicion.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_iva_itemDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoivaitem=true;

			idTienePermisotipoivaitem=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoIvaItemConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoivaitem) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipoivaitemBeanSwingJInternalFrame=new TipoIvaItemBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoivaitemBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoivaitemBeanSwingJInternalFrame.getTipoIvaItemLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_iva_item()!=null) {
					this.tipoivaitemBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoivaitemBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_iva_item());
					this.tipoivaitemBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoivaitemBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoivaitemBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoIvaItem();
				}

				JInternalFrameBase jinternalFrame =this.tipoivaitemBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipoivaitem=(TitledBorder)this.tipoivaitemBeanSwingJInternalFrame.jScrollPanelDatosTipoIvaItem.getBorder();

				titledBordertipoivaitem.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Iva Item");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_iva_itemDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_iva_item()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_iva_item = "+this.definicion.getid_tipo_iva_item().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_mostrar_bodegaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_mostrar_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_mostrar_bodega = "+this.definicion.getcon_mostrar_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfactorDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getfactor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where factor = "+this.definicion.getfactor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_otro_recargoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_otro_recargo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_otro_recargo = "+this.definicion.getcon_otro_recargo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_global_clienteDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoglobalcliente=true;

			idTienePermisotipoglobalcliente=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoGlobalClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoglobalcliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipoglobalclienteBeanSwingJInternalFrame=new TipoGlobalClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoglobalclienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoglobalclienteBeanSwingJInternalFrame.getTipoGlobalClienteLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_global_cliente()!=null) {
					this.tipoglobalclienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoglobalclienteBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_global_cliente());
					this.tipoglobalclienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoglobalclienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoglobalclienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoGlobalCliente();
				}

				JInternalFrameBase jinternalFrame =this.tipoglobalclienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipoglobalcliente=(TitledBorder)this.tipoglobalclienteBeanSwingJInternalFrame.jScrollPanelDatosTipoGlobalCliente.getBorder();

				titledBordertipoglobalcliente.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Global Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_global_clienteDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_global_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_global_cliente = "+this.definicion.getid_tipo_global_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_coaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_coa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_coa = "+this.definicion.getcon_coa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_costeo_definicionDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocosteodefinicion=true;

			idTienePermisotipocosteodefinicion=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoCosteoDefinicionConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocosteodefinicion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipocosteodefinicionBeanSwingJInternalFrame=new TipoCosteoDefinicionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocosteodefinicionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocosteodefinicionBeanSwingJInternalFrame.getTipoCosteoDefinicionLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_costeo_definicion()!=null) {
					this.tipocosteodefinicionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocosteodefinicionBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_costeo_definicion());
					this.tipocosteodefinicionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocosteodefinicionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocosteodefinicionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCosteoDefinicion();
				}

				JInternalFrameBase jinternalFrame =this.tipocosteodefinicionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipocosteodefinicion=(TitledBorder)this.tipocosteodefinicionBeanSwingJInternalFrame.jScrollPanelDatosTipoCosteoDefinicion.getBorder();

				titledBordertipocosteodefinicion.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Costeo Definicion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_costeo_definicionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_costeo_definicion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_costeo_definicion = "+this.definicion.getid_tipo_costeo_definicion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_retencionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_retencion = "+this.definicion.getcon_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_costo_definicionDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocostodefinicion=true;

			idTienePermisotipocostodefinicion=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoCostoDefinicionConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocostodefinicion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipocostodefinicionBeanSwingJInternalFrame=new TipoCostoDefinicionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocostodefinicionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocostodefinicionBeanSwingJInternalFrame.getTipoCostoDefinicionLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_costo_definicion()!=null) {
					this.tipocostodefinicionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocostodefinicionBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_costo_definicion());
					this.tipocostodefinicionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocostodefinicionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocostodefinicionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCostoDefinicion();
				}

				JInternalFrameBase jinternalFrame =this.tipocostodefinicionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipocostodefinicion=(TitledBorder)this.tipocostodefinicionBeanSwingJInternalFrame.jScrollPanelDatosTipoCostoDefinicion.getBorder();

				titledBordertipocostodefinicion.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Costo Definicion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_costo_definicionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_costo_definicion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_costo_definicion = "+this.definicion.getid_tipo_costo_definicion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_novedad_productoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_novedad_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_novedad_producto = "+this.definicion.getcon_novedad_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_iceDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_ice = "+this.definicion.getcon_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_cantidadDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_cantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_cantidad = "+this.definicion.getcon_cantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_producto_por_proveedorDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_producto_por_proveedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_producto_por_proveedor = "+this.definicion.getcon_producto_por_proveedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_lote_clienteDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_lote_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_lote_cliente = "+this.definicion.getcon_lote_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_cuenta_contableDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_cuenta_contable = "+this.definicion.getcon_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_detalleDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_detalle()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_detalle = "+this.definicion.getcon_detalle().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_iva_incluidoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_iva_incluido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_iva_incluido = "+this.definicion.getcon_iva_incluido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_lotesDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_lotes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_lotes = "+this.definicion.getcon_lotes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_descuentosDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getnumero_descuentos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_descuentos = "+this.definicion.getnumero_descuentos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_precioDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_precio = "+this.definicion.getcon_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_registrosDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getnumero_registros()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_registros = "+this.definicion.getnumero_registros().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_centro_costoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_centro_costo = "+this.definicion.getcon_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_orden_ivaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_orden_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_orden_iva = "+this.definicion.getcon_orden_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_multi_empresaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_multi_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_multi_empresa = "+this.definicion.getcon_multi_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebDefinicion(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.definicion.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderDefinicion.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.definicion.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_en_lineaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_en_linea()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_en_linea = "+this.definicion.getcon_en_linea().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_tributarioDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotributario=true;

			idTienePermisotipotributario=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoTributarioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotributario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipotributarioBeanSwingJInternalFrame=new TipoTributarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotributarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotributarioBeanSwingJInternalFrame.getTipoTributarioLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_tributario()!=null) {
					this.tipotributarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotributarioBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_tributario());
					this.tipotributarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTributario();
				}

				JInternalFrameBase jinternalFrame =this.tipotributarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipotributario=(TitledBorder)this.tipotributarioBeanSwingJInternalFrame.jScrollPanelDatosTipoTributario.getBorder();

				titledBordertipotributario.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Tributario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_tributarioDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_tributario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_tributario = "+this.definicion.getid_tipo_tributario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencionDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencion=true;

			idTienePermisotiporetencion=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tiporetencionBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_retencion()!=null) {
					this.tiporetencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_retencion());
					this.tiporetencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertiporetencion=(TitledBorder)this.tiporetencionBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencion.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion = "+this.definicion.getid_tipo_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_evaluacionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_evaluacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_evaluacion = "+this.definicion.getcon_evaluacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_otDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_ot()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_ot = "+this.definicion.getcon_ot().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_anticipoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_anticipo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_anticipo = "+this.definicion.getcon_anticipo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_cierreDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_cierre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_cierre = "+this.definicion.getcon_cierre().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_generalDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_general()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_general = "+this.definicion.getcon_general().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_por_productoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_por_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_por_producto = "+this.definicion.getcon_por_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_descuentoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_descuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_descuento = "+this.definicion.getcon_descuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_seriesDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_series()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_series = "+this.definicion.getcon_series().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.definicion.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_documentoDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodocumento=true;

			idTienePermisotipodocumento=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoDocumentoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodocumento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipodocumentoBeanSwingJInternalFrame=new TipoDocumentoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodocumentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodocumentoBeanSwingJInternalFrame.getTipoDocumentoLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_documento()!=null) {
					this.tipodocumentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodocumentoBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_documento());
					this.tipodocumentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDocumento();
				}

				JInternalFrameBase jinternalFrame =this.tipodocumentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipodocumento=(TitledBorder)this.tipodocumentoBeanSwingJInternalFrame.jScrollPanelDatosTipoDocumento.getBorder();

				titledBordertipodocumento.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Documento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_documentoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_documento = "+this.definicion.getid_tipo_documento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_libro_contableDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisolibrocontable=true;

			idTienePermisolibrocontable=this.tienePermisosUsuarioEnPaginaWebDefinicion(LibroContableConstantesFunciones.CLASSNAME);

			if(idTienePermisolibrocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.librocontableBeanSwingJInternalFrame=new LibroContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.librocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.librocontableBeanSwingJInternalFrame.getLibroContableLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_libro_contable()!=null) {
					this.librocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.librocontableBeanSwingJInternalFrame.setIdActual(this.definicion.getid_libro_contable());
					this.librocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.librocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.librocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaLibroContable();
				}

				JInternalFrameBase jinternalFrame =this.librocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBorderlibrocontable=(TitledBorder)this.librocontableBeanSwingJInternalFrame.jScrollPanelDatosLibroContable.getBorder();

				titledBorderlibrocontable.setTitle(titledBorderDefinicion.getTitle() + " -> Libro Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_libro_contableDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_libro_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_libro_contable = "+this.definicion.getid_libro_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_internoDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_interno()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_interno = "+this.definicion.getcon_interno().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_reservaDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_reserva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_reserva = "+this.definicion.getcon_reserva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_precio_proveedorDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_precio_proveedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_precio_proveedor = "+this.definicion.getcon_precio_proveedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_produccionDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_produccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_produccion = "+this.definicion.getcon_produccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_codigo_barraDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_codigo_barra()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_codigo_barra = "+this.definicion.getcon_codigo_barra().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_romaneosDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getcon_romaneos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_romaneos = "+this.definicion.getcon_romaneos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebDefinicion(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.definicion.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderDefinicion.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.definicion.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableDefinicionUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebDefinicion(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDefinicion.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDefinicion.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.definicionLogic.getConnexion());

				if(this.definicion.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.definicion.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDefinicion=(TitledBorder)this.jScrollPanelDatosDefinicion.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderDefinicion.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableDefinicionBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.getdefinicion(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.definicion==null) {
						this.definicion = new Definicion();
					}

					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);
				}

				if(this.definicion.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.definicion.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDefinicion(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCuentaContableDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdCuentaContable();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdEmpresa();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdFormato();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdLibroContableDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdLibroContable();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdModulo();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdSucursal();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCosteoDefinicionDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoCosteoDefinicion();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCostoDefinicionDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoCostoDefinicion();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDefinicionDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoDefinicion();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDocumentoDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoDocumento();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoGlobalClienteDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoGlobalCliente();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoIvaItemDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoIvaItem();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoRetencion();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTributarioDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTipoTributario();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionDefinicionActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDefinicion(false,false);

			this.getDefinicionsFK_IdTransaccion();

			this.inicializarActualizarBindingDefinicion(false);

			//if(DefinicionBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDefinicion(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.definicionLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDefinicion() {
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
			this.jInternalFrameDetalleFormDefinicion.setVisible(false);	    			
			this.jInternalFrameDetalleFormDefinicion.dispose();
			this.jInternalFrameDetalleFormDefinicion=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
			this.jInternalFrameReporteDinamicoDefinicion.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDefinicion.dispose();
			this.jInternalFrameReporteDinamicoDefinicion=null;
		}
		
		if(this.jInternalFrameImportacionDefinicion!=null) {
			this.jInternalFrameImportacionDefinicion.setVisible(false);	    			
			this.jInternalFrameImportacionDefinicion.dispose();
			this.jInternalFrameImportacionDefinicion=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDefinicion();
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			
			if(sTipo.equals("NuevoDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDefinicion")) {
				jButtonDuplicarDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDefinicion")) {
				jButtonCopiarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("VerFormDefinicion")) {
				jButtonVerFormDefinicionActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDefinicion")) {
				jButtonDuplicarDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDefinicion")) {
				jButtonDuplicarDefinicionActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDefinicion")) {
				jButtonModificarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDefinicion")) {
				jButtonModificarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDefinicion")) {
				jButtonModificarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDefinicion")) {
				jButtonActualizarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDefinicion")) {
				jButtonActualizarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDefinicion")) {
				jButtonActualizarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("EliminarDefinicion")) {
				jButtonEliminarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDefinicion")) {
				jButtonEliminarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDefinicion")) {
				jButtonEliminarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("CancelarDefinicion")) {
				jButtonCancelarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDefinicion")) {
				jButtonCancelarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDefinicion")) {
				jButtonCancelarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("CerrarDefinicion")) {
				jButtonCerrarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDefinicion")) {
				jButtonCerrarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDefinicion")) {
				jButtonCerrarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDefinicion")) {
				jButtonMostrarOcultarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDefinicion")) {
				jButtonCancelarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDefinicion")) {
				jButtonCopiarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDefinicion")) {
				jButtonVerFormDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDefinicion")) {
				jButtonCopiarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDefinicion")) {
				jButtonVerFormDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDefinicion")) {
				jButtonRecargarInformacionDefinicionActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDefinicion")) {
				jButtonRecargarInformacionDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDefinicion")) {
				jButtonRecargarInformacionDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDefinicion")) {
				jButtonAnterioresDefinicionActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDefinicion")) {
				jButtonAnterioresDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDefinicion")) {
				jButtonAnterioresDefinicionActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDefinicion")) {
				jButtonSiguientesDefinicionActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDefinicion")) {
				jButtonSiguientesDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDefinicion")) {
				jButtonSiguientesDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDefinicion") || sTipo.equals("MenuItemDetalleAbrirOrderByDefinicion")) {
				jButtonAbrirOrderByDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDefinicion") || sTipo.equals("MenuItemDetalleMostrarOcultarDefinicion")) {
				jButtonMostrarOcultarDefinicionActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDefinicion")) {
				jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDefinicion")) {
				jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDefinicion")) {
				jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDefinicion")) {
				jButtonCerrarReporteDinamicoDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDefinicion")) {
				jButtonGenerarReporteDinamicoDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDefinicion")) {
				
				jButtonGenerarExcelReporteDinamicoDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDefinicion")) {
				jButtonCerrarImportacionDefinicionActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDefinicion")) {
				
				jButtonGenerarImportacionDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDefinicion")) {
				
				jButtonAbrirImportacionDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDefinicion")) {
				jComboBoxTiposAccionesDefinicionActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDefinicion")) {
				jComboBoxTiposRelacionesDefinicionActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDefinicion")) {
				jComboBoxTiposAccionesDefinicionActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDefinicion")) {
				
				jComboBoxTiposSeleccionarDefinicionActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDefinicion")) {
				jTextFieldValorCampoGeneralDefinicionActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDefinicion")) {
				jButtonAbrirOrderByDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDefinicion")) {
				jButtonAbrirOrderByDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDefinicion")) {
				jButtonCerrarOrderByDefinicionActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDefinicionBusqueda")) {
				this.jButtonidDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDefinicionUpdate")) {
				this.jButtonid_empresaDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDefinicionBusqueda")) {
				this.jButtonid_empresaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloDefinicionUpdate")) {
				this.jButtonid_moduloDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloDefinicionBusqueda")) {
				this.jButtonid_moduloDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_formatoDefinicionBusqueda")) {
				this.jButtonsecuencial_formatoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialDefinicionBusqueda")) {
				this.jButtonsecuencialDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionDefinicionUpdate")) {
				this.jButtonid_transaccionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionDefinicionBusqueda")) {
				this.jButtonid_transaccionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDefinicionUpdate")) {
				this.jButtonid_sucursalDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDefinicionBusqueda")) {
				this.jButtonid_sucursalDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_iva_itemDefinicionUpdate")) {
				this.jButtonid_tipo_iva_itemDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_iva_itemDefinicionBusqueda")) {
				this.jButtonid_tipo_iva_itemDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_mostrar_bodegaDefinicionBusqueda")) {
				this.jButtoncon_mostrar_bodegaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("factorDefinicionBusqueda")) {
				this.jButtonfactorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_otro_recargoDefinicionBusqueda")) {
				this.jButtoncon_otro_recargoDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_global_clienteDefinicionUpdate")) {
				this.jButtonid_tipo_global_clienteDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_global_clienteDefinicionBusqueda")) {
				this.jButtonid_tipo_global_clienteDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_coaDefinicionBusqueda")) {
				this.jButtoncon_coaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costeo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_costeo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costeo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_costeo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_retencionDefinicionBusqueda")) {
				this.jButtoncon_retencionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_costo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_costo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_novedad_productoDefinicionBusqueda")) {
				this.jButtoncon_novedad_productoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_iceDefinicionBusqueda")) {
				this.jButtoncon_iceDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cantidadDefinicionBusqueda")) {
				this.jButtoncon_cantidadDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_producto_por_proveedorDefinicionBusqueda")) {
				this.jButtoncon_producto_por_proveedorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lote_clienteDefinicionBusqueda")) {
				this.jButtoncon_lote_clienteDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cuenta_contableDefinicionBusqueda")) {
				this.jButtoncon_cuenta_contableDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalleDefinicionBusqueda")) {
				this.jButtoncon_detalleDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_iva_incluidoDefinicionBusqueda")) {
				this.jButtoncon_iva_incluidoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lotesDefinicionBusqueda")) {
				this.jButtoncon_lotesDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_descuentosDefinicionBusqueda")) {
				this.jButtonnumero_descuentosDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_precioDefinicionBusqueda")) {
				this.jButtoncon_precioDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_registrosDefinicionBusqueda")) {
				this.jButtonnumero_registrosDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_centro_costoDefinicionBusqueda")) {
				this.jButtoncon_centro_costoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_orden_ivaDefinicionBusqueda")) {
				this.jButtoncon_orden_ivaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_multi_empresaDefinicionBusqueda")) {
				this.jButtoncon_multi_empresaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoDefinicionUpdate")) {
				this.jButtonid_formatoDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoDefinicionBusqueda")) {
				this.jButtonid_formatoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_en_lineaDefinicionBusqueda")) {
				this.jButtoncon_en_lineaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioDefinicionUpdate")) {
				this.jButtonid_tipo_tributarioDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioDefinicionBusqueda")) {
				this.jButtonid_tipo_tributarioDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionDefinicionUpdate")) {
				this.jButtonid_tipo_retencionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionDefinicionBusqueda")) {
				this.jButtonid_tipo_retencionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_evaluacionDefinicionBusqueda")) {
				this.jButtoncon_evaluacionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_otDefinicionBusqueda")) {
				this.jButtoncon_otDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_anticipoDefinicionBusqueda")) {
				this.jButtoncon_anticipoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cierreDefinicionBusqueda")) {
				this.jButtoncon_cierreDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_generalDefinicionBusqueda")) {
				this.jButtoncon_generalDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_por_productoDefinicionBusqueda")) {
				this.jButtoncon_por_productoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_descuentoDefinicionBusqueda")) {
				this.jButtoncon_descuentoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_seriesDefinicionBusqueda")) {
				this.jButtoncon_seriesDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDefinicionBusqueda")) {
				this.jButtoncantidadDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoDefinicionUpdate")) {
				this.jButtonid_tipo_documentoDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoDefinicionBusqueda")) {
				this.jButtonid_tipo_documentoDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_libro_contableDefinicionUpdate")) {
				this.jButtonid_libro_contableDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_libro_contableDefinicionBusqueda")) {
				this.jButtonid_libro_contableDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_internoDefinicionBusqueda")) {
				this.jButtoncon_internoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_reservaDefinicionBusqueda")) {
				this.jButtoncon_reservaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_precio_proveedorDefinicionBusqueda")) {
				this.jButtoncon_precio_proveedorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_produccionDefinicionBusqueda")) {
				this.jButtoncon_produccionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_codigo_barraDefinicionBusqueda")) {
				this.jButtoncon_codigo_barraDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_romaneosDefinicionBusqueda")) {
				this.jButtoncon_romaneosDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDefinicionUpdate")) {
				this.jButtonid_tipo_transaccion_moduloDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDefinicionBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableDefinicionUpdate")) {
				this.jButtonid_cuenta_contableDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableDefinicionBusqueda")) {
				this.jButtonid_cuenta_contableDefinicionBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdCuentaContableDefinicion")) {
				this.jButtonFK_IdCuentaContableDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdLibroContableDefinicion")) {
				this.jButtonFK_IdLibroContableDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdSucursalDefinicion")) {
				this.jButtonFK_IdSucursalDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCosteoDefinicionDefinicion")) {
				this.jButtonFK_IdTipoCosteoDefinicionDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCostoDefinicionDefinicion")) {
				this.jButtonFK_IdTipoCostoDefinicionDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDefinicionDefinicion")) {
				this.jButtonFK_IdTipoDefinicionDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDocumentoDefinicion")) {
				this.jButtonFK_IdTipoDocumentoDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoGlobalClienteDefinicion")) {
				this.jButtonFK_IdTipoGlobalClienteDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoIvaItemDefinicion")) {
				this.jButtonFK_IdTipoIvaItemDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionDefinicion")) {
				this.jButtonFK_IdTipoRetencionDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloDefinicion")) {
				this.jButtonFK_IdTipoTransaccionModuloDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTributarioDefinicion")) {
				this.jButtonFK_IdTipoTributarioDefinicionActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionDefinicion")) {
				this.jButtonFK_IdTransaccionDefinicionActionPerformed(evt);
			}
			
			;
			
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDefinicion();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Definicion definicionLocal=null;
			
			if(!this.getEsControlTabla()) {
				definicionLocal=this.definicion;
			} else {
				definicionLocal=this.definicionAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
							
				
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
								
						
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
								
				
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
							
				
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
								
				
				


				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
			
			this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDefinicion")) {
					jCheckBoxSeleccionarTodosDefinicionItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDefinicion")) {
					jCheckBoxSeleccionadosDefinicionItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDefinicion")) {
					
				}
				
				


				
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
												
				
				


				
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_tipo_transaccion_moduloDefinicion")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion;
				}

				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					//classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormDefinicion(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
				//recargarFormDefinicionTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDefinicionActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_tipo_transaccion_moduloDefinicion")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion;
				}

				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					//classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormDefinicion(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
				//recargarFormDefinicionTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
			}
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.definicion);
				
				this.actualizarInformacion("INFO_PADRE",false,this.definicion);
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_tipo_transaccion_moduloDefinicion")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion;
				}

				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					//classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormDefinicion(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
				//recargarFormDefinicionTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloDefinicion,"FK_IdTipoTransaccionModulo");
			}
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Definicion.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Definicion.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDefinicionActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.definicionAnterior =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.definicionAnterior =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDefinicion")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDefinicionListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDefinicion.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.definicion =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.definicion =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.definicion);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDefinicion")) {
				
				}
				
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDefinicion")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDefinicion.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDefinicion")) {
			
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDefinicion();
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			if(sTipo.equals("NuevoDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDefinicion")) {
				jButtonDuplicarDefinicionActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDefinicion")) {
				jButtonCopiarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDefinicion")) {
				jButtonVerFormDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDefinicion")) {
				jButtonNuevoDefinicionActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDefinicion")) {
				jButtonModificarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDefinicion")) {
				jButtonActualizarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDefinicion")) {
				jButtonEliminarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDefinicion")) {
				jButtonCancelarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDefinicion")) {
				jButtonCerrarDefinicionActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDefinicion")) {
				jButtonGuardarCambiosDefinicionActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDefinicion")) {
				jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDefinicion")) {
				jButtonAbrirOrderByDefinicionActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDefinicion")) {
				jButtonRecargarInformacionDefinicionActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDefinicion")) {
				jButtonAnterioresDefinicionActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDefinicion")) {
				jButtonSiguientesDefinicionActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDefinicionBusqueda")) {
				this.jButtonidDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDefinicionUpdate")) {
				this.jButtonid_empresaDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDefinicionBusqueda")) {
				this.jButtonid_empresaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloDefinicionUpdate")) {
				this.jButtonid_moduloDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloDefinicionBusqueda")) {
				this.jButtonid_moduloDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_formatoDefinicionBusqueda")) {
				this.jButtonsecuencial_formatoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialDefinicionBusqueda")) {
				this.jButtonsecuencialDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionDefinicionUpdate")) {
				this.jButtonid_transaccionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionDefinicionBusqueda")) {
				this.jButtonid_transaccionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDefinicionUpdate")) {
				this.jButtonid_sucursalDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDefinicionBusqueda")) {
				this.jButtonid_sucursalDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_iva_itemDefinicionUpdate")) {
				this.jButtonid_tipo_iva_itemDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_iva_itemDefinicionBusqueda")) {
				this.jButtonid_tipo_iva_itemDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_mostrar_bodegaDefinicionBusqueda")) {
				this.jButtoncon_mostrar_bodegaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("factorDefinicionBusqueda")) {
				this.jButtonfactorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_otro_recargoDefinicionBusqueda")) {
				this.jButtoncon_otro_recargoDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_global_clienteDefinicionUpdate")) {
				this.jButtonid_tipo_global_clienteDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_global_clienteDefinicionBusqueda")) {
				this.jButtonid_tipo_global_clienteDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_coaDefinicionBusqueda")) {
				this.jButtoncon_coaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costeo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_costeo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costeo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_costeo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_retencionDefinicionBusqueda")) {
				this.jButtoncon_retencionDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_costo_definicionDefinicionUpdate")) {
				this.jButtonid_tipo_costo_definicionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_costo_definicionDefinicionBusqueda")) {
				this.jButtonid_tipo_costo_definicionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_novedad_productoDefinicionBusqueda")) {
				this.jButtoncon_novedad_productoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_iceDefinicionBusqueda")) {
				this.jButtoncon_iceDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cantidadDefinicionBusqueda")) {
				this.jButtoncon_cantidadDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_producto_por_proveedorDefinicionBusqueda")) {
				this.jButtoncon_producto_por_proveedorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lote_clienteDefinicionBusqueda")) {
				this.jButtoncon_lote_clienteDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cuenta_contableDefinicionBusqueda")) {
				this.jButtoncon_cuenta_contableDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_detalleDefinicionBusqueda")) {
				this.jButtoncon_detalleDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_iva_incluidoDefinicionBusqueda")) {
				this.jButtoncon_iva_incluidoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_lotesDefinicionBusqueda")) {
				this.jButtoncon_lotesDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_descuentosDefinicionBusqueda")) {
				this.jButtonnumero_descuentosDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_precioDefinicionBusqueda")) {
				this.jButtoncon_precioDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_registrosDefinicionBusqueda")) {
				this.jButtonnumero_registrosDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_centro_costoDefinicionBusqueda")) {
				this.jButtoncon_centro_costoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_orden_ivaDefinicionBusqueda")) {
				this.jButtoncon_orden_ivaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_multi_empresaDefinicionBusqueda")) {
				this.jButtoncon_multi_empresaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoDefinicionUpdate")) {
				this.jButtonid_formatoDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoDefinicionBusqueda")) {
				this.jButtonid_formatoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_en_lineaDefinicionBusqueda")) {
				this.jButtoncon_en_lineaDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioDefinicionUpdate")) {
				this.jButtonid_tipo_tributarioDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioDefinicionBusqueda")) {
				this.jButtonid_tipo_tributarioDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionDefinicionUpdate")) {
				this.jButtonid_tipo_retencionDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionDefinicionBusqueda")) {
				this.jButtonid_tipo_retencionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_evaluacionDefinicionBusqueda")) {
				this.jButtoncon_evaluacionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_otDefinicionBusqueda")) {
				this.jButtoncon_otDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_anticipoDefinicionBusqueda")) {
				this.jButtoncon_anticipoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_cierreDefinicionBusqueda")) {
				this.jButtoncon_cierreDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_generalDefinicionBusqueda")) {
				this.jButtoncon_generalDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_por_productoDefinicionBusqueda")) {
				this.jButtoncon_por_productoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_descuentoDefinicionBusqueda")) {
				this.jButtoncon_descuentoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_seriesDefinicionBusqueda")) {
				this.jButtoncon_seriesDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDefinicionBusqueda")) {
				this.jButtoncantidadDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoDefinicionUpdate")) {
				this.jButtonid_tipo_documentoDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoDefinicionBusqueda")) {
				this.jButtonid_tipo_documentoDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_libro_contableDefinicionUpdate")) {
				this.jButtonid_libro_contableDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_libro_contableDefinicionBusqueda")) {
				this.jButtonid_libro_contableDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_internoDefinicionBusqueda")) {
				this.jButtoncon_internoDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_reservaDefinicionBusqueda")) {
				this.jButtoncon_reservaDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_precio_proveedorDefinicionBusqueda")) {
				this.jButtoncon_precio_proveedorDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_produccionDefinicionBusqueda")) {
				this.jButtoncon_produccionDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_codigo_barraDefinicionBusqueda")) {
				this.jButtoncon_codigo_barraDefinicionBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_romaneosDefinicionBusqueda")) {
				this.jButtoncon_romaneosDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDefinicionUpdate")) {
				this.jButtonid_tipo_transaccion_moduloDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloDefinicionBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloDefinicionBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableDefinicionUpdate")) {
				this.jButtonid_cuenta_contableDefinicionUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableDefinicionBusqueda")) {
				this.jButtonid_cuenta_contableDefinicionBusquedaActionPerformed(evt);
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDefinicion();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDefinicion")) {
				closingInternalFrameDefinicion();
				
			} else if(sTipo.equals("jButtonCancelarDefinicion")) {
				JInternalFrameBase jInternalFrameDetalleFormDefinicion = (JInternalFrameBase)evt.getSource();
	            	
	            DefinicionBeanSwingJInternalFrame jInternalFrameParent=(DefinicionBeanSwingJInternalFrame)jInternalFrameDetalleFormDefinicion.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDefinicionActionPerformed(null);
			}
			
			DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.definicion,new Object(),this.definicionParameterGeneral,this.definicionReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDefinicion(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDefinicion(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDefinicion(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.definicion)) {
			if(!esControlTabla) {
				if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);			
				}
				
				if(this.definicionSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDefinicion(this.definicion,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.definicionReturnGeneral=definicionLogic.procesarEventosDefinicionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.definicionLogic.getDefinicions(),this.definicion,this.definicionParameterGeneral,this.isEsNuevoDefinicion,classes);//this.definicionLogic.getDefinicion()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDefinicion(this.definicionReturnGeneral,this.definicionBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.definicionSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDefinicion(classes,this.definicionReturnGeneral,this.definicionBean,false);
					}
						
					if(this.definicionReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDefinicion(this.definicionReturnGeneral.getDefinicion());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDefinicion(this.definicionReturnGeneral.getDefinicion());	
					}
						
					if(this.definicionReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDefinicion(this.definicionReturnGeneral.getDefinicion(),classes);//this.definicionBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDefinicion(this.definicion,classes);//this.definicionBean);									
				}
			
				if(DefinicionJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDefinicion(this.definicion,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDefinicion(this.definicion);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.definicionAnterior!=null) {
						this.definicion=this.definicionAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.definicionReturnGeneral=definicionLogic.procesarEventosDefinicionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.definicionLogic.getDefinicions(),this.definicion,this.definicionParameterGeneral,this.isEsNuevoDefinicion,classes);//this.definicionLogic.getDefinicion()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.definicionSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.definicionSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.definicionReturnGeneral.getDefinicion(),definicionLogic.getDefinicions());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.definicionReturnGeneral.getDefinicion(),this.definicions);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDefinicion.repaint();
				
				//((AbstractTableModel) this.jTableDatosDefinicion.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDefinicion();
			}
		}
	}
	
	public void actualizarVisualTableDatosDefinicion() throws Exception {
		
		DefinicionModel definicionModel=(DefinicionModel)this.jTableDatosDefinicion.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			definicionModel.definicions=this.definicionLogic.getDefinicions();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			definicionModel.definicions=this.definicions;
		}
		
		
		((DefinicionModel) this.jTableDatosDefinicion.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDefinicion() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdefinicionAnterior(),this.definicionLogic.getDefinicions());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdefinicionAnterior(),this.definicions);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDefinicion();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDefinicion(Definicion definicion,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.definicion,new Object(),generalEntityParameterGeneral,this.definicionReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.definicionSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DefinicionConstantesFunciones.getClassesRelationshipsOfDefinicion(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DefinicionConstantesFunciones.getClassesRelationshipsFromStringsOfDefinicion(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDefinicion(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DefinicionBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.definicion,new Object(),generalEntityParameterGeneral,this.definicionReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDefinicion(DefinicionBean definicionBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDefinicion(ArrayList<Classe> classes,DefinicionReturnGeneral definicionReturnGeneral,DefinicionBean definicionBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDefinicion(Definicion definicion,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.definicion)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDefinicion = new DefinicionDetalleFormJInternalFrame(jDesktopPane,this.definicionSessionBean.getConGuardarRelaciones(),this.definicionSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDefinicion);
		this.jInternalFrameDetalleFormDefinicion.setVisible(false);
		this.jInternalFrameDetalleFormDefinicion.setSelected(false);						
		
		this.jInternalFrameDetalleFormDefinicion.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDefinicion.definicionLogic=this.definicionLogic;
		
		this.cargarCombosFrameForeignKeyDefinicion("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDefinicion();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDefinicion();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDefinicion("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDefinicion();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDefinicion.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDefinicion"));
		
		this.jInternalFrameDetalleFormDefinicion.jButtonModificarDefinicion.addActionListener(new ButtonActionListener(this,"ModificarDefinicion"));

		
		this.jInternalFrameDetalleFormDefinicion.jButtonModificarToolBarDefinicion.addActionListener(new ButtonActionListener(this,"ModificarToolBarDefinicion"));
					
		this.jInternalFrameDetalleFormDefinicion.jMenuItemModificarDefinicion.addActionListener(new ButtonActionListener(this,"MenuItemModificarDefinicion"));		
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.addActionListener (new ButtonActionListener(this,"ActualizarDefinicion"));
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonActualizarToolBarDefinicion.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDefinicion"));
						
		this.jInternalFrameDetalleFormDefinicion.jMenuItemActualizarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDefinicion"));		
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.addActionListener (new ButtonActionListener(this,"EliminarDefinicion"));
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonEliminarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"EliminarToolBarDefinicion"));
								
		this.jInternalFrameDetalleFormDefinicion.jMenuItemEliminarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDefinicion"));		
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.addActionListener (new ButtonActionListener(this,"CancelarDefinicion"));
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonCancelarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"CancelarToolBarDefinicion"));
					
		this.jInternalFrameDetalleFormDefinicion.jMenuItemCancelarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDefinicion"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jMenuItemDetalleCerrarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDefinicion"));		
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosToolBarDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDefinicion"));
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosToolBarDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDefinicion"));
		
		
		
		this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDefinicion"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonidDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"idDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencial_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencialDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencialDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_mostrar_bodegaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_bodegaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonfactorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"factorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otro_recargoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otro_recargoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_coaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_coaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_retencionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_novedad_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_novedad_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iceDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iceDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cantidadDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_producto_por_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_producto_por_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lote_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lote_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cuenta_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_detalleDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_detalleDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iva_incluidoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iva_incluidoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lotesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lotesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_descuentosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_descuentosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precioDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_registrosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_registrosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_centro_costoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_orden_ivaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_orden_ivaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_multi_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_multi_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_en_lineaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_en_lineaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_evaluacionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_evaluacionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_anticipoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cierreDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cierreDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_generalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_generalDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_por_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_por_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_descuentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_descuentoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_seriesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_seriesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_internoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_internoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_reservaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_reservaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precio_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precio_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_produccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_produccionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_codigo_barraDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_codigo_barraDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_romaneosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_romaneosDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDefinicion"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDefinicion"));
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDefinicion"));
		}
		
		this.jTableDatosDefinicion.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDefinicion"));
		
		this.jTableDatosDefinicion.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDefinicion"));
		
		this.jButtonNuevoDefinicion.addActionListener(new ButtonActionListener(this,"NuevoDefinicion"));
		
		this.jButtonDuplicarDefinicion.addActionListener(new ButtonActionListener(this,"DuplicarDefinicion"));
		
		this.jButtonCopiarDefinicion.addActionListener(new ButtonActionListener(this,"CopiarDefinicion"));
		
		this.jButtonVerFormDefinicion.addActionListener(new ButtonActionListener(this,"VerFormDefinicion"));
		
		
		this.jButtonNuevoToolBarDefinicion.addActionListener(new ButtonActionListener(this,"NuevoToolBarDefinicion"));
			
		this.jButtonDuplicarToolBarDefinicion.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDefinicion"));
			
		this.jMenuItemNuevoDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDefinicion"));
			
		this.jMenuItemDuplicarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDefinicion"));		
		
		
		this.jButtonNuevoRelacionesDefinicion.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDefinicion"));
		
		
		this.jButtonNuevoRelacionesToolBarDefinicion.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDefinicion"));
			
		this.jMenuItemNuevoRelacionesDefinicion.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDefinicion"));		
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonModificarDefinicion.addActionListener(new ButtonActionListener(this,"ModificarDefinicion"));
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonModificarToolBarDefinicion.addActionListener(new ButtonActionListener(this,"ModificarToolBarDefinicion"));
			
			this.jInternalFrameDetalleFormDefinicion.jMenuItemModificarDefinicion.addActionListener(new ButtonActionListener(this,"MenuItemModificarDefinicion"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDefinicion.jButtonActualizarDefinicion.addActionListener (new ButtonActionListener(this,"ActualizarDefinicion"));
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonActualizarToolBarDefinicion.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDefinicion"));
				
			this.jInternalFrameDetalleFormDefinicion.jMenuItemActualizarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDefinicion"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonEliminarDefinicion.addActionListener (new ButtonActionListener(this,"EliminarDefinicion"));
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonEliminarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"EliminarToolBarDefinicion"));
						
			this.jInternalFrameDetalleFormDefinicion.jMenuItemEliminarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDefinicion"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonCancelarDefinicion.addActionListener (new ButtonActionListener(this,"CancelarDefinicion"));
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonCancelarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"CancelarToolBarDefinicion"));
			
			this.jInternalFrameDetalleFormDefinicion.jMenuItemCancelarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDefinicion"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDefinicion.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDefinicion"));		
		
		
		this.jButtonCerrarDefinicion.addActionListener (new ButtonActionListener(this,"CerrarDefinicion"));
		
		
		this.jButtonCerrarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"CerrarToolBarDefinicion"));
			
		this.jMenuItemCerrarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDefinicion"));
			
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jMenuItemDetalleCerrarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDefinicion"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosDefinicion"));
		}
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosToolBarDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDefinicion"));
		}
		
		this.jButtonCopiarToolBarDefinicion.addActionListener (new ButtonActionListener(this,"CopiarToolBarDefinicion"));
			
		this.jButtonVerFormToolBarDefinicion.addActionListener (new ButtonActionListener(this,"VerFormToolBarDefinicion"));
		
		this.jMenuItemGuardarCambiosDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDefinicion"));
			
		this.jMenuItemCopiarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDefinicion"));		
		
		this.jMenuItemVerFormDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDefinicion"));		
		
		
		this.jButtonGuardarCambiosTablaDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDefinicion"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDefinicion"));
			
		this.jMenuItemGuardarCambiosTablaDefinicion.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDefinicion"));		
		
		
		
		this.jButtonRecargarInformacionDefinicion.addActionListener (new ButtonActionListener(this,"RecargarInformacionDefinicion"));
					
		this.jButtonRecargarInformacionToolBarDefinicion.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDefinicion"));
		
		this.jMenuItemRecargarInformacionDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDefinicion"));		
		
		
		
		this.jButtonAnterioresDefinicion.addActionListener (new ButtonActionListener(this,"AnterioresDefinicion"));
		
		
		this.jButtonAnterioresToolBarDefinicion.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDefinicion"));
		
		this.jMenuItemAnterioresDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDefinicion"));		
		
		
		this.jButtonSiguientesDefinicion.addActionListener (new ButtonActionListener(this,"SiguientesDefinicion"));
		
		
		this.jButtonSiguientesToolBarDefinicion.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDefinicion"));
			
		this.jMenuItemSiguientesDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDefinicion"));
			
		this.jMenuItemAbrirOrderByDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDefinicion"));
			
		this.jMenuItemMostrarOcultarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDefinicion"));
			
		this.jMenuItemDetalleAbrirOrderByDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDefinicion"));
			
		this.jMenuItemDetalleMostarOcultarDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDefinicion"));		
		
		
		this.jButtonNuevoGuardarCambiosDefinicion.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDefinicion"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDefinicion.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDefinicion"));
			
		this.jMenuItemNuevoGuardarCambiosDefinicion.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDefinicion"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDefinicion.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDefinicion"));

		this.jCheckBoxSeleccionadosDefinicion.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDefinicion"));
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDefinicion"));
		}
		
		
		this.jComboBoxTiposRelacionesDefinicion.addActionListener (new ButtonActionListener(this,"TiposRelacionesDefinicion"));
			
		this.jComboBoxTiposAccionesDefinicion.addActionListener (new ButtonActionListener(this,"TiposAccionesDefinicion"));
					
		this.jComboBoxTiposSeleccionarDefinicion.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDefinicion"));
			
		this.jTextFieldValorCampoGeneralDefinicion.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDefinicion"));		
		
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonidDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"idDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencial_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencialDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencialDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_mostrar_bodegaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_bodegaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonfactorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"factorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otro_recargoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otro_recargoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_coaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_coaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_retencionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_novedad_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_novedad_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iceDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iceDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cantidadDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_producto_por_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_producto_por_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lote_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lote_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cuenta_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_detalleDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_detalleDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iva_incluidoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iva_incluidoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lotesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lotesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_descuentosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_descuentosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precioDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_registrosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_registrosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_centro_costoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_orden_ivaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_orden_ivaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_multi_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_multi_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_en_lineaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_en_lineaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_evaluacionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_evaluacionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_anticipoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cierreDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cierreDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_generalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_generalDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_por_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_por_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_descuentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_descuentoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_seriesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_seriesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_internoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_internoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_reservaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_reservaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precio_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precio_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_produccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_produccionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_codigo_barraDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_codigo_barraDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_romaneosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_romaneosDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCuentaContableDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDefinicion"));

			this.jButtonFK_IdLibroContableDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdLibroContableDefinicion"));

			this.jButtonFK_IdSucursalDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdSucursalDefinicion"));

			this.jButtonFK_IdTipoCosteoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoCosteoDefinicionDefinicion"));

			this.jButtonFK_IdTipoCostoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoCostoDefinicionDefinicion"));

			this.jButtonFK_IdTipoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoDefinicionDefinicion"));

			this.jButtonFK_IdTipoDocumentoDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoDefinicion"));

			this.jButtonFK_IdTipoGlobalClienteDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoGlobalClienteDefinicion"));

			this.jButtonFK_IdTipoIvaItemDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoIvaItemDefinicion"));

			this.jButtonFK_IdTipoRetencionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionDefinicion"));

			this.jButtonFK_IdTipoTransaccionModuloDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloDefinicion"));

			this.jButtonFK_IdTipoTributarioDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioDefinicion"));

			this.jButtonFK_IdTransaccionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionDefinicion"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDefinicion!=null) {
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDefinicion"));
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDefinicion"));
				this.jInternalFrameReporteDinamicoDefinicion.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDefinicion"));
			}
			
			//this.jButtonCerrarReporteDinamicoDefinicion.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDefinicion"));				
			//this.jButtonGenerarReporteDinamicoDefinicion.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDefinicion"));
			//this.jButtonGenerarExcelReporteDinamicoDefinicion.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDefinicion"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDefinicion!=null) {
				this.jInternalFrameImportacionDefinicion.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDefinicion"));
				this.jInternalFrameImportacionDefinicion.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDefinicion"));
				this.jInternalFrameImportacionDefinicion.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDefinicion"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDefinicion.addActionListener (new ButtonActionListener(this,"AbrirOrderByDefinicion"));
			
			this.jButtonAbrirOrderByToolBarDefinicion.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDefinicion"));			
			
			if(this.jInternalFrameOrderByDefinicion!=null) {
				this.jInternalFrameOrderByDefinicion.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDefinicion"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDefinicion!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDefinicion.jTabbedPaneRelacionesDefinicion.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDefinicion"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDefinicion();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDefinicion.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDefinicion = (JInternalFrameBase)event.getSource();
	            	
	            DefinicionBeanSwingJInternalFrame jInternalFrameParent=(DefinicionBeanSwingJInternalFrame)jInternalFrameDetalleFormDefinicion.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDefinicionActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDefinicion.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDefinicionListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDefinicion.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDefinicion.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDefinicion";
		inputMap = this.jButtonNuevoDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDefinicionActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDefinicionActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDefinicion";
		inputMap = this.jButtonNuevoRelacionesDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDefinicionActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDefinicion";
		inputMap = this.jButtonModificarDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDefinicion";
		inputMap = this.jButtonActualizarDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDefinicion";
		inputMap = this.jButtonEliminarDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDefinicion";
		inputMap = this.jButtonCancelarDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDefinicion";
		inputMap = this.jButtonCerrarDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDefinicion";
		inputMap = this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDefinicion.jButtonGuardarCambiosDefinicion.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDefinicionActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDefinicion.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDefinicionItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDefinicion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDefinicionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDefinicion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDefinicionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDefinicion.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDefinicionActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonidDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"idDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencial_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonsecuencialDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"secuencialDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_definicionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_transaccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_sucursalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_iva_itemDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_iva_itemDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_mostrar_bodegaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_mostrar_bodegaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonfactorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"factorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otro_recargoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otro_recargoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_global_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_global_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_coaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_coaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costeo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costeo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_retencionDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_costo_definicionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_costo_definicionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_novedad_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_novedad_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iceDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iceDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cantidadDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_producto_por_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_producto_por_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lote_clienteDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lote_clienteDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cuenta_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_detalleDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_detalleDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_iva_incluidoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_iva_incluidoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_lotesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_lotesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_descuentosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_descuentosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precioDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonnumero_registrosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"numero_registrosDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_centro_costoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_centro_costoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_orden_ivaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_orden_ivaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_multi_empresaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_multi_empresaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_formatoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_en_lineaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_en_lineaDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_tributarioDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_retencionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_evaluacionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_evaluacionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_otDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_otDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_anticipoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_cierreDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_cierreDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_generalDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_generalDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_por_productoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_por_productoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_descuentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_descuentoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_seriesDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_seriesDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncantidadDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_documentoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_libro_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_libro_contableDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_internoDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_internoDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_reservaDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_reservaDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_precio_proveedorDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_precio_proveedorDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_produccionDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_produccionDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_codigo_barraDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_codigo_barraDefinicionBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtoncon_romaneosDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"con_romaneosDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_tipo_transaccion_moduloDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloDefinicionBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDefinicion.jButtonid_cuenta_contableDefinicionBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableDefinicionBusqueda"));
		
		
		this.jButtonFK_IdCuentaContableDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDefinicion"));

		this.jButtonFK_IdLibroContableDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdLibroContableDefinicion"));

		this.jButtonFK_IdSucursalDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdSucursalDefinicion"));

		this.jButtonFK_IdTipoCosteoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoCosteoDefinicionDefinicion"));

		this.jButtonFK_IdTipoCostoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoCostoDefinicionDefinicion"));

		this.jButtonFK_IdTipoDefinicionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoDefinicionDefinicion"));

		this.jButtonFK_IdTipoDocumentoDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoDefinicion"));

		this.jButtonFK_IdTipoGlobalClienteDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoGlobalClienteDefinicion"));

		this.jButtonFK_IdTipoIvaItemDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoIvaItemDefinicion"));

		this.jButtonFK_IdTipoRetencionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionDefinicion"));

		this.jButtonFK_IdTipoTransaccionModuloDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloDefinicion"));

		this.jButtonFK_IdTipoTributarioDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioDefinicion"));

		this.jButtonFK_IdTransaccionDefinicion.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionDefinicion"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDefinicion.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDefinicionActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDefinicionActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDefinicion.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDefinicion(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
					definicionAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Definicion definicionAux:definicions) {
					definicionAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDefinicionItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDefinicion(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
						definicionAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Definicion definicionAux:definicions) {
						definicionAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
					
						if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA)) {
							existe=true;
							definicionAux.setcon_mostrar_bodega(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO)) {
							existe=true;
							definicionAux.setcon_otro_recargo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCOA)) {
							existe=true;
							definicionAux.setcon_coa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRETENCION)) {
							existe=true;
							definicionAux.setcon_retencion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO)) {
							existe=true;
							definicionAux.setcon_novedad_producto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONICE)) {
							existe=true;
							definicionAux.setcon_ice(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCANTIDAD)) {
							existe=true;
							definicionAux.setcon_cantidad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR)) {
							existe=true;
							definicionAux.setcon_producto_por_proveedor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE)) {
							existe=true;
							definicionAux.setcon_lote_cliente(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE)) {
							existe=true;
							definicionAux.setcon_cuenta_contable(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDETALLE)) {
							existe=true;
							definicionAux.setcon_detalle(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO)) {
							existe=true;
							definicionAux.setcon_iva_incluido(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTES)) {
							existe=true;
							definicionAux.setcon_lotes(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIO)) {
							existe=true;
							definicionAux.setcon_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO)) {
							existe=true;
							definicionAux.setcon_centro_costo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONORDENIVA)) {
							existe=true;
							definicionAux.setcon_orden_iva(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA)) {
							existe=true;
							definicionAux.setcon_multi_empresa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONENLINEA)) {
							existe=true;
							definicionAux.setcon_en_linea(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONEVALUACION)) {
							existe=true;
							definicionAux.setcon_evaluacion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOT)) {
							existe=true;
							definicionAux.setcon_ot(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONANTICIPO)) {
							existe=true;
							definicionAux.setcon_anticipo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCIERRE)) {
							existe=true;
							definicionAux.setcon_cierre(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONGENERAL)) {
							existe=true;
							definicionAux.setcon_general(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO)) {
							existe=true;
							definicionAux.setcon_por_producto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDESCUENTO)) {
							existe=true;
							definicionAux.setcon_descuento(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONSERIES)) {
							existe=true;
							definicionAux.setcon_series(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONINTERNO)) {
							existe=true;
							definicionAux.setcon_interno(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRESERVA)) {
							existe=true;
							definicionAux.setcon_reserva(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR)) {
							existe=true;
							definicionAux.setcon_precio_proveedor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCCION)) {
							existe=true;
							definicionAux.setcon_produccion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA)) {
							existe=true;
							definicionAux.setcon_codigo_barra(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONROMANEOS)) {
							existe=true;
							definicionAux.setcon_romaneos(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Definicion definicionAux:definicions) {
						
						if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA)) {
							existe=true;
							definicionAux.setcon_mostrar_bodega(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO)) {
							existe=true;
							definicionAux.setcon_otro_recargo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCOA)) {
							existe=true;
							definicionAux.setcon_coa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRETENCION)) {
							existe=true;
							definicionAux.setcon_retencion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO)) {
							existe=true;
							definicionAux.setcon_novedad_producto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONICE)) {
							existe=true;
							definicionAux.setcon_ice(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCANTIDAD)) {
							existe=true;
							definicionAux.setcon_cantidad(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR)) {
							existe=true;
							definicionAux.setcon_producto_por_proveedor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE)) {
							existe=true;
							definicionAux.setcon_lote_cliente(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE)) {
							existe=true;
							definicionAux.setcon_cuenta_contable(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDETALLE)) {
							existe=true;
							definicionAux.setcon_detalle(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO)) {
							existe=true;
							definicionAux.setcon_iva_incluido(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTES)) {
							existe=true;
							definicionAux.setcon_lotes(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIO)) {
							existe=true;
							definicionAux.setcon_precio(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO)) {
							existe=true;
							definicionAux.setcon_centro_costo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONORDENIVA)) {
							existe=true;
							definicionAux.setcon_orden_iva(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA)) {
							existe=true;
							definicionAux.setcon_multi_empresa(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONENLINEA)) {
							existe=true;
							definicionAux.setcon_en_linea(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONEVALUACION)) {
							existe=true;
							definicionAux.setcon_evaluacion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOT)) {
							existe=true;
							definicionAux.setcon_ot(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONANTICIPO)) {
							existe=true;
							definicionAux.setcon_anticipo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCIERRE)) {
							existe=true;
							definicionAux.setcon_cierre(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONGENERAL)) {
							existe=true;
							definicionAux.setcon_general(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO)) {
							existe=true;
							definicionAux.setcon_por_producto(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDESCUENTO)) {
							existe=true;
							definicionAux.setcon_descuento(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONSERIES)) {
							existe=true;
							definicionAux.setcon_series(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONINTERNO)) {
							existe=true;
							definicionAux.setcon_interno(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRESERVA)) {
							existe=true;
							definicionAux.setcon_reserva(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR)) {
							existe=true;
							definicionAux.setcon_precio_proveedor(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCCION)) {
							existe=true;
							definicionAux.setcon_produccion(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA)) {
							existe=true;
							definicionAux.setcon_codigo_barra(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONROMANEOS)) {
							existe=true;
							definicionAux.setcon_romaneos(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDefinicion(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDefinicion.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDefinicion.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDefinicionItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDefinicion(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDefinicion.getSelectedRows();
			
			Definicion definicionLocal=new Definicion();
			
			//this.seleccionarTodosDefinicion(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					definicionLocal =(Definicion) this.definicionLogic.getDefinicions().toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					definicionLocal =(Definicion) this.definicions.toArray()[this.jTableDatosDefinicion.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				definicionLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
						definicionAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Definicion definicionAux:definicions) {
						definicionAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDefinicion(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDefinicion.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDefinicion.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDefinicion,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDefinicionItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDefinicionParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDefinicionActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDefinicion(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDefinicion.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Definicion definicionAux:this.definicionLogic.getDefinicions()) {
				
						if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO)) {
							existe=true;
							definicionAux.setsecuencial_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							definicionAux.setsecuencial(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_FACTOR)) {
							existe=true;
							definicionAux.setfactor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS)) {
							existe=true;
							definicionAux.setnumero_descuentos(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS)) {
							existe=true;
							definicionAux.setnumero_registros(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							definicionAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Definicion definicionAux:definicions) {
					
						if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO)) {
							existe=true;
							definicionAux.setsecuencial_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							definicionAux.setsecuencial(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_FACTOR)) {
							existe=true;
							definicionAux.setfactor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS)) {
							existe=true;
							definicionAux.setnumero_descuentos(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS)) {
							existe=true;
							definicionAux.setnumero_registros(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							definicionAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDefinicion(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDefinicionActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDefinicion(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDefinicion=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDefinicion.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDefinicion) {				
					conSplash=true;//false;										
					
					//this.startProcessDefinicion(conSplash);
				
					this.generarReporteDefinicionsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDefinicionsSeleccionados();
				//this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDefinicionsSeleccionados(false);
				//this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDefinicionsSeleccionados(true);
				//this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDefinicion();
				
				this.exportarDefinicionsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDefinicions();
				//this.importarDefinicions();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDefinicion();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDefinicionsSeleccionados();
				//this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Definicion", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDefinicion();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDefinicion)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDefinicion(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
				}	
			} 			
			else if(DefinicionBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDefinicion) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDefinicion(conSplash);
					
						//this.actualizarParametrosGeneralDefinicion();
						
						this.generarReporteProcesoAccionDefinicionsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DefinicionBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO DefinicionES SELECCIONADOS?", "MANTENIMIENTO DE Definicion", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDefinicion();
				
						this.actualizarParametrosGeneralDefinicion();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.definicionReturnGeneral=definicionLogic.procesarAccionDefinicionsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.definicionLogic.getDefinicions(),this.definicionParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDefinicionReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDefinicion();
					
					DefinicionBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDefinicionReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDefinicion.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDefinicion.jComboBoxTiposAccionesFormularioDefinicion.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDefinicion(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDefinicionActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDefinicion();
			
			if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
			Definicion definicion=new Definicion();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDefinicion(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDefinicion.getSelectedItem();
			
			
			
			
			definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
			//this.sTipoAccion;
			
			if(definicionsSeleccionados.size()==1) {
				for(Definicion definicionAux:definicionsSeleccionados) {
					definicion=definicionAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDefinicion();
			
      		//this.finishProcessDefinicion(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDefinicionReturnGeneral() throws Exception {
		if(this.definicionReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.definicionReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.definicionReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.definicionReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.definicionReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.definicionReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDefinicion(false);
		}
		
		if(this.definicionReturnGeneral.getConRetornoLista() || this.definicionReturnGeneral.getConRetornoObjeto()) {
			if(this.definicionReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.definicionLogic.setDefinicions(this.definicionReturnGeneral.getDefinicions());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.definicionReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.definicionLogic.setDefinicion(this.definicionReturnGeneral.getDefinicion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDefinicion(false);
		}
	}
	
	public void actualizarParametrosGeneralDefinicion() throws Exception {
		
		
	}
	
	public ArrayList<Definicion> getDefinicionsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDefinicion) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Definicion definicionAux:definicionLogic.getDefinicions()) {
					if(definicionAux.getIsSelected()) {
						definicionsSeleccionados.add(definicionAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Definicion definicionAux:this.definicions) {
					if(definicionAux.getIsSelected()) {
						definicionsSeleccionados.add(definicionAux);				
					}
				}
			}
			
			if(definicionsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						definicionsSeleccionados.addAll(this.definicionLogic.getDefinicions());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						definicionsSeleccionados.addAll(this.definicions);				
					}
				}
			}
		} else {
			definicionsSeleccionados.add(this.definicion);
		}
		
		return definicionsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDefinicionsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDefinicionsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDefinicionsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDefinicionsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDefinicionsSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Definicion",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDefinicions("Todos",definicionsSeleccionados);
		
	}	
	
	public void generarReporteNormalDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDefinicions("Todos",definicionsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDefinicionsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDefinicions("Todos",definicionsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDefinicion();
		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDefinicion();
		
		
		//this.generarReporteDefinicions("Todos",definicionsSeleccionados ,definicionImplementable,definicionImplementableHome);
	}
	
	public void mostrarImportacionDefinicions() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDefinicion();
		
		this.abrirFrameImportacionDefinicion();		
		
			
		//this.generarReporteDefinicions("Todos",definicionsSeleccionados ,definicionImplementable,definicionImplementableHome);
	}
	
	public void importarDefinicions() throws Exception {		
	
	}
	
	public void exportarDefinicionsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDefinicionsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDefinicionsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDefinicionsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Definicion",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDefinicion(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Definicion definicionAux:definicionsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDefinicion(definicionAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//definicionAux.setsDetalleGeneralEntityReporte(definicionAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDefinicion(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_SECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_FACTOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONOTRORECARGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCOA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONRETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONDETALLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONLOTES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONORDENIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONENLINEA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONEVALUACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONOT;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONANTICIPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCIERRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONGENERAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONDESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONSERIES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONINTERNO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONRESERVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONPRODUCCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_CONROMANEOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDefinicion(Definicion definicion,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=definicion.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getsecuencial_formato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getsecuencial().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipodefinicion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipoivaitem_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_mostrar_bodega().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getfactor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_otro_recargo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipoglobalcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_coa().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipocosteodefinicion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_retencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipocostodefinicion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_novedad_producto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_ice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_cantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_producto_por_proveedor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_lote_cliente().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_cuenta_contable().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_detalle().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_iva_incluido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_lotes().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getnumero_descuentos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_precio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getnumero_registros().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_centro_costo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_orden_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_multi_empresa().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_en_linea().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipotributario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettiporetencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_evaluacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_ot().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_anticipo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_cierre().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_general().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_por_producto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_descuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_series().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipodocumento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getlibrocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_interno().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_reserva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_precio_proveedor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_produccion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_codigo_barra().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcon_romaneos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.gettipotransaccionmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=definicion.getcuentacontable_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Definicions");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDefinicion(row);				
				iRow++;
			}				
			
			for(Definicion definicionAux:definicionsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDefinicion(definicionAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDefinicionsSeleccionados() throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();		
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"definicion.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("definicions");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("definicion");
			//elementRoot.appendChild(element);
		
			for(Definicion definicionAux:definicionsSeleccionados) {
				element = document.createElement("definicion");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDefinicion(definicionAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.definicionSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Definicion",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDefinicion(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_SECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_FACTOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCOA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDETALLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONLOTES);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONORDENIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONENLINEA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONEVALUACION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONOT);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONANTICIPO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCIERRE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONGENERAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONDESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONSERIES);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONINTERNO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONRESERVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONPRODUCCION);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_CONROMANEOS);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDefinicion(Definicion definicion,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getsecuencial_formato());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getsecuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipodefinicion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipoivaitem_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_mostrar_bodega());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getfactor());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_otro_recargo());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipoglobalcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_coa());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipocosteodefinicion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipocostodefinicion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_novedad_producto());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_ice());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_cantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_producto_por_proveedor());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_lote_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_cuenta_contable());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_detalle());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_iva_incluido());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_lotes());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getnumero_descuentos());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_precio());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getnumero_registros());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_centro_costo());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_orden_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_multi_empresa());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_en_linea());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipotributario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettiporetencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_evaluacion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_ot());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_anticipo());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_cierre());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_general());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_por_producto());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_descuento());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_series());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipodocumento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getlibrocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_interno());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_reserva());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_precio_proveedor());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_produccion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_codigo_barra());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcon_romaneos());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.gettipotransaccionmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(definicion.getcuentacontable_descripcion());				
	}
	
	public void setFilaDatosExportarXmlDefinicion(Definicion definicion,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DefinicionConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(definicion.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DefinicionConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(definicion.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(DefinicionConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(definicion.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementmodulo_descripcion = document.createElement(DefinicionConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(definicion.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementsecuencial_formato = document.createElement(DefinicionConstantesFunciones.SECUENCIALFORMATO);
		elementsecuencial_formato.appendChild(document.createTextNode(definicion.getsecuencial_formato().trim()));
		element.appendChild(elementsecuencial_formato);

		Element elementsecuencial = document.createElement(DefinicionConstantesFunciones.SECUENCIAL);
		elementsecuencial.appendChild(document.createTextNode(definicion.getsecuencial().toString().trim()));
		element.appendChild(elementsecuencial);

		Element elementtipodefinicion_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPODEFINICION);
		elementtipodefinicion_descripcion.appendChild(document.createTextNode(definicion.gettipodefinicion_descripcion()));
		element.appendChild(elementtipodefinicion_descripcion);

		Element elementtransaccion_descripcion = document.createElement(DefinicionConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(definicion.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementsucursal_descripcion = document.createElement(DefinicionConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(definicion.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementtipoivaitem_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOIVAITEM);
		elementtipoivaitem_descripcion.appendChild(document.createTextNode(definicion.gettipoivaitem_descripcion()));
		element.appendChild(elementtipoivaitem_descripcion);

		Element elementcon_mostrar_bodega = document.createElement(DefinicionConstantesFunciones.CONMOSTRARBODEGA);
		elementcon_mostrar_bodega.appendChild(document.createTextNode(definicion.getcon_mostrar_bodega().toString().trim()));
		element.appendChild(elementcon_mostrar_bodega);

		Element elementfactor = document.createElement(DefinicionConstantesFunciones.FACTOR);
		elementfactor.appendChild(document.createTextNode(definicion.getfactor().toString().trim()));
		element.appendChild(elementfactor);

		Element elementcon_otro_recargo = document.createElement(DefinicionConstantesFunciones.CONOTRORECARGO);
		elementcon_otro_recargo.appendChild(document.createTextNode(definicion.getcon_otro_recargo().toString().trim()));
		element.appendChild(elementcon_otro_recargo);

		Element elementtipoglobalcliente_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOGLOBALCLIENTE);
		elementtipoglobalcliente_descripcion.appendChild(document.createTextNode(definicion.gettipoglobalcliente_descripcion()));
		element.appendChild(elementtipoglobalcliente_descripcion);

		Element elementcon_coa = document.createElement(DefinicionConstantesFunciones.CONCOA);
		elementcon_coa.appendChild(document.createTextNode(definicion.getcon_coa().toString().trim()));
		element.appendChild(elementcon_coa);

		Element elementtipocosteodefinicion_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOCOSTEODEFINICION);
		elementtipocosteodefinicion_descripcion.appendChild(document.createTextNode(definicion.gettipocosteodefinicion_descripcion()));
		element.appendChild(elementtipocosteodefinicion_descripcion);

		Element elementcon_retencion = document.createElement(DefinicionConstantesFunciones.CONRETENCION);
		elementcon_retencion.appendChild(document.createTextNode(definicion.getcon_retencion().toString().trim()));
		element.appendChild(elementcon_retencion);

		Element elementtipocostodefinicion_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOCOSTODEFINICION);
		elementtipocostodefinicion_descripcion.appendChild(document.createTextNode(definicion.gettipocostodefinicion_descripcion()));
		element.appendChild(elementtipocostodefinicion_descripcion);

		Element elementcon_novedad_producto = document.createElement(DefinicionConstantesFunciones.CONNOVEDADPRODUCTO);
		elementcon_novedad_producto.appendChild(document.createTextNode(definicion.getcon_novedad_producto().toString().trim()));
		element.appendChild(elementcon_novedad_producto);

		Element elementcon_ice = document.createElement(DefinicionConstantesFunciones.CONICE);
		elementcon_ice.appendChild(document.createTextNode(definicion.getcon_ice().toString().trim()));
		element.appendChild(elementcon_ice);

		Element elementcon_cantidad = document.createElement(DefinicionConstantesFunciones.CONCANTIDAD);
		elementcon_cantidad.appendChild(document.createTextNode(definicion.getcon_cantidad().toString().trim()));
		element.appendChild(elementcon_cantidad);

		Element elementcon_producto_por_proveedor = document.createElement(DefinicionConstantesFunciones.CONPRODUCTOPORPROVEEDOR);
		elementcon_producto_por_proveedor.appendChild(document.createTextNode(definicion.getcon_producto_por_proveedor().toString().trim()));
		element.appendChild(elementcon_producto_por_proveedor);

		Element elementcon_lote_cliente = document.createElement(DefinicionConstantesFunciones.CONLOTECLIENTE);
		elementcon_lote_cliente.appendChild(document.createTextNode(definicion.getcon_lote_cliente().toString().trim()));
		element.appendChild(elementcon_lote_cliente);

		Element elementcon_cuenta_contable = document.createElement(DefinicionConstantesFunciones.CONCUENTACONTABLE);
		elementcon_cuenta_contable.appendChild(document.createTextNode(definicion.getcon_cuenta_contable().toString().trim()));
		element.appendChild(elementcon_cuenta_contable);

		Element elementcon_detalle = document.createElement(DefinicionConstantesFunciones.CONDETALLE);
		elementcon_detalle.appendChild(document.createTextNode(definicion.getcon_detalle().toString().trim()));
		element.appendChild(elementcon_detalle);

		Element elementcon_iva_incluido = document.createElement(DefinicionConstantesFunciones.CONIVAINCLUIDO);
		elementcon_iva_incluido.appendChild(document.createTextNode(definicion.getcon_iva_incluido().toString().trim()));
		element.appendChild(elementcon_iva_incluido);

		Element elementcon_lotes = document.createElement(DefinicionConstantesFunciones.CONLOTES);
		elementcon_lotes.appendChild(document.createTextNode(definicion.getcon_lotes().toString().trim()));
		element.appendChild(elementcon_lotes);

		Element elementnumero_descuentos = document.createElement(DefinicionConstantesFunciones.NUMERODESCUENTOS);
		elementnumero_descuentos.appendChild(document.createTextNode(definicion.getnumero_descuentos().toString().trim()));
		element.appendChild(elementnumero_descuentos);

		Element elementcon_precio = document.createElement(DefinicionConstantesFunciones.CONPRECIO);
		elementcon_precio.appendChild(document.createTextNode(definicion.getcon_precio().toString().trim()));
		element.appendChild(elementcon_precio);

		Element elementnumero_registros = document.createElement(DefinicionConstantesFunciones.NUMEROREGISTROS);
		elementnumero_registros.appendChild(document.createTextNode(definicion.getnumero_registros().toString().trim()));
		element.appendChild(elementnumero_registros);

		Element elementcon_centro_costo = document.createElement(DefinicionConstantesFunciones.CONCENTROCOSTO);
		elementcon_centro_costo.appendChild(document.createTextNode(definicion.getcon_centro_costo().toString().trim()));
		element.appendChild(elementcon_centro_costo);

		Element elementcon_orden_iva = document.createElement(DefinicionConstantesFunciones.CONORDENIVA);
		elementcon_orden_iva.appendChild(document.createTextNode(definicion.getcon_orden_iva().toString().trim()));
		element.appendChild(elementcon_orden_iva);

		Element elementcon_multi_empresa = document.createElement(DefinicionConstantesFunciones.CONMULTIEMPRESA);
		elementcon_multi_empresa.appendChild(document.createTextNode(definicion.getcon_multi_empresa().toString().trim()));
		element.appendChild(elementcon_multi_empresa);

		Element elementformato_descripcion = document.createElement(DefinicionConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(definicion.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementcon_en_linea = document.createElement(DefinicionConstantesFunciones.CONENLINEA);
		elementcon_en_linea.appendChild(document.createTextNode(definicion.getcon_en_linea().toString().trim()));
		element.appendChild(elementcon_en_linea);

		Element elementtipotributario_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOTRIBUTARIO);
		elementtipotributario_descripcion.appendChild(document.createTextNode(definicion.gettipotributario_descripcion()));
		element.appendChild(elementtipotributario_descripcion);

		Element elementtiporetencion_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPORETENCION);
		elementtiporetencion_descripcion.appendChild(document.createTextNode(definicion.gettiporetencion_descripcion()));
		element.appendChild(elementtiporetencion_descripcion);

		Element elementcon_evaluacion = document.createElement(DefinicionConstantesFunciones.CONEVALUACION);
		elementcon_evaluacion.appendChild(document.createTextNode(definicion.getcon_evaluacion().toString().trim()));
		element.appendChild(elementcon_evaluacion);

		Element elementcon_ot = document.createElement(DefinicionConstantesFunciones.CONOT);
		elementcon_ot.appendChild(document.createTextNode(definicion.getcon_ot().toString().trim()));
		element.appendChild(elementcon_ot);

		Element elementcon_anticipo = document.createElement(DefinicionConstantesFunciones.CONANTICIPO);
		elementcon_anticipo.appendChild(document.createTextNode(definicion.getcon_anticipo().toString().trim()));
		element.appendChild(elementcon_anticipo);

		Element elementcon_cierre = document.createElement(DefinicionConstantesFunciones.CONCIERRE);
		elementcon_cierre.appendChild(document.createTextNode(definicion.getcon_cierre().toString().trim()));
		element.appendChild(elementcon_cierre);

		Element elementcon_general = document.createElement(DefinicionConstantesFunciones.CONGENERAL);
		elementcon_general.appendChild(document.createTextNode(definicion.getcon_general().toString().trim()));
		element.appendChild(elementcon_general);

		Element elementcon_por_producto = document.createElement(DefinicionConstantesFunciones.CONPORPRODUCTO);
		elementcon_por_producto.appendChild(document.createTextNode(definicion.getcon_por_producto().toString().trim()));
		element.appendChild(elementcon_por_producto);

		Element elementcon_descuento = document.createElement(DefinicionConstantesFunciones.CONDESCUENTO);
		elementcon_descuento.appendChild(document.createTextNode(definicion.getcon_descuento().toString().trim()));
		element.appendChild(elementcon_descuento);

		Element elementcon_series = document.createElement(DefinicionConstantesFunciones.CONSERIES);
		elementcon_series.appendChild(document.createTextNode(definicion.getcon_series().toString().trim()));
		element.appendChild(elementcon_series);

		Element elementcantidad = document.createElement(DefinicionConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(definicion.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementtipodocumento_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPODOCUMENTO);
		elementtipodocumento_descripcion.appendChild(document.createTextNode(definicion.gettipodocumento_descripcion()));
		element.appendChild(elementtipodocumento_descripcion);

		Element elementlibrocontable_descripcion = document.createElement(DefinicionConstantesFunciones.IDLIBROCONTABLE);
		elementlibrocontable_descripcion.appendChild(document.createTextNode(definicion.getlibrocontable_descripcion()));
		element.appendChild(elementlibrocontable_descripcion);

		Element elementcon_interno = document.createElement(DefinicionConstantesFunciones.CONINTERNO);
		elementcon_interno.appendChild(document.createTextNode(definicion.getcon_interno().toString().trim()));
		element.appendChild(elementcon_interno);

		Element elementcon_reserva = document.createElement(DefinicionConstantesFunciones.CONRESERVA);
		elementcon_reserva.appendChild(document.createTextNode(definicion.getcon_reserva().toString().trim()));
		element.appendChild(elementcon_reserva);

		Element elementcon_precio_proveedor = document.createElement(DefinicionConstantesFunciones.CONPRECIOPROVEEDOR);
		elementcon_precio_proveedor.appendChild(document.createTextNode(definicion.getcon_precio_proveedor().toString().trim()));
		element.appendChild(elementcon_precio_proveedor);

		Element elementcon_produccion = document.createElement(DefinicionConstantesFunciones.CONPRODUCCION);
		elementcon_produccion.appendChild(document.createTextNode(definicion.getcon_produccion().toString().trim()));
		element.appendChild(elementcon_produccion);

		Element elementcon_codigo_barra = document.createElement(DefinicionConstantesFunciones.CONCODIGOBARRA);
		elementcon_codigo_barra.appendChild(document.createTextNode(definicion.getcon_codigo_barra().toString().trim()));
		element.appendChild(elementcon_codigo_barra);

		Element elementcon_romaneos = document.createElement(DefinicionConstantesFunciones.CONROMANEOS);
		elementcon_romaneos.appendChild(document.createTextNode(definicion.getcon_romaneos().toString().trim()));
		element.appendChild(elementcon_romaneos);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(DefinicionConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(definicion.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);

		Element elementcuentacontable_descripcion = document.createElement(DefinicionConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(definicion.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);
	}
	
	public void generarReporteGroupGenericoDefinicionsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Definicion> definicionsSeleccionados=new ArrayList<Definicion>();
		
		definicionsSeleccionados=this.getDefinicionsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDefinicion(definicionsSeleccionados);
		
		this.generarReporteDefinicions("Todos",definicionsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDefinicion(ArrayList<Definicion> definicionsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Definicion definicionAux:definicionsSeleccionados) {
				definicionAux.setsDetalleGeneralEntityReporte(definicionAux.toString());
			
				if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIALFORMATO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getsecuencial_formato());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_SECUENCIAL)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getsecuencial().toString());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPODEFINICION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipodefinicion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOIVAITEM)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipoivaitem_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMOSTRARBODEGA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_mostrar_bodega()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOTRORECARGO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_otro_recargo()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOGLOBALCLIENTE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipoglobalcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCOA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_coa()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTEODEFINICION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipocosteodefinicion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRETENCION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_retencion()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOCOSTODEFINICION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipocostodefinicion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONNOVEDADPRODUCTO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_novedad_producto()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONICE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_ice()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCANTIDAD)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_cantidad()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCTOPORPROVEEDOR)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_producto_por_proveedor()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTECLIENTE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_lote_cliente()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCUENTACONTABLE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_cuenta_contable()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDETALLE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_detalle()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONIVAINCLUIDO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_iva_incluido()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONLOTES)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_lotes()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMERODESCUENTOS)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getnumero_descuentos().toString());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_precio()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_NUMEROREGISTROS)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getnumero_registros().toString());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCENTROCOSTO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_centro_costo()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONORDENIVA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_orden_iva()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONMULTIEMPRESA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_multi_empresa()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONENLINEA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_en_linea()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOTRIBUTARIO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipotributario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPORETENCION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettiporetencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONEVALUACION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_evaluacion()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONOT)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_ot()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONANTICIPO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_anticipo()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCIERRE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_cierre()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONGENERAL)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_general()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPORPRODUCTO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_por_producto()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONDESCUENTO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_descuento()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONSERIES)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_series()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPODOCUMENTO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipodocumento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDLIBROCONTABLE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getlibrocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONINTERNO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_interno()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONRESERVA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_reserva()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRECIOPROVEEDOR)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_precio_proveedor()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONPRODUCCION)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_produccion()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONCODIGOBARRA)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_codigo_barra()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_CONROMANEOS)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(definicionAux.getcon_romaneos()));
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.gettipotransaccionmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DefinicionConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					definicionAux.setsDescripcionGeneralEntityReporte1(definicionAux.getcuentacontable_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DefinicionConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDefinicion(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDefinicion=true;
				this.isVisibilidadCeldaNuevoRelacionesDefinicion=true;
				this.isVisibilidadCeldaGuardarCambiosDefinicion=true;
			}
			
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=true;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=true;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=true;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=true;
			this.isVisibilidadCeldaEliminarDefinicion=true;
			this.isVisibilidadCeldaCancelarDefinicion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=true;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=true;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDefinicion=true;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=true;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=true;
			this.isVisibilidadCeldaModificarDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=true;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
			this.isVisibilidadCeldaModificarDefinicion=true;
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
			this.isVisibilidadCeldaCancelarDefinicion=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				} else {
					this.isVisibilidadCeldaGuardarDefinicion=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DefinicionJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDefinicion=true;
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=true;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=true;
		} else {
			this.actualizarEstadoPanelsDefinicion(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDefinicion=false;
			//this.isVisibilidadCeldaVerFormDefinicion=false;
			this.isVisibilidadCeldaDuplicarDefinicion=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!definicionSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
		} else {
			this.isVisibilidadCeldaNuevoDefinicion=false;
			this.isVisibilidadCeldaGuardarCambiosDefinicion=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(definicionSessionBean.getEsGuardarRelacionado()) {
			if(!definicionSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;												
			}
			
			this.jButtonCerrarDefinicion.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDefinicion=false;
		}
		
		if(!this.permiteMantenimiento(this.definicion)) {
			this.isVisibilidadCeldaActualizarDefinicion=false;
			this.isVisibilidadCeldaEliminarDefinicion=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDefinicion() {
	}
	
	public void actualizarEstadoPanelsDefinicion(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(true);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(false);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(false);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(false);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(true);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(true);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDefinicion!=null) {
				this.jScrollPanelDatosEdicionDefinicion.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDefinicion!=null) {
				this.jScrollPanelDatosDefinicion.setVisible(true);
			}
			
			if(this.jPanelPaginacionDefinicion!=null) {
				this.jPanelPaginacionDefinicion.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.definicionSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDefinicion!=null) {
					this.jTabbedPaneBusquedasDefinicion.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.definicionSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDefinicion!=null) {
				this.jTabbedPaneBusquedasDefinicion.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDefinicion!=null) {
				this.jPanelParametrosReportesDefinicion.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCuentaContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdCuentaContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDefinicion(Boolean isParaTipoDefinicion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDefinicionNegation=!isParaTipoDefinicion;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoDefinicion;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdCuentaContable=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCuentaContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaSucursal;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoIvaItem(Boolean isParaTipoIvaItem){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoIvaItemNegation=!isParaTipoIvaItem;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoIvaItem;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoIvaItemNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoGlobalCliente(Boolean isParaTipoGlobalCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoGlobalClienteNegation=!isParaTipoGlobalCliente;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoGlobalCliente;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoGlobalClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCosteoDefinicion(Boolean isParaTipoCosteoDefinicion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCosteoDefinicionNegation=!isParaTipoCosteoDefinicion;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoCosteoDefinicion;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoCosteoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCostoDefinicion(Boolean isParaTipoCostoDefinicion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCostoDefinicionNegation=!isParaTipoCostoDefinicion;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoCostoDefinicion;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoCostoDefinicionNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdCuentaContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTributario(Boolean isParaTipoTributario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTributarioNegation=!isParaTipoTributario;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTributario;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencion(Boolean isParaTipoRetencion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionNegation=!isParaTipoRetencion;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoRetencion;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDocumento(Boolean isParaTipoDocumento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDocumentoNegation=!isParaTipoDocumento;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDocumento;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaLibroContable(Boolean isParaLibroContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaLibroContableNegation=!isParaLibroContable;

			this.isVisibilidadFK_IdCuentaContable=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaLibroContable;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaLibroContableNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdCuentaContable=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContable;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdCuentaContableDefinicion);}

			this.isVisibilidadFK_IdLibroContable=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdLibroContable) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdLibroContableDefinicion);}

			this.isVisibilidadFK_IdSucursal=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdSucursal) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdSucursalDefinicion);}

			this.isVisibilidadFK_IdTipoCosteoDefinicion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoCosteoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCosteoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoCostoDefinicion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoCostoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoCostoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDefinicion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoDefinicion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDefinicionDefinicion);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoDocumentoDefinicion);}

			this.isVisibilidadFK_IdTipoGlobalCliente=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoGlobalCliente) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoGlobalClienteDefinicion);}

			this.isVisibilidadFK_IdTipoIvaItem=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoIvaItem) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoIvaItemDefinicion);}

			this.isVisibilidadFK_IdTipoRetencion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoRetencionDefinicion);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTransaccionModuloDefinicion);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTipoTributarioDefinicion);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasDefinicion.remove(jPanelFK_IdTransaccionDefinicion);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DefinicionSessionBean definicionSessionBean=new DefinicionSessionBean();
		
		if(this.definicionSessionBean==null) {
			this.definicionSessionBean=new DefinicionSessionBean();
		}
		
		this.definicionSessionBean.setsUltimaBusquedaDefinicion(this.getsAccionBusqueda());
		this.definicionSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.definicionSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
			definicionSessionBean.setid_cuenta_contable(this.getid_cuenta_contableFK_IdCuentaContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			definicionSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdLibroContable")) {
			definicionSessionBean.setid_libro_contable(this.getid_libro_contableFK_IdLibroContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			definicionSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			definicionSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCosteoDefinicion")) {
			definicionSessionBean.setid_tipo_costeo_definicion(this.getid_tipo_costeo_definicionFK_IdTipoCosteoDefinicion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCostoDefinicion")) {
			definicionSessionBean.setid_tipo_costo_definicion(this.getid_tipo_costo_definicionFK_IdTipoCostoDefinicion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDefinicion")) {
			definicionSessionBean.setid_tipo_definicion(this.getid_tipo_definicionFK_IdTipoDefinicion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
			definicionSessionBean.setid_tipo_documento(this.getid_tipo_documentoFK_IdTipoDocumento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoGlobalCliente")) {
			definicionSessionBean.setid_tipo_global_cliente(this.getid_tipo_global_clienteFK_IdTipoGlobalCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoIvaItem")) {
			definicionSessionBean.setid_tipo_iva_item(this.getid_tipo_iva_itemFK_IdTipoIvaItem());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
			definicionSessionBean.setid_tipo_retencion(this.getid_tipo_retencionFK_IdTipoRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			definicionSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
			definicionSessionBean.setid_tipo_tributario(this.getid_tipo_tributarioFK_IdTipoTributario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			definicionSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DefinicionSessionBean definicionSessionBean=new DefinicionSessionBean();
		
		if(this.definicionSessionBean==null) {
			this.definicionSessionBean=new DefinicionSessionBean();
		}
		
		if(this.definicionSessionBean.getsUltimaBusquedaDefinicion()!=null&&!this.definicionSessionBean.getsUltimaBusquedaDefinicion().equals("")) {
			this.setsAccionBusqueda(definicionSessionBean.getsUltimaBusquedaDefinicion());
			this.setiNumeroPaginacion(definicionSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(definicionSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
				this.setid_cuenta_contableFK_IdCuentaContable(definicionSessionBean.getid_cuenta_contable());
				definicionSessionBean.setid_cuenta_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(definicionSessionBean.getid_empresa());
				definicionSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdLibroContable")) {
				this.setid_libro_contableFK_IdLibroContable(definicionSessionBean.getid_libro_contable());
				definicionSessionBean.setid_libro_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(definicionSessionBean.getid_modulo());
				definicionSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(definicionSessionBean.getid_sucursal());
				definicionSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCosteoDefinicion")) {
				this.setid_tipo_costeo_definicionFK_IdTipoCosteoDefinicion(definicionSessionBean.getid_tipo_costeo_definicion());
				definicionSessionBean.setid_tipo_costeo_definicion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCostoDefinicion")) {
				this.setid_tipo_costo_definicionFK_IdTipoCostoDefinicion(definicionSessionBean.getid_tipo_costo_definicion());
				definicionSessionBean.setid_tipo_costo_definicion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDefinicion")) {
				this.setid_tipo_definicionFK_IdTipoDefinicion(definicionSessionBean.getid_tipo_definicion());
				definicionSessionBean.setid_tipo_definicion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
				this.setid_tipo_documentoFK_IdTipoDocumento(definicionSessionBean.getid_tipo_documento());
				definicionSessionBean.setid_tipo_documento(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoGlobalCliente")) {
				this.setid_tipo_global_clienteFK_IdTipoGlobalCliente(definicionSessionBean.getid_tipo_global_cliente());
				definicionSessionBean.setid_tipo_global_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoIvaItem")) {
				this.setid_tipo_iva_itemFK_IdTipoIvaItem(definicionSessionBean.getid_tipo_iva_item());
				definicionSessionBean.setid_tipo_iva_item(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
				this.setid_tipo_retencionFK_IdTipoRetencion(definicionSessionBean.getid_tipo_retencion());
				definicionSessionBean.setid_tipo_retencion(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(definicionSessionBean.getid_tipo_transaccion_modulo());
				definicionSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
				this.setid_tipo_tributarioFK_IdTipoTributario(definicionSessionBean.getid_tipo_tributario());
				definicionSessionBean.setid_tipo_tributario(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(definicionSessionBean.getid_transaccion());
				definicionSessionBean.setid_transaccion(-1L);
			}
		}
		
		this.definicionSessionBean.setsUltimaBusquedaDefinicion("");
		this.definicionSessionBean.setiNumeroPaginacion(DefinicionConstantesFunciones.INUMEROPAGINACION);
		this.definicionSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDefinicion(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDefinicion() {
		this.updateBorderResaltarBusquedasFormularioDefinicion();
		this.updateVisibilidadBusquedasFormularioDefinicion();
		this.updateHabilitarBusquedasFormularioDefinicion();
	}
	
	public void updateBorderResaltarBusquedasFormularioDefinicion() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDefinicion.getComponents().length>0) {
	

		if(this.definicionConstantesFunciones.resaltarFK_IdCuentaContableDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdCuentaContableDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdCuentaContableDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdLibroContableDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdLibroContableDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdLibroContableDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdSucursalDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdSucursalDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdSucursalDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoCosteoDefinicionDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCosteoDefinicionDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoCosteoDefinicionDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoCostoDefinicionDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCostoDefinicionDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoCostoDefinicionDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoDefinicionDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDefinicionDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoDefinicionDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoDocumentoDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDocumentoDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoDocumentoDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoGlobalClienteDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoGlobalClienteDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoGlobalClienteDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoIvaItemDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoIvaItemDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoIvaItemDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoRetencionDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoRetencionDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoRetencionDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTipoTributarioDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTributarioDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoTributarioDefinicion);
			}
		}

		if(this.definicionConstantesFunciones.resaltarFK_IdTransaccionDefinicion!=null) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTransaccionDefinicion);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTransaccionDefinicion);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDefinicion() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDefinicion.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdCuentaContableDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdCuentaContableDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdCuentaContableDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdLibroContableDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdLibroContableDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdLibroContableDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdSucursalDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdSucursalDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdSucursalDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCosteoDefinicionDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoCosteoDefinicionDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoCosteoDefinicionDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCostoDefinicionDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoCostoDefinicionDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoCostoDefinicionDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDefinicionDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoDefinicionDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoDefinicionDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDocumentoDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoDocumentoDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoDocumentoDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoGlobalClienteDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoGlobalClienteDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoGlobalClienteDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoIvaItemDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoIvaItemDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoIvaItemDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoRetencionDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoRetencionDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoRetencionDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoTransaccionModuloDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoTransaccionModuloDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTributarioDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTipoTributarioDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTipoTributarioDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTransaccionDefinicion);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.definicionConstantesFunciones.mostrarFK_IdTransaccionDefinicion);
			if(!this.definicionConstantesFunciones.mostrarFK_IdTransaccionDefinicion && index>-1) {
				this.jTabbedPaneBusquedasDefinicion.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDefinicion() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDefinicion.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdCuentaContableDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdCuentaContableDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdCuentaContableDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdLibroContableDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdLibroContableDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdLibroContableDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdSucursalDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdSucursalDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdSucursalDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCosteoDefinicionDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoCosteoDefinicionDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoCosteoDefinicionDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCostoDefinicionDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoCostoDefinicionDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoCostoDefinicionDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDefinicionDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoDefinicionDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoDefinicionDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDocumentoDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoDocumentoDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoDocumentoDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoGlobalClienteDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoGlobalClienteDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoGlobalClienteDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoIvaItemDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoIvaItemDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoIvaItemDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoRetencionDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoRetencionDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoRetencionDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoTransaccionModuloDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoTransaccionModuloDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTributarioDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTipoTributarioDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTipoTributarioDefinicion);
			}

			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTransaccionDefinicion);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.definicionConstantesFunciones.activarFK_IdTransaccionDefinicion);
				this.jTabbedPaneBusquedasDefinicion.setEnabledAt(index,this.definicionConstantesFunciones.activarFK_IdTransaccionDefinicion);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDefinicion(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCuentaContable")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdCuentaContableDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdCuentaContableDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdCuentaContableDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdLibroContable")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdLibroContableDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdLibroContableDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdLibroContableDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdSucursal")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdSucursalDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdSucursalDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdSucursalDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCosteoDefinicion")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCosteoDefinicionDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoCosteoDefinicionDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoCosteoDefinicionDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCostoDefinicion")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoCostoDefinicionDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoCostoDefinicionDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoCostoDefinicionDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDefinicion")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDefinicionDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoDefinicionDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoDefinicionDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDocumento")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoDocumentoDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoDocumentoDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoDocumentoDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoGlobalCliente")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoGlobalClienteDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoGlobalClienteDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoGlobalClienteDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoIvaItem")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoIvaItemDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoIvaItemDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoIvaItemDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencion")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoRetencionDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoRetencionDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoRetencionDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoTransaccionModuloDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTributario")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTipoTributarioDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTipoTributarioDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTipoTributarioDefinicion);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasDefinicion.indexOfComponent(this.jPanelFK_IdTransaccionDefinicion);

			this.jTabbedPaneBusquedasDefinicion.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDefinicion.getComponent(index);

			this.definicionConstantesFunciones.setResaltarFK_IdTransaccionDefinicion(resaltar);

			jPanel.setBorder(this.definicionConstantesFunciones.resaltarFK_IdTransaccionDefinicion);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDefinicion.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDefinicion() throws Exception {

		if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDefinicion();
		this.updateVisibilidadResaltarControlesFormularioDefinicion();
		this.updateHabilitarResaltarControlesFormularioDefinicion();
		
	}
	
	public void updateBorderResaltarControlesFormularioDefinicion() throws Exception {
		if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.definicionConstantesFunciones.resaltaridDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setBorder(this.definicionConstantesFunciones.resaltaridDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_empresaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_empresaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_moduloDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_moduloDefinicion);}
		if(this.definicionConstantesFunciones.resaltarsecuencial_formatoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarsecuencial_formatoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarsecuencialDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setBorder(this.definicionConstantesFunciones.resaltarsecuencialDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_definicionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_transaccionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_transaccionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_sucursalDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_sucursalDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_iva_itemDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_iva_itemDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_mostrar_bodegaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_mostrar_bodegaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarfactorDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setBorder(this.definicionConstantesFunciones.resaltarfactorDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_otro_recargoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_otro_recargoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_global_clienteDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_global_clienteDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_coaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_coaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_costeo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_costeo_definicionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_retencionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_retencionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_costo_definicionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_costo_definicionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_novedad_productoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_novedad_productoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_iceDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_iceDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_cantidadDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_cantidadDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_producto_por_proveedorDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_producto_por_proveedorDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_lote_clienteDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_lote_clienteDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_cuenta_contableDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_cuenta_contableDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_detalleDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_detalleDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_iva_incluidoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_iva_incluidoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_lotesDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_lotesDefinicion);}
		if(this.definicionConstantesFunciones.resaltarnumero_descuentosDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setBorder(this.definicionConstantesFunciones.resaltarnumero_descuentosDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_precioDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_precioDefinicion);}
		if(this.definicionConstantesFunciones.resaltarnumero_registrosDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setBorder(this.definicionConstantesFunciones.resaltarnumero_registrosDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_centro_costoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_centro_costoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_orden_ivaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_orden_ivaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_multi_empresaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_multi_empresaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_formatoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_formatoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_en_lineaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_en_lineaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_tributarioDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_tributarioDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_retencionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_retencionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_evaluacionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_evaluacionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_otDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_otDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_anticipoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_anticipoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_cierreDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_cierreDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_generalDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_generalDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_por_productoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_por_productoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_descuentoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_descuentoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_seriesDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_seriesDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcantidadDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcantidadDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_documentoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_documentoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_libro_contableDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_libro_contableDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_internoDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_internoDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_reservaDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_reservaDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_precio_proveedorDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_precio_proveedorDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_produccionDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_produccionDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_codigo_barraDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_codigo_barraDefinicion);}
		if(this.definicionConstantesFunciones.resaltarcon_romaneosDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setBorderPainted(true);this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setBorder(this.definicionConstantesFunciones.resaltarcon_romaneosDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_tipo_transaccion_moduloDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_tipo_transaccion_moduloDefinicion);}
		if(this.definicionConstantesFunciones.resaltarid_cuenta_contableDefinicion!=null && this.jInternalFrameDetalleFormDefinicion!=null) {this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setBorder(this.definicionConstantesFunciones.resaltarid_cuenta_contableDefinicion);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDefinicion() throws Exception {		
		if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
	
		//this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setVisible(this.definicionConstantesFunciones.mostraridDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelidDefinicion.setVisible(this.definicionConstantesFunciones.mostraridDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_empresaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_empresaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_empresaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_moduloDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_moduloDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_moduloDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarsecuencial_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelsecuencial_formatoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarsecuencial_formatoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setVisible(this.definicionConstantesFunciones.mostrarsecuencialDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelsecuencialDefinicion.setVisible(this.definicionConstantesFunciones.mostrarsecuencialDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_definicionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_transaccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_transaccionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_transaccionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_sucursalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_sucursalDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_sucursalDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_iva_itemDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_iva_itemDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_iva_itemDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_mostrar_bodegaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_mostrar_bodegaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_mostrar_bodegaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarfactorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelfactorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarfactorDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_otro_recargoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_otro_recargoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_otro_recargoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_global_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_global_clienteDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_global_clienteDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_coaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_coaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_coaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_costeo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_costeo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_costeo_definicionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_retencionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_retencionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_costo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_costo_definicionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_costo_definicionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_novedad_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_novedad_productoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_novedad_productoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_iceDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_iceDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_iceDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_cantidadDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cantidadDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_producto_por_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_producto_por_proveedorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_producto_por_proveedorDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_lote_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_lote_clienteDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_lote_clienteDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cuenta_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_cuenta_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cuenta_contableDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_detalleDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_detalleDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_detalleDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_iva_incluidoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_iva_incluidoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_iva_incluidoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_lotesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_lotesDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_lotesDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarnumero_descuentosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelnumero_descuentosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarnumero_descuentosDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_precioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_precioDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_precioDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarnumero_registrosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelnumero_registrosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarnumero_registrosDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_centro_costoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_centro_costoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_centro_costoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_orden_ivaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_orden_ivaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_orden_ivaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_multi_empresaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_multi_empresaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_multi_empresaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_formatoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_formatoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_en_lineaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_en_lineaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_en_lineaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_tributarioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_tributarioDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_tributarioDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_retencionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_retencionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_evaluacionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_evaluacionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_evaluacionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_otDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_otDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_otDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_anticipoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_anticipoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_anticipoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cierreDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_cierreDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_cierreDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_generalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_generalDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_generalDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_por_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_por_productoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_por_productoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_descuentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_descuentoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_descuentoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_seriesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_seriesDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_seriesDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcantidadDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcantidadDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_documentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_documentoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_documentoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_libro_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_libro_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_libro_contableDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_internoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_internoDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_internoDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_reservaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_reservaDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_reservaDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_precio_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_precio_proveedorDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_precio_proveedorDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_produccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_produccionDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_produccionDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_codigo_barraDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_codigo_barraDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_codigo_barraDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_romaneosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelcon_romaneosDefinicion.setVisible(this.definicionConstantesFunciones.mostrarcon_romaneosDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_transaccion_moduloDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_tipo_transaccion_moduloDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_tipo_transaccion_moduloDefinicion);
		//this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_cuenta_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jPanelid_cuenta_contableDefinicion.setVisible(this.definicionConstantesFunciones.mostrarid_cuenta_contableDefinicion);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDefinicion() throws Exception {
		if(this.jInternalFrameDetalleFormDefinicion==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDefinicion!=null) {
	
		this.jInternalFrameDetalleFormDefinicion.jLabelidDefinicion.setEnabled(this.definicionConstantesFunciones.activaridDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_empresaDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_empresaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_moduloDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_moduloDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencial_formatoDefinicion.setEnabled(this.definicionConstantesFunciones.activarsecuencial_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldsecuencialDefinicion.setEnabled(this.definicionConstantesFunciones.activarsecuencialDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_definicionDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_transaccionDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_transaccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_sucursalDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_sucursalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_iva_itemDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_iva_itemDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_mostrar_bodegaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_mostrar_bodegaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldfactorDefinicion.setEnabled(this.definicionConstantesFunciones.activarfactorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otro_recargoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_otro_recargoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_global_clienteDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_global_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_coaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_coaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costeo_definicionDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_costeo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_retencionDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_costo_definicionDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_costo_definicionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_novedad_productoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_novedad_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iceDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_iceDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cantidadDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_cantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_producto_por_proveedorDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_producto_por_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lote_clienteDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_lote_clienteDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cuenta_contableDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_cuenta_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_detalleDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_detalleDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_iva_incluidoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_iva_incluidoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_lotesDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_lotesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_descuentosDefinicion.setEnabled(this.definicionConstantesFunciones.activarnumero_descuentosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precioDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_precioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldnumero_registrosDefinicion.setEnabled(this.definicionConstantesFunciones.activarnumero_registrosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_centro_costoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_centro_costoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_orden_ivaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_orden_ivaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_multi_empresaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_multi_empresaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_formatoDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_formatoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_en_lineaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_en_lineaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_tributarioDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_tributarioDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_retencionDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_retencionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_evaluacionDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_evaluacionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_otDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_otDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_anticipoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_anticipoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_cierreDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_cierreDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_generalDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_generalDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_por_productoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_por_productoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_descuentoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_descuentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_seriesDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_seriesDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jTextFieldcantidadDefinicion.setEnabled(this.definicionConstantesFunciones.activarcantidadDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_documentoDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_documentoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_libro_contableDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_libro_contableDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_internoDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_internoDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_reservaDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_reservaDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_precio_proveedorDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_precio_proveedorDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_produccionDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_produccionDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_codigo_barraDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_codigo_barraDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jCheckBoxcon_romaneosDefinicion.setEnabled(this.definicionConstantesFunciones.activarcon_romaneosDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_tipo_transaccion_moduloDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_tipo_transaccion_moduloDefinicion);
		this.jInternalFrameDetalleFormDefinicion.jComboBoxid_cuenta_contableDefinicion.setEnabled(this.definicionConstantesFunciones.activarid_cuenta_contableDefinicion);
		}
	}
	
		
}